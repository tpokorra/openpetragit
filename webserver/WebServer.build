<?xml version="1.0"?>
<project name="WebServer-Build">

<!-- to avoid missing quickClean from cleanPetra task in OpenPetra.tobe.migrated.xml -->
<target name="quickClean"/>

<target name="help">
    <echo>
list of available commands:
  clean: cleans everything
  generateWebforms: generates all webforms
  generateWebform: generates a single webform
    generateWebform -D:file=
  splitFormsIntoSubdirs: split all child/serve/etc files into subdirectories for easier work
  restoreFormsFromSubdirs: restore the files again into the ApplicationForms direcotory
  packWebApp: builds a zip file in the delivery directory
  packTranslation: pack the language specific file for one or several languages
    packTranslation -D:country-id=de-DE,en-GB
  unpackTranslation: restore the files that you receive from the translators
    unpackTranslation -D:zipfile=sweden.zip
  startWebServer: start the webserver using xsp4 from Mono
    </echo>
</target>

<include buildfile="../inc/nant/OpenPetra.common.xml"/>

<!-- Compat targets -->
<include buildfile="../inc/nant/OpenPetra.tobe.migrated.xml"/>

<target name="custclean"> 
  <!-- Remove generated files from generateWebForms -->
  <delete failonerror="false"><fileset><include name="${dir.root}/webserver/**.bak" /></fileset></delete>
  <delete failonerror="false"><fileset><include name="${dir.root}/webserver/**-template.js" /></fileset></delete>
  <delete failonerror="false"><fileset><include name="${dir.root}/webserver/**.error" /></fileset></delete>
  <delete failonerror="false"><fileset><include name="${dir.root}/webserver/**.yaml.xml" /></fileset></delete>
  <delete failonerror="false" dir="${dir.delivery}/webserver" />
</target>

<target name="generateWebforms">
  <!-- Generate webforms --> 
  <loadtasks assembly="${Ict.Tools.NAntTasks.DLL}" unless="${task::exists('ExecDotNet')}"/> 
  <property name="generateWebformsParameters" value="-TemplateDir:${dir.incdir.template.src}/ExtJs -petraxml:${PetraXML.file} -deliveryPath:${dir.webforms.delivery} -logPath:${dir.log}"/>
  <ExecDotNet program="${dir.bin}/Ict.Tools.GenerateExtJsForms.exe" commandline="-ymlfile:${dir.webforms.source} -ymlroot:${dir.webforms.source} ${generateWebformsParameters}"/>
</target>

<target name="generateWebform">
  <!-- Generate single webform -->
  <loadtasks assembly="${Ict.Tools.NAntTasks.DLL}" unless="${task::exists('ExecDotNet')}"/> 
  <property name="generateWebformsParameters" value="-TemplateDir:${dir.incdir.template.src}/ExtJs -petraxml:${PetraXML.file} -deliveryPath:${dir.webforms.delivery} -logPath:${dir.log}" />
  <ExecDotNet program="${PetraToolsExe.dir}/Ict.Tools.GenerateExtJsForms.exe" commandline="-ymlfile:${dir.webforms.source}/${file} -ymlroot:${dir.webforms.source} ${generateWebformsParameters}"/>
</target>

<target name="prepareWebServer" description="create a directory in delivery with all files required for the webserver">
  <copy todir="${dir.webserver}" overwrite="true">
    <fileset basedir="${dir.root}/webserver/">
      <include name="**.*" />
      <exclude name="WebServer.build" />
      <exclude name="Samples/**.*" unless="${webserver.includeSamples == 'true'}"/>
      <exclude name="Apps/OnlineRegistration/doc/**.*" unless="${webserver.includeSamples == 'true'}"/>
      <exclude name="**/*.yaml" />
      <exclude name="**/*.xml" />
      <exclude name="**/*-template.js" />
    </fileset>
  </copy>

  <copy todir="${dir.webserver}/Apps/OnlineRegistration" overwrite="true">
    <fileset basedir="${dir.webforms.source}">
      <include name="*-lang.js" />
    </fileset>
  </copy>

  <copy todir="${dir.webserver}/formletters" overwrite="true">
    <fileset basedir="${dir.webserver.Formletters}">
      <include name="*.*" />
      <exclude name="*.bak"/>
      <exclude name="*.~*"/>
    </fileset>
  </copy>
  <if test="${string::get-length(dir.webserver.Badges) > 0}">
    <copy todir="${dir.webserver}/formletters" overwrite="true">
      <fileset basedir="${dir.webserver.Badges}">
        <include name="*.*" />
        <exclude name="*.bak"/>
        <exclude name="*.~*"/>
      </fileset>
    </copy>
  </if>
  <if test="${string::get-length(dir.webserver.HtmlReports) > 0}">
    <copy todir="${dir.webserver}/formletters" overwrite="true">
      <fileset basedir="${dir.webserver.HtmlReports}">
        <include name="*.*" />
        <exclude name="*.bak"/>
        <exclude name="*.~*"/>
      </fileset>
    </copy>
  </if>
  
  <if test="${string::get-length(dir.webserver.ProductionConfig) > 0}">
    <copy todir="${dir.webserver}/config" overwrite="true">
      <fileset basedir="${dir.webserver.ProductionConfig}">
        <include name="*.*" />
      </fileset>
    </copy>
  </if>
  
  <if test="${string::get-length(dir.webserver.OnlineRegBackend.doc) > 0}">
    <copy todir="${dir.webserver}/Apps/OnlineRegistrationBackend/help" overwrite="true">
      <fileset basedir="${dir.webserver.OnlineRegBackend.doc}">
        <include name="**.html" />
        <include name="**.png" />
        <include name="**.gif" />
        <include name="**.jpg" />
      </fileset>
    </copy>
  </if>
  <if test="${string::get-length(dir.webserver.OnlineReg.doc) > 0}">
    <copy todir="${dir.webserver}/Apps/OnlineRegistration/doc" overwrite="true">
      <fileset basedir="${dir.webserver.OnlineReg.doc}">
        <include name="**.pdf" />
        <include name="**.html" />
        <include name="**.png" />
        <include name="**.gif" />
        <include name="**.jpg" />
      </fileset>
    </copy>
  </if>
  <if test="${string::get-length(dir.webserver.DirectLinks) > 0}">
    <copy todir="${dir.webserver}" overwrite="true">
      <fileset basedir="${dir.webserver.DirectLinks}">
        <include name="**/index.html" />
      </fileset>
    </copy>
  </if>

  <unzip zipfile="${dir.root}/csharp/ThirdParty/extjs/ext-lang.zip" todir="${dir.webserver}/js"/>
  <unzip zipfile="${dir.root}/csharp/ThirdParty/extjs/ext-resources.zip" todir="${dir.webserver}"/>
  <unzip zipfile="${dir.root}/csharp/ThirdParty/extjs/ext-js.zip" todir="${dir.webserver}/js"/>

  <copy file="${dir.root}/csharp/ICT/Petra/Server/app/WebService/server.asmx"
              tofile="${dir.webserver}/server.asmx" overwrite="true"/>
  <copy todir="${dir.webserver.bin}" overwrite="true">
    <fileset basedir="${dir.bin}">
      <include name="*.dll" />
      <include name="PetraServerConsole.exe" />
      <exclude name="sqlite.dll" />
      <exclude name="Tests-*"/>
      <exclude name="Ict.Petra.Client.*"/>
      <exclude name="Ict.Tools.*"/>
      <!-- some unmanaged dlls cause problems for mono xsp -->
      <exclude name="Mono*" />
    </fileset>
  </copy>
  <copy todir="${dir.webserver.bin}" overwrite="true">
    <fileset basedir="${dir.root}/csharp/ThirdParty/ext.net">
      <include name="*.dll" />
    </fileset>
  </copy>

  <mkdir dir="${dir.log}" />

  <!-- Create config files, if missing -->
  <property name="templateFile" value="${dir.incdir.template.etc}/web-${DBMS.Type}.config"/>
  <property name="configFile" value="${WebServerConfigFile}"/>
  <call target="initConfigFiles-internal"/>

<!-- MGR: TODO: Remove copy. Should be during database work! -->
  <copy file="${path::combine(dir.db.patches, 'version.txt')}"
      tofile="${path::combine(dir.webserver.bin, 'version.txt')}" 
      overwrite="true"/>
</target>

<target name="startWebServer" depends="prepareWebServer"
      description="only supports postgresql and mysql server at the moment, not sqlite; would need microsoft xsp">

  <!-- TODO: run on linux as well? -->
  <exec program="cmd.exe" 
          workingdir="${dir.webserver}"
          commandline="/C start xsp4.bat --verbose --root . --port 8081 --applications /:."
          spawn="true">
    <environment>
      <variable name="PATH" path="${environment::get-variable('PATH')};${MonoBinPath}"/>
      <variable name="MONO_PATH" path="${MonoBinPath}\..\lib\mono\4.0"/>
      <variable name="MONO_OPTIONS" value="--debug"/>
    </environment>
  </exec>
  <echo message="in your browser, go to http://localhost:8081/"/>
</target>

<target name="packWebApp" depends="clean, prepareWebServer, generateWebforms">
  <copy file="${dir.webserver}/web.config" tofile="${tempdir}/web-sample.config" overwrite="true"/>
  <zip zipfile="${dir.delivery}/WebRelease.zip">
    <fileset basedir="${dir.webserver}" prefix="webserver">
      <include name="**.*" />
      <exclude name="web.config" />
      <exclude name="index.html" />
      <exclude name="formletters/*.*" />
      <exclude name="config/*.*" />
    </fileset>

    <fileset basedir="${tempdir}" prefix="webserver">
      <include name="web-sample.config" if="${webserver.includeSamples == 'true'}"/>
    </fileset>

    <fileset basedir="${dir.webserver}/formletters" prefix="formletters">
      <include name="*.*" />
    </fileset>

    <fileset basedir="${dir.webserver}/config" prefix="config">
      <include name="*.*" />
    </fileset>
  </zip>
  <delete file="${tempdir}/web-sample.config"/>
</target>

<target name="packTranslation">
  <property name="country-id" value="de-DE,en-GB,nl-BE,nl-NL,fo-FO" overwrite="false"/>

  <delete dir="${dir.delivery}/translationPack"/>
  
  <foreach item="String" property="country" delim="," in="${country-id}" >
    <mkdir dir="${dir.delivery}/translationPack/${country}" failonerror="false"/>
    <copy todir="${dir.delivery}/translationPack/${country}" overwrite="true">
      <fileset basedir="${dir.webserver.Formletters}">
        <include name="*${country}*.*" />
        <exclude name="*.bak"/>
        <exclude name="*.~*"/>
      </fileset>
    </copy>
    <copy todir="${dir.delivery}/translationPack/${country}" overwrite="true">
      <fileset basedir="${dir.webforms.source}">
        <include name="success.${country}*.*" />
        <include name="main.${country}*.*" />
        <exclude name="*-template.js" />
        <exclude name="*.yaml.xml" />
        <exclude name="*.bak"/>
        <exclude name="*.~*"/>
      </fileset>
    </copy>
    <copy todir="${dir.delivery}/translationPack/${country}" overwrite="true">
      <fileset basedir="${dir.webserver.OnlineReg.doc}">
        <include name="*.${country}*.*" />
        <exclude name="*.bak"/>
        <exclude name="*.~*"/>
      </fileset>
    </copy>

    <!-- rename to text file -->
    <foreach item="File" property="OldName">
      <in>
        <items basedir="${dir.delivery}/translationPack/${country}">
          <include name="*.html"/>
          <include name="*.yaml"/>
          <include name="*.js"/>
          <include name="*.aspx"/>
        </items>
      </in>
      <do>
        <move file="${OldName}" tofile="${dir.delivery}/translationPack/${country}/${path::get-file-name-without-extension(OldName)}.txt"/>
      </do>
    </foreach>
  </foreach>

  <zip zipfile="${dir.delivery}/ForHomeOfficeTranslators.zip">
    <fileset basedir="${dir.delivery}/translationPack">
      <include name="**.*" />
    </fileset>
  </zip>
</target>

<script language="C#" prefix="OP" >
  <imports>
    <import namespace="System.IO" />
  </imports>
  <code>
    <![CDATA[
    [Function("MoveFileByPattern")]
    public static bool MoveFileByPattern(string srcPath, string filenamePattern, string destPath, string newExtension)
    {
      string[] filePaths = Directory.GetFiles(srcPath, filenamePattern);
      foreach (string filename in filePaths)
      {
        string newFilename = destPath + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(filename) + newExtension;
        
        if (newExtension.Length == 0)
        {
          newFilename += Path.GetExtension(filename);
        }

        if (File.Exists(newFilename))
        {
          File.Delete(newFilename);
        }

        File.Move(filename, newFilename);
      }
      
      return true;
    }    
]]>
    </code>
</script>

<target name="unpackTranslation">
  <property name="zipfile" value="${dir.delivery}/ForHomeOfficeTranslators.zip" overwrite="false"/>
  <property name="country-id" value="de-DE" overwrite="false"/>
  
  <unzip zipfile="${zipfile}" todir="${dir.delivery}/translationPack"/> 

  <property name="source" value="${dir.delivery}/translationPack/${country-id}"/>
  <property name="destination" value="${dir.webforms.source}"/>
  <property name="formletterspath" value="${dir.webserver.Formletters}"/>
  <property name="temp" value="${OP::MoveFileByPattern(source, 'success.' + country-id + '*.txt', destination, '.aspx')}"/>
  <property name="temp" value="${OP::MoveFileByPattern(source, 'main.' + country-id + '-lang.txt', destination, '.js')}"/>
  <property name="temp" value="${OP::MoveFileByPattern(source, 'main.' + country-id + '*.txt', destination, '.yaml')}"/>
  <property name="temp" value="${OP::MoveFileByPattern(source, 'Application*.' + country-id + '*.txt', formletterspath, '.html')}"/>
  <property name="temp" value="${OP::MoveFileByPattern(source, '*.' + country-id + '*.txt', dir.webserver.OnlineReg.doc, '.html')}"/>
  <property name="temp" value="${OP::MoveFileByPattern(source, '*' + country-id + '*', formletterspath, '')}"/>

  <foreach item="File" property="filename">
      <in>
        <items basedir="${source}">
          <include name="*.*"/>
        </items>
      </in>
      <do>
        <echo message="what about ${filename}"/>
      </do>
  </foreach>
</target>

<target name="splitFormsIntoSubdirs">
  <foreach item="Folder" property="dirname">
      <in>
        <items basedir="${dir.webforms.source}">
          <include name="*"/>
        </items>
      </in>
      <do>
        <if test="${path::get-full-path(dirname) != path::get-full-path(dir.webforms.source)}">
          <property name="pattern" value="${path::get-file-name(dirname)}"/>
          <move todir="${dirname}">
            <fileset basedir="${dir.webforms.source}">
              <include name="*.${pattern}.yaml" />
            </fileset>
          </move>
        </if>
      </do>
  </foreach>
</target>

<target name="restoreFormsFromSubdirs">
  <foreach item="Folder" property="dirname">
      <in>
        <items basedir="${dir.webforms.source}">
          <include name="*"/>
        </items>
      </in>
      <do>
        <if test="${path::get-full-path(dirname) != path::get-full-path(dir.webforms.source)}">
          <property name="pattern" value="${path::get-file-name(dirname)}"/>
          <move todir="${dir.webforms.source}">
            <fileset basedir="${dirname}">
              <include name="*.${pattern}.yaml" />
            </fileset>
          </move>
        </if>
      </do>
  </foreach>
</target>

<include buildfile="../inc/nant/OpenPetra.csharp.xml"/> 

</project>