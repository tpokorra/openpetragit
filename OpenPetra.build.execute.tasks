<?xml version="1.0"?>
<!-- this contains the targets for starting the server or the client or the webserver;
     this build file is included by the main OpenPetra.build file -->
<project name="OpenPetra" default="help">
    <property name="WebServerInstall.dir" value="${OpenPetraRoot.dir}/webserver/"/>
    <property name="WebConfigFile" value="${WebServerInstall.dir}/web.config"/>
    <property name="ClientConfigFile" value="${OpenPetraRoot.dir}/etc/Client.config"/>
    <property name="ServerConfigFile" value="${OpenPetraRoot.dir}/etc/Server.config"/>
    <property name="ServerAdminConfigFile" value="${OpenPetraRoot.dir}/etc/ServerAdmin.config"/>
    <property name="TestReportingConfigFile" value="${OpenPetraRoot.dir}/etc/TestReporting.config"/>
    <property name="TestClientConfigFile" value="${OpenPetraRoot.dir}/etc/TestClient.config"/>
    <property name="TestServerConfigFile" value="${OpenPetraRoot.dir}/etc/TestServer.config"/>

    <property name="WebConfigFile" value="${script::PickConfigFile(WebConfigFile)}"/>
    <property name="ClientConfigFile" value="${script::PickConfigFile(ClientConfigFile)}"/>
    <property name="ServerConfigFile" value="${script::PickConfigFile(ServerConfigFile)}"/>
    <property name="ServerAdminConfigFile" value="${script::PickConfigFile(ServerAdminConfigFile)}"/>
    <property name="TestReportingConfigFile" value="${script::PickConfigFile(TestReportingConfigFile)}"/>
    <property name="TestClientConfigFile" value="${script::PickConfigFile(TestClientConfigFile)}"/>
    <property name="TestServerConfigFile" value="${script::PickConfigFile(TestServerConfigFile)}"/>

    <property name="Server.Port" value="9000" unless="${property::exists('Server.Port')}"/>

    <target name="updateServerConfigFile">
        <property name="ToReplace" value="RegEx:port=&quot;.*?&quot;"/>
        <property name="NewValue" value="port=&quot;${Server.Port}&quot;"/>
        <property name="temp" value="${script::ReplaceInFile(ServerConfigFile, ToReplace, NewValue)}"/>
        <property name="ToReplace" value="RegEx:IPBasePort&quot; value=&quot;.*?&quot;"/>
        <property name="NewValue" value="IPBasePort&quot; value=&quot;${Server.Port}&quot;"/>
        <property name="temp" value="${script::ReplaceInFile(ServerConfigFile, ToReplace, NewValue)}"/>
        <property name="ToReplace" value="RegEx:PostgreSQLDatabaseName&quot; value = &quot;.*?&quot;"/>
        <property name="NewValue" value="PostgreSQLDatabaseName&quot; value = &quot;${DBMS.DBName}&quot;"/>
        <property name="temp" value="${script::ReplaceInFile(ServerConfigFile, ToReplace, NewValue)}"/>
    </target>

    <target name="startPetraServer" depends="" description="start a local Petra Server"> <!-- compilePetra, startDatabase??? -->
        <if test="${not file::exists(ServerConfigFile)}">
            <copy file="${OpenPetraRoot.dir}/etc/Server-${DBMS.Type}.config.sample"
                tofile="${ServerConfigFile}"/>
        </if>
        <if test="${not file::exists(ServerAdminConfigFile)}">
            <copy file="${OpenPetraRoot.dir}/etc/ServerAdmin.config.sample"
                tofile="${ServerAdminConfigFile}"/>
        </if>

        <call target="updateServerConfigFile"/>
        
        <copy file="${OpenPetraRoot.dir}/db/patches/version.txt"
            tofile="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}/version.txt" overwrite="true"/>

        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <exec program="mono" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}"
                    commandline="PetraServerConsole.exe -RunWithoutMenu:true -C:${ServerConfigFile}"
                    spawn="true">
                    <!-- todo: install newer version of nant that knows spawn;
                         unfortunately, RunWithoutMenu:false would not work, because there is no extra window opened, and System.Console.ReadLine fails -->
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
        <if test="${framework::get-target-framework() == 'net-2.0'}" >
            <exec program="cmd.exe" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/${Output.dir}"
                    commandline="/C start PetraServerConsole.exe -RunWithoutMenu:false -C:${ServerConfigFile}"
                    spawn="true">
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
    </target>

    <target name="startPetraClient" depends="" description="start the Petra Client"> <!-- compilePetra, startPetraServer??? -->
        <if test="${not file::exists(ClientConfigFile)}">
            <copy file="${OpenPetraRoot.dir}/etc/Client.config.sample"
                tofile="${ClientConfigFile}"/>
        </if>

        <property name="ToReplace" value="RegEx:localhost:.*?/Clientmanager"/>
        <property name="NewValue" value="localhost:${Server.Port}/Clientmanager"/>
        <property name="temp" value="${script::ReplaceInFile(ClientConfigFile, ToReplace, NewValue)}"/>

        <copy file="${OpenPetraRoot.dir}/db/patches/version.txt"
            tofile="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}/version.txt" overwrite="true"/>

        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <exec program="mono" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}"
                    commandline="PetraClient.exe -C:${ClientConfigFile}"
                    spawn="true">
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
        <if test="${framework::get-target-framework() == 'net-2.0'}" >
            <exec program="cmd.exe" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/${Output.dir}"
                    commandline="/C start PetraClient.exe -C:${ClientConfigFile}"
                    spawn="true">
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
    </target>

    <target name="stopPetraServer" depends="" description="stop the local Petra Server">
        <property name="ToReplace" value="RegEx:localhost:.*?/Servermanager"/>
        <property name="NewValue" value="localhost:${Server.Port}/Servermanager"/>
        <property name="temp" value="${script::ReplaceInFile(ServerAdminConfigFile, ToReplace, NewValue)}"/>

        <if test="${framework::get-target-framework() == 'mono-2.0'}" >
            <exec program="mono" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/${Output.dir}"
                    commandline="PetraServerAdminConsole.exe -Command:Stop -C:${ServerAdminConfigFile}"
                    spawn="true">
               <environment>
                  <variable name="LANGUAGE" value="${SelectedLanguage}"/>
               </environment>
            </exec>
        </if>
        <if test="${framework::get-target-framework() == 'net-2.0'}" >
            <exec program="PetraServerAdminConsole.exe" 
                    basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/${Output.dir}" 
                    workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/${Output.dir}"
                    commandline="-Command:Stop -C:${ServerAdminConfigFile}"/>
        </if>
    </target>

    <target name="patchDatabase" depends="init" description="Update the development database to the latest database version so that the latest OpenPetra server can connect to the db">

        <if test="${DBMS.Type=='sqlite'}">
            <fail message="patchDatabase does not support sqlite. please use postgresql or mysql. otherwise please run nant resetDatabase"/>
        </if>

        <call target="updateServerConfigFile"/>
        <ExecDotNet program="${PetraToolsExe.dir}/PatchToolConsole.exe" 
            commandline="-action:patchDatabase -C:${ServerConfigFile} -DBPatches.Path:${OpenPetraRoot.dir}/db/patches -Server.LogFile:${Tmp.dir}/dbpatch.log -OpenPetra.PathTemp:${Tmp.dir}"
            failonerror="true"/>
    </target>

    <target name="startXSPServer">
        <exec program="cmd.exe" 
                workingdir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/app/PetraClientAsp"
                commandline="/C start xsp2 --root . --port 8080 --applications /:."
                spawn="true">
            <environment>
                <variable name="PATH" path="${environment::get-variable('PATH')};${MonoBinPath}"/>
            </environment>
        </exec>
    </target>

    <target name="startWebServer" description="only supports postgresql and mysql server at the moment, not sqlite; would need microsoft xsp">
        <get src="http://extjs.cachefly.net/ext-3.2.1/adapter/ext/ext-base.js" dest="${WebServerInstall.dir}/js/ext-base.js"/>
        <get src="http://extjs.cachefly.net/ext-3.2.1/ext-all.js" dest="${WebServerInstall.dir}/js/ext-all.js"/>
        <get src="http://extjs.cachefly.net/ext-3.2.1/ext-all-debug.js" dest="${WebServerInstall.dir}/js/ext-all-debug.js"/>
        <get src="http://extjs.cachefly.net/ext-3.2.1/resources/css/ext-all.css" dest="${WebServerInstall.dir}/css/ext-all.css"/>
        <unzip zipfile="${OpenPetraRoot.dir}/csharp/ThirdParty/extjs/ext-images-default.zip" todir="${WebServerInstall.dir}/images"/>

        <copy file="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/app/WebService/server.asmx"
                    tofile="${WebServerInstall.dir}/server.asmx" overwrite="true"/>
        <mkdir dir="${WebServerInstall.dir}/bin" failonerror="false"/>
        <copy todir="${WebServerInstall.dir}/bin" overwrite="true">
            <!-- some unmanaged dlls cause problems for mono xsp -->
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/Debug/">
                <include name="*.dll" />
                <exclude name="Mono*" />
            </fileset>
        </copy>
        <copy todir="${WebServerInstall.dir}/bin" overwrite="true">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ThirdParty/ext.net">
                <include name="*.dll" />
            </fileset>
        </copy>
        <copy todir="${WebServerInstall.dir}/bin" overwrite="true">
            <!-- some unmanaged dlls cause problems for mono xsp -->
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/Debug/">
                <include name="*.dll" />
                <exclude name="Mono*" />
            </fileset>
        </copy>
        <copy file="${OpenPetraRoot.dir}/db/patches/version.txt"
            tofile="${WebServerInstall.dir}/bin/version.txt" overwrite="true"/>
        <if test="${not file::exists(WebConfigFile)}">
            <copy file="${OpenPetraRoot.dir}/etc/web-${DBMS.Type}.config.sample"
                tofile="${WebConfigFile}" overwrite="true"/>
        </if>
        <property name="ToReplace" value="RegEx:PostgreSQLDatabaseName&quot; value = &quot;.*?&quot;"/>
        <property name="NewValue" value="PostgreSQLDatabaseName&quot; value = &quot;${DBMS.DBName}&quot;"/>
        <property name="temp" value="${script::ReplaceInFile(WebConfigFile, ToReplace, NewValue)}"/>

        <!-- TODO: run on linux as well? -->
        <exec program="cmd.exe" 
                workingdir="${WebServerInstall.dir}"
                commandline="/C start xsp2.bat --verbose --root . --port 8081 --applications /:."
                spawn="true">
            <environment>
                <variable name="PATH" path="${environment::get-variable('PATH')};${MonoBinPath}"/>
                <variable name="MONO_PATH" path="${MonoBinPath}\..\lib\mono\2.0"/>
                <variable name="MONO_OPTIONS" value="--debug"/>
            </environment>
        </exec>
        <echo message="in your browser, go to http://localhost:8081/"/>
    </target>
</project>