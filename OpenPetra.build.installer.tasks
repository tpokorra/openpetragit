<?xml version="1.0"?>
<!-- this contains the targets for creating installer packages for windows and linux;
     this build file is included by the main OpenPetra.build file, and only that should be called (on Linux call target: buildRelease) -->
<project name="OpenPetra" default="help">

    <property name="SkipDatabases" value="false" unless="${property::exists('SkipDatabases')}"/>

    <target name="setupTemplate">
        <property name="Current.File" value="${SetupOriginal.File}.local"/>

        <copy file="${SetupOriginal.File}" tofile="${Current.File}" overwrite="true"/>

        <property name="toReplace" value="{#UINAVIGATION}"/>
        <property name="UINavigation.file" value="UINavigation.yml.my"/>
        <if test="${file::exists(UINavigation.file)}">
            <echo message='${script::ReplaceInFile(Current.File, toReplace, UINavigation.file)}'/>
        </if>
        <if test="${not file::exists(UINavigation.file)}">
            <property name="UINavigation.file" value="UINavigation.yml"/>
            <echo message='${script::ReplaceInFile(Current.File, toReplace, UINavigation.file)}'/>
        </if>

        <property name="toReplace" value="{#REMOTECONFIG}"/>
        <property name="Config.file" value="PetraClientRemote.config.my"/>
        <if test="${file::exists(Config.file)}">
            <echo message='${script::ReplaceInFile(Current.File, toReplace, Config.file)}'/>
        </if>
        <if test="${not file::exists(Config.file)}">
            <property name="Config.file" value="PetraClientRemote.config"/>
            <echo message='${script::ReplaceInFile(Current.File, toReplace, Config.file)}'/>
        </if>

        <property name="toReplace" value="{#RELEASEVERSION}"/>
        <echo message='${script::ReplaceInFile(Current.File, toReplace, ReleaseVersion)}'/>
        <property name="toReplace" value="{#RELEASEID}"/>
        <echo message='${script::ReplaceInFile(Current.File, toReplace, ReleaseID)}'/>
        <property name="toReplace" value="{#PATCHVERSION}"/>
        <echo message='${script::ReplaceInFile(Current.File, toReplace, script::GetMainVersionWithoutBuildNr(ReleaseVersion))}'/>
        <property name="toReplace" value="{#DELIVERY.DIR}"/>
        <echo message='${script::ReplaceInFile(Current.File, toReplace, Delivery.dir)}'/>
        
        <!-- for remote installer -->
        <if test="${property::exists('OrgName')}">
            <property name="toReplace" value="{#ORGNAME}"/>
            <echo message='${script::ReplaceInFile(Current.File, toReplace, OrgName)}'/>
            <property name="toReplace" value="{#PUBLISHERURL}"/>
            <echo message='${script::ReplaceInFile(Current.File, toReplace, PublisherUrl)}'/>
            <property name="toReplace" value="{#SERVERHOST}"/>
            <echo message='${script::ReplaceInFile(Current.File, toReplace, ServerHost)}'/>
            <property name="toReplace" value="{#SERVERPORT}"/>
            <echo message='${script::ReplaceInFile(Current.File, toReplace, ServerPort)}'/>
        </if>
        <exec program="${Innosetup.ISCC}" commandline=" &quot;${Current.File}&quot;"
              workingdir="${path::get-directory-name(Current.File)}"/>
    </target>
    <target name="setupStandalone">
        <echo file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/standalone/version.txt">${ReleaseVersion}</echo>
        <property name="DBUpdate.file" value="${OpenPetraRoot.dir}/db/patches/${script::CalculateStandaloneDBUpdateFileName(ReleaseID)}"/>
        <if test="${not file::exists(DBUpdate.file)}">
            <echo message="${DBUpdate.file}"/>
            <fail message="We are missing the db upgrade file for sqlite standalone databases." />
        </if>
        <property name="SetupOriginal.File" value="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/standalone/standalone.iss"/>
        <call target="setupTemplate"/>
    </target>
    <target name="setupRemote">
        <if test="${DBMS.Type!='postgresql' and DBMS.Type!='mysql'}">
            <fail message="only postgresql and mysql are supported for nant remoteSetup"/>
        </if>

        <echo file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteclientWin/version.txt">${ReleaseVersion}</echo>
        
        <property name="OrgNameWithoutSpace" value="${string::replace(OrgName, ' ', '')}"/>
        <property name="RandomDBPassword" value="${script::GetPasswordSalt()}"/>
        
        <!--  ***************  Build remote client installer ********************* -->
        <property name="SetupOriginal.File" value="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteclientWin/remote.iss"/>
        <call target="setupTemplate"/>
        
        <!-- ***************  create the linux scripts for the server side ***************  -->
        <copy todir="${Delivery.dir}" overwrite="true">
            <fileset basedir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteClientWin/">
                <include name="openpetraorg-server.sh" />
                <include name="PetraServerAdminConsole.config" />
            </fileset>
        </copy>

        <property name="CustomConfig.File" value="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteClientWin/PetraServerConsole.config.my"/>
        <if test="${file::exists(CustomConfig.File)}">
            <copy file="${CustomConfig.File}" tofile="${Delivery.dir}/PetraServerConsole.config"/>
        </if>
        <if test="${not file::exists(CustomConfig.File)}">
            <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteClientWin/PetraServerConsole-${DBMS.Type}.config" tofile="${Delivery.dir}/PetraServerConsole.config"/>
        </if>

        <!--  ***************  openpetraorg-server.sh ********************* -->
        <property name="Current.File" value="${Delivery.dir}/openpetraorg-server.sh"/>
        <property name="toReplace" value="{#ORGNAMEWITHOUTSPACE}"/>
        <property name="newValue" value="${OrgNameWithoutSpace}"/>
        <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>

        <property name="toReplace" value="{#ORGNAME}"/>
        <property name="newValue" value="${OrgName}"/>
        <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>

        <property name="toReplace" value="{#RDBMS}"/>
        <property name="newValue" value="${DBMS.Type}"/>
        <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>
        
        <!--  ***************  PetraServerConsole.config ********************* -->
        <property name="Current.File" value="${Delivery.dir}/PetraServerConsole.config"/>
        <property name="toReplace" value="{#SERVERPORT}"/>
        <property name="newValue" value="${ServerPort}"/>
        <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>

        <property name="toReplace" value="{#ORGNAMEWITHOUTSPACE}"/>
        <property name="newValue" value="${OrgNameWithoutSpace}"/>
        <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>

        <property name="toReplace" value="{#DBPASSWORD}"/>
        <property name="newValue" value="${RandomDBPassword}"/>
        <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>
        
        <!--  ***************  PetraServerAdminConsole.config ********************* -->
        <property name="Current.File" value="${Delivery.dir}/PetraServerAdminConsole.config"/>
        <property name="toReplace" value="{#SERVERPORT}"/>
        <property name="newValue" value="${ServerPort}"/>
        <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>

        <property name="toReplace" value="{#SERVERHOST}"/>
        <property name="newValue" value="${ServerHost}"/>
        <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>
        
        <!--  ***************  initmysql.sh ********************* -->
        <if test="${DBMS.Type=='mysql'}">
            <property name="Current.File" value="${Delivery.dir}/initmysql.sh"/>
            <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteClientWin/initmysql.sh" tofile="${Current.File}"/>
            <property name="Current.File" value="${Delivery.dir}/initmysql.sh"/>
            <property name="toReplace" value="{#ORGNAMEWITHOUTSPACE}"/>
            <property name="newValue" value="${OrgNameWithoutSpace}"/>
            <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>

            <property name="toReplace" value="{#DBPASSWORD}"/>
            <property name="newValue" value="${RandomDBPassword}"/>
            <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>
        </if>

        <!--  ***************  initpg.sh ********************* -->
        <if test="${DBMS.Type=='postgresql'}">
            <property name="Current.File" value="${Delivery.dir}/initpg.sh"/>
            <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteClientWin/initpg.sh" tofile="${Current.File}"/>
            <property name="toReplace" value="{#ORGNAMEWITHOUTSPACE}"/>
            <property name="newValue" value="${OrgNameWithoutSpace}"/>
            <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>

            <property name="toReplace" value="{#DBPASSWORD}"/>
            <property name="newValue" value="${RandomDBPassword}"/>
            <property name="result" value='${script::ReplaceInFile(Current.File, toReplace, newValue)}'/>
        </if>

        <!-- todo on Server: 
            mkdir /usr/local/openpetra
            useradd openpetraOrgNameWithoutSpace
            mkdir /usr/local/openpetra/OrgNameWithoutSpace
            chmod 700 openpetraOrgNameWithoutSpace /usr/local/openpetra/OrgNameWithoutSpace
            sftp get openpetraorg-mono-0.2.3-0.tar.gz
            su openpetraOrgNameWithoutSpace
            tar xzf openpetraorg-mono-0.2.3-0.tar.gz
            mv /usr/local/openpetra/OrgNameWithoutSpace/openpetraorg-0.2.3-0/* /usr/local/openpetra/OrgNameWithoutSpace
            generate private and public key, with GenerateEncryptionKey from PetraTools/_bin. write to 2 text files
            upload /var/www/keys/publickey.xml
            upload /usr/local/openpetra/OrgNameWithoutSpace/etc30/privatekey.xml
            copy generated PetraServerAdminConsole.config and PetraServerConsole.config to etc30
            copy generated initmysql.sh and openpetraorg-server.sh
            initmysql

            as root:
                ln -s /usr/local/openpetra/OrgNameWithoutSpace/openpetraorg-server.sh /etc/init.d/openpetra-server-OrgNameWithoutSpace.sh
                update-rc.d -f openpetra-server-OrgNameWithoutSpace.sh defaults
            start server
        -->
    </target>

    <target name="setupLinuxServer" depends="init">
        <!-- for the moment, just create a tar.gz file, with sub directories 
        manuals30 containing the release notes, 
        bin30 with just the server binaries,
        db30 with the demo sqlite database,
        demo30 with some sample files,
        reports30,
        sql30 with the sql scripts,
        etc30 with the 2 config files;
        start and maintain script in the root
        LICENSE file in the root, 
        INSTALL file with instructions, required packages, firewall etc?
        -->
        <property name="setupDir" value="${OpenPetraRoot.dir}/tmp/openpetraorg-${ReleaseVersion}"/>
        <delete dir="${setupDir}" failonerror="false"/>
        <mkdir dir="${setupDir}"/>

        <if test="${SkipDatabases!='true'}">
            <mkdir dir="${setupDir}/db30"/>
            <mkdir dir="${setupDir}/demo30"/>
            <mkdir dir="${setupDir}/log30"/>
            <mkdir dir="${setupDir}/etc30"/>
            <mkdir dir="${setupDir}/reports30"/>
            <mkdir dir="${setupDir}/patches30"/>

            <if test="${not BuildClientArchive}">
                <copy todir="${setupDir}/etc30">
                    <fileset basedir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/">
                        <include name="*.config" />
                    </fileset>
                </copy>
            </if>
            
            <copy todir="${setupDir}/demo30">
                <fileset basedir="${OpenPetraRoot.dir}/demodata/">
                    <include name="**/*.*" />
                </fileset>
            </copy>
        </if>

        <mkdir dir="${setupDir}/manuals30"/>
        <mkdir dir="${setupDir}/sql30"/>
        <mkdir dir="${setupDir}/resources30"/>

        <mkdir dir="${setupDir}/bin30"/>
        <echo file="${setupDir}/bin30/version.txt">${ReleaseVersion}</echo>
        <copy todir="${setupDir}/bin30">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/Release/">
                <include name="*.dll" />
                <include name="*.exe" />
            </fileset>
        </copy>
        <copy todir="${setupDir}/bin30">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/Release/">
                <include name="*.dll" />
                <include name="*.exe" />
            </fileset>
        </copy>
        <copy todir="${setupDir}/bin30">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/ServerAdmin/_bin/Release/">
                <include name="*.dll" />
                <include name="*.exe" />
            </fileset>
        </copy>
        <copy file="${OpenPetraRoot.dir}/csharp/ICT/PetraTools/_bin/Release/PatchTool.exe" 
                    tofile="${setupDir}/bin30/PatchTool.exe"/>
        <copy file="${OpenPetraRoot.dir}/csharp/ThirdParty/SQLite/System.Data.SQLite.ManagedOnly.dll"
                    tofile="${setupDir}/bin30/System.Data.SQLite.dll"/>
        <copy file="${OpenPetraRoot.dir}/csharp/ThirdParty/Npgsql/Npgsql.dll"
                    tofile="${setupDir}/bin30/Npgsql.dll"/>
        <copy file="${OpenPetraRoot.dir}/csharp/ThirdParty/MySQL/mysql.data.dll"
                    tofile="${setupDir}/bin30/MySql.Data.dll"/>
        <copy file="${OpenPetraRoot.dir}/csharp/ICT/Petra/Definitions/UINavigation.yml"
                    tofile="${setupDir}/bin30/UINavigation.yml"/>

        <copy todir="${setupDir}/resources30">
            <fileset basedir="${OpenPetraRoot.dir}/resources">
                <include name="*.ico" />
                <include name="*.png" />
            </fileset>
        </copy>

        <copy todir="${setupDir}/bin30/">
           <fileset basedir="${Tmp.dir}/i18n/">
               <include name="**/*.dll" />
           </fileset> 
        </copy>
        
        <if test="${BuildClientArchive}">
            <copy todir="${setupDir}/etc30">
                <fileset basedir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/remoteclientWin/">
                    <include name="PetraClientRemote.config" />
                </fileset>
            </copy>
        </if>

        <copy todir="${setupDir}/manuals30">
            <fileset basedir="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/releasenotes/">
                <include name="*.html" />
            </fileset>
        </copy>

        <copy todir="${setupDir}/reports30">
            <fileset basedir="${OpenPetraRoot.dir}/XmlReports/">
                <include name="*.dtd" />
                <include name="**/*.xml" />
            </fileset>
        </copy>

        <copy file="${OpenPetraRoot.dir}/LICENSE"
            tofile="${setupDir}/LICENSE"/>

        <if test="${not BuildClientArchive}">
            <copy todir="${setupDir}/sql30">
                <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/sql/">
                    <include name="*.sql" />
                    <include name="*.yml" />
                </fileset>
            </copy>

            <if test="${SkipDatabases!='true'}">
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/demo.db"
                            tofile="${setupDir}/db30/demo.db"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/createtables-PostgreSQL.sql"
                            tofile="${setupDir}/db30/createtables-PostgreSQL.sql"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/createconstraints-PostgreSQL.sql"
                            tofile="${setupDir}/db30/createconstraints-PostgreSQL.sql"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/demodata-PostgreSQL.sql"
                            tofile="${setupDir}/db30/demodata-PostgreSQL.sql"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/createtables-MySQL.sql"
                            tofile="${setupDir}/db30/createtables-MySQL.sql"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/createconstraints-MySQL.sql"
                            tofile="${setupDir}/db30/createconstraints-MySQL.sql"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/demodata-MySQL.sql"
                            tofile="${setupDir}/db30/demodata-MySQL.sql"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/INSTALL"
                            tofile="${setupDir}/INSTALL"/>
                <if test="${SkipCompileClient!='true'}">
                    <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/startClient.sh"
                            tofile="${setupDir}/startClient.sh"/>
                </if>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/openpetraorg-server.sh"
                            tofile="${setupDir}/openpetraorg-server.sh"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/initpg.sh"
                            tofile="${setupDir}/initpg.sh"/>
                <copy file="${OpenPetraRoot.dir}/setup/petra${PetraRelease}/linuxserver/initmysql.sh"
                            tofile="${setupDir}/initmysql.sh"/>
                <if test="${platform::is-unix()}">
                    <!-- change the executable flag -->
                    <ExecCmd program="sh" commandline="/C &quot;chmod a+x ${setupDir}/*.sh&quot;"/>
                    <!-- make sure that the script files are in unix format -->
                    <ExecCmd program="sh" commandline="/C &quot;for f in ${setupDir}/*.sh; do dos2unix -o $f; done;&quot;"/>
                    <ExecCmd program="sh" commandline="/C &quot;cd ${setupDir}/etc30; ln -s PetraServerConsole-postgresql.config PetraServerConsole.config&quot;"/>
                    
                    <ExecCmd program="sh" commandline="/C &quot;cd ${setupDir}/..; tar czpf ${Delivery.dir}/openpetraorg-mono-${ReleaseVersion}.tar.gz openpetraorg-${ReleaseVersion}*&quot;"/>

                    <!-- to avoid problem with symbolic link with delete dir task -->
                    <ExecCmd program="sh" commandline="/C &quot;cd ${setupDir}/etc30; rm PetraServerConsole.config&quot;"/>
                </if>
            </if>
            <if test="${SkipDatabases=='true'}">
                <!-- this can be useful if we just need the binary files and not the scripts for an existing Linux OpenPetra server to update -->
                <tar destfile="${Delivery.dir}/openpetraorg-server-update-${ReleaseVersion}.tar.gz" compression="GZip">
                    <fileset basedir="${setupDir}" prefix="openpetraorg-${ReleaseVersion}">
                        <include name="**/*" />
                    </fileset>
                </tar>
            </if>
        </if>
        <if test="${BuildClientArchive}">
            <!-- this does not keep the executable flag; need this to make the patch for windows clients -->
            <tar destfile="${Delivery.dir}/openpetraorg-client-backup-${ReleaseVersion}.tar.gz" compression="GZip">
                <fileset basedir="${setupDir}" prefix="openpetraorg-${ReleaseVersion}">
                    <include name="**/*" />
                </fileset>
            </tar>
        </if>

        <delete dir="${setupDir}"/>
    </target>
    
    <target name="createPatch" depends="init">
        <ExecDotNet program="${PetraToolsExe.dir}/PatchToolConsole.exe" commandline="-action:create -OpenPetra.PathTemp:${Tmp.dir}/patch -deliverypath:${Delivery.dir} -appname:openpetraorg-client-backup -oldversion:${OldVersion} -newversion:${NewVersion}" failonerror="true">
            <environment>
                <variable name="PATH" path="${environment::get-variable('PATH')};${OpenPetraRoot.dir}/csharp/ThirdParty/bsdiff"/>
            </environment>
        </ExecDotNet>
    </target>
    
    <target name="buildReleaseWindows" depends="switchToDebug, createSQLiteDB, compileRelease, translationCompilePOFile, setupStandalone"/>
    <!-- problem: one version for mac and Windows? what about patching? generateWinforms; 2 versions? -->
    <target name="buildReleaseLinux" depends="refreshSudo, switchToDebug, createPostgreSQLDB, createMySQLDB, createSQLiteDB, generateWinforms, compileRelease, translationCompilePOFile, setupLinuxServer"/>

    <target name="buildReleaseWindowsClient" depends="switchToDebug">
        <!-- build the Remote Client installer, and the tar.gz file for future patches. this is for the hosted server -->
        <property name="SkipCompileServer" value="true"/>
        <call target="compileRelease"/>
        <call target="translationCompilePOFile"/>
        <call target="setupRemote"/>
        <property name="BuildClientArchive" value="true"/>
        <call target="setupLinuxServer"/>
    </target>

    <target name="buildReleaseLinuxServer" depends="refreshSudo, switchToDebug, createPostgreSQLDB, createMySQLDB, createSQLiteDB">
        <!-- build the tar.gz file without client files, and without sqlite. this is for the hosted server -->
        <property name="SkipCompileClient" value="true"/>
        <call target="compileRelease"/>
        <call target="translationCompilePOFile"/>
        <call target="setupLinuxServer"/>
    </target>

    <target name="buildUpdateLinuxServer">
        <!-- build the tar.gz file without client files, and without database files, and without config files. this is for updating a Linux Server -->
        <property name="SkipCompileClient" value="true"/>
        <property name="SkipDatabases" value="true"/>
        <call target="compileRelease"/>
        <call target="translationCompilePOFile"/>
        <call target="setupLinuxServer"/>
    </target>

    <target name="buildRelease">
        <if test="${platform::is-unix()}">
            <call target="buildReleaseLinux"/>
        </if>
        <if test="${platform::is-windows()}">
            <call target="buildReleaseWindows"/>
        </if>
    </target>
    
    <target name="packTestReportingRelease">
        <copy file="${OpenPetraRoot.dir}/etc/Server.config" tofile="${OpenPetraRoot.dir}/tmp/PetraServerConsole.exe.config" overwrite="true"/>
        <echo file="${OpenPetraRoot.dir}/tmp/placeholder.txt">directory needed for Server.log</echo>
        <zip zipfile="testRelease.zip">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/Debug" prefix="csharp/ICT/Petra/Server/_bin/Debug">
                <include name="*.exe" />
                <include name="*.dll" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ThirdParty/Mono" prefix="csharp/ICT/Petra/Server/_bin/Debug">
                <include name="*.dll" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/tmp" prefix="csharp/ICT/Petra/Server/_bin/Debug">
                <include name="PetraServerConsole.exe.config" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/etc" prefix="etc">
                <include name="*.sample" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/tmp" prefix="log">
                <include name="placeholder.txt" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Testing/_bin/Debug" prefix="csharp/ICT/Testing/_bin/Debug">
                <include name="*.dll" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/XmlReports" prefix="XmlReports">
                <include name="**.dtd" />
                <include name="**.xml" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Testing/Reporting/TestData" prefix="csharp/ICT/Testing/Reporting/TestData">
                <include name="**.xml" />
                <include name="**.csv" />
                <include name="**.txt" />
            </fileset>
        </zip>        
        <delete file="${OpenPetraRoot.dir}/tmp/PetraServerConsole.exe.config"/>
        <delete file="${OpenPetraRoot.dir}/tmp/placeholder.txt"/>
    </target>

    <target name="packTestRelease">
        <copy file="${OpenPetraRoot.dir}/etc/Server.config" tofile="${OpenPetraRoot.dir}/tmp/PetraServerConsole.exe.config" overwrite="true"/>
        <copy file="${OpenPetraRoot.dir}/etc/Client.config" tofile="${OpenPetraRoot.dir}/tmp/PetraClient.exe.config" overwrite="true"/>
        <echo file="${OpenPetraRoot.dir}/tmp/placeholder.txt">directory needed for Server.log</echo>
        <zip zipfile="${Delivery.dir}/testRelease.zip">
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Server/_bin/Debug" prefix="csharp/ICT/Petra/Server/_bin/Debug">
                <include name="*.exe" />
                <include name="*.dll" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Client/_bin/Debug" prefix="csharp/ICT/Petra/Client/_bin/Debug">
                <include name="*.exe" />
                <include name="*.dll" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/tmp" prefix="csharp/ICT/Petra/Server/_bin/Debug">
                <include name="PetraServerConsole.exe.config" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/tmp" prefix="csharp/ICT/Petra/Client/_bin/Debug">
                <include name="PetraClient.exe.config" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Petra/Definitions" prefix="csharp/ICT/Petra/Definitions">
                <include name="UINavigation.yml" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/resources" prefix="resources">
                <include name="*.*" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/etc" prefix="etc">
                <include name="*.sample" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/tmp" prefix="log">
                <include name="placeholder.txt" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Testing/_bin/Debug" prefix="csharp/ICT/Testing/_bin/Debug">
                <include name="*.dll" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/XmlReports" prefix="XmlReports">
                <include name="**.dtd" />
                <include name="**.xml" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/csharp/ICT/Testing/Reporting/TestData" prefix="csharp/ICT/Testing/Reporting/TestData">
                <include name="**.xml" />
                <include name="**.csv" />
                <include name="**.txt" />
            </fileset>
        </zip>        
        <delete file="${OpenPetraRoot.dir}/tmp/PetraServerConsole.exe.config"/>
        <delete file="${OpenPetraRoot.dir}/tmp/PetraClient.exe.config"/>
        <delete file="${OpenPetraRoot.dir}/tmp/placeholder.txt"/>
    </target>

    <target name="packWebApp" depends="deleteBakFiles">
        <copy file="${OpenPetraRoot.dir}/webserver/web.config" tofile="${OpenPetraRoot.dir}/tmp/web-sample.config" overwrite="true"/>
        <zip zipfile="${Delivery.dir}/WebRelease.zip">
            <fileset basedir="${OpenPetraRoot.dir}/webserver/bin/" prefix="webserver/bin">
                <include name="*.dll" />
                <include name="version.txt" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/webserver/js" prefix="webserver/js">
                <include name="**.js" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/webserver/images" prefix="webserver/images">
                <include name="**.*" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/webserver/img" prefix="webserver/img">
                <include name="**.*" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/webserver/js" prefix="webserver/js">
                <include name="**.js" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/webserver/css" prefix="webserver/css">
                <include name="**.css" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/webserver/Apps" prefix="webserver/Apps">
                <include name="**.js" />
                <include name="**.html" />
                <include name="**.aspx" />
            </fileset>

            <fileset basedir="${OpenPetraRoot.dir}/webserver" prefix="webserver">
                <include name="*.*" />
                <exclude name="web.config" />
            </fileset>
            <fileset basedir="${OpenPetraRoot.dir}/tmp" prefix="webserver">
                <include name="web-sample.config" />
            </fileset>

            <fileset basedir="${OpenPetraRoot.dir}/demodata/formletters" prefix="formletters">
                <include name="*.*" />
            </fileset>
        </zip>
        <delete file="${OpenPetraRoot.dir}/tmp/web-sample.config"/>
    </target>

</project>