<?xml version="1.0"?>
<project name="OpenPetra-default-targets">

<include buildfile="OpenPetra.common.xml"/>

<target name="deleteBakFiles" description="delete all backup files">
  <delete failonerror="false">
    <fileset defaultexcludes="false" basedir="${dir.root}/csharp/ICT">
      <include name="**/*~" />
      <include name="**/*.bak" />
      <include name="**/*.error" />
      <include name="**/*.yaml.xml" />
    </fileset>
  </delete>
  <delete>
    <fileset defaultexcludes="false" basedir="${dir.root}/webserver">
      <include name="**/*~" />
      <include name="**/*.bak" />
      <include name="**/*.error" />
      <include name="**/*.yaml.xml" />
    </fileset>
  </delete>
</target>

<target name="initConfigFiles" description="write and overwrite the config files for client, server and testing, and the version.txt">
  <copy file="${dir.incdir.template.etc}/Server-${DBMS.Type}.config"
        tofile="${ServerConfigFile}" overwrite="true">
    <filterchain>
      <expandproperties />
    </filterchain>
  </copy>

  <copy file="${dir.incdir.template.etc}/ServerAdmin.config"
        tofile="${ServerAdminConfigFile}" overwrite="true">
    <filterchain>
      <expandproperties />
    </filterchain>  
  </copy>
  
  <mkdir dir="${dir.log}/PetraClient" />

  <copy file="${dir.incdir.template.etc}/Client.config"
        tofile="${ClientConfigFile}" overwrite="true">
    <filterchain>
      <expandproperties />
    </filterchain>  
  </copy>

  <copy file="${dir.incdir.template.etc}/TestServer.config"
        tofile="${path::combine(dir.etc, 'TestServer.config')}" overwrite="true">
    <filterchain>
      <expandproperties />
    </filterchain>  
  </copy>

  <copy file="${dir.incdir.template.etc}/TestClient.config"
        tofile="${path::combine(dir.etc, 'TestClient.config')}" overwrite="true">
    <filterchain>
      <expandproperties />
    </filterchain>  
  </copy>
  
<!-- MGR: TODO: Remove copy. Should be during database work! -->
  <copy file="${path::combine(dir.db.patches, 'version.txt')}"
      tofile="${path::combine(dir.bin, 'version.txt')}" 
      overwrite="true"/>
  
</target>

<target name="startPetraServer" depends="initConfigFiles" description="Starts a local Petra Server">
  <if test="${platform::is-windows()}">
    <exec program="cmd.exe" 
          workingdir="${dir.bin}"
          commandline="-RunWithoutMenu:false -C:${ServerConfigFile}"
          spawn="true">
       <environment>
          <variable name="LANGUAGE" value="${SelectedLanguage}"/>
       </environment>
       <arg value="/c" />
       <arg value="start" />
       <arg value="cmd" /> <!-- This window stays open after the process finishes -->
       <arg value="/k" />
       <arg value="PetraServerConsole.exe" />
       <arg value="-RunWithoutMenu:false" />
       <arg value="-C:${ServerConfigFile}" />
    </exec>
  </if>

  <if test="${not platform::is-windows()}">
   <!-- Open a xterm with OpenPetra Server? -->
   <fail>For Unix this is not implemented until now!</fail>
      <exec program="${framework::get-runtime-engine(framework::get-target-framework())}" 
              workingdir="${dir.bin}"
              commandline="PetraServerConsole.exe -RunWithoutMenu:true -C:${ServerConfigFile}"
              spawn="true">
        <!--      todo: install newer version of nant that knows spawn;
                   unfortunately, RunWithoutMenu:false would not work, because there is no extra window opened, and System.Console.ReadLine fails -->
         <environment>
            <variable name="LANGUAGE" value="${SelectedLanguage}"/>
         </environment>
      </exec>
  </if>
</target>

<target name="stopPetraServer" depends="initConfigFiles" description="stop the local Petra Server">
  <if test="${platform::is-windows()}" >
      <exec program="PetraServerAdminConsole.exe" 
            basedir="${dir.bin}" 
            workingdir="${dir.bin}"
            commandline="-Command:Stop -C:${ServerAdminConfigFile}"/>
  </if>
  <if test="${not platform::is-windows()}">
   <fail>For Unix this is not implemented until now!</fail>
      <exec program="${framework::get-runtime-engine(framework::get-target-framework())}" 
              workingdir="${dir.bin}"
              commandline="PetraServerAdminConsole.exe -Command:Stop -C:${ServerAdminConfigFile}"
              spawn="false">
         <environment>
            <variable name="LANGUAGE" value="${SelectedLanguage}"/>
         </environment>
      </exec>
  </if>
</target>

<target name="startPetraClient" depends="initConfigFiles" description="start the Petra Client"> 
  <if test="${platform::is-windows()}">
    <exec program="cmd.exe" 
          workingdir="${dir.bin}"
          commandline="-RunWithoutMenu:false -C:${ServerConfigFile}"
          spawn="true">
       <environment>
          <variable name="LANGUAGE" value="${SelectedLanguage}"/>
       </environment>
       <arg value="/c" />
       <arg value="start" />
       <arg value="PetraClient.exe" />
        <arg value="-C:${ClientConfigFile}" />
    </exec>
  </if>

  <if test="${not platform::is-windows()}">
   <!-- Open a xterm with OpenPetra Server? -->
   <fail>For Unix this is not implemented until now!</fail>
      <exec program="${framework::get-runtime-engine(framework::get-target-framework())}" 
              workingdir="${dir.bin}"
              commandline="PetraClient.exe -C:${ClientConfigFile}"
              spawn="true">
        <!--      todo: install newer version of nant that knows spawn;
                   unfortunately, RunWithoutMenu:false would not work, because there is no extra window opened, and System.Console.ReadLine fails -->
         <environment>
            <variable name="LANGUAGE" value="${SelectedLanguage}"/>
         </environment>
      </exec>
  </if>
</target> 

</project>