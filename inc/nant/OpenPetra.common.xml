<?xml version="1.0"?>
<project name="OpenPetra-tasks">

<!-- Get OpenPetra root directory 
 @hack: We are accessing the private variable from the include task of nant.
        This is the only place, where this information is saved! -->
<script language="C#" prefix="OP" >
  <imports>
    <import namespace="NAnt.Core.Tasks" />
    <import namespace="System.Reflection" />
  </imports>
  <code>
    <![CDATA[
    [Function("get-current-buildfile")]
    public static string getCurrentBuildfile( ) {
      const BindingFlags eFlags = BindingFlags.Static | BindingFlags.Public 
                                  | BindingFlags.NonPublic | BindingFlags.GetField; 
      System.Reflection.FieldInfo field = typeof(NAnt.Core.Tasks.IncludeTask).GetField("_currentBasedir", eFlags); 
      if (field == null) {
        throw new ArgumentException("'_currentBasedir' is not a valid static member in '" + 
          typeof(NAnt.Core.Tasks.IncludeTask) + "'.");
      }
      string returnvalue = (string) field.GetValue(null);
      return returnvalue;
    }
    
    [Function("GUIDGen")]
    public static string GUIDGen(  ) {
        return Guid.NewGuid().ToString("D").ToUpper();
    }

    [Function("GetReleaseIDFromVersionTxt")]
    public static string GetReleaseIDFromVersionTxt(string APath)
    {
        StreamReader sr = new StreamReader(APath + Path.DirectorySeparatorChar + "db" + Path.DirectorySeparatorChar + "patches" + Path.DirectorySeparatorChar + "version.txt");
        string version = sr.ReadLine().Replace("-", ".");
        sr.Close();
        return version;
    }
       
    [Function("IsAutoGeneratedFile")]
    public static bool IsAutoGeneratedFile(string filename)
    {
      StreamReader sr = new StreamReader(filename.Replace("\"", ""));
      string line = sr.ReadLine();
      sr.Close();
      return line == null || line.ToLower().IndexOf("auto generated with nant") != -1;
    }        
]]>
    </code>
</script>



<!-- directories -->
<property name="dir.buildfiles" value="${OP::get-current-buildfile()}" 
          overwrite="false" />
<property name="dir.incdir" value="${directory::get-parent-directory(dir.buildfiles)}"
          overwrite="false" />
<property name="dir.root" value="${directory::get-parent-directory(dir.incdir)}"
          overwrite="false" />


<!-- Import user specific properties, if available -->
<property name="userconfig.file" value="${path::combine(dir.root,'OpenPetra.build.config.my')}" overwrite="false" />
<include buildfile="${userconfig.file}" verbose="true" if="${file::exists(userconfig.file)}"/>
<if test="${not file::exists(userconfig.file)}">
    <property name="userconfig.file" value="${path::combine(dir.root,'OpenPetra.build.config')}" overwrite="true" />
    <include buildfile="${userconfig.file}" verbose="true" if="${file::exists(userconfig.file)}"/>
</if>

<!-- Version number -->
<property name="ReleaseID" value="${OP::GetReleaseIDFromVersionTxt(dir.root)}" overwrite="false"  />

<!-- more directories -->
 <!-- incdir -->
<property name="dir.incdir.template" value="${path::combine(dir.incdir, 'template')}"
          overwrite="false" />
<property name="dir.incdir.template.etc" value="${path::combine(dir.incdir.template, 'etc')}"
          overwrite="false" />
<property name="dir.incdir.template.src" value="${path::combine(dir.incdir.template, 'src')}"
          overwrite="false" />
<property name="dir.incdir.cfg" value="${path::combine(dir.incdir, 'cfg')}"
          overwrite="false" />

 <!-- csharp -->
<property name="dir.csharp" value="${path::combine(dir.root, 'csharp')}"
          overwrite="false" />
<property name="dir.3rdParty" value="${path::combine(dir.csharp, 'ThirdParty')}"
          overwrite="false" />
 <!-- delivery -->
<property name="dir.delivery" value="${path::combine(dir.root, 'delivery')}"
          overwrite="false" />
<property name="dir.bin" value="${path::combine(dir.delivery, 'bin')}"
          overwrite="false" />
<property name="dir.setup" value="${path::combine(dir.delivery, 'setup')}"
          overwrite="false" />
<property name="dir.namespace.map" value="${path::combine(dir.delivery, 'nsMap')}"
          overwrite="false" />
 <!-- projectfiles -->
<property name="dir.projectfiles" value="${path::combine(dir.delivery, 'projects')}"
          overwrite="false" />
<property name="uuidFile" value="${path::combine(dir.projectfiles, 'projectuuid.map')}"
          overwrite="false" />
<property name="projectfiles.templates-list" value="vs2008,sharpdevelop3" overwrite="false" />
 <!-- webserver -->
<property name="dir.webserver" value="${path::combine(dir.delivery, 'webserver')}" overwrite="false" />
<property name="dir.webserver.bin" value="${path::combine(dir.webserver, 'bin')}" overwrite="false" />

<!-- build tools -->
<property name="devenv-name" value="sharpdevelop3"
          overwrite="false" />
<property name="msbuildtask.file" value="${nant::get-base-directory()}/extensions/common/neutral/NAntContrib/NAnt.Contrib.Tasks.dll"
          overwrite="false"/>
<property name="Configuration" value="DEBUG" overwrite="false"/>
          
 <!-- db -->
<property name="dir.db" value="${path::combine(dir.root, 'db')}"
          overwrite="false" />
<property name="dir.db.patches" value="${path::combine(dir.db, 'patches')}"
          overwrite="false" />
          
<!-- logdir -->
<property name="dir.log" value="${path::combine(dir.root, 'log')}" overwrite="false" />
<property name="dir.petraclient.log" value="${path::combine(dir.log, 'PetraClient')}" overwrite="false" />
<property name="dir.petraclient.definitions" value="${path::combine(dir.csharp, 'ICT/Petra/Definitions/UINavigation.yml')}" overwrite="false" />



<!-- etc files -->
<property name="dir.etc" value="${path::combine(dir.root, 'etc')}"
          overwrite="false" />
<property name="ClientConfigFile" value="${path::combine(dir.etc, 'Client.config')}"
          overwrite="false" />
<property name="ServerConfigFile" value="${path::combine(dir.etc, 'Server.config')}"
          overwrite="false" />
<property name="ServerAdminConfigFile" value="${dir.root}/etc/ServerAdmin.config"
          overwrite="false" />
<property name="WebServerConfigFile" value="${path::combine(dir.webserver, 'web.config')}"
          overwrite="false" />

<!-- Server configuration -->
<property name="Server.Port" value="9000" 
          overwrite="false" />
<property name="Server.DebugLevel" value="0" 
          overwrite="false" />
<property name="SelectedLanguage" value="en" overwrite="false" />

<!-- database -->
<property name="DBMS.Type" value="sqlite"
          overwrite="false" />
<property name="DBMS.DBName" value="openpetra"
          overwrite="false"/>
<property name="DBMS.UserName" value="petraserver"
          overwrite="false"/>
<property name="DBMS.Password" value="petra"
          overwrite="false" />


<!-- Set correct .NET platform -->
<property name="NETframework-version" value ="3.5" overwrite="false" />
<property name="nant.settings.currentframework" value="net-${NETframework-version}"
          overwrite="false" if="${platform::is-windows()}" />
<property name="nant.settings.currentframework" value="mono-${NETframework-version}" 
          overwrite="false" if="${platform::is-unix()}" />
<!-- compiler flags -->
<property name="compile.debug" value="true" 
          overwrite="false" />
<!-- value = anycpu causes trouble for SQLite. see bug 294 -->
<property name="compile.platform" value="x86"
          overwrite="false" />

<!-- path to custom NAnt tasks -->
<property name="Ict.Tools.NAntTasks.DLL" value="${path::combine(dir.bin,'Ict.Tools.NAntTasks.dll')}" 
          overwrite="false" />

<!-- generateORM props -->
<property name="tool-generateORM" value="${dir.bin}/Ict.Tools.GenerateORM.exe" overwrite="false" />
<property name="PetraXML.file" value="${dir.root}/db/petra.xml" overwrite="false" />

<!-- generateWinforms -->
<property name="tool-generateWinForms" value="${dir.bin}/GenerateWinForms.exe" overwrite="false" />
<!-- leave this empty for MS.net and AutoSize/TableLayoutPanel, mono-x.x needs it set! -->
<property name="GUILocalisation" value="" overwrite="false" unless="${string::starts-with(framework::get-target-framework(), 'mono-')}"/> 
<property name="GUILocalisation" value="en" overwrite="false" if="${string::starts-with(framework::get-target-framework(), 'mono-')}" />
    
<!-- loglevel -->
<property name="verbose" value="false"  overwrite="false" />

<!-- Copyright, po and Assembly information -->
<property name="info.copyright.holder" value="OM International" overwrite="false" />
<property name="info.productname" value="OpenPetra" overwrite="false" />
<property name="info.assembly.copyright" value="(c) ${info.copyright.holder} 2004-2011" overwrite="false" />
<property name="info.assembly.company" value="${info.copyright.holder}" overwrite="false" />
<property name="info.contact.email" value="info@OpenPetra.org" overwrite="false" />
<property name="info.pot.msgidbugs" value="${info.contact.email}" overwrite="false" />


<!-- external utilities dependend on platform -->
<property name="external.doxygen" value="doxygen" overwrite="false"/>
<property name="external.doxygen.configfile" value="${path::combine(dir.incdir.cfg, 'doxygen.cfg')}"
          overwrite="false" />

<if test="${'win32'==platform::get-name()}" >
  <!-- MS Windows specific -->
  <property name="external.Uncrustify" value="${environment::get-variable('ProgramFiles')}/uncrustify/uncrustify.exe" 
            overwrite="false"/>
  <property name="external.Poedit.gettext" value="${environment::get-variable('ProgramFiles')}/Poedit/bin/xgettext.exe" overwrite="false"/>
  <property name="external.Poedit.msgfmt" value="${environment::get-variable('ProgramFiles')}/Poedit/bin/msgfmt.exe" overwrite="false"/>
  <property name="external.Poedit.msgcat" value="${environment::get-variable('ProgramFiles')}/Poedit/bin/msgcat.exe" overwrite="false"/> 
            
</if>
<if test="${'win32'!=platform::get-name()}">
  <if test="${'unix'==platform::get-name()}">
    <!-- Unix specific -->
    <property name="external.Uncrustify" value="uncrustify" 
              overwrite="false"/>
    <property name="external.Poedit.gettext" value="/usr/bin/xgettext" overwrite="false"/>
    <property name="external.Poedit.msgfmt" value="/usr/bin/msgfmt" overwrite="false"/>
    <property name="external.Poedit.msgcat" value="/usr/bin/msgcat" overwrite="false"/>     
  </if>
  <if test="${'unix'!=platform::get-name()}">
    <echo>Unknown platform!</echo>
    <fail>Platform={$platform::get-name()} not supported! Expand the properties here!!</fail>
  </if>
</if>  


<!-- tempdir handling for build server -->
<property name="tempdir" value="${path::combine(dir.root,'tmp')}" overwrite="false" />
<mkdir dir="${tempdir}" failonerror="false"/>
<!-- All known variants for the temp directory -->
<setenv name="TMPDIR" value="${tempdir}"/>
<setenv name="TMP" value="${tempdir}"/>
<setenv name="TEMP" value="${tempdir}"/>

</project>