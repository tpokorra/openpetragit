// auto generated with nant generateORM
// Do not modify this file manually!
//
//
// DO NOT REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// @Authors:
//       auto generated
//
// Copyright 2004-2011 by OM International
//
// This file is part of OpenPetra.org.
//
// OpenPetra.org is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OpenPetra.org is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with OpenPetra.org.  If not, see <http://www.gnu.org/licenses/>.
//

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.Odbc;
using System.Runtime.Serialization;
using System.Xml;
using Ict.Common;
using Ict.Common.Data;

namespace Ict.Petra.Shared.MPersonnel.Personnel.Data
{

    /// This table contains the different codes that indicate where an applicant is in the application continuum.
    [Serializable()]
    public class PtApplicantStatusTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 193;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtApplicantStatus", "pt_applicant_status",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Applicant Status Code", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtApplicantStatusTable() :
                base("PtApplicantStatus")
        {
        }

        /// constructor
        public PtApplicantStatusTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtApplicantStatusTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the status of an applicant.
        public DataColumn ColumnCode;
        /// This describes the applicant status code.
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtApplicantStatusRow this[int i]
        {
            get
            {
                return ((PtApplicantStatusRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtApplicantStatusRow NewRowTyped(bool AWithDefaultValues)
        {
            PtApplicantStatusRow ret = ((PtApplicantStatusRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtApplicantStatusRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtApplicantStatusRow(builder);
        }

        /// get typed set of changes
        public PtApplicantStatusTable GetChangesTyped()
        {
            return ((PtApplicantStatusTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtApplicantStatus";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_applicant_status";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the different codes that indicate where an applicant is in the application continuum.
    [Serializable()]
    public class PtApplicantStatusRow : System.Data.DataRow
    {
        private PtApplicantStatusTable myTable;

        /// Constructor
        public PtApplicantStatusRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtApplicantStatusTable)(this.Table));
        }

        /// This code indicates the status of an applicant.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the applicant status code.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This decribes the type of application a person has submitted, e.g, Short-Term, Long-Term, or 2 years.
    [Serializable()]
    public class PtApplicationTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 194;
        /// used for generic TTypedDataTable functions
        public static short ColumnAppTypeNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAppTypeDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAppFormTypeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtApplicationType", "pt_application_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "AppTypeName", "pt_app_type_name_c", "Type Name", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "AppTypeDescr", "pt_app_type_descr_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Unassignable Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "AppFormType", "pt_app_form_type_c", "Form Type", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(5, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtApplicationTypeTable() :
                base("PtApplicationType")
        {
        }

        /// constructor
        public PtApplicationTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtApplicationTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Name of the application type, e.g. Short-Term, Long-Term.
        public DataColumn ColumnAppTypeName;
        /// Describes the application type.
        public DataColumn ColumnAppTypeDescr;
        /// Can this application type be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// This field lists the different forms that are used for the various application types.
        public DataColumn ColumnAppFormType;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_app_type_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_app_type_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_app_form_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAppTypeName = this.Columns["pt_app_type_name_c"];
            this.ColumnAppTypeDescr = this.Columns["pt_app_type_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnAppFormType = this.Columns["pt_app_form_type_c"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnAppTypeName};
        }

        /// Access a typed row by index
        public PtApplicationTypeRow this[int i]
        {
            get
            {
                return ((PtApplicationTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtApplicationTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PtApplicationTypeRow ret = ((PtApplicationTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtApplicationTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtApplicationTypeRow(builder);
        }

        /// get typed set of changes
        public PtApplicationTypeTable GetChangesTyped()
        {
            return ((PtApplicationTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtApplicationType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_application_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetAppTypeNameDBName()
        {
            return "pt_app_type_name_c";
        }

        /// get character length for column
        public static short GetAppTypeNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetAppTypeDescrDBName()
        {
            return "pt_app_type_descr_c";
        }

        /// get character length for column
        public static short GetAppTypeDescrLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAppFormTypeDBName()
        {
            return "pt_app_form_type_c";
        }

        /// get character length for column
        public static short GetAppFormTypeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This decribes the type of application a person has submitted, e.g, Short-Term, Long-Term, or 2 years.
    [Serializable()]
    public class PtApplicationTypeRow : System.Data.DataRow
    {
        private PtApplicationTypeTable myTable;

        /// Constructor
        public PtApplicationTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtApplicationTypeTable)(this.Table));
        }

        /// Name of the application type, e.g. Short-Term, Long-Term.
        public String AppTypeName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAppTypeName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAppTypeName)
                            || (((String)(this[this.myTable.ColumnAppTypeName])) != value)))
                {
                    this[this.myTable.ColumnAppTypeName] = value;
                }
            }
        }

        /// Describes the application type.
        public String AppTypeDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAppTypeDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAppTypeDescr)
                            || (((String)(this[this.myTable.ColumnAppTypeDescr])) != value)))
                {
                    this[this.myTable.ColumnAppTypeDescr] = value;
                }
            }
        }

        /// Can this application type be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// This field lists the different forms that are used for the various application types.
        public String AppFormType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAppFormType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAppFormType)
                            || (((String)(this[this.myTable.ColumnAppFormType])) != value)))
                {
                    this[this.myTable.ColumnAppFormType] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnAppTypeName);
            this.SetNull(this.myTable.ColumnAppTypeDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this.SetNull(this.myTable.ColumnAppFormType);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsAppTypeNameNull()
        {
            return this.IsNull(this.myTable.ColumnAppTypeName);
        }

        /// assign NULL value
        public void SetAppTypeNameNull()
        {
            this.SetNull(this.myTable.ColumnAppTypeName);
        }

        /// test for NULL value
        public bool IsAppTypeDescrNull()
        {
            return this.IsNull(this.myTable.ColumnAppTypeDescr);
        }

        /// assign NULL value
        public void SetAppTypeDescrNull()
        {
            this.SetNull(this.myTable.ColumnAppTypeDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsAppFormTypeNull()
        {
            return this.IsNull(this.myTable.ColumnAppFormType);
        }

        /// assign NULL value
        public void SetAppFormTypeNull()
        {
            this.SetNull(this.myTable.ColumnAppFormType);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This list the various methods by which a person learns of this organisation. This table can be changed to fit any field's particular awareness programs.
    [Serializable()]
    public class PtContactTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 195;
        /// used for generic TTypedDataTable functions
        public static short ColumnContactNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnContactDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtContact", "pt_contact",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "ContactName", "pt_contact_name_c", "Contact Name", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(1, "ContactDescr", "pt_contact_descr_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Unassignable Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtContactTable() :
                base("PtContact")
        {
        }

        /// constructor
        public PtContactTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtContactTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Name of the contact, e.g.  Friend, Program, Church.
        public DataColumn ColumnContactName;
        /// Describes the contact.
        public DataColumn ColumnContactDescr;
        /// Can this position be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_contact_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_contact_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnContactName = this.Columns["pt_contact_name_c"];
            this.ColumnContactDescr = this.Columns["pt_contact_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnContactName};
        }

        /// Access a typed row by index
        public PtContactRow this[int i]
        {
            get
            {
                return ((PtContactRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtContactRow NewRowTyped(bool AWithDefaultValues)
        {
            PtContactRow ret = ((PtContactRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtContactRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtContactRow(builder);
        }

        /// get typed set of changes
        public PtContactTable GetChangesTyped()
        {
            return ((PtContactTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtContact";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_contact";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetContactNameDBName()
        {
            return "pt_contact_name_c";
        }

        /// get character length for column
        public static short GetContactNameLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetContactDescrDBName()
        {
            return "pt_contact_descr_c";
        }

        /// get character length for column
        public static short GetContactDescrLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This list the various methods by which a person learns of this organisation. This table can be changed to fit any field's particular awareness programs.
    [Serializable()]
    public class PtContactRow : System.Data.DataRow
    {
        private PtContactTable myTable;

        /// Constructor
        public PtContactRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtContactTable)(this.Table));
        }

        /// Name of the contact, e.g.  Friend, Program, Church.
        public String ContactName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactName)
                            || (((String)(this[this.myTable.ColumnContactName])) != value)))
                {
                    this[this.myTable.ColumnContactName] = value;
                }
            }
        }

        /// Describes the contact.
        public String ContactDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactDescr)
                            || (((String)(this[this.myTable.ColumnContactDescr])) != value)))
                {
                    this[this.myTable.ColumnContactDescr] = value;
                }
            }
        }

        /// Can this position be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnContactName);
            this.SetNull(this.myTable.ColumnContactDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsContactNameNull()
        {
            return this.IsNull(this.myTable.ColumnContactName);
        }

        /// assign NULL value
        public void SetContactNameNull()
        {
            this.SetNull(this.myTable.ColumnContactName);
        }

        /// test for NULL value
        public bool IsContactDescrNull()
        {
            return this.IsNull(this.myTable.ColumnContactDescr);
        }

        /// assign NULL value
        public void SetContactDescrNull()
        {
            this.SetNull(this.myTable.ColumnContactDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// The first part of any application which contains data common to either short term or long term applications.
    [Serializable()]
    public class PmGeneralApplicationTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 196;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnApplicationKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAppTypeNameId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnOldLinkId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppPossSrvUnitKeyId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppDeleteFlagId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenApplicantTypeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenApplicationStatusId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnClosedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnClosedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateClosedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenApplicationOnHoldId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenApplicationHoldReasonId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenCancelledAppId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppCancelReasonId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppCancelledId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppSrvFldAcceptId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppRecvgFldAcceptId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppSendFldAcceptId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppSendFldAcceptDateId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenContact1Id = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenContact2Id = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppUpdateId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenYearProgramId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenAppCurrencyCodeId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnPlacementPartnerKeyId = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnRawApplicationDataId = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 30;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 31;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 32;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 33;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 34;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmGeneralApplication", "pm_general_application",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "ApplicationKey", "pm_application_key_i", "Application Key", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(2, "RegistrationOffice", "pm_registration_office_n", "Registration Office", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(3, "GenAppDate", "pm_gen_app_date_d", "Application Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(4, "AppTypeName", "pt_app_type_name_c", "Application Type", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(5, "OldLink", "pm_old_link_c", "Xyz_tbd", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(6, "GenAppPossSrvUnitKey", "pm_gen_app_poss_srv_unit_key_n", "Possible Fld.", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(7, "GenAppDeleteFlag", "pm_gen_app_delete_flag_l", "Delete Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(8, "GenApplicantType", "pm_gen_applicant_type_c", "Applicant Type", OdbcType.VarChar, 30, true),
                    new TTypedColumnInfo(9, "GenApplicationStatus", "pm_gen_application_status_c", "Application Status", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(10, "Closed", "pm_closed_l", "Closed?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(11, "ClosedBy", "pm_closed_by_c", "Closed by", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "DateClosed", "pm_date_closed_d", "Closing Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "GenApplicationOnHold", "pm_gen_application_on_hold_l", "Hold?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(14, "GenApplicationHoldReason", "pm_gen_application_hold_reason_c", "Reason", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(15, "GenCancelledApp", "pm_gen_cancelled_app_l", "Application Cancelled?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(16, "GenAppCancelReason", "pm_gen_app_cancel_reason_c", "Reason", OdbcType.VarChar, 54, false),
                    new TTypedColumnInfo(17, "GenAppCancelled", "pm_gen_app_cancelled_d", "Cancellation Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(18, "GenAppSrvFldAccept", "pm_gen_app_srv_fld_accept_l", "Serving Field Acceptance?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(19, "GenAppRecvgFldAccept", "pm_gen_app_recvg_fld_accept_d", "Receiving Field Acceptance Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(20, "GenAppSendFldAccept", "pm_gen_app_send_fld_accept_l", "Sending Field Acceptance?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(21, "GenAppSendFldAcceptDate", "pm_gen_app_send_fld_accept_d", "Sending Field Accept Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(22, "GenContact1", "pm_gen_contact1_c", "Contact-1", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(23, "GenContact2", "pm_gen_contact2_c", "Contact-2", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(24, "GenAppUpdate", "pm_gen_app_update_d", "Date Updated", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(25, "GenYearProgram", "pm_gen_year_program_c", "Possible Year Program?", OdbcType.VarChar, 2, false),
                    new TTypedColumnInfo(26, "Comment", "pm_comment_c", "Application Comment", OdbcType.VarChar, 2000, false),
                    new TTypedColumnInfo(27, "GenAppCurrencyCode", "pm_gen_app_currency_code_c", "Currency Code for Application Amounts", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(28, "PlacementPartnerKey", "pm_placement_partner_key_n", "Placement Person", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(29, "RawApplicationData", "pm_raw_application_data_c", "pm_raw_application_data_c", OdbcType.VarChar, 30000, false),
                    new TTypedColumnInfo(30, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(31, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(32, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(33, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(34, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }, new int[] {
                    0, 3, 4, 5
                }));
            return true;
        }

        /// constructor
        public PmGeneralApplicationTable() :
                base("PmGeneralApplication")
        {
        }

        /// constructor
        public PmGeneralApplicationTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmGeneralApplicationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Key to uniquely identify application
        public DataColumn ColumnApplicationKey;
        /// Partner key of office by which application was entered.
        public DataColumn ColumnRegistrationOffice;
        /// Date of application.
        public DataColumn ColumnGenAppDate;
        /// Describes what the application is for, eg. conference, year program.
        public DataColumn ColumnAppTypeName;
        /// TODO: this field is a combination of registration office and application number. might not be needed???
        public DataColumn ColumnOldLink;
        /// This is the possible field or team of service.
        public DataColumn ColumnGenAppPossSrvUnitKey;
        /// This field will not appear on the screen but will be updated when someone chooses to delete a record. Rather that an actual deletion, the record will be 'marked' for deletion after an agreed upon interval.
        public DataColumn ColumnGenAppDeleteFlag;
        /// Describes the applicant, eg. volunteer, staff, speaker.
        public DataColumn ColumnGenApplicantType;
        /// Indicates the status of the application.
        public DataColumn ColumnGenApplicationStatus;
        /// Indicates if the application is closed.
        public DataColumn ColumnClosed;
        /// This identifies the user that closed the application
        public DataColumn ColumnClosedBy;
        /// This is the date the application was closed.
        public DataColumn ColumnDateClosed;
        /// Indicates if the application is on hold.
        public DataColumn ColumnGenApplicationOnHold;
        /// Comment on why the application is on hold.
        public DataColumn ColumnGenApplicationHoldReason;
        /// Indicates if the application process has been cancelled.
        public DataColumn ColumnGenCancelledApp;
        /// Comment on why the application is on hold.
        public DataColumn ColumnGenAppCancelReason;
        /// This is the date the application was cancelled.
        public DataColumn ColumnGenAppCancelled;
        /// Describes if the applicant has been accepted by the serving field.
        public DataColumn ColumnGenAppSrvFldAccept;
        /// This is the date the receiving field accepted the applicant.
        public DataColumn ColumnGenAppRecvgFldAccept;
        /// Describes if the applicant has been accepted by the sending field.
        public DataColumn ColumnGenAppSendFldAccept;
        /// This is the date the sending field accepted the applicant.
        public DataColumn ColumnGenAppSendFldAcceptDate;
        /// This field indicates how they were influenced to apply with us.
        public DataColumn ColumnGenContact1;
        /// This field indicates how they were influenced to apply with us.
        public DataColumn ColumnGenContact2;
        /// Indicates the date the record was last updated.
        public DataColumn ColumnGenAppUpdate;
        /// Indicates if the person may consider joining the year program.
        public DataColumn ColumnGenYearProgram;
        /// Sometimes there are extra comments of preferences that are related to an application.  These can be entered here.
        public DataColumn ColumnComment;
        /// This is the currency that is used for amounts listed in this application
        public DataColumn ColumnGenAppCurrencyCode;
        /// This is the placement person handling this application.
        public DataColumn ColumnPlacementPartnerKey;
        /// stores the plain data received from the browser in JSON format
        public DataColumn ColumnRawApplicationData;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_application_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_app_type_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_old_link_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_poss_srv_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_delete_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_applicant_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_application_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_closed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_closed_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_date_closed_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_application_on_hold_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_application_hold_reason_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_cancelled_app_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_cancel_reason_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_cancelled_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_srv_fld_accept_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_recvg_fld_accept_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_send_fld_accept_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_send_fld_accept_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_contact1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_contact2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_update_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_year_program_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_app_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_placement_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_raw_application_data_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnApplicationKey = this.Columns["pm_application_key_i"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnGenAppDate = this.Columns["pm_gen_app_date_d"];
            this.ColumnAppTypeName = this.Columns["pt_app_type_name_c"];
            this.ColumnOldLink = this.Columns["pm_old_link_c"];
            this.ColumnGenAppPossSrvUnitKey = this.Columns["pm_gen_app_poss_srv_unit_key_n"];
            this.ColumnGenAppDeleteFlag = this.Columns["pm_gen_app_delete_flag_l"];
            this.ColumnGenApplicantType = this.Columns["pm_gen_applicant_type_c"];
            this.ColumnGenApplicationStatus = this.Columns["pm_gen_application_status_c"];
            this.ColumnClosed = this.Columns["pm_closed_l"];
            this.ColumnClosedBy = this.Columns["pm_closed_by_c"];
            this.ColumnDateClosed = this.Columns["pm_date_closed_d"];
            this.ColumnGenApplicationOnHold = this.Columns["pm_gen_application_on_hold_l"];
            this.ColumnGenApplicationHoldReason = this.Columns["pm_gen_application_hold_reason_c"];
            this.ColumnGenCancelledApp = this.Columns["pm_gen_cancelled_app_l"];
            this.ColumnGenAppCancelReason = this.Columns["pm_gen_app_cancel_reason_c"];
            this.ColumnGenAppCancelled = this.Columns["pm_gen_app_cancelled_d"];
            this.ColumnGenAppSrvFldAccept = this.Columns["pm_gen_app_srv_fld_accept_l"];
            this.ColumnGenAppRecvgFldAccept = this.Columns["pm_gen_app_recvg_fld_accept_d"];
            this.ColumnGenAppSendFldAccept = this.Columns["pm_gen_app_send_fld_accept_l"];
            this.ColumnGenAppSendFldAcceptDate = this.Columns["pm_gen_app_send_fld_accept_d"];
            this.ColumnGenContact1 = this.Columns["pm_gen_contact1_c"];
            this.ColumnGenContact2 = this.Columns["pm_gen_contact2_c"];
            this.ColumnGenAppUpdate = this.Columns["pm_gen_app_update_d"];
            this.ColumnGenYearProgram = this.Columns["pm_gen_year_program_c"];
            this.ColumnComment = this.Columns["pm_comment_c"];
            this.ColumnGenAppCurrencyCode = this.Columns["pm_gen_app_currency_code_c"];
            this.ColumnPlacementPartnerKey = this.Columns["pm_placement_partner_key_n"];
            this.ColumnRawApplicationData = this.Columns["pm_raw_application_data_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnPartnerKey,ColumnApplicationKey,ColumnRegistrationOffice};
        }

        /// Access a typed row by index
        public PmGeneralApplicationRow this[int i]
        {
            get
            {
                return ((PmGeneralApplicationRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmGeneralApplicationRow NewRowTyped(bool AWithDefaultValues)
        {
            PmGeneralApplicationRow ret = ((PmGeneralApplicationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmGeneralApplicationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmGeneralApplicationRow(builder);
        }

        /// get typed set of changes
        public PmGeneralApplicationTable GetChangesTyped()
        {
            return ((PmGeneralApplicationTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmGeneralApplication";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_general_application";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetApplicationKeyDBName()
        {
            return "pm_application_key_i";
        }

        /// get character length for column
        public static short GetApplicationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppDateDBName()
        {
            return "pm_gen_app_date_d";
        }

        /// get character length for column
        public static short GetGenAppDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAppTypeNameDBName()
        {
            return "pt_app_type_name_c";
        }

        /// get character length for column
        public static short GetAppTypeNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetOldLinkDBName()
        {
            return "pm_old_link_c";
        }

        /// get character length for column
        public static short GetOldLinkLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppPossSrvUnitKeyDBName()
        {
            return "pm_gen_app_poss_srv_unit_key_n";
        }

        /// get character length for column
        public static short GetGenAppPossSrvUnitKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppDeleteFlagDBName()
        {
            return "pm_gen_app_delete_flag_l";
        }

        /// get character length for column
        public static short GetGenAppDeleteFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenApplicantTypeDBName()
        {
            return "pm_gen_applicant_type_c";
        }

        /// get character length for column
        public static short GetGenApplicantTypeLength()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetGenApplicationStatusDBName()
        {
            return "pm_gen_application_status_c";
        }

        /// get character length for column
        public static short GetGenApplicationStatusLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetClosedDBName()
        {
            return "pm_closed_l";
        }

        /// get character length for column
        public static short GetClosedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetClosedByDBName()
        {
            return "pm_closed_by_c";
        }

        /// get character length for column
        public static short GetClosedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateClosedDBName()
        {
            return "pm_date_closed_d";
        }

        /// get character length for column
        public static short GetDateClosedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenApplicationOnHoldDBName()
        {
            return "pm_gen_application_on_hold_l";
        }

        /// get character length for column
        public static short GetGenApplicationOnHoldLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenApplicationHoldReasonDBName()
        {
            return "pm_gen_application_hold_reason_c";
        }

        /// get character length for column
        public static short GetGenApplicationHoldReasonLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetGenCancelledAppDBName()
        {
            return "pm_gen_cancelled_app_l";
        }

        /// get character length for column
        public static short GetGenCancelledAppLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppCancelReasonDBName()
        {
            return "pm_gen_app_cancel_reason_c";
        }

        /// get character length for column
        public static short GetGenAppCancelReasonLength()
        {
            return 54;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppCancelledDBName()
        {
            return "pm_gen_app_cancelled_d";
        }

        /// get character length for column
        public static short GetGenAppCancelledLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppSrvFldAcceptDBName()
        {
            return "pm_gen_app_srv_fld_accept_l";
        }

        /// get character length for column
        public static short GetGenAppSrvFldAcceptLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppRecvgFldAcceptDBName()
        {
            return "pm_gen_app_recvg_fld_accept_d";
        }

        /// get character length for column
        public static short GetGenAppRecvgFldAcceptLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppSendFldAcceptDBName()
        {
            return "pm_gen_app_send_fld_accept_l";
        }

        /// get character length for column
        public static short GetGenAppSendFldAcceptLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppSendFldAcceptDateDBName()
        {
            return "pm_gen_app_send_fld_accept_d";
        }

        /// get character length for column
        public static short GetGenAppSendFldAcceptDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenContact1DBName()
        {
            return "pm_gen_contact1_c";
        }

        /// get character length for column
        public static short GetGenContact1Length()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetGenContact2DBName()
        {
            return "pm_gen_contact2_c";
        }

        /// get character length for column
        public static short GetGenContact2Length()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppUpdateDBName()
        {
            return "pm_gen_app_update_d";
        }

        /// get character length for column
        public static short GetGenAppUpdateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenYearProgramDBName()
        {
            return "pm_gen_year_program_c";
        }

        /// get character length for column
        public static short GetGenYearProgramLength()
        {
            return 2;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "pm_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 2000;
        }

        /// get the name of the field in the database for this column
        public static string GetGenAppCurrencyCodeDBName()
        {
            return "pm_gen_app_currency_code_c";
        }

        /// get character length for column
        public static short GetGenAppCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetPlacementPartnerKeyDBName()
        {
            return "pm_placement_partner_key_n";
        }

        /// get character length for column
        public static short GetPlacementPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetRawApplicationDataDBName()
        {
            return "pm_raw_application_data_c";
        }

        /// get character length for column
        public static short GetRawApplicationDataLength()
        {
            return 30000;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// The first part of any application which contains data common to either short term or long term applications.
    [Serializable()]
    public class PmGeneralApplicationRow : System.Data.DataRow
    {
        private PmGeneralApplicationTable myTable;

        /// Constructor
        public PmGeneralApplicationRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmGeneralApplicationTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Key to uniquely identify application
        public Int32 ApplicationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApplicationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApplicationKey)
                            || (((Int32)(this[this.myTable.ColumnApplicationKey])) != value)))
                {
                    this[this.myTable.ColumnApplicationKey] = value;
                }
            }
        }

        /// Partner key of office by which application was entered.
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// Date of application.
        public System.DateTime GenAppDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppDate)
                            || (((System.DateTime)(this[this.myTable.ColumnGenAppDate])) != value)))
                {
                    this[this.myTable.ColumnGenAppDate] = value;
                }
            }
        }

        /// Describes what the application is for, eg. conference, year program.
        public String AppTypeName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAppTypeName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAppTypeName)
                            || (((String)(this[this.myTable.ColumnAppTypeName])) != value)))
                {
                    this[this.myTable.ColumnAppTypeName] = value;
                }
            }
        }

        /// TODO: this field is a combination of registration office and application number. might not be needed???
        public String OldLink
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOldLink.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOldLink)
                            || (((String)(this[this.myTable.ColumnOldLink])) != value)))
                {
                    this[this.myTable.ColumnOldLink] = value;
                }
            }
        }

        /// This is the possible field or team of service.
        public Int64 GenAppPossSrvUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppPossSrvUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppPossSrvUnitKey)
                            || (((Int64)(this[this.myTable.ColumnGenAppPossSrvUnitKey])) != value)))
                {
                    this[this.myTable.ColumnGenAppPossSrvUnitKey] = value;
                }
            }
        }

        /// This field will not appear on the screen but will be updated when someone chooses to delete a record. Rather that an actual deletion, the record will be 'marked' for deletion after an agreed upon interval.
        public Boolean GenAppDeleteFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppDeleteFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppDeleteFlag)
                            || (((Boolean)(this[this.myTable.ColumnGenAppDeleteFlag])) != value)))
                {
                    this[this.myTable.ColumnGenAppDeleteFlag] = value;
                }
            }
        }

        /// Describes the applicant, eg. volunteer, staff, speaker.
        public String GenApplicantType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenApplicantType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenApplicantType)
                            || (((String)(this[this.myTable.ColumnGenApplicantType])) != value)))
                {
                    this[this.myTable.ColumnGenApplicantType] = value;
                }
            }
        }

        /// Indicates the status of the application.
        public String GenApplicationStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenApplicationStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenApplicationStatus)
                            || (((String)(this[this.myTable.ColumnGenApplicationStatus])) != value)))
                {
                    this[this.myTable.ColumnGenApplicationStatus] = value;
                }
            }
        }

        /// Indicates if the application is closed.
        public Boolean Closed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnClosed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnClosed)
                            || (((Boolean)(this[this.myTable.ColumnClosed])) != value)))
                {
                    this[this.myTable.ColumnClosed] = value;
                }
            }
        }

        /// This identifies the user that closed the application
        public String ClosedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnClosedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnClosedBy)
                            || (((String)(this[this.myTable.ColumnClosedBy])) != value)))
                {
                    this[this.myTable.ColumnClosedBy] = value;
                }
            }
        }

        /// This is the date the application was closed.
        public System.DateTime? DateClosed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateClosed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateClosed)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateClosed])) != value)))
                {
                    this[this.myTable.ColumnDateClosed] = value;
                }
            }
        }

        /// Indicates if the application is on hold.
        public Boolean GenApplicationOnHold
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenApplicationOnHold.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenApplicationOnHold)
                            || (((Boolean)(this[this.myTable.ColumnGenApplicationOnHold])) != value)))
                {
                    this[this.myTable.ColumnGenApplicationOnHold] = value;
                }
            }
        }

        /// Comment on why the application is on hold.
        public String GenApplicationHoldReason
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenApplicationHoldReason.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenApplicationHoldReason)
                            || (((String)(this[this.myTable.ColumnGenApplicationHoldReason])) != value)))
                {
                    this[this.myTable.ColumnGenApplicationHoldReason] = value;
                }
            }
        }

        /// Indicates if the application process has been cancelled.
        public Boolean GenCancelledApp
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenCancelledApp.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenCancelledApp)
                            || (((Boolean)(this[this.myTable.ColumnGenCancelledApp])) != value)))
                {
                    this[this.myTable.ColumnGenCancelledApp] = value;
                }
            }
        }

        /// Comment on why the application is on hold.
        public String GenAppCancelReason
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppCancelReason.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppCancelReason)
                            || (((String)(this[this.myTable.ColumnGenAppCancelReason])) != value)))
                {
                    this[this.myTable.ColumnGenAppCancelReason] = value;
                }
            }
        }

        /// This is the date the application was cancelled.
        public System.DateTime? GenAppCancelled
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppCancelled.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppCancelled)
                            || (((System.DateTime?)(this[this.myTable.ColumnGenAppCancelled])) != value)))
                {
                    this[this.myTable.ColumnGenAppCancelled] = value;
                }
            }
        }

        /// Describes if the applicant has been accepted by the serving field.
        public Boolean GenAppSrvFldAccept
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppSrvFldAccept.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppSrvFldAccept)
                            || (((Boolean)(this[this.myTable.ColumnGenAppSrvFldAccept])) != value)))
                {
                    this[this.myTable.ColumnGenAppSrvFldAccept] = value;
                }
            }
        }

        /// This is the date the receiving field accepted the applicant.
        public System.DateTime? GenAppRecvgFldAccept
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppRecvgFldAccept.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppRecvgFldAccept)
                            || (((System.DateTime?)(this[this.myTable.ColumnGenAppRecvgFldAccept])) != value)))
                {
                    this[this.myTable.ColumnGenAppRecvgFldAccept] = value;
                }
            }
        }

        /// Describes if the applicant has been accepted by the sending field.
        public Boolean GenAppSendFldAccept
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppSendFldAccept.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppSendFldAccept)
                            || (((Boolean)(this[this.myTable.ColumnGenAppSendFldAccept])) != value)))
                {
                    this[this.myTable.ColumnGenAppSendFldAccept] = value;
                }
            }
        }

        /// This is the date the sending field accepted the applicant.
        public System.DateTime? GenAppSendFldAcceptDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppSendFldAcceptDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppSendFldAcceptDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnGenAppSendFldAcceptDate])) != value)))
                {
                    this[this.myTable.ColumnGenAppSendFldAcceptDate] = value;
                }
            }
        }

        /// This field indicates how they were influenced to apply with us.
        public String GenContact1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenContact1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenContact1)
                            || (((String)(this[this.myTable.ColumnGenContact1])) != value)))
                {
                    this[this.myTable.ColumnGenContact1] = value;
                }
            }
        }

        /// This field indicates how they were influenced to apply with us.
        public String GenContact2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenContact2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenContact2)
                            || (((String)(this[this.myTable.ColumnGenContact2])) != value)))
                {
                    this[this.myTable.ColumnGenContact2] = value;
                }
            }
        }

        /// Indicates the date the record was last updated.
        public System.DateTime? GenAppUpdate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppUpdate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppUpdate)
                            || (((System.DateTime?)(this[this.myTable.ColumnGenAppUpdate])) != value)))
                {
                    this[this.myTable.ColumnGenAppUpdate] = value;
                }
            }
        }

        /// Indicates if the person may consider joining the year program.
        public String GenYearProgram
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenYearProgram.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenYearProgram)
                            || (((String)(this[this.myTable.ColumnGenYearProgram])) != value)))
                {
                    this[this.myTable.ColumnGenYearProgram] = value;
                }
            }
        }

        /// Sometimes there are extra comments of preferences that are related to an application.  These can be entered here.
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// This is the currency that is used for amounts listed in this application
        public String GenAppCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenAppCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenAppCurrencyCode)
                            || (((String)(this[this.myTable.ColumnGenAppCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnGenAppCurrencyCode] = value;
                }
            }
        }

        /// This is the placement person handling this application.
        public Int64 PlacementPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPlacementPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPlacementPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPlacementPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPlacementPartnerKey] = value;
                }
            }
        }

        /// stores the plain data received from the browser in JSON format
        public String RawApplicationData
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRawApplicationData.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRawApplicationData)
                            || (((String)(this[this.myTable.ColumnRawApplicationData])) != value)))
                {
                    this[this.myTable.ColumnRawApplicationData] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnApplicationKey.Ordinal] = 0;
            this[this.myTable.ColumnRegistrationOffice.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnGenAppDate);
            this.SetNull(this.myTable.ColumnAppTypeName);
            this.SetNull(this.myTable.ColumnOldLink);
            this.SetNull(this.myTable.ColumnGenAppPossSrvUnitKey);
            this[this.myTable.ColumnGenAppDeleteFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnGenApplicantType);
            this.SetNull(this.myTable.ColumnGenApplicationStatus);
            this[this.myTable.ColumnClosed.Ordinal] = false;
            this.SetNull(this.myTable.ColumnClosedBy);
            this.SetNull(this.myTable.ColumnDateClosed);
            this[this.myTable.ColumnGenApplicationOnHold.Ordinal] = false;
            this.SetNull(this.myTable.ColumnGenApplicationHoldReason);
            this[this.myTable.ColumnGenCancelledApp.Ordinal] = false;
            this.SetNull(this.myTable.ColumnGenAppCancelReason);
            this.SetNull(this.myTable.ColumnGenAppCancelled);
            this[this.myTable.ColumnGenAppSrvFldAccept.Ordinal] = false;
            this.SetNull(this.myTable.ColumnGenAppRecvgFldAccept);
            this[this.myTable.ColumnGenAppSendFldAccept.Ordinal] = false;
            this.SetNull(this.myTable.ColumnGenAppSendFldAcceptDate);
            this.SetNull(this.myTable.ColumnGenContact1);
            this.SetNull(this.myTable.ColumnGenContact2);
            this.SetNull(this.myTable.ColumnGenAppUpdate);
            this.SetNull(this.myTable.ColumnGenYearProgram);
            this.SetNull(this.myTable.ColumnComment);
            this.SetNull(this.myTable.ColumnGenAppCurrencyCode);
            this.SetNull(this.myTable.ColumnPlacementPartnerKey);
            this.SetNull(this.myTable.ColumnRawApplicationData);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsApplicationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnApplicationKey);
        }

        /// assign NULL value
        public void SetApplicationKeyNull()
        {
            this.SetNull(this.myTable.ColumnApplicationKey);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsGenAppDateNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppDate);
        }

        /// assign NULL value
        public void SetGenAppDateNull()
        {
            this.SetNull(this.myTable.ColumnGenAppDate);
        }

        /// test for NULL value
        public bool IsAppTypeNameNull()
        {
            return this.IsNull(this.myTable.ColumnAppTypeName);
        }

        /// assign NULL value
        public void SetAppTypeNameNull()
        {
            this.SetNull(this.myTable.ColumnAppTypeName);
        }

        /// test for NULL value
        public bool IsOldLinkNull()
        {
            return this.IsNull(this.myTable.ColumnOldLink);
        }

        /// assign NULL value
        public void SetOldLinkNull()
        {
            this.SetNull(this.myTable.ColumnOldLink);
        }

        /// test for NULL value
        public bool IsGenAppPossSrvUnitKeyNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppPossSrvUnitKey);
        }

        /// assign NULL value
        public void SetGenAppPossSrvUnitKeyNull()
        {
            this.SetNull(this.myTable.ColumnGenAppPossSrvUnitKey);
        }

        /// test for NULL value
        public bool IsGenAppDeleteFlagNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppDeleteFlag);
        }

        /// assign NULL value
        public void SetGenAppDeleteFlagNull()
        {
            this.SetNull(this.myTable.ColumnGenAppDeleteFlag);
        }

        /// test for NULL value
        public bool IsGenApplicantTypeNull()
        {
            return this.IsNull(this.myTable.ColumnGenApplicantType);
        }

        /// assign NULL value
        public void SetGenApplicantTypeNull()
        {
            this.SetNull(this.myTable.ColumnGenApplicantType);
        }

        /// test for NULL value
        public bool IsGenApplicationStatusNull()
        {
            return this.IsNull(this.myTable.ColumnGenApplicationStatus);
        }

        /// assign NULL value
        public void SetGenApplicationStatusNull()
        {
            this.SetNull(this.myTable.ColumnGenApplicationStatus);
        }

        /// test for NULL value
        public bool IsClosedNull()
        {
            return this.IsNull(this.myTable.ColumnClosed);
        }

        /// assign NULL value
        public void SetClosedNull()
        {
            this.SetNull(this.myTable.ColumnClosed);
        }

        /// test for NULL value
        public bool IsClosedByNull()
        {
            return this.IsNull(this.myTable.ColumnClosedBy);
        }

        /// assign NULL value
        public void SetClosedByNull()
        {
            this.SetNull(this.myTable.ColumnClosedBy);
        }

        /// test for NULL value
        public bool IsDateClosedNull()
        {
            return this.IsNull(this.myTable.ColumnDateClosed);
        }

        /// assign NULL value
        public void SetDateClosedNull()
        {
            this.SetNull(this.myTable.ColumnDateClosed);
        }

        /// test for NULL value
        public bool IsGenApplicationOnHoldNull()
        {
            return this.IsNull(this.myTable.ColumnGenApplicationOnHold);
        }

        /// assign NULL value
        public void SetGenApplicationOnHoldNull()
        {
            this.SetNull(this.myTable.ColumnGenApplicationOnHold);
        }

        /// test for NULL value
        public bool IsGenApplicationHoldReasonNull()
        {
            return this.IsNull(this.myTable.ColumnGenApplicationHoldReason);
        }

        /// assign NULL value
        public void SetGenApplicationHoldReasonNull()
        {
            this.SetNull(this.myTable.ColumnGenApplicationHoldReason);
        }

        /// test for NULL value
        public bool IsGenCancelledAppNull()
        {
            return this.IsNull(this.myTable.ColumnGenCancelledApp);
        }

        /// assign NULL value
        public void SetGenCancelledAppNull()
        {
            this.SetNull(this.myTable.ColumnGenCancelledApp);
        }

        /// test for NULL value
        public bool IsGenAppCancelReasonNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppCancelReason);
        }

        /// assign NULL value
        public void SetGenAppCancelReasonNull()
        {
            this.SetNull(this.myTable.ColumnGenAppCancelReason);
        }

        /// test for NULL value
        public bool IsGenAppCancelledNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppCancelled);
        }

        /// assign NULL value
        public void SetGenAppCancelledNull()
        {
            this.SetNull(this.myTable.ColumnGenAppCancelled);
        }

        /// test for NULL value
        public bool IsGenAppSrvFldAcceptNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppSrvFldAccept);
        }

        /// assign NULL value
        public void SetGenAppSrvFldAcceptNull()
        {
            this.SetNull(this.myTable.ColumnGenAppSrvFldAccept);
        }

        /// test for NULL value
        public bool IsGenAppRecvgFldAcceptNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppRecvgFldAccept);
        }

        /// assign NULL value
        public void SetGenAppRecvgFldAcceptNull()
        {
            this.SetNull(this.myTable.ColumnGenAppRecvgFldAccept);
        }

        /// test for NULL value
        public bool IsGenAppSendFldAcceptNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppSendFldAccept);
        }

        /// assign NULL value
        public void SetGenAppSendFldAcceptNull()
        {
            this.SetNull(this.myTable.ColumnGenAppSendFldAccept);
        }

        /// test for NULL value
        public bool IsGenAppSendFldAcceptDateNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppSendFldAcceptDate);
        }

        /// assign NULL value
        public void SetGenAppSendFldAcceptDateNull()
        {
            this.SetNull(this.myTable.ColumnGenAppSendFldAcceptDate);
        }

        /// test for NULL value
        public bool IsGenContact1Null()
        {
            return this.IsNull(this.myTable.ColumnGenContact1);
        }

        /// assign NULL value
        public void SetGenContact1Null()
        {
            this.SetNull(this.myTable.ColumnGenContact1);
        }

        /// test for NULL value
        public bool IsGenContact2Null()
        {
            return this.IsNull(this.myTable.ColumnGenContact2);
        }

        /// assign NULL value
        public void SetGenContact2Null()
        {
            this.SetNull(this.myTable.ColumnGenContact2);
        }

        /// test for NULL value
        public bool IsGenAppUpdateNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppUpdate);
        }

        /// assign NULL value
        public void SetGenAppUpdateNull()
        {
            this.SetNull(this.myTable.ColumnGenAppUpdate);
        }

        /// test for NULL value
        public bool IsGenYearProgramNull()
        {
            return this.IsNull(this.myTable.ColumnGenYearProgram);
        }

        /// assign NULL value
        public void SetGenYearProgramNull()
        {
            this.SetNull(this.myTable.ColumnGenYearProgram);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsGenAppCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnGenAppCurrencyCode);
        }

        /// assign NULL value
        public void SetGenAppCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnGenAppCurrencyCode);
        }

        /// test for NULL value
        public bool IsPlacementPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPlacementPartnerKey);
        }

        /// assign NULL value
        public void SetPlacementPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPlacementPartnerKey);
        }

        /// test for NULL value
        public bool IsRawApplicationDataNull()
        {
            return this.IsNull(this.myTable.ColumnRawApplicationData);
        }

        /// assign NULL value
        public void SetRawApplicationDataNull()
        {
            this.SetNull(this.myTable.ColumnRawApplicationData);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Keeps a history of the application status for short and long term applications.
    [Serializable()]
    public class PmApplicationStatusHistoryTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 197;
        /// used for generic TTypedDataTable functions
        public static short ColumnKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnApplicationKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnStatusCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnStatusDateEffectiveId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 11;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmApplicationStatusHistory", "pm_application_status_history",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Key", "pm_key_n", "pm_key_n", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "ApplicationKey", "pm_application_key_i", "Application Key", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(3, "RegistrationOffice", "pm_registration_office_n", "Registration Office", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(4, "StatusCode", "pm_status_code_c", "Application Status", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(5, "StatusDateEffective", "pm_status_date_effective_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "Comment", "pm_comment_c", "Comment", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(7, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmApplicationStatusHistoryTable() :
                base("PmApplicationStatusHistory")
        {
        }

        /// constructor
        public PmApplicationStatusHistoryTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmApplicationStatusHistoryTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Key to make editing these records easier
        public DataColumn ColumnKey;
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Key to uniquely identify application
        public DataColumn ColumnApplicationKey;
        /// Partner key of office by which application was entered.
        public DataColumn ColumnRegistrationOffice;
        /// Indicates the status of the application.
        public DataColumn ColumnStatusCode;
        /// Effective Date of the chosen Application Status
        public DataColumn ColumnStatusDateEffective;
        /// Gives further comments about application status.
        public DataColumn ColumnComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pm_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_application_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_status_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_status_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnKey = this.Columns["pm_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnApplicationKey = this.Columns["pm_application_key_i"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnStatusCode = this.Columns["pm_status_code_c"];
            this.ColumnStatusDateEffective = this.Columns["pm_status_date_effective_d"];
            this.ColumnComment = this.Columns["pm_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnKey};
        }

        /// Access a typed row by index
        public PmApplicationStatusHistoryRow this[int i]
        {
            get
            {
                return ((PmApplicationStatusHistoryRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmApplicationStatusHistoryRow NewRowTyped(bool AWithDefaultValues)
        {
            PmApplicationStatusHistoryRow ret = ((PmApplicationStatusHistoryRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmApplicationStatusHistoryRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmApplicationStatusHistoryRow(builder);
        }

        /// get typed set of changes
        public PmApplicationStatusHistoryTable GetChangesTyped()
        {
            return ((PmApplicationStatusHistoryTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmApplicationStatusHistory";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_application_status_history";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetKeyDBName()
        {
            return "pm_key_n";
        }

        /// get character length for column
        public static short GetKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetApplicationKeyDBName()
        {
            return "pm_application_key_i";
        }

        /// get character length for column
        public static short GetApplicationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStatusCodeDBName()
        {
            return "pm_status_code_c";
        }

        /// get character length for column
        public static short GetStatusCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetStatusDateEffectiveDBName()
        {
            return "pm_status_date_effective_d";
        }

        /// get character length for column
        public static short GetStatusDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "pm_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Keeps a history of the application status for short and long term applications.
    [Serializable()]
    public class PmApplicationStatusHistoryRow : System.Data.DataRow
    {
        private PmApplicationStatusHistoryTable myTable;

        /// Constructor
        public PmApplicationStatusHistoryRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmApplicationStatusHistoryTable)(this.Table));
        }

        /// Key to make editing these records easier
        public Int64 Key
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKey)
                            || (((Int64)(this[this.myTable.ColumnKey])) != value)))
                {
                    this[this.myTable.ColumnKey] = value;
                }
            }
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Key to uniquely identify application
        public Int32 ApplicationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApplicationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApplicationKey)
                            || (((Int32)(this[this.myTable.ColumnApplicationKey])) != value)))
                {
                    this[this.myTable.ColumnApplicationKey] = value;
                }
            }
        }

        /// Partner key of office by which application was entered.
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// Indicates the status of the application.
        public String StatusCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusCode)
                            || (((String)(this[this.myTable.ColumnStatusCode])) != value)))
                {
                    this[this.myTable.ColumnStatusCode] = value;
                }
            }
        }

        /// Effective Date of the chosen Application Status
        public System.DateTime? StatusDateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusDateEffective)
                            || (((System.DateTime?)(this[this.myTable.ColumnStatusDateEffective])) != value)))
                {
                    this[this.myTable.ColumnStatusDateEffective] = value;
                }
            }
        }

        /// Gives further comments about application status.
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnKey);
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnApplicationKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnRegistrationOffice);
            this.SetNull(this.myTable.ColumnStatusCode);
            this.SetNull(this.myTable.ColumnStatusDateEffective);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsKeyNull()
        {
            return this.IsNull(this.myTable.ColumnKey);
        }

        /// assign NULL value
        public void SetKeyNull()
        {
            this.SetNull(this.myTable.ColumnKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsApplicationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnApplicationKey);
        }

        /// assign NULL value
        public void SetApplicationKeyNull()
        {
            this.SetNull(this.myTable.ColumnApplicationKey);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsStatusCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStatusCode);
        }

        /// assign NULL value
        public void SetStatusCodeNull()
        {
            this.SetNull(this.myTable.ColumnStatusCode);
        }

        /// test for NULL value
        public bool IsStatusDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnStatusDateEffective);
        }

        /// assign NULL value
        public void SetStatusDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnStatusDateEffective);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes that indicate special situations of applicants.
    [Serializable()]
    public class PtSpecialApplicantTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 198;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtSpecialApplicant", "pt_special_applicant",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Special Applicant Status Code", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtSpecialApplicantTable() :
                base("PtSpecialApplicant")
        {
        }

        /// constructor
        public PtSpecialApplicantTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtSpecialApplicantTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates a special status an applicant could have.
        public DataColumn ColumnCode;
        /// This describes the special applicant status code.
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtSpecialApplicantRow this[int i]
        {
            get
            {
                return ((PtSpecialApplicantRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtSpecialApplicantRow NewRowTyped(bool AWithDefaultValues)
        {
            PtSpecialApplicantRow ret = ((PtSpecialApplicantRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtSpecialApplicantRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtSpecialApplicantRow(builder);
        }

        /// get typed set of changes
        public PtSpecialApplicantTable GetChangesTyped()
        {
            return ((PtSpecialApplicantTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtSpecialApplicant";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_special_applicant";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes that indicate special situations of applicants.
    [Serializable()]
    public class PtSpecialApplicantRow : System.Data.DataRow
    {
        private PtSpecialApplicantTable myTable;

        /// Constructor
        public PtSpecialApplicantRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtSpecialApplicantTable)(this.Table));
        }

        /// This code indicates a special status an applicant could have.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the special applicant status code.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes indicating the leadership potential of someone.
    [Serializable()]
    public class PtLeadershipRatingTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 199;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtLeadershipRating", "pt_leadership_rating",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Leadership Rating", OdbcType.VarChar, 2, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtLeadershipRatingTable() :
                base("PtLeadershipRating")
        {
        }

        /// constructor
        public PtLeadershipRatingTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtLeadershipRatingTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the leadership rating of an applicant.
        public DataColumn ColumnCode;
        /// This describes the Leadership Rating code.
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtLeadershipRatingRow this[int i]
        {
            get
            {
                return ((PtLeadershipRatingRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtLeadershipRatingRow NewRowTyped(bool AWithDefaultValues)
        {
            PtLeadershipRatingRow ret = ((PtLeadershipRatingRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtLeadershipRatingRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtLeadershipRatingRow(builder);
        }

        /// get typed set of changes
        public PtLeadershipRatingTable GetChangesTyped()
        {
            return ((PtLeadershipRatingTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtLeadershipRating";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_leadership_rating";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 2;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes indicating the leadership potential of someone.
    [Serializable()]
    public class PtLeadershipRatingRow : System.Data.DataRow
    {
        private PtLeadershipRatingTable myTable;

        /// Constructor
        public PtLeadershipRatingRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtLeadershipRatingTable)(this.Table));
        }

        /// This code indicates the leadership rating of an applicant.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the Leadership Rating code.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes used to indicate where the conferee is arriving or departing.
    [Serializable()]
    public class PtArrivalPointTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 200;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtArrivalPoint", "pt_arrival_point",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Arrival Point Code", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtArrivalPointTable() :
                base("PtArrivalPoint")
        {
        }

        /// constructor
        public PtArrivalPointTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtArrivalPointTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the arrival point of the congress attendee.
        public DataColumn ColumnCode;
        /// This describes the arrival point.
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtArrivalPointRow this[int i]
        {
            get
            {
                return ((PtArrivalPointRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtArrivalPointRow NewRowTyped(bool AWithDefaultValues)
        {
            PtArrivalPointRow ret = ((PtArrivalPointRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtArrivalPointRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtArrivalPointRow(builder);
        }

        /// get typed set of changes
        public PtArrivalPointTable GetChangesTyped()
        {
            return ((PtArrivalPointTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtArrivalPoint";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_arrival_point";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes used to indicate where the conferee is arriving or departing.
    [Serializable()]
    public class PtArrivalPointRow : System.Data.DataRow
    {
        private PtArrivalPointTable myTable;

        /// Constructor
        public PtArrivalPointRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtArrivalPointTable)(this.Table));
        }

        /// This code indicates the arrival point of the congress attendee.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the arrival point.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Describes the importance of the country and activity choices.
    [Serializable()]
    public class PtXyzTbdPreferenceLevelTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 201;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtXyzTbdPreferenceLevel", "pt_xyz_tbd_preference_level",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Preference Level", OdbcType.VarChar, 2, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtXyzTbdPreferenceLevelTable() :
                base("PtXyzTbdPreferenceLevel")
        {
        }

        /// constructor
        public PtXyzTbdPreferenceLevelTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtXyzTbdPreferenceLevelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the level of importance of the country and activity choice on xyz_tbds.
        public DataColumn ColumnCode;
        /// This describes the preference level code.
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtXyzTbdPreferenceLevelRow this[int i]
        {
            get
            {
                return ((PtXyzTbdPreferenceLevelRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtXyzTbdPreferenceLevelRow NewRowTyped(bool AWithDefaultValues)
        {
            PtXyzTbdPreferenceLevelRow ret = ((PtXyzTbdPreferenceLevelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtXyzTbdPreferenceLevelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtXyzTbdPreferenceLevelRow(builder);
        }

        /// get typed set of changes
        public PtXyzTbdPreferenceLevelTable GetChangesTyped()
        {
            return ((PtXyzTbdPreferenceLevelTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtXyzTbdPreferenceLevel";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_xyz_tbd_preference_level";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 2;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Describes the importance of the country and activity choices.
    [Serializable()]
    public class PtXyzTbdPreferenceLevelRow : System.Data.DataRow
    {
        private PtXyzTbdPreferenceLevelTable myTable;

        /// Constructor
        public PtXyzTbdPreferenceLevelRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtXyzTbdPreferenceLevelTable)(this.Table));
        }

        /// This code indicates the level of importance of the country and activity choice on xyz_tbds.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the preference level code.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes that indicate a person's role and/or position at conferences and xyz_tbds.
    [Serializable()]
    public class PtCongressCodeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 202;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPreCongressId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDiscountedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnXyzTbdId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnConferenceId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnParticipantId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 14;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtCongressCode", "pt_congress_code",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Event Role", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "PreCongress", "pt_pre_congress_l", "valid Pre-Conference Role", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(4, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "Discounted", "pt_discounted_l", "Discounted Fees ?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(7, "XyzTbd", "pt_xyz_tbd_l", "valid Xyz_tbd Role", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(8, "Conference", "pt_conference_l", "valid Conference Role", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(9, "Participant", "pt_participant_l", "pt_participant_l", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(10, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtCongressCodeTable() :
                base("PtCongressCode")
        {
        }

        /// constructor
        public PtCongressCodeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtCongressCodeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the role of the event attendee.
        public DataColumn ColumnCode;
        /// This describes the Event Role.
        public DataColumn ColumnDescription;
        /// Indicates if this is valid pre-Conference Role.
        public DataColumn ColumnPreCongress;
        /// Indicates if this role can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this role was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        ///
        public DataColumn ColumnDiscounted;
        /// Indicates if this is a valid role during a xyz_tbd.
        public DataColumn ColumnXyzTbd;
        /// Indicates if this is valid Conference Role.
        public DataColumn ColumnConference;
        /// Indicates if this role is considered as a normal participant (e.g. in reports)
        public DataColumn ColumnParticipant;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pre_congress_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_discounted_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_xyz_tbd_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_conference_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_participant_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnPreCongress = this.Columns["pt_pre_congress_l"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDiscounted = this.Columns["pt_discounted_l"];
            this.ColumnXyzTbd = this.Columns["pt_xyz_tbd_l"];
            this.ColumnConference = this.Columns["pt_conference_l"];
            this.ColumnParticipant = this.Columns["pt_participant_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtCongressCodeRow this[int i]
        {
            get
            {
                return ((PtCongressCodeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtCongressCodeRow NewRowTyped(bool AWithDefaultValues)
        {
            PtCongressCodeRow ret = ((PtCongressCodeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtCongressCodeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtCongressCodeRow(builder);
        }

        /// get typed set of changes
        public PtCongressCodeTable GetChangesTyped()
        {
            return ((PtCongressCodeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtCongressCode";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_congress_code";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetPreCongressDBName()
        {
            return "pt_pre_congress_l";
        }

        /// get character length for column
        public static short GetPreCongressLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDiscountedDBName()
        {
            return "pt_discounted_l";
        }

        /// get character length for column
        public static short GetDiscountedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetXyzTbdDBName()
        {
            return "pt_xyz_tbd_l";
        }

        /// get character length for column
        public static short GetXyzTbdLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetConferenceDBName()
        {
            return "pt_conference_l";
        }

        /// get character length for column
        public static short GetConferenceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetParticipantDBName()
        {
            return "pt_participant_l";
        }

        /// get character length for column
        public static short GetParticipantLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes that indicate a person's role and/or position at conferences and xyz_tbds.
    [Serializable()]
    public class PtCongressCodeRow : System.Data.DataRow
    {
        private PtCongressCodeTable myTable;

        /// Constructor
        public PtCongressCodeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtCongressCodeTable)(this.Table));
        }

        /// This code indicates the role of the event attendee.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the Event Role.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this is valid pre-Conference Role.
        public Boolean PreCongress
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPreCongress.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPreCongress)
                            || (((Boolean)(this[this.myTable.ColumnPreCongress])) != value)))
                {
                    this[this.myTable.ColumnPreCongress] = value;
                }
            }
        }

        /// Indicates if this role can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this role was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        ///
        public Boolean Discounted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDiscounted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDiscounted)
                            || (((Boolean)(this[this.myTable.ColumnDiscounted])) != value)))
                {
                    this[this.myTable.ColumnDiscounted] = value;
                }
            }
        }

        /// Indicates if this is a valid role during a xyz_tbd.
        public Boolean XyzTbd
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnXyzTbd.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnXyzTbd)
                            || (((Boolean)(this[this.myTable.ColumnXyzTbd])) != value)))
                {
                    this[this.myTable.ColumnXyzTbd] = value;
                }
            }
        }

        /// Indicates if this is valid Conference Role.
        public Boolean Conference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConference)
                            || (((Boolean)(this[this.myTable.ColumnConference])) != value)))
                {
                    this[this.myTable.ColumnConference] = value;
                }
            }
        }

        /// Indicates if this role is considered as a normal participant (e.g. in reports)
        public Boolean Participant
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnParticipant.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnParticipant)
                            || (((Boolean)(this[this.myTable.ColumnParticipant])) != value)))
                {
                    this[this.myTable.ColumnParticipant] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnPreCongress.Ordinal] = false;
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDiscounted.Ordinal] = false;
            this[this.myTable.ColumnXyzTbd.Ordinal] = false;
            this[this.myTable.ColumnConference.Ordinal] = false;
            this[this.myTable.ColumnParticipant.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsPreCongressNull()
        {
            return this.IsNull(this.myTable.ColumnPreCongress);
        }

        /// assign NULL value
        public void SetPreCongressNull()
        {
            this.SetNull(this.myTable.ColumnPreCongress);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDiscountedNull()
        {
            return this.IsNull(this.myTable.ColumnDiscounted);
        }

        /// assign NULL value
        public void SetDiscountedNull()
        {
            this.SetNull(this.myTable.ColumnDiscounted);
        }

        /// test for NULL value
        public bool IsXyzTbdNull()
        {
            return this.IsNull(this.myTable.ColumnXyzTbd);
        }

        /// assign NULL value
        public void SetXyzTbdNull()
        {
            this.SetNull(this.myTable.ColumnXyzTbd);
        }

        /// test for NULL value
        public bool IsConferenceNull()
        {
            return this.IsNull(this.myTable.ColumnConference);
        }

        /// assign NULL value
        public void SetConferenceNull()
        {
            this.SetNull(this.myTable.ColumnConference);
        }

        /// test for NULL value
        public bool IsParticipantNull()
        {
            return this.IsNull(this.myTable.ColumnParticipant);
        }

        /// assign NULL value
        public void SetParticipantNull()
        {
            this.SetNull(this.myTable.ColumnParticipant);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes indicating whether groups should be together and for how long.
    [Serializable()]
    public class PtPartyTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 203;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtPartyType", "pt_party_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Party Type Code", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtPartyTypeTable() :
                base("PtPartyType")
        {
        }

        /// constructor
        public PtPartyTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtPartyTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the instructions for handling groups.
        public DataColumn ColumnCode;
        /// This describes the party types codes..
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtPartyTypeRow this[int i]
        {
            get
            {
                return ((PtPartyTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtPartyTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PtPartyTypeRow ret = ((PtPartyTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtPartyTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtPartyTypeRow(builder);
        }

        /// get typed set of changes
        public PtPartyTypeTable GetChangesTyped()
        {
            return ((PtPartyTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtPartyType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_party_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes indicating whether groups should be together and for how long.
    [Serializable()]
    public class PtPartyTypeRow : System.Data.DataRow
    {
        private PtPartyTypeTable myTable;

        /// Constructor
        public PtPartyTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtPartyTypeTable)(this.Table));
        }

        /// This code indicates the instructions for handling groups.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the party types codes..
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes that indicate the mode of travel being used.
    [Serializable()]
    public class PtTravelTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 204;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtTravelType", "pt_travel_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Travel Type", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtTravelTypeTable() :
                base("PtTravelType")
        {
        }

        /// constructor
        public PtTravelTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtTravelTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the different types of travel.
        public DataColumn ColumnCode;
        /// This describes the types of travel .
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtTravelTypeRow this[int i]
        {
            get
            {
                return ((PtTravelTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtTravelTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PtTravelTypeRow ret = ((PtTravelTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtTravelTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtTravelTypeRow(builder);
        }

        /// get typed set of changes
        public PtTravelTypeTable GetChangesTyped()
        {
            return ((PtTravelTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtTravelType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_travel_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes that indicate the mode of travel being used.
    [Serializable()]
    public class PtTravelTypeRow : System.Data.DataRow
    {
        private PtTravelTypeTable myTable;

        /// Constructor
        public PtTravelTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtTravelTypeTable)(this.Table));
        }

        /// This code indicates the different types of travel.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the types of travel .
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Table for short term applications.
    [Serializable()]
    public class PmShortTermApplicationTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 205;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnApplicationKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnStAppDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnStApplicationTypeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnStBasicXyzTbdIdentifierId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnStBasicDeleteFlagId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnStBookingFeeReceivedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnStProgramFeeReceivedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnStApplicationOnHoldId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnStApplicationHoldReasonId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnStScholarshipAmountId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnStScholarshipApprovedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnStScholarshipReviewDateId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnStScholarshipPeriodId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnStLeadershipRatingId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnConfirmedOptionCodeId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnOption1CodeId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnOption2CodeId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnStXyzTbdOnlyFlagId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnStConfirmedOptionId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnStOption1Id = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnStOption2Id = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnStCurrentFieldId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalDetailsStatusId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalPointCodeId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnTravelTypeToCongCodeId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalHourId = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalMinuteId = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnToCongTravelInfoId = 30;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalTransportNeededId = 31;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalExpId = 32;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalExpHourId = 33;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalExpMinuteId = 34;
        /// used for generic TTypedDataTable functions
        public static short ColumnArrivalCommentsId = 35;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureDetailsStatusId = 36;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeparturePointCodeId = 37;
        /// used for generic TTypedDataTable functions
        public static short ColumnTravelTypeFromCongCodeId = 38;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureId = 39;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureHourId = 40;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureMinuteId = 41;
        /// used for generic TTypedDataTable functions
        public static short ColumnFromCongTravelInfoId = 42;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureTransportNeededId = 43;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureExpId = 44;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureExpHourId = 45;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureExpMinuteId = 46;
        /// used for generic TTypedDataTable functions
        public static short ColumnDepartureCommentsId = 47;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransportInterestId = 48;
        /// used for generic TTypedDataTable functions
        public static short ColumnContactNumberId = 49;
        /// used for generic TTypedDataTable functions
        public static short ColumnStRecruitEffortsId = 50;
        /// used for generic TTypedDataTable functions
        public static short ColumnStPreCongressCodeId = 51;
        /// used for generic TTypedDataTable functions
        public static short ColumnStCongressCodeId = 52;
        /// used for generic TTypedDataTable functions
        public static short ColumnStSpecialApplicantId = 53;
        /// used for generic TTypedDataTable functions
        public static short ColumnXyzTbdRoleId = 54;
        /// used for generic TTypedDataTable functions
        public static short ColumnStPartyContactId = 55;
        /// used for generic TTypedDataTable functions
        public static short ColumnStPartyTogetherId = 56;
        /// used for generic TTypedDataTable functions
        public static short ColumnStFgLeaderId = 57;
        /// used for generic TTypedDataTable functions
        public static short ColumnStFgCodeId = 58;
        /// used for generic TTypedDataTable functions
        public static short ColumnStCmpgnSpecialCostId = 59;
        /// used for generic TTypedDataTable functions
        public static short ColumnStCngrssSpecialCostId = 60;
        /// used for generic TTypedDataTable functions
        public static short ColumnStFieldChargedId = 61;
        /// used for generic TTypedDataTable functions
        public static short ColumnStCongressLanguageId = 62;
        /// used for generic TTypedDataTable functions
        public static short ColumnStCountryPrefId = 63;
        /// used for generic TTypedDataTable functions
        public static short ColumnStActivityPrefId = 64;
        /// used for generic TTypedDataTable functions
        public static short ColumnStCommentId = 65;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 66;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 67;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 68;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 69;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 70;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmShortTermApplication", "pm_short_term_application",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "ApplicationKey", "pm_application_key_i", "Application Key", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "RegistrationOffice", "pm_registration_office_n", "Registration Office", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "StAppDate", "pm_st_app_date_d", "Application Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(4, "StApplicationType", "pm_st_application_type_c", "Application Type", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(5, "StBasicXyzTbdIdentifier", "pm_st_basic_xyz_tbd_identifier_c", "Xyz_tbd", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(6, "StBasicDeleteFlag", "pm_st_basic_delete_flag_l", "Delete Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(7, "StBookingFeeReceived", "pm_st_booking_fee_received_l", "Booking Fee Paid", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(8, "StProgramFeeReceived", "pm_st_program_fee_received_l", "Program Fee Paid?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(9, "StApplicationOnHold", "pm_st_application_on_hold_l", "Hold?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(10, "StApplicationHoldReason", "pm_st_application_hold_reason_c", "Reason", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(11, "StScholarshipAmount", "pm_st_scholarship_amount_n", "Scholarship Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(12, "StScholarshipApprovedBy", "pm_st_scholarship_approved_by_c", "Scholarship Authorized By:", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(13, "StScholarshipReviewDate", "pm_st_scholarship_review_date_d", "Scholarship Review Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "StScholarshipPeriod", "pm_st_scholarship_period_c", "Scholarship Period", OdbcType.VarChar, 18, false),
                    new TTypedColumnInfo(15, "StLeadershipRating", "pm_st_leadership_rating_c", "Leadership Rating", OdbcType.VarChar, 2, false),
                    new TTypedColumnInfo(16, "ConfirmedOptionCode", "pm_confirmed_option_code_c", "Event Xyz_tbd Code", OdbcType.VarChar, 26, false),
                    new TTypedColumnInfo(17, "Option1Code", "pm_option1_code_c", "Alternative 1 Xyz_tbd Code", OdbcType.VarChar, 26, false),
                    new TTypedColumnInfo(18, "Option2Code", "pm_option2_code_c", "Alternative 2 Xyz_tbd Code", OdbcType.VarChar, 26, false),
                    new TTypedColumnInfo(19, "StXyzTbdOnlyFlag", "pm_st_xyz_tbd_only_flag_l", "Xyz_tbd Only", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(20, "StConfirmedOption", "pm_st_confirmed_option_n", "Event", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(21, "StOption1", "pm_st_option1_n", "Alternative 1", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(22, "StOption2", "pm_st_option2_n", "Alternative 2", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(23, "StCurrentField", "pm_st_current_field_n", "Current Field", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(24, "ArrivalDetailsStatus", "pm_arrival_details_status_c", "Arrival Details Status", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(25, "ArrivalPointCode", "pt_arrival_point_code_c", "Arrival Point Code", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(26, "TravelTypeToCongCode", "pt_travel_type_to_cong_code_c", "To Congress Travel Type", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(27, "Arrival", "pm_arrival_d", "Conference Arrival Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(28, "ArrivalHour", "pm_arrival_hour_i", "Arrival Hour", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(29, "ArrivalMinute", "pm_arrival_minute_i", "Arrival Minutes", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(30, "ToCongTravelInfo", "pm_to_cong_travel_info_c", "To Congress Travel #", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(31, "ArrivalTransportNeeded", "pm_arrival_transport_needed_l", "Transport needed from Arrival Point", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(32, "ArrivalExp", "pm_arrival_exp_d", "Expected Conference Arrival Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(33, "ArrivalExpHour", "pm_arrival_exp_hour_i", "Expected Arrival Hour", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(34, "ArrivalExpMinute", "pm_arrival_exp_minute_i", "Expected Arrival Minutes", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(35, "ArrivalComments", "pm_arrival_comments_c", "Arrival Comment", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(36, "DepartureDetailsStatus", "pm_departure_details_status_c", "Departure Details Status", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(37, "DeparturePointCode", "pt_departure_point_code_c", "Departure Point Code", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(38, "TravelTypeFromCongCode", "pt_travel_type_from_cong_code_c", "From Congress Travel Type", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(39, "Departure", "pm_departure_d", "Conference Departure Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(40, "DepartureHour", "pm_departure_hour_i", "Departure Hour", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(41, "DepartureMinute", "pm_departure_minute_i", "Departure Minutes", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(42, "FromCongTravelInfo", "pm_from_cong_travel_info_c", "From Congress Travel #", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(43, "DepartureTransportNeeded", "pm_departure_transport_needed_l", "Transport needed to Departure Point", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(44, "DepartureExp", "pm_departure_exp_d", "Expected Conference Departure Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(45, "DepartureExpHour", "pm_departure_exp_hour_i", "Expected Departure Hour", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(46, "DepartureExpMinute", "pm_departure_exp_minute_i", "Expected departure Minutes", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(47, "DepartureComments", "pm_departure_comments_c", "Departure Comment", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(48, "TransportInterest", "pm_transport_interest_l", "Interested in transport possibility", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(49, "ContactNumber", "pm_contact_number_c", "Contact", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(50, "StRecruitEfforts", "pm_st_recruit_efforts_c", "Recruiting Effort", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(51, "StPreCongressCode", "pm_st_pre_congress_code_c", "Pre-Conference Role", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(52, "StCongressCode", "pm_st_congress_code_c", "Conference Role", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(53, "StSpecialApplicant", "pm_st_special_applicant_c", "Special Applicant Code", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(54, "XyzTbdRole", "pm_xyz_tbd_role_c", "Xyz_tbd Role", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(55, "StPartyContact", "pm_st_party_contact_n", "Party Contact", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(56, "StPartyTogether", "pm_st_party_together_c", "Party Code", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(57, "StFgLeader", "pm_st_fg_leader_l", "Fellowship Group Leader", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(58, "StFgCode", "pm_st_fg_code_c", "Fellowship Group Code", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(59, "StCmpgnSpecialCost", "pm_st_cmpgn_special_cost_i", "Xyz_tbd Special Costs", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(60, "StCngrssSpecialCost", "pm_st_cngrss_special_cost_i", "Congress Special Costs", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(61, "StFieldCharged", "pm_st_field_charged_n", "Field Charged", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(62, "StCongressLanguage", "pm_st_congress_language_c", "Congress Language", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(63, "StCountryPref", "pm_st_country_pref_c", "Country", OdbcType.VarChar, 2, false),
                    new TTypedColumnInfo(64, "StActivityPref", "pm_st_activity_pref_c", "activity", OdbcType.VarChar, 2, false),
                    new TTypedColumnInfo(65, "StComment", "pm_st_comment_c", "Xyz_tbd Comments", OdbcType.VarChar, 148, false),
                    new TTypedColumnInfo(66, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(67, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(68, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(69, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(70, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }, new int[] {
                    0, 3, 4, 5
                }));
            return true;
        }

        /// constructor
        public PmShortTermApplicationTable() :
                base("PmShortTermApplication")
        {
        }

        /// constructor
        public PmShortTermApplicationTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmShortTermApplicationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Key to uniquely identify application
        public DataColumn ColumnApplicationKey;
        /// Partner key of office by which application was entered.
        public DataColumn ColumnRegistrationOffice;
        /// Date of application
        public DataColumn ColumnStAppDate;
        ///
        public DataColumn ColumnStApplicationType;
        /// TODO: this field is a combination of registration office and application number. might not be needed???
        public DataColumn ColumnStBasicXyzTbdIdentifier;
        /// This field will not appear on the screen but will be updated when someone chooses to delete a record. Rather that an actual deletion, the record will be 'marked' for deletion after an agreed upon interval.
        public DataColumn ColumnStBasicDeleteFlag;
        /// Indicates if the booking fee has been paid.
        public DataColumn ColumnStBookingFeeReceived;
        /// Indicates if the program fee has been paid.
        public DataColumn ColumnStProgramFeeReceived;
        /// Indicates if the application is on hold.
        public DataColumn ColumnStApplicationOnHold;
        /// Comment on why the application is on hold.
        public DataColumn ColumnStApplicationHoldReason;
        /// Enter the amount of the scholarship.
        public DataColumn ColumnStScholarshipAmount;
        /// Indicate who authorized the scholarship.
        public DataColumn ColumnStScholarshipApprovedBy;
        /// Indicates the date of the review of the scholarship.
        public DataColumn ColumnStScholarshipReviewDate;
        /// Length of time the scholarship period covers.
        public DataColumn ColumnStScholarshipPeriod;
        /// Indicates the leadership rating of the applicant.
        public DataColumn ColumnStLeadershipRating;
        /// Indicates the xyz_tbd code of the confirmed option.
        public DataColumn ColumnConfirmedOptionCode;
        /// Indicates the xyz_tbd code of the first xyz_tbd choice.
        public DataColumn ColumnOption1Code;
        /// Indicates the xyz_tbd code of the second xyz_tbd choice.
        public DataColumn ColumnOption2Code;
        /// Indicates if for xyz_tbd only.
        public DataColumn ColumnStXyzTbdOnlyFlag;
        /// Indicates the confirmed xyz_tbd option.
        public DataColumn ColumnStConfirmedOption;
        /// Indicates the first xyz_tbd choice.
        public DataColumn ColumnStOption1;
        /// Indicates the second xyz_tbd choice.
        public DataColumn ColumnStOption2;
        /// Indicates the current field.
        public DataColumn ColumnStCurrentField;
        /// Indicates the status of given arrival details (not known, being planned,...).
        public DataColumn ColumnArrivalDetailsStatus;
        /// This code indicates the arrival point of the congress attendee.
        public DataColumn ColumnArrivalPointCode;
        /// This code indicates the type of travel to the congress..
        public DataColumn ColumnTravelTypeToCongCode;
        /// Date of arrival at the conference.
        public DataColumn ColumnArrival;
        /// The hour of arrival.
        public DataColumn ColumnArrivalHour;
        /// The minutes of arrival.
        public DataColumn ColumnArrivalMinute;
        /// Information concerning flight or bus numbers.
        public DataColumn ColumnToCongTravelInfo;
        /// Indicates if transport from arrival point to congress needs to be arranged by Registrar.
        public DataColumn ColumnArrivalTransportNeeded;
        /// Date of expected arrival at the conference (if no transport from arrival point is needed).
        public DataColumn ColumnArrivalExp;
        /// The hour of expected arrival (if no transport from arrival point is needed).
        public DataColumn ColumnArrivalExpHour;
        /// The minutes of expected arrival (if no transport from arrival point is needed).
        public DataColumn ColumnArrivalExpMinute;
        /// Gives further comments on arrival information.
        public DataColumn ColumnArrivalComments;
        /// Indicates the status of given departure details (undetermined, being planned,...).
        public DataColumn ColumnDepartureDetailsStatus;
        /// This code indicates the departure point of the congress attendee.
        public DataColumn ColumnDeparturePointCode;
        /// This code indicates the type of travel from the congress.
        public DataColumn ColumnTravelTypeFromCongCode;
        /// Date of departure from the conference.
        public DataColumn ColumnDeparture;
        /// The hour of departure.
        public DataColumn ColumnDepartureHour;
        /// The minutes of departure.
        public DataColumn ColumnDepartureMinute;
        /// Information concerning flight or bus numbers.
        public DataColumn ColumnFromCongTravelInfo;
        /// Indicates if transport from congress to departure point needs to be arranged by Registrar.
        public DataColumn ColumnDepartureTransportNeeded;
        /// Date of expected departure from the conference (if no transport to departure point is needed).
        public DataColumn ColumnDepartureExp;
        /// The hour of expected departure (if no transport to departure point is needed).
        public DataColumn ColumnDepartureExpHour;
        /// The minutes of expected departure (if no transport to departure point is needed).
        public DataColumn ColumnDepartureExpMinute;
        /// Gives further comments on departure information.
        public DataColumn ColumnDepartureComments;
        /// Applicant is interested if there would be a transport possibility from/to arrival/departure point.
        public DataColumn ColumnTransportInterest;
        /// Gives a phone number/email where the applicant (or registering person) can be contacted.
        public DataColumn ColumnContactNumber;
        /// This is the efforts that recruited the applicant for the event.
        public DataColumn ColumnStRecruitEfforts;
        /// This code indicates what role they have during pre-congress.
        public DataColumn ColumnStPreCongressCode;
        /// Indicates the role for the Congress.
        public DataColumn ColumnStCongressCode;
        /// Indicates any special information about the applicant.
        public DataColumn ColumnStSpecialApplicant;
        /// The role a participant has during a xyz_tbd
        public DataColumn ColumnXyzTbdRole;
        /// This field is the partner key of the party contact person.
        public DataColumn ColumnStPartyContact;
        /// Indicates what parts of the xyz_tbd the party stays together.
        public DataColumn ColumnStPartyTogether;
        /// Indicates if the person is a leader of a fellowship group.
        public DataColumn ColumnStFgLeader;
        /// A free form field for group codes.
        public DataColumn ColumnStFgCode;
        /// Special Costs related to the xyz_tbd.
        public DataColumn ColumnStCmpgnSpecialCost;
        /// Special Costs related to the congress.
        public DataColumn ColumnStCngrssSpecialCost;
        /// This field idenifies the field to be charged for the costs.
        public DataColumn ColumnStFieldCharged;
        /// This is the language spoken by the applicant at the Congress.
        public DataColumn ColumnStCongressLanguage;
        /// Indicates how important the country preference is.
        public DataColumn ColumnStCountryPref;
        /// Indicates how important the activity preference is.
        public DataColumn ColumnStActivityPref;
        /// Comments pertaining to the xyz_tbd.
        /// (Made obsolete: use pm_general_application.pm_comment_c)
        public DataColumn ColumnStComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_application_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_app_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_application_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_basic_xyz_tbd_identifier_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_basic_delete_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_booking_fee_received_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_program_fee_received_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_application_on_hold_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_application_hold_reason_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_scholarship_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_scholarship_approved_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_scholarship_review_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_scholarship_period_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_leadership_rating_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_confirmed_option_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_option1_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_option2_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_xyz_tbd_only_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_confirmed_option_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_option1_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_option2_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_current_field_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_details_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_arrival_point_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_travel_type_to_cong_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_hour_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_minute_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_to_cong_travel_info_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_transport_needed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_exp_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_exp_hour_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_exp_minute_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_arrival_comments_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_details_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_departure_point_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_travel_type_from_cong_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_hour_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_minute_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_from_cong_travel_info_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_transport_needed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_exp_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_exp_hour_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_exp_minute_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_departure_comments_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_transport_interest_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_contact_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_recruit_efforts_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_pre_congress_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_congress_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_special_applicant_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_xyz_tbd_role_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_party_contact_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_party_together_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_fg_leader_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_fg_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_cmpgn_special_cost_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_cngrss_special_cost_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_field_charged_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_congress_language_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_country_pref_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_activity_pref_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_st_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnApplicationKey = this.Columns["pm_application_key_i"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnStAppDate = this.Columns["pm_st_app_date_d"];
            this.ColumnStApplicationType = this.Columns["pm_st_application_type_c"];
            this.ColumnStBasicXyzTbdIdentifier = this.Columns["pm_st_basic_xyz_tbd_identifier_c"];
            this.ColumnStBasicDeleteFlag = this.Columns["pm_st_basic_delete_flag_l"];
            this.ColumnStBookingFeeReceived = this.Columns["pm_st_booking_fee_received_l"];
            this.ColumnStProgramFeeReceived = this.Columns["pm_st_program_fee_received_l"];
            this.ColumnStApplicationOnHold = this.Columns["pm_st_application_on_hold_l"];
            this.ColumnStApplicationHoldReason = this.Columns["pm_st_application_hold_reason_c"];
            this.ColumnStScholarshipAmount = this.Columns["pm_st_scholarship_amount_n"];
            this.ColumnStScholarshipApprovedBy = this.Columns["pm_st_scholarship_approved_by_c"];
            this.ColumnStScholarshipReviewDate = this.Columns["pm_st_scholarship_review_date_d"];
            this.ColumnStScholarshipPeriod = this.Columns["pm_st_scholarship_period_c"];
            this.ColumnStLeadershipRating = this.Columns["pm_st_leadership_rating_c"];
            this.ColumnConfirmedOptionCode = this.Columns["pm_confirmed_option_code_c"];
            this.ColumnOption1Code = this.Columns["pm_option1_code_c"];
            this.ColumnOption2Code = this.Columns["pm_option2_code_c"];
            this.ColumnStXyzTbdOnlyFlag = this.Columns["pm_st_xyz_tbd_only_flag_l"];
            this.ColumnStConfirmedOption = this.Columns["pm_st_confirmed_option_n"];
            this.ColumnStOption1 = this.Columns["pm_st_option1_n"];
            this.ColumnStOption2 = this.Columns["pm_st_option2_n"];
            this.ColumnStCurrentField = this.Columns["pm_st_current_field_n"];
            this.ColumnArrivalDetailsStatus = this.Columns["pm_arrival_details_status_c"];
            this.ColumnArrivalPointCode = this.Columns["pt_arrival_point_code_c"];
            this.ColumnTravelTypeToCongCode = this.Columns["pt_travel_type_to_cong_code_c"];
            this.ColumnArrival = this.Columns["pm_arrival_d"];
            this.ColumnArrivalHour = this.Columns["pm_arrival_hour_i"];
            this.ColumnArrivalMinute = this.Columns["pm_arrival_minute_i"];
            this.ColumnToCongTravelInfo = this.Columns["pm_to_cong_travel_info_c"];
            this.ColumnArrivalTransportNeeded = this.Columns["pm_arrival_transport_needed_l"];
            this.ColumnArrivalExp = this.Columns["pm_arrival_exp_d"];
            this.ColumnArrivalExpHour = this.Columns["pm_arrival_exp_hour_i"];
            this.ColumnArrivalExpMinute = this.Columns["pm_arrival_exp_minute_i"];
            this.ColumnArrivalComments = this.Columns["pm_arrival_comments_c"];
            this.ColumnDepartureDetailsStatus = this.Columns["pm_departure_details_status_c"];
            this.ColumnDeparturePointCode = this.Columns["pt_departure_point_code_c"];
            this.ColumnTravelTypeFromCongCode = this.Columns["pt_travel_type_from_cong_code_c"];
            this.ColumnDeparture = this.Columns["pm_departure_d"];
            this.ColumnDepartureHour = this.Columns["pm_departure_hour_i"];
            this.ColumnDepartureMinute = this.Columns["pm_departure_minute_i"];
            this.ColumnFromCongTravelInfo = this.Columns["pm_from_cong_travel_info_c"];
            this.ColumnDepartureTransportNeeded = this.Columns["pm_departure_transport_needed_l"];
            this.ColumnDepartureExp = this.Columns["pm_departure_exp_d"];
            this.ColumnDepartureExpHour = this.Columns["pm_departure_exp_hour_i"];
            this.ColumnDepartureExpMinute = this.Columns["pm_departure_exp_minute_i"];
            this.ColumnDepartureComments = this.Columns["pm_departure_comments_c"];
            this.ColumnTransportInterest = this.Columns["pm_transport_interest_l"];
            this.ColumnContactNumber = this.Columns["pm_contact_number_c"];
            this.ColumnStRecruitEfforts = this.Columns["pm_st_recruit_efforts_c"];
            this.ColumnStPreCongressCode = this.Columns["pm_st_pre_congress_code_c"];
            this.ColumnStCongressCode = this.Columns["pm_st_congress_code_c"];
            this.ColumnStSpecialApplicant = this.Columns["pm_st_special_applicant_c"];
            this.ColumnXyzTbdRole = this.Columns["pm_xyz_tbd_role_c"];
            this.ColumnStPartyContact = this.Columns["pm_st_party_contact_n"];
            this.ColumnStPartyTogether = this.Columns["pm_st_party_together_c"];
            this.ColumnStFgLeader = this.Columns["pm_st_fg_leader_l"];
            this.ColumnStFgCode = this.Columns["pm_st_fg_code_c"];
            this.ColumnStCmpgnSpecialCost = this.Columns["pm_st_cmpgn_special_cost_i"];
            this.ColumnStCngrssSpecialCost = this.Columns["pm_st_cngrss_special_cost_i"];
            this.ColumnStFieldCharged = this.Columns["pm_st_field_charged_n"];
            this.ColumnStCongressLanguage = this.Columns["pm_st_congress_language_c"];
            this.ColumnStCountryPref = this.Columns["pm_st_country_pref_c"];
            this.ColumnStActivityPref = this.Columns["pm_st_activity_pref_c"];
            this.ColumnStComment = this.Columns["pm_st_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnPartnerKey,ColumnApplicationKey,ColumnRegistrationOffice};
        }

        /// Access a typed row by index
        public PmShortTermApplicationRow this[int i]
        {
            get
            {
                return ((PmShortTermApplicationRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmShortTermApplicationRow NewRowTyped(bool AWithDefaultValues)
        {
            PmShortTermApplicationRow ret = ((PmShortTermApplicationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmShortTermApplicationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmShortTermApplicationRow(builder);
        }

        /// get typed set of changes
        public PmShortTermApplicationTable GetChangesTyped()
        {
            return ((PmShortTermApplicationTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmShortTermApplication";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_short_term_application";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetApplicationKeyDBName()
        {
            return "pm_application_key_i";
        }

        /// get character length for column
        public static short GetApplicationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStAppDateDBName()
        {
            return "pm_st_app_date_d";
        }

        /// get character length for column
        public static short GetStAppDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStApplicationTypeDBName()
        {
            return "pm_st_application_type_c";
        }

        /// get character length for column
        public static short GetStApplicationTypeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetStBasicXyzTbdIdentifierDBName()
        {
            return "pm_st_basic_xyz_tbd_identifier_c";
        }

        /// get character length for column
        public static short GetStBasicXyzTbdIdentifierLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetStBasicDeleteFlagDBName()
        {
            return "pm_st_basic_delete_flag_l";
        }

        /// get character length for column
        public static short GetStBasicDeleteFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStBookingFeeReceivedDBName()
        {
            return "pm_st_booking_fee_received_l";
        }

        /// get character length for column
        public static short GetStBookingFeeReceivedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStProgramFeeReceivedDBName()
        {
            return "pm_st_program_fee_received_l";
        }

        /// get character length for column
        public static short GetStProgramFeeReceivedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStApplicationOnHoldDBName()
        {
            return "pm_st_application_on_hold_l";
        }

        /// get character length for column
        public static short GetStApplicationOnHoldLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStApplicationHoldReasonDBName()
        {
            return "pm_st_application_hold_reason_c";
        }

        /// get character length for column
        public static short GetStApplicationHoldReasonLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetStScholarshipAmountDBName()
        {
            return "pm_st_scholarship_amount_n";
        }

        /// get character length for column
        public static short GetStScholarshipAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetStScholarshipApprovedByDBName()
        {
            return "pm_st_scholarship_approved_by_c";
        }

        /// get character length for column
        public static short GetStScholarshipApprovedByLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetStScholarshipReviewDateDBName()
        {
            return "pm_st_scholarship_review_date_d";
        }

        /// get character length for column
        public static short GetStScholarshipReviewDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStScholarshipPeriodDBName()
        {
            return "pm_st_scholarship_period_c";
        }

        /// get character length for column
        public static short GetStScholarshipPeriodLength()
        {
            return 18;
        }

        /// get the name of the field in the database for this column
        public static string GetStLeadershipRatingDBName()
        {
            return "pm_st_leadership_rating_c";
        }

        /// get character length for column
        public static short GetStLeadershipRatingLength()
        {
            return 2;
        }

        /// get the name of the field in the database for this column
        public static string GetConfirmedOptionCodeDBName()
        {
            return "pm_confirmed_option_code_c";
        }

        /// get character length for column
        public static short GetConfirmedOptionCodeLength()
        {
            return 26;
        }

        /// get the name of the field in the database for this column
        public static string GetOption1CodeDBName()
        {
            return "pm_option1_code_c";
        }

        /// get character length for column
        public static short GetOption1CodeLength()
        {
            return 26;
        }

        /// get the name of the field in the database for this column
        public static string GetOption2CodeDBName()
        {
            return "pm_option2_code_c";
        }

        /// get character length for column
        public static short GetOption2CodeLength()
        {
            return 26;
        }

        /// get the name of the field in the database for this column
        public static string GetStXyzTbdOnlyFlagDBName()
        {
            return "pm_st_xyz_tbd_only_flag_l";
        }

        /// get character length for column
        public static short GetStXyzTbdOnlyFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStConfirmedOptionDBName()
        {
            return "pm_st_confirmed_option_n";
        }

        /// get character length for column
        public static short GetStConfirmedOptionLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStOption1DBName()
        {
            return "pm_st_option1_n";
        }

        /// get character length for column
        public static short GetStOption1Length()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStOption2DBName()
        {
            return "pm_st_option2_n";
        }

        /// get character length for column
        public static short GetStOption2Length()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStCurrentFieldDBName()
        {
            return "pm_st_current_field_n";
        }

        /// get character length for column
        public static short GetStCurrentFieldLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalDetailsStatusDBName()
        {
            return "pm_arrival_details_status_c";
        }

        /// get character length for column
        public static short GetArrivalDetailsStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalPointCodeDBName()
        {
            return "pt_arrival_point_code_c";
        }

        /// get character length for column
        public static short GetArrivalPointCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetTravelTypeToCongCodeDBName()
        {
            return "pt_travel_type_to_cong_code_c";
        }

        /// get character length for column
        public static short GetTravelTypeToCongCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalDBName()
        {
            return "pm_arrival_d";
        }

        /// get character length for column
        public static short GetArrivalLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalHourDBName()
        {
            return "pm_arrival_hour_i";
        }

        /// get character length for column
        public static short GetArrivalHourLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalMinuteDBName()
        {
            return "pm_arrival_minute_i";
        }

        /// get character length for column
        public static short GetArrivalMinuteLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetToCongTravelInfoDBName()
        {
            return "pm_to_cong_travel_info_c";
        }

        /// get character length for column
        public static short GetToCongTravelInfoLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalTransportNeededDBName()
        {
            return "pm_arrival_transport_needed_l";
        }

        /// get character length for column
        public static short GetArrivalTransportNeededLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalExpDBName()
        {
            return "pm_arrival_exp_d";
        }

        /// get character length for column
        public static short GetArrivalExpLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalExpHourDBName()
        {
            return "pm_arrival_exp_hour_i";
        }

        /// get character length for column
        public static short GetArrivalExpHourLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalExpMinuteDBName()
        {
            return "pm_arrival_exp_minute_i";
        }

        /// get character length for column
        public static short GetArrivalExpMinuteLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetArrivalCommentsDBName()
        {
            return "pm_arrival_comments_c";
        }

        /// get character length for column
        public static short GetArrivalCommentsLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureDetailsStatusDBName()
        {
            return "pm_departure_details_status_c";
        }

        /// get character length for column
        public static short GetDepartureDetailsStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDeparturePointCodeDBName()
        {
            return "pt_departure_point_code_c";
        }

        /// get character length for column
        public static short GetDeparturePointCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetTravelTypeFromCongCodeDBName()
        {
            return "pt_travel_type_from_cong_code_c";
        }

        /// get character length for column
        public static short GetTravelTypeFromCongCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureDBName()
        {
            return "pm_departure_d";
        }

        /// get character length for column
        public static short GetDepartureLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureHourDBName()
        {
            return "pm_departure_hour_i";
        }

        /// get character length for column
        public static short GetDepartureHourLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureMinuteDBName()
        {
            return "pm_departure_minute_i";
        }

        /// get character length for column
        public static short GetDepartureMinuteLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFromCongTravelInfoDBName()
        {
            return "pm_from_cong_travel_info_c";
        }

        /// get character length for column
        public static short GetFromCongTravelInfoLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureTransportNeededDBName()
        {
            return "pm_departure_transport_needed_l";
        }

        /// get character length for column
        public static short GetDepartureTransportNeededLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureExpDBName()
        {
            return "pm_departure_exp_d";
        }

        /// get character length for column
        public static short GetDepartureExpLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureExpHourDBName()
        {
            return "pm_departure_exp_hour_i";
        }

        /// get character length for column
        public static short GetDepartureExpHourLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureExpMinuteDBName()
        {
            return "pm_departure_exp_minute_i";
        }

        /// get character length for column
        public static short GetDepartureExpMinuteLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDepartureCommentsDBName()
        {
            return "pm_departure_comments_c";
        }

        /// get character length for column
        public static short GetDepartureCommentsLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetTransportInterestDBName()
        {
            return "pm_transport_interest_l";
        }

        /// get character length for column
        public static short GetTransportInterestLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetContactNumberDBName()
        {
            return "pm_contact_number_c";
        }

        /// get character length for column
        public static short GetContactNumberLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetStRecruitEffortsDBName()
        {
            return "pm_st_recruit_efforts_c";
        }

        /// get character length for column
        public static short GetStRecruitEffortsLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetStPreCongressCodeDBName()
        {
            return "pm_st_pre_congress_code_c";
        }

        /// get character length for column
        public static short GetStPreCongressCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetStCongressCodeDBName()
        {
            return "pm_st_congress_code_c";
        }

        /// get character length for column
        public static short GetStCongressCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetStSpecialApplicantDBName()
        {
            return "pm_st_special_applicant_c";
        }

        /// get character length for column
        public static short GetStSpecialApplicantLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetXyzTbdRoleDBName()
        {
            return "pm_xyz_tbd_role_c";
        }

        /// get character length for column
        public static short GetXyzTbdRoleLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetStPartyContactDBName()
        {
            return "pm_st_party_contact_n";
        }

        /// get character length for column
        public static short GetStPartyContactLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStPartyTogetherDBName()
        {
            return "pm_st_party_together_c";
        }

        /// get character length for column
        public static short GetStPartyTogetherLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetStFgLeaderDBName()
        {
            return "pm_st_fg_leader_l";
        }

        /// get character length for column
        public static short GetStFgLeaderLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStFgCodeDBName()
        {
            return "pm_st_fg_code_c";
        }

        /// get character length for column
        public static short GetStFgCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetStCmpgnSpecialCostDBName()
        {
            return "pm_st_cmpgn_special_cost_i";
        }

        /// get character length for column
        public static short GetStCmpgnSpecialCostLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStCngrssSpecialCostDBName()
        {
            return "pm_st_cngrss_special_cost_i";
        }

        /// get character length for column
        public static short GetStCngrssSpecialCostLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStFieldChargedDBName()
        {
            return "pm_st_field_charged_n";
        }

        /// get character length for column
        public static short GetStFieldChargedLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStCongressLanguageDBName()
        {
            return "pm_st_congress_language_c";
        }

        /// get character length for column
        public static short GetStCongressLanguageLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetStCountryPrefDBName()
        {
            return "pm_st_country_pref_c";
        }

        /// get character length for column
        public static short GetStCountryPrefLength()
        {
            return 2;
        }

        /// get the name of the field in the database for this column
        public static string GetStActivityPrefDBName()
        {
            return "pm_st_activity_pref_c";
        }

        /// get character length for column
        public static short GetStActivityPrefLength()
        {
            return 2;
        }

        /// get the name of the field in the database for this column
        public static string GetStCommentDBName()
        {
            return "pm_st_comment_c";
        }

        /// get character length for column
        public static short GetStCommentLength()
        {
            return 148;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Table for short term applications.
    [Serializable()]
    public class PmShortTermApplicationRow : System.Data.DataRow
    {
        private PmShortTermApplicationTable myTable;

        /// Constructor
        public PmShortTermApplicationRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmShortTermApplicationTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Key to uniquely identify application
        public Int32 ApplicationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApplicationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApplicationKey)
                            || (((Int32)(this[this.myTable.ColumnApplicationKey])) != value)))
                {
                    this[this.myTable.ColumnApplicationKey] = value;
                }
            }
        }

        /// Partner key of office by which application was entered.
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// Date of application
        public System.DateTime StAppDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStAppDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStAppDate)
                            || (((System.DateTime)(this[this.myTable.ColumnStAppDate])) != value)))
                {
                    this[this.myTable.ColumnStAppDate] = value;
                }
            }
        }

        ///
        public String StApplicationType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStApplicationType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStApplicationType)
                            || (((String)(this[this.myTable.ColumnStApplicationType])) != value)))
                {
                    this[this.myTable.ColumnStApplicationType] = value;
                }
            }
        }

        /// TODO: this field is a combination of registration office and application number. might not be needed???
        public String StBasicXyzTbdIdentifier
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStBasicXyzTbdIdentifier.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStBasicXyzTbdIdentifier)
                            || (((String)(this[this.myTable.ColumnStBasicXyzTbdIdentifier])) != value)))
                {
                    this[this.myTable.ColumnStBasicXyzTbdIdentifier] = value;
                }
            }
        }

        /// This field will not appear on the screen but will be updated when someone chooses to delete a record. Rather that an actual deletion, the record will be 'marked' for deletion after an agreed upon interval.
        public Boolean StBasicDeleteFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStBasicDeleteFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStBasicDeleteFlag)
                            || (((Boolean)(this[this.myTable.ColumnStBasicDeleteFlag])) != value)))
                {
                    this[this.myTable.ColumnStBasicDeleteFlag] = value;
                }
            }
        }

        /// Indicates if the booking fee has been paid.
        public Boolean StBookingFeeReceived
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStBookingFeeReceived.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStBookingFeeReceived)
                            || (((Boolean)(this[this.myTable.ColumnStBookingFeeReceived])) != value)))
                {
                    this[this.myTable.ColumnStBookingFeeReceived] = value;
                }
            }
        }

        /// Indicates if the program fee has been paid.
        public Boolean StProgramFeeReceived
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStProgramFeeReceived.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStProgramFeeReceived)
                            || (((Boolean)(this[this.myTable.ColumnStProgramFeeReceived])) != value)))
                {
                    this[this.myTable.ColumnStProgramFeeReceived] = value;
                }
            }
        }

        /// Indicates if the application is on hold.
        public Boolean StApplicationOnHold
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStApplicationOnHold.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStApplicationOnHold)
                            || (((Boolean)(this[this.myTable.ColumnStApplicationOnHold])) != value)))
                {
                    this[this.myTable.ColumnStApplicationOnHold] = value;
                }
            }
        }

        /// Comment on why the application is on hold.
        public String StApplicationHoldReason
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStApplicationHoldReason.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStApplicationHoldReason)
                            || (((String)(this[this.myTable.ColumnStApplicationHoldReason])) != value)))
                {
                    this[this.myTable.ColumnStApplicationHoldReason] = value;
                }
            }
        }

        /// Enter the amount of the scholarship.
        public Decimal StScholarshipAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStScholarshipAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStScholarshipAmount)
                            || (((Decimal)(this[this.myTable.ColumnStScholarshipAmount])) != value)))
                {
                    this[this.myTable.ColumnStScholarshipAmount] = value;
                }
            }
        }

        /// Indicate who authorized the scholarship.
        public String StScholarshipApprovedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStScholarshipApprovedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStScholarshipApprovedBy)
                            || (((String)(this[this.myTable.ColumnStScholarshipApprovedBy])) != value)))
                {
                    this[this.myTable.ColumnStScholarshipApprovedBy] = value;
                }
            }
        }

        /// Indicates the date of the review of the scholarship.
        public System.DateTime? StScholarshipReviewDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStScholarshipReviewDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStScholarshipReviewDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnStScholarshipReviewDate])) != value)))
                {
                    this[this.myTable.ColumnStScholarshipReviewDate] = value;
                }
            }
        }

        /// Length of time the scholarship period covers.
        public String StScholarshipPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStScholarshipPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStScholarshipPeriod)
                            || (((String)(this[this.myTable.ColumnStScholarshipPeriod])) != value)))
                {
                    this[this.myTable.ColumnStScholarshipPeriod] = value;
                }
            }
        }

        /// Indicates the leadership rating of the applicant.
        public String StLeadershipRating
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStLeadershipRating.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStLeadershipRating)
                            || (((String)(this[this.myTable.ColumnStLeadershipRating])) != value)))
                {
                    this[this.myTable.ColumnStLeadershipRating] = value;
                }
            }
        }

        /// Indicates the xyz_tbd code of the confirmed option.
        public String ConfirmedOptionCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConfirmedOptionCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConfirmedOptionCode)
                            || (((String)(this[this.myTable.ColumnConfirmedOptionCode])) != value)))
                {
                    this[this.myTable.ColumnConfirmedOptionCode] = value;
                }
            }
        }

        /// Indicates the xyz_tbd code of the first xyz_tbd choice.
        public String Option1Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOption1Code.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOption1Code)
                            || (((String)(this[this.myTable.ColumnOption1Code])) != value)))
                {
                    this[this.myTable.ColumnOption1Code] = value;
                }
            }
        }

        /// Indicates the xyz_tbd code of the second xyz_tbd choice.
        public String Option2Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOption2Code.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOption2Code)
                            || (((String)(this[this.myTable.ColumnOption2Code])) != value)))
                {
                    this[this.myTable.ColumnOption2Code] = value;
                }
            }
        }

        /// Indicates if for xyz_tbd only.
        public Boolean StXyzTbdOnlyFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStXyzTbdOnlyFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStXyzTbdOnlyFlag)
                            || (((Boolean)(this[this.myTable.ColumnStXyzTbdOnlyFlag])) != value)))
                {
                    this[this.myTable.ColumnStXyzTbdOnlyFlag] = value;
                }
            }
        }

        /// Indicates the confirmed xyz_tbd option.
        public Int64 StConfirmedOption
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStConfirmedOption.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStConfirmedOption)
                            || (((Int64)(this[this.myTable.ColumnStConfirmedOption])) != value)))
                {
                    this[this.myTable.ColumnStConfirmedOption] = value;
                }
            }
        }

        /// Indicates the first xyz_tbd choice.
        public Int64 StOption1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStOption1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStOption1)
                            || (((Int64)(this[this.myTable.ColumnStOption1])) != value)))
                {
                    this[this.myTable.ColumnStOption1] = value;
                }
            }
        }

        /// Indicates the second xyz_tbd choice.
        public Int64 StOption2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStOption2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStOption2)
                            || (((Int64)(this[this.myTable.ColumnStOption2])) != value)))
                {
                    this[this.myTable.ColumnStOption2] = value;
                }
            }
        }

        /// Indicates the current field.
        public Int64 StCurrentField
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStCurrentField.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStCurrentField)
                            || (((Int64)(this[this.myTable.ColumnStCurrentField])) != value)))
                {
                    this[this.myTable.ColumnStCurrentField] = value;
                }
            }
        }

        /// Indicates the status of given arrival details (not known, being planned,...).
        public String ArrivalDetailsStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalDetailsStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalDetailsStatus)
                            || (((String)(this[this.myTable.ColumnArrivalDetailsStatus])) != value)))
                {
                    this[this.myTable.ColumnArrivalDetailsStatus] = value;
                }
            }
        }

        /// This code indicates the arrival point of the congress attendee.
        public String ArrivalPointCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalPointCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalPointCode)
                            || (((String)(this[this.myTable.ColumnArrivalPointCode])) != value)))
                {
                    this[this.myTable.ColumnArrivalPointCode] = value;
                }
            }
        }

        /// This code indicates the type of travel to the congress..
        public String TravelTypeToCongCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTravelTypeToCongCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTravelTypeToCongCode)
                            || (((String)(this[this.myTable.ColumnTravelTypeToCongCode])) != value)))
                {
                    this[this.myTable.ColumnTravelTypeToCongCode] = value;
                }
            }
        }

        /// Date of arrival at the conference.
        public System.DateTime? Arrival
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrival.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrival)
                            || (((System.DateTime?)(this[this.myTable.ColumnArrival])) != value)))
                {
                    this[this.myTable.ColumnArrival] = value;
                }
            }
        }

        /// The hour of arrival.
        public Int32 ArrivalHour
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalHour.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalHour)
                            || (((Int32)(this[this.myTable.ColumnArrivalHour])) != value)))
                {
                    this[this.myTable.ColumnArrivalHour] = value;
                }
            }
        }

        /// The minutes of arrival.
        public Int32 ArrivalMinute
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalMinute.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalMinute)
                            || (((Int32)(this[this.myTable.ColumnArrivalMinute])) != value)))
                {
                    this[this.myTable.ColumnArrivalMinute] = value;
                }
            }
        }

        /// Information concerning flight or bus numbers.
        public String ToCongTravelInfo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToCongTravelInfo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToCongTravelInfo)
                            || (((String)(this[this.myTable.ColumnToCongTravelInfo])) != value)))
                {
                    this[this.myTable.ColumnToCongTravelInfo] = value;
                }
            }
        }

        /// Indicates if transport from arrival point to congress needs to be arranged by Registrar.
        public Boolean ArrivalTransportNeeded
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalTransportNeeded.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalTransportNeeded)
                            || (((Boolean)(this[this.myTable.ColumnArrivalTransportNeeded])) != value)))
                {
                    this[this.myTable.ColumnArrivalTransportNeeded] = value;
                }
            }
        }

        /// Date of expected arrival at the conference (if no transport from arrival point is needed).
        public System.DateTime? ArrivalExp
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalExp.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalExp)
                            || (((System.DateTime?)(this[this.myTable.ColumnArrivalExp])) != value)))
                {
                    this[this.myTable.ColumnArrivalExp] = value;
                }
            }
        }

        /// The hour of expected arrival (if no transport from arrival point is needed).
        public Int32 ArrivalExpHour
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalExpHour.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalExpHour)
                            || (((Int32)(this[this.myTable.ColumnArrivalExpHour])) != value)))
                {
                    this[this.myTable.ColumnArrivalExpHour] = value;
                }
            }
        }

        /// The minutes of expected arrival (if no transport from arrival point is needed).
        public Int32 ArrivalExpMinute
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalExpMinute.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalExpMinute)
                            || (((Int32)(this[this.myTable.ColumnArrivalExpMinute])) != value)))
                {
                    this[this.myTable.ColumnArrivalExpMinute] = value;
                }
            }
        }

        /// Gives further comments on arrival information.
        public String ArrivalComments
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnArrivalComments.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnArrivalComments)
                            || (((String)(this[this.myTable.ColumnArrivalComments])) != value)))
                {
                    this[this.myTable.ColumnArrivalComments] = value;
                }
            }
        }

        /// Indicates the status of given departure details (undetermined, being planned,...).
        public String DepartureDetailsStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDepartureDetailsStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDepartureDetailsStatus)
                            || (((String)(this[this.myTable.ColumnDepartureDetailsStatus])) != value)))
                {
                    this[this.myTable.ColumnDepartureDetailsStatus] = value;
                }
            }
        }

        /// This code indicates the departure point of the congress attendee.
        public String DeparturePointCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeparturePointCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeparturePointCode)
                            || (((String)(this[this.myTable.ColumnDeparturePointCode])) != value)))
                {
                    this[this.myTable.ColumnDeparturePointCode] = value;
                }
            }
        }

        /// This code indicates the type of travel from the congress.
        public String TravelTypeFromCongCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTravelTypeFromCongCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTravelTypeFromCongCode)
                            || (((String)(this[this.myTable.ColumnTravelTypeFromCongCode])) != value)))
                {
                    this[this.myTable.ColumnTravelTypeFromCongCode] = value;
                }
            }
        }

        /// Date of departure from the conference.
        public System.DateTime? Departure
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeparture.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeparture)
                            || (((System.DateTime?)(this[this.myTable.ColumnDeparture])) != value)))
                {
                    this[this.myTable.ColumnDeparture] = value;
                }
            }
        }

        /// The hour of departure.
        public Int32 DepartureHour
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDepartureHour.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDepartureHour)
                            || (((Int32)(this[this.myTable.ColumnDepartureHour])) != value)))
                {
                    this[this.myTable.ColumnDepartureHour] = value;
                }
            }
        }

        /// The minutes of departure.
        public Int32 DepartureMinute
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDepartureMinute.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDepartureMinute)
                            || (((Int32)(this[this.myTable.ColumnDepartureMinute])) != value)))
                {
                    this[this.myTable.ColumnDepartureMinute] = value;
                }
            }
        }

        /// Information concerning flight or bus numbers.
        public String FromCongTravelInfo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromCongTravelInfo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromCongTravelInfo)
                            || (((String)(this[this.myTable.ColumnFromCongTravelInfo])) != value)))
                {
                    this[this.myTable.ColumnFromCongTravelInfo] = value;
                }
            }
        }

        /// Indicates if transport from congress to departure point needs to be arranged by Registrar.
        public Boolean DepartureTransportNeeded
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDepartureTransportNeeded.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDepartureTransportNeeded)
                            || (((Boolean)(this[this.myTable.ColumnDepartureTransportNeeded])) != value)))
                {
                    this[this.myTable.ColumnDepartureTransportNeeded] = value;
                }
            }
        }

        /// Date of expected departure from the conference (if no transport to departure point is needed).
        public System.DateTime? DepartureExp
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDepartureExp.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDepartureExp)
                            || (((System.DateTime?)(this[this.myTable.ColumnDepartureExp])) != value)))
                {
                    this[this.myTable.ColumnDepartureExp] = value;
                }
            }
        }

        /// The hour of expected departure (if no transport to departure point is needed).
        public Int32 DepartureExpHour
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDepartureExpHour.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDepartureExpHour)
                            || (((Int32)(this[this.myTable.ColumnDepartureExpHour])) != value)))
                {
                    this[this.myTable.ColumnDepartureExpHour] = value;
                }
            }
        }

        /// The minutes of expected departure (if no transport to departure point is needed).
        public Int32 DepartureExpMinute
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDepartureExpMinute.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDepartureExpMinute)
                            || (((Int32)(this[this.myTable.ColumnDepartureExpMinute])) != value)))
                {
                    this[this.myTable.ColumnDepartureExpMinute] = value;
                }
            }
        }

        /// Gives further comments on departure information.
        public String DepartureComments
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDepartureComments.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDepartureComments)
                            || (((String)(this[this.myTable.ColumnDepartureComments])) != value)))
                {
                    this[this.myTable.ColumnDepartureComments] = value;
                }
            }
        }

        /// Applicant is interested if there would be a transport possibility from/to arrival/departure point.
        public Boolean TransportInterest
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransportInterest.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransportInterest)
                            || (((Boolean)(this[this.myTable.ColumnTransportInterest])) != value)))
                {
                    this[this.myTable.ColumnTransportInterest] = value;
                }
            }
        }

        /// Gives a phone number/email where the applicant (or registering person) can be contacted.
        public String ContactNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactNumber)
                            || (((String)(this[this.myTable.ColumnContactNumber])) != value)))
                {
                    this[this.myTable.ColumnContactNumber] = value;
                }
            }
        }

        /// This is the efforts that recruited the applicant for the event.
        public String StRecruitEfforts
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStRecruitEfforts.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStRecruitEfforts)
                            || (((String)(this[this.myTable.ColumnStRecruitEfforts])) != value)))
                {
                    this[this.myTable.ColumnStRecruitEfforts] = value;
                }
            }
        }

        /// This code indicates what role they have during pre-congress.
        public String StPreCongressCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStPreCongressCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStPreCongressCode)
                            || (((String)(this[this.myTable.ColumnStPreCongressCode])) != value)))
                {
                    this[this.myTable.ColumnStPreCongressCode] = value;
                }
            }
        }

        /// Indicates the role for the Congress.
        public String StCongressCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStCongressCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStCongressCode)
                            || (((String)(this[this.myTable.ColumnStCongressCode])) != value)))
                {
                    this[this.myTable.ColumnStCongressCode] = value;
                }
            }
        }

        /// Indicates any special information about the applicant.
        public String StSpecialApplicant
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStSpecialApplicant.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStSpecialApplicant)
                            || (((String)(this[this.myTable.ColumnStSpecialApplicant])) != value)))
                {
                    this[this.myTable.ColumnStSpecialApplicant] = value;
                }
            }
        }

        /// The role a participant has during a xyz_tbd
        public String XyzTbdRole
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnXyzTbdRole.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnXyzTbdRole)
                            || (((String)(this[this.myTable.ColumnXyzTbdRole])) != value)))
                {
                    this[this.myTable.ColumnXyzTbdRole] = value;
                }
            }
        }

        /// This field is the partner key of the party contact person.
        public Int64 StPartyContact
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStPartyContact.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStPartyContact)
                            || (((Int64)(this[this.myTable.ColumnStPartyContact])) != value)))
                {
                    this[this.myTable.ColumnStPartyContact] = value;
                }
            }
        }

        /// Indicates what parts of the xyz_tbd the party stays together.
        public String StPartyTogether
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStPartyTogether.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStPartyTogether)
                            || (((String)(this[this.myTable.ColumnStPartyTogether])) != value)))
                {
                    this[this.myTable.ColumnStPartyTogether] = value;
                }
            }
        }

        /// Indicates if the person is a leader of a fellowship group.
        public Boolean StFgLeader
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStFgLeader.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStFgLeader)
                            || (((Boolean)(this[this.myTable.ColumnStFgLeader])) != value)))
                {
                    this[this.myTable.ColumnStFgLeader] = value;
                }
            }
        }

        /// A free form field for group codes.
        public String StFgCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStFgCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStFgCode)
                            || (((String)(this[this.myTable.ColumnStFgCode])) != value)))
                {
                    this[this.myTable.ColumnStFgCode] = value;
                }
            }
        }

        /// Special Costs related to the xyz_tbd.
        public Int32 StCmpgnSpecialCost
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStCmpgnSpecialCost.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStCmpgnSpecialCost)
                            || (((Int32)(this[this.myTable.ColumnStCmpgnSpecialCost])) != value)))
                {
                    this[this.myTable.ColumnStCmpgnSpecialCost] = value;
                }
            }
        }

        /// Special Costs related to the congress.
        public Int32 StCngrssSpecialCost
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStCngrssSpecialCost.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStCngrssSpecialCost)
                            || (((Int32)(this[this.myTable.ColumnStCngrssSpecialCost])) != value)))
                {
                    this[this.myTable.ColumnStCngrssSpecialCost] = value;
                }
            }
        }

        /// This field idenifies the field to be charged for the costs.
        public Int64 StFieldCharged
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStFieldCharged.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStFieldCharged)
                            || (((Int64)(this[this.myTable.ColumnStFieldCharged])) != value)))
                {
                    this[this.myTable.ColumnStFieldCharged] = value;
                }
            }
        }

        /// This is the language spoken by the applicant at the Congress.
        public String StCongressLanguage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStCongressLanguage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStCongressLanguage)
                            || (((String)(this[this.myTable.ColumnStCongressLanguage])) != value)))
                {
                    this[this.myTable.ColumnStCongressLanguage] = value;
                }
            }
        }

        /// Indicates how important the country preference is.
        public String StCountryPref
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStCountryPref.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStCountryPref)
                            || (((String)(this[this.myTable.ColumnStCountryPref])) != value)))
                {
                    this[this.myTable.ColumnStCountryPref] = value;
                }
            }
        }

        /// Indicates how important the activity preference is.
        public String StActivityPref
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStActivityPref.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStActivityPref)
                            || (((String)(this[this.myTable.ColumnStActivityPref])) != value)))
                {
                    this[this.myTable.ColumnStActivityPref] = value;
                }
            }
        }

        /// Comments pertaining to the xyz_tbd.
        /// (Made obsolete: use pm_general_application.pm_comment_c)
        public String StComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStComment)
                            || (((String)(this[this.myTable.ColumnStComment])) != value)))
                {
                    this[this.myTable.ColumnStComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnApplicationKey.Ordinal] = 0;
            this[this.myTable.ColumnRegistrationOffice.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnStAppDate);
            this.SetNull(this.myTable.ColumnStApplicationType);
            this.SetNull(this.myTable.ColumnStBasicXyzTbdIdentifier);
            this[this.myTable.ColumnStBasicDeleteFlag.Ordinal] = false;
            this[this.myTable.ColumnStBookingFeeReceived.Ordinal] = false;
            this[this.myTable.ColumnStProgramFeeReceived.Ordinal] = false;
            this[this.myTable.ColumnStApplicationOnHold.Ordinal] = false;
            this.SetNull(this.myTable.ColumnStApplicationHoldReason);
            this[this.myTable.ColumnStScholarshipAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnStScholarshipApprovedBy);
            this.SetNull(this.myTable.ColumnStScholarshipReviewDate);
            this.SetNull(this.myTable.ColumnStScholarshipPeriod);
            this.SetNull(this.myTable.ColumnStLeadershipRating);
            this.SetNull(this.myTable.ColumnConfirmedOptionCode);
            this.SetNull(this.myTable.ColumnOption1Code);
            this.SetNull(this.myTable.ColumnOption2Code);
            this[this.myTable.ColumnStXyzTbdOnlyFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnStConfirmedOption);
            this.SetNull(this.myTable.ColumnStOption1);
            this.SetNull(this.myTable.ColumnStOption2);
            this.SetNull(this.myTable.ColumnStCurrentField);
            this[this.myTable.ColumnArrivalDetailsStatus.Ordinal] = "no";
            this.SetNull(this.myTable.ColumnArrivalPointCode);
            this.SetNull(this.myTable.ColumnTravelTypeToCongCode);
            this.SetNull(this.myTable.ColumnArrival);
            this[this.myTable.ColumnArrivalHour.Ordinal] = 00;
            this[this.myTable.ColumnArrivalMinute.Ordinal] = 00;
            this.SetNull(this.myTable.ColumnToCongTravelInfo);
            this[this.myTable.ColumnArrivalTransportNeeded.Ordinal] = false;
            this.SetNull(this.myTable.ColumnArrivalExp);
            this[this.myTable.ColumnArrivalExpHour.Ordinal] = 00;
            this[this.myTable.ColumnArrivalExpMinute.Ordinal] = 00;
            this.SetNull(this.myTable.ColumnArrivalComments);
            this[this.myTable.ColumnDepartureDetailsStatus.Ordinal] = "no";
            this.SetNull(this.myTable.ColumnDeparturePointCode);
            this.SetNull(this.myTable.ColumnTravelTypeFromCongCode);
            this.SetNull(this.myTable.ColumnDeparture);
            this[this.myTable.ColumnDepartureHour.Ordinal] = 00;
            this[this.myTable.ColumnDepartureMinute.Ordinal] = 00;
            this.SetNull(this.myTable.ColumnFromCongTravelInfo);
            this[this.myTable.ColumnDepartureTransportNeeded.Ordinal] = false;
            this.SetNull(this.myTable.ColumnDepartureExp);
            this[this.myTable.ColumnDepartureExpHour.Ordinal] = 00;
            this[this.myTable.ColumnDepartureExpMinute.Ordinal] = 00;
            this.SetNull(this.myTable.ColumnDepartureComments);
            this[this.myTable.ColumnTransportInterest.Ordinal] = false;
            this[this.myTable.ColumnContactNumber.Ordinal] = "no";
            this.SetNull(this.myTable.ColumnStRecruitEfforts);
            this.SetNull(this.myTable.ColumnStPreCongressCode);
            this.SetNull(this.myTable.ColumnStCongressCode);
            this.SetNull(this.myTable.ColumnStSpecialApplicant);
            this.SetNull(this.myTable.ColumnXyzTbdRole);
            this.SetNull(this.myTable.ColumnStPartyContact);
            this.SetNull(this.myTable.ColumnStPartyTogether);
            this[this.myTable.ColumnStFgLeader.Ordinal] = false;
            this.SetNull(this.myTable.ColumnStFgCode);
            this[this.myTable.ColumnStCmpgnSpecialCost.Ordinal] = 0;
            this[this.myTable.ColumnStCngrssSpecialCost.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnStFieldCharged);
            this.SetNull(this.myTable.ColumnStCongressLanguage);
            this.SetNull(this.myTable.ColumnStCountryPref);
            this.SetNull(this.myTable.ColumnStActivityPref);
            this.SetNull(this.myTable.ColumnStComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsApplicationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnApplicationKey);
        }

        /// assign NULL value
        public void SetApplicationKeyNull()
        {
            this.SetNull(this.myTable.ColumnApplicationKey);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsStAppDateNull()
        {
            return this.IsNull(this.myTable.ColumnStAppDate);
        }

        /// assign NULL value
        public void SetStAppDateNull()
        {
            this.SetNull(this.myTable.ColumnStAppDate);
        }

        /// test for NULL value
        public bool IsStApplicationTypeNull()
        {
            return this.IsNull(this.myTable.ColumnStApplicationType);
        }

        /// assign NULL value
        public void SetStApplicationTypeNull()
        {
            this.SetNull(this.myTable.ColumnStApplicationType);
        }

        /// test for NULL value
        public bool IsStBasicXyzTbdIdentifierNull()
        {
            return this.IsNull(this.myTable.ColumnStBasicXyzTbdIdentifier);
        }

        /// assign NULL value
        public void SetStBasicXyzTbdIdentifierNull()
        {
            this.SetNull(this.myTable.ColumnStBasicXyzTbdIdentifier);
        }

        /// test for NULL value
        public bool IsStBasicDeleteFlagNull()
        {
            return this.IsNull(this.myTable.ColumnStBasicDeleteFlag);
        }

        /// assign NULL value
        public void SetStBasicDeleteFlagNull()
        {
            this.SetNull(this.myTable.ColumnStBasicDeleteFlag);
        }

        /// test for NULL value
        public bool IsStBookingFeeReceivedNull()
        {
            return this.IsNull(this.myTable.ColumnStBookingFeeReceived);
        }

        /// assign NULL value
        public void SetStBookingFeeReceivedNull()
        {
            this.SetNull(this.myTable.ColumnStBookingFeeReceived);
        }

        /// test for NULL value
        public bool IsStProgramFeeReceivedNull()
        {
            return this.IsNull(this.myTable.ColumnStProgramFeeReceived);
        }

        /// assign NULL value
        public void SetStProgramFeeReceivedNull()
        {
            this.SetNull(this.myTable.ColumnStProgramFeeReceived);
        }

        /// test for NULL value
        public bool IsStApplicationOnHoldNull()
        {
            return this.IsNull(this.myTable.ColumnStApplicationOnHold);
        }

        /// assign NULL value
        public void SetStApplicationOnHoldNull()
        {
            this.SetNull(this.myTable.ColumnStApplicationOnHold);
        }

        /// test for NULL value
        public bool IsStApplicationHoldReasonNull()
        {
            return this.IsNull(this.myTable.ColumnStApplicationHoldReason);
        }

        /// assign NULL value
        public void SetStApplicationHoldReasonNull()
        {
            this.SetNull(this.myTable.ColumnStApplicationHoldReason);
        }

        /// test for NULL value
        public bool IsStScholarshipAmountNull()
        {
            return this.IsNull(this.myTable.ColumnStScholarshipAmount);
        }

        /// assign NULL value
        public void SetStScholarshipAmountNull()
        {
            this.SetNull(this.myTable.ColumnStScholarshipAmount);
        }

        /// test for NULL value
        public bool IsStScholarshipApprovedByNull()
        {
            return this.IsNull(this.myTable.ColumnStScholarshipApprovedBy);
        }

        /// assign NULL value
        public void SetStScholarshipApprovedByNull()
        {
            this.SetNull(this.myTable.ColumnStScholarshipApprovedBy);
        }

        /// test for NULL value
        public bool IsStScholarshipReviewDateNull()
        {
            return this.IsNull(this.myTable.ColumnStScholarshipReviewDate);
        }

        /// assign NULL value
        public void SetStScholarshipReviewDateNull()
        {
            this.SetNull(this.myTable.ColumnStScholarshipReviewDate);
        }

        /// test for NULL value
        public bool IsStScholarshipPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnStScholarshipPeriod);
        }

        /// assign NULL value
        public void SetStScholarshipPeriodNull()
        {
            this.SetNull(this.myTable.ColumnStScholarshipPeriod);
        }

        /// test for NULL value
        public bool IsStLeadershipRatingNull()
        {
            return this.IsNull(this.myTable.ColumnStLeadershipRating);
        }

        /// assign NULL value
        public void SetStLeadershipRatingNull()
        {
            this.SetNull(this.myTable.ColumnStLeadershipRating);
        }

        /// test for NULL value
        public bool IsConfirmedOptionCodeNull()
        {
            return this.IsNull(this.myTable.ColumnConfirmedOptionCode);
        }

        /// assign NULL value
        public void SetConfirmedOptionCodeNull()
        {
            this.SetNull(this.myTable.ColumnConfirmedOptionCode);
        }

        /// test for NULL value
        public bool IsOption1CodeNull()
        {
            return this.IsNull(this.myTable.ColumnOption1Code);
        }

        /// assign NULL value
        public void SetOption1CodeNull()
        {
            this.SetNull(this.myTable.ColumnOption1Code);
        }

        /// test for NULL value
        public bool IsOption2CodeNull()
        {
            return this.IsNull(this.myTable.ColumnOption2Code);
        }

        /// assign NULL value
        public void SetOption2CodeNull()
        {
            this.SetNull(this.myTable.ColumnOption2Code);
        }

        /// test for NULL value
        public bool IsStXyzTbdOnlyFlagNull()
        {
            return this.IsNull(this.myTable.ColumnStXyzTbdOnlyFlag);
        }

        /// assign NULL value
        public void SetStXyzTbdOnlyFlagNull()
        {
            this.SetNull(this.myTable.ColumnStXyzTbdOnlyFlag);
        }

        /// test for NULL value
        public bool IsStConfirmedOptionNull()
        {
            return this.IsNull(this.myTable.ColumnStConfirmedOption);
        }

        /// assign NULL value
        public void SetStConfirmedOptionNull()
        {
            this.SetNull(this.myTable.ColumnStConfirmedOption);
        }

        /// test for NULL value
        public bool IsStOption1Null()
        {
            return this.IsNull(this.myTable.ColumnStOption1);
        }

        /// assign NULL value
        public void SetStOption1Null()
        {
            this.SetNull(this.myTable.ColumnStOption1);
        }

        /// test for NULL value
        public bool IsStOption2Null()
        {
            return this.IsNull(this.myTable.ColumnStOption2);
        }

        /// assign NULL value
        public void SetStOption2Null()
        {
            this.SetNull(this.myTable.ColumnStOption2);
        }

        /// test for NULL value
        public bool IsStCurrentFieldNull()
        {
            return this.IsNull(this.myTable.ColumnStCurrentField);
        }

        /// assign NULL value
        public void SetStCurrentFieldNull()
        {
            this.SetNull(this.myTable.ColumnStCurrentField);
        }

        /// test for NULL value
        public bool IsArrivalDetailsStatusNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalDetailsStatus);
        }

        /// assign NULL value
        public void SetArrivalDetailsStatusNull()
        {
            this.SetNull(this.myTable.ColumnArrivalDetailsStatus);
        }

        /// test for NULL value
        public bool IsArrivalPointCodeNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalPointCode);
        }

        /// assign NULL value
        public void SetArrivalPointCodeNull()
        {
            this.SetNull(this.myTable.ColumnArrivalPointCode);
        }

        /// test for NULL value
        public bool IsTravelTypeToCongCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTravelTypeToCongCode);
        }

        /// assign NULL value
        public void SetTravelTypeToCongCodeNull()
        {
            this.SetNull(this.myTable.ColumnTravelTypeToCongCode);
        }

        /// test for NULL value
        public bool IsArrivalNull()
        {
            return this.IsNull(this.myTable.ColumnArrival);
        }

        /// assign NULL value
        public void SetArrivalNull()
        {
            this.SetNull(this.myTable.ColumnArrival);
        }

        /// test for NULL value
        public bool IsArrivalHourNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalHour);
        }

        /// assign NULL value
        public void SetArrivalHourNull()
        {
            this.SetNull(this.myTable.ColumnArrivalHour);
        }

        /// test for NULL value
        public bool IsArrivalMinuteNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalMinute);
        }

        /// assign NULL value
        public void SetArrivalMinuteNull()
        {
            this.SetNull(this.myTable.ColumnArrivalMinute);
        }

        /// test for NULL value
        public bool IsToCongTravelInfoNull()
        {
            return this.IsNull(this.myTable.ColumnToCongTravelInfo);
        }

        /// assign NULL value
        public void SetToCongTravelInfoNull()
        {
            this.SetNull(this.myTable.ColumnToCongTravelInfo);
        }

        /// test for NULL value
        public bool IsArrivalTransportNeededNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalTransportNeeded);
        }

        /// assign NULL value
        public void SetArrivalTransportNeededNull()
        {
            this.SetNull(this.myTable.ColumnArrivalTransportNeeded);
        }

        /// test for NULL value
        public bool IsArrivalExpNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalExp);
        }

        /// assign NULL value
        public void SetArrivalExpNull()
        {
            this.SetNull(this.myTable.ColumnArrivalExp);
        }

        /// test for NULL value
        public bool IsArrivalExpHourNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalExpHour);
        }

        /// assign NULL value
        public void SetArrivalExpHourNull()
        {
            this.SetNull(this.myTable.ColumnArrivalExpHour);
        }

        /// test for NULL value
        public bool IsArrivalExpMinuteNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalExpMinute);
        }

        /// assign NULL value
        public void SetArrivalExpMinuteNull()
        {
            this.SetNull(this.myTable.ColumnArrivalExpMinute);
        }

        /// test for NULL value
        public bool IsArrivalCommentsNull()
        {
            return this.IsNull(this.myTable.ColumnArrivalComments);
        }

        /// assign NULL value
        public void SetArrivalCommentsNull()
        {
            this.SetNull(this.myTable.ColumnArrivalComments);
        }

        /// test for NULL value
        public bool IsDepartureDetailsStatusNull()
        {
            return this.IsNull(this.myTable.ColumnDepartureDetailsStatus);
        }

        /// assign NULL value
        public void SetDepartureDetailsStatusNull()
        {
            this.SetNull(this.myTable.ColumnDepartureDetailsStatus);
        }

        /// test for NULL value
        public bool IsDeparturePointCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDeparturePointCode);
        }

        /// assign NULL value
        public void SetDeparturePointCodeNull()
        {
            this.SetNull(this.myTable.ColumnDeparturePointCode);
        }

        /// test for NULL value
        public bool IsTravelTypeFromCongCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTravelTypeFromCongCode);
        }

        /// assign NULL value
        public void SetTravelTypeFromCongCodeNull()
        {
            this.SetNull(this.myTable.ColumnTravelTypeFromCongCode);
        }

        /// test for NULL value
        public bool IsDepartureNull()
        {
            return this.IsNull(this.myTable.ColumnDeparture);
        }

        /// assign NULL value
        public void SetDepartureNull()
        {
            this.SetNull(this.myTable.ColumnDeparture);
        }

        /// test for NULL value
        public bool IsDepartureHourNull()
        {
            return this.IsNull(this.myTable.ColumnDepartureHour);
        }

        /// assign NULL value
        public void SetDepartureHourNull()
        {
            this.SetNull(this.myTable.ColumnDepartureHour);
        }

        /// test for NULL value
        public bool IsDepartureMinuteNull()
        {
            return this.IsNull(this.myTable.ColumnDepartureMinute);
        }

        /// assign NULL value
        public void SetDepartureMinuteNull()
        {
            this.SetNull(this.myTable.ColumnDepartureMinute);
        }

        /// test for NULL value
        public bool IsFromCongTravelInfoNull()
        {
            return this.IsNull(this.myTable.ColumnFromCongTravelInfo);
        }

        /// assign NULL value
        public void SetFromCongTravelInfoNull()
        {
            this.SetNull(this.myTable.ColumnFromCongTravelInfo);
        }

        /// test for NULL value
        public bool IsDepartureTransportNeededNull()
        {
            return this.IsNull(this.myTable.ColumnDepartureTransportNeeded);
        }

        /// assign NULL value
        public void SetDepartureTransportNeededNull()
        {
            this.SetNull(this.myTable.ColumnDepartureTransportNeeded);
        }

        /// test for NULL value
        public bool IsDepartureExpNull()
        {
            return this.IsNull(this.myTable.ColumnDepartureExp);
        }

        /// assign NULL value
        public void SetDepartureExpNull()
        {
            this.SetNull(this.myTable.ColumnDepartureExp);
        }

        /// test for NULL value
        public bool IsDepartureExpHourNull()
        {
            return this.IsNull(this.myTable.ColumnDepartureExpHour);
        }

        /// assign NULL value
        public void SetDepartureExpHourNull()
        {
            this.SetNull(this.myTable.ColumnDepartureExpHour);
        }

        /// test for NULL value
        public bool IsDepartureExpMinuteNull()
        {
            return this.IsNull(this.myTable.ColumnDepartureExpMinute);
        }

        /// assign NULL value
        public void SetDepartureExpMinuteNull()
        {
            this.SetNull(this.myTable.ColumnDepartureExpMinute);
        }

        /// test for NULL value
        public bool IsDepartureCommentsNull()
        {
            return this.IsNull(this.myTable.ColumnDepartureComments);
        }

        /// assign NULL value
        public void SetDepartureCommentsNull()
        {
            this.SetNull(this.myTable.ColumnDepartureComments);
        }

        /// test for NULL value
        public bool IsTransportInterestNull()
        {
            return this.IsNull(this.myTable.ColumnTransportInterest);
        }

        /// assign NULL value
        public void SetTransportInterestNull()
        {
            this.SetNull(this.myTable.ColumnTransportInterest);
        }

        /// test for NULL value
        public bool IsContactNumberNull()
        {
            return this.IsNull(this.myTable.ColumnContactNumber);
        }

        /// assign NULL value
        public void SetContactNumberNull()
        {
            this.SetNull(this.myTable.ColumnContactNumber);
        }

        /// test for NULL value
        public bool IsStRecruitEffortsNull()
        {
            return this.IsNull(this.myTable.ColumnStRecruitEfforts);
        }

        /// assign NULL value
        public void SetStRecruitEffortsNull()
        {
            this.SetNull(this.myTable.ColumnStRecruitEfforts);
        }

        /// test for NULL value
        public bool IsStPreCongressCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStPreCongressCode);
        }

        /// assign NULL value
        public void SetStPreCongressCodeNull()
        {
            this.SetNull(this.myTable.ColumnStPreCongressCode);
        }

        /// test for NULL value
        public bool IsStCongressCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStCongressCode);
        }

        /// assign NULL value
        public void SetStCongressCodeNull()
        {
            this.SetNull(this.myTable.ColumnStCongressCode);
        }

        /// test for NULL value
        public bool IsStSpecialApplicantNull()
        {
            return this.IsNull(this.myTable.ColumnStSpecialApplicant);
        }

        /// assign NULL value
        public void SetStSpecialApplicantNull()
        {
            this.SetNull(this.myTable.ColumnStSpecialApplicant);
        }

        /// test for NULL value
        public bool IsXyzTbdRoleNull()
        {
            return this.IsNull(this.myTable.ColumnXyzTbdRole);
        }

        /// assign NULL value
        public void SetXyzTbdRoleNull()
        {
            this.SetNull(this.myTable.ColumnXyzTbdRole);
        }

        /// test for NULL value
        public bool IsStPartyContactNull()
        {
            return this.IsNull(this.myTable.ColumnStPartyContact);
        }

        /// assign NULL value
        public void SetStPartyContactNull()
        {
            this.SetNull(this.myTable.ColumnStPartyContact);
        }

        /// test for NULL value
        public bool IsStPartyTogetherNull()
        {
            return this.IsNull(this.myTable.ColumnStPartyTogether);
        }

        /// assign NULL value
        public void SetStPartyTogetherNull()
        {
            this.SetNull(this.myTable.ColumnStPartyTogether);
        }

        /// test for NULL value
        public bool IsStFgLeaderNull()
        {
            return this.IsNull(this.myTable.ColumnStFgLeader);
        }

        /// assign NULL value
        public void SetStFgLeaderNull()
        {
            this.SetNull(this.myTable.ColumnStFgLeader);
        }

        /// test for NULL value
        public bool IsStFgCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStFgCode);
        }

        /// assign NULL value
        public void SetStFgCodeNull()
        {
            this.SetNull(this.myTable.ColumnStFgCode);
        }

        /// test for NULL value
        public bool IsStCmpgnSpecialCostNull()
        {
            return this.IsNull(this.myTable.ColumnStCmpgnSpecialCost);
        }

        /// assign NULL value
        public void SetStCmpgnSpecialCostNull()
        {
            this.SetNull(this.myTable.ColumnStCmpgnSpecialCost);
        }

        /// test for NULL value
        public bool IsStCngrssSpecialCostNull()
        {
            return this.IsNull(this.myTable.ColumnStCngrssSpecialCost);
        }

        /// assign NULL value
        public void SetStCngrssSpecialCostNull()
        {
            this.SetNull(this.myTable.ColumnStCngrssSpecialCost);
        }

        /// test for NULL value
        public bool IsStFieldChargedNull()
        {
            return this.IsNull(this.myTable.ColumnStFieldCharged);
        }

        /// assign NULL value
        public void SetStFieldChargedNull()
        {
            this.SetNull(this.myTable.ColumnStFieldCharged);
        }

        /// test for NULL value
        public bool IsStCongressLanguageNull()
        {
            return this.IsNull(this.myTable.ColumnStCongressLanguage);
        }

        /// assign NULL value
        public void SetStCongressLanguageNull()
        {
            this.SetNull(this.myTable.ColumnStCongressLanguage);
        }

        /// test for NULL value
        public bool IsStCountryPrefNull()
        {
            return this.IsNull(this.myTable.ColumnStCountryPref);
        }

        /// assign NULL value
        public void SetStCountryPrefNull()
        {
            this.SetNull(this.myTable.ColumnStCountryPref);
        }

        /// test for NULL value
        public bool IsStActivityPrefNull()
        {
            return this.IsNull(this.myTable.ColumnStActivityPref);
        }

        /// assign NULL value
        public void SetStActivityPrefNull()
        {
            this.SetNull(this.myTable.ColumnStActivityPref);
        }

        /// test for NULL value
        public bool IsStCommentNull()
        {
            return this.IsNull(this.myTable.ColumnStComment);
        }

        /// assign NULL value
        public void SetStCommentNull()
        {
            this.SetNull(this.myTable.ColumnStComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains information pertaining to the application process.
    [Serializable()]
    public class PmYearProgramApplicationTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 206;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnApplicationKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpAppDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpBasicAppTypeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpBasicDeleteFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpAppFeeReceivedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnHoOrientConfBookingKeyId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpAgreedSupportFigureId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpAgreedJoiningChargeId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpScholarshipId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpScholarshipAthrizedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpScholarshipBeginDateId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpScholarshipEndDateId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpScholarshipReviewDateId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpScholarshipPeriodId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpSupportPeriodId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnYpJoiningConfId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnStartOfCommitmentId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnEndOfCommitmentId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnIntendedComLengthMonthsId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnPositionNameId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnPositionScopeId = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnAssistantToId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 28;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmYearProgramApplication", "pm_year_program_application",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "ApplicationKey", "pm_application_key_i", "Application Key", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "RegistrationOffice", "pm_registration_office_n", "Registration Office", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "YpAppDate", "pm_yp_app_date_d", "Application Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(4, "YpBasicAppType", "pm_yp_basic_app_type_c", "Application Type", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(5, "YpBasicDeleteFlag", "pm_yp_basic_delete_flag_l", "Delete Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "YpAppFeeReceived", "pm_yp_app_fee_received_l", "Application Fee Paid", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(7, "HoOrientConfBookingKey", "pm_ho_orient_conf_booking_key_c", "Home Office Orientation Key", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(8, "YpAgreedSupportFigure", "pm_yp_agreed_support_figure_n", "Agreed Support", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(9, "YpAgreedJoiningCharge", "pm_yp_agreed_joining_charge_n", "Agreed Joining Charge", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(10, "YpScholarship", "pm_yp_scholarship_n", "Scholarship", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(11, "YpScholarshipAthrizedBy", "pm_yp_scholarship_athrized_by_c", "Scholarship Authorized By:", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(12, "YpScholarshipBeginDate", "pm_yp_scholarship_begin_date_d", "Scholarship Begin Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "YpScholarshipEndDate", "pm_yp_scholarship_end_date_d", "Scholarship end Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "YpScholarshipReviewDate", "pm_yp_scholarship_review_date_d", "Scholarship Review Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "YpScholarshipPeriod", "pm_yp_scholarship_period_c", "Scholarship Period", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(16, "YpSupportPeriod", "pm_yp_support_period_c", "Support Period", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(17, "YpJoiningConf", "pm_yp_joining_conf_i", "Joining Conference", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(18, "StartOfCommitment", "pm_start_of_commitment_d", "Commitment Start Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(19, "EndOfCommitment", "pm_end_of_commitment_d", "Commitment End Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(20, "IntendedComLengthMonths", "pm_intended_com_length_months_i", "Intended Length of Commitment", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(21, "PositionName", "pt_position_name_c", "Position", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(22, "PositionScope", "pt_position_scope_c", "Position Scope", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(23, "AssistantTo", "pt_assistant_to_l", "pt_assistant_to_l", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(24, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(25, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(26, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(27, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(28, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }, new int[] {
                    0, 3, 4
                }));
            return true;
        }

        /// constructor
        public PmYearProgramApplicationTable() :
                base("PmYearProgramApplication")
        {
        }

        /// constructor
        public PmYearProgramApplicationTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmYearProgramApplicationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Key to uniquely identify application
        public DataColumn ColumnApplicationKey;
        /// Partner key of office by which application was entered.
        public DataColumn ColumnRegistrationOffice;
        /// Date of application
        public DataColumn ColumnYpAppDate;
        /// Describes what the application is for, eg. conference, year program.
        public DataColumn ColumnYpBasicAppType;
        /// This field will not appear on the screen but will be updated when someone chooses to delete a record. Rather that an actual deletion, the record will be 'marked' for deletion after an agreed upon interval.
        public DataColumn ColumnYpBasicDeleteFlag;
        /// Indicates if the application fee has been paid.
        public DataColumn ColumnYpAppFeeReceived;
        /// Indicates booking at an orientation session.
        public DataColumn ColumnHoOrientConfBookingKey;
        /// The agreed support figure.
        public DataColumn ColumnYpAgreedSupportFigure;
        /// Indicates the agreed upon joining charge for the conference
        /// and / or the summer xyz_tbd.
        public DataColumn ColumnYpAgreedJoiningCharge;
        /// Enter the amount of the scholarship.
        public DataColumn ColumnYpScholarship;
        /// Indicate who authorized the scholarship.
        public DataColumn ColumnYpScholarshipAthrizedBy;
        /// Indicates the begin date for the scholarship.
        public DataColumn ColumnYpScholarshipBeginDate;
        /// Indicates the end date for the scholarship.
        public DataColumn ColumnYpScholarshipEndDate;
        /// Indicates the date of the review of the scholarship.
        public DataColumn ColumnYpScholarshipReviewDate;
        /// Length of time the scholarship period covers.
        public DataColumn ColumnYpScholarshipPeriod;
        /// Period of time the support covers..
        public DataColumn ColumnYpSupportPeriod;
        /// Indicates which New Recruits Conference the applicant plans to attend.
        public DataColumn ColumnYpJoiningConf;
        /// This is the expected date their commitment starts.
        public DataColumn ColumnStartOfCommitment;
        /// This is the expected date their commitment ends.
        public DataColumn ColumnEndOfCommitment;
        /// Indicates how long the applicant intends to stay with us
        public DataColumn ColumnIntendedComLengthMonths;
        /// Name of the position.
        public DataColumn ColumnPositionName;
        /// Scope of this position.
        public DataColumn ColumnPositionScope;
        /// Indicates if the assignment is in assistance to the given position.
        public DataColumn ColumnAssistantTo;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_application_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_app_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_basic_app_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_basic_delete_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_app_fee_received_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_ho_orient_conf_booking_key_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_agreed_support_figure_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_agreed_joining_charge_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_scholarship_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_scholarship_athrized_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_scholarship_begin_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_scholarship_end_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_scholarship_review_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_scholarship_period_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_support_period_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_yp_joining_conf_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_start_of_commitment_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_end_of_commitment_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_intended_com_length_months_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pt_position_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_position_scope_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_assistant_to_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnApplicationKey = this.Columns["pm_application_key_i"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnYpAppDate = this.Columns["pm_yp_app_date_d"];
            this.ColumnYpBasicAppType = this.Columns["pm_yp_basic_app_type_c"];
            this.ColumnYpBasicDeleteFlag = this.Columns["pm_yp_basic_delete_flag_l"];
            this.ColumnYpAppFeeReceived = this.Columns["pm_yp_app_fee_received_l"];
            this.ColumnHoOrientConfBookingKey = this.Columns["pm_ho_orient_conf_booking_key_c"];
            this.ColumnYpAgreedSupportFigure = this.Columns["pm_yp_agreed_support_figure_n"];
            this.ColumnYpAgreedJoiningCharge = this.Columns["pm_yp_agreed_joining_charge_n"];
            this.ColumnYpScholarship = this.Columns["pm_yp_scholarship_n"];
            this.ColumnYpScholarshipAthrizedBy = this.Columns["pm_yp_scholarship_athrized_by_c"];
            this.ColumnYpScholarshipBeginDate = this.Columns["pm_yp_scholarship_begin_date_d"];
            this.ColumnYpScholarshipEndDate = this.Columns["pm_yp_scholarship_end_date_d"];
            this.ColumnYpScholarshipReviewDate = this.Columns["pm_yp_scholarship_review_date_d"];
            this.ColumnYpScholarshipPeriod = this.Columns["pm_yp_scholarship_period_c"];
            this.ColumnYpSupportPeriod = this.Columns["pm_yp_support_period_c"];
            this.ColumnYpJoiningConf = this.Columns["pm_yp_joining_conf_i"];
            this.ColumnStartOfCommitment = this.Columns["pm_start_of_commitment_d"];
            this.ColumnEndOfCommitment = this.Columns["pm_end_of_commitment_d"];
            this.ColumnIntendedComLengthMonths = this.Columns["pm_intended_com_length_months_i"];
            this.ColumnPositionName = this.Columns["pt_position_name_c"];
            this.ColumnPositionScope = this.Columns["pt_position_scope_c"];
            this.ColumnAssistantTo = this.Columns["pt_assistant_to_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnPartnerKey,ColumnApplicationKey,ColumnRegistrationOffice};
        }

        /// Access a typed row by index
        public PmYearProgramApplicationRow this[int i]
        {
            get
            {
                return ((PmYearProgramApplicationRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmYearProgramApplicationRow NewRowTyped(bool AWithDefaultValues)
        {
            PmYearProgramApplicationRow ret = ((PmYearProgramApplicationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmYearProgramApplicationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmYearProgramApplicationRow(builder);
        }

        /// get typed set of changes
        public PmYearProgramApplicationTable GetChangesTyped()
        {
            return ((PmYearProgramApplicationTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmYearProgramApplication";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_year_program_application";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetApplicationKeyDBName()
        {
            return "pm_application_key_i";
        }

        /// get character length for column
        public static short GetApplicationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetYpAppDateDBName()
        {
            return "pm_yp_app_date_d";
        }

        /// get character length for column
        public static short GetYpAppDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYpBasicAppTypeDBName()
        {
            return "pm_yp_basic_app_type_c";
        }

        /// get character length for column
        public static short GetYpBasicAppTypeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetYpBasicDeleteFlagDBName()
        {
            return "pm_yp_basic_delete_flag_l";
        }

        /// get character length for column
        public static short GetYpBasicDeleteFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYpAppFeeReceivedDBName()
        {
            return "pm_yp_app_fee_received_l";
        }

        /// get character length for column
        public static short GetYpAppFeeReceivedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetHoOrientConfBookingKeyDBName()
        {
            return "pm_ho_orient_conf_booking_key_c";
        }

        /// get character length for column
        public static short GetHoOrientConfBookingKeyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetYpAgreedSupportFigureDBName()
        {
            return "pm_yp_agreed_support_figure_n";
        }

        /// get character length for column
        public static short GetYpAgreedSupportFigureLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetYpAgreedJoiningChargeDBName()
        {
            return "pm_yp_agreed_joining_charge_n";
        }

        /// get character length for column
        public static short GetYpAgreedJoiningChargeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetYpScholarshipDBName()
        {
            return "pm_yp_scholarship_n";
        }

        /// get character length for column
        public static short GetYpScholarshipLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetYpScholarshipAthrizedByDBName()
        {
            return "pm_yp_scholarship_athrized_by_c";
        }

        /// get character length for column
        public static short GetYpScholarshipAthrizedByLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetYpScholarshipBeginDateDBName()
        {
            return "pm_yp_scholarship_begin_date_d";
        }

        /// get character length for column
        public static short GetYpScholarshipBeginDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYpScholarshipEndDateDBName()
        {
            return "pm_yp_scholarship_end_date_d";
        }

        /// get character length for column
        public static short GetYpScholarshipEndDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYpScholarshipReviewDateDBName()
        {
            return "pm_yp_scholarship_review_date_d";
        }

        /// get character length for column
        public static short GetYpScholarshipReviewDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYpScholarshipPeriodDBName()
        {
            return "pm_yp_scholarship_period_c";
        }

        /// get character length for column
        public static short GetYpScholarshipPeriodLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetYpSupportPeriodDBName()
        {
            return "pm_yp_support_period_c";
        }

        /// get character length for column
        public static short GetYpSupportPeriodLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetYpJoiningConfDBName()
        {
            return "pm_yp_joining_conf_i";
        }

        /// get character length for column
        public static short GetYpJoiningConfLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStartOfCommitmentDBName()
        {
            return "pm_start_of_commitment_d";
        }

        /// get character length for column
        public static short GetStartOfCommitmentLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetEndOfCommitmentDBName()
        {
            return "pm_end_of_commitment_d";
        }

        /// get character length for column
        public static short GetEndOfCommitmentLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIntendedComLengthMonthsDBName()
        {
            return "pm_intended_com_length_months_i";
        }

        /// get character length for column
        public static short GetIntendedComLengthMonthsLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPositionNameDBName()
        {
            return "pt_position_name_c";
        }

        /// get character length for column
        public static short GetPositionNameLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetPositionScopeDBName()
        {
            return "pt_position_scope_c";
        }

        /// get character length for column
        public static short GetPositionScopeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAssistantToDBName()
        {
            return "pt_assistant_to_l";
        }

        /// get character length for column
        public static short GetAssistantToLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains information pertaining to the application process.
    [Serializable()]
    public class PmYearProgramApplicationRow : System.Data.DataRow
    {
        private PmYearProgramApplicationTable myTable;

        /// Constructor
        public PmYearProgramApplicationRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmYearProgramApplicationTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Key to uniquely identify application
        public Int32 ApplicationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApplicationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApplicationKey)
                            || (((Int32)(this[this.myTable.ColumnApplicationKey])) != value)))
                {
                    this[this.myTable.ColumnApplicationKey] = value;
                }
            }
        }

        /// Partner key of office by which application was entered.
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// Date of application
        public System.DateTime YpAppDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpAppDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpAppDate)
                            || (((System.DateTime)(this[this.myTable.ColumnYpAppDate])) != value)))
                {
                    this[this.myTable.ColumnYpAppDate] = value;
                }
            }
        }

        /// Describes what the application is for, eg. conference, year program.
        public String YpBasicAppType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpBasicAppType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpBasicAppType)
                            || (((String)(this[this.myTable.ColumnYpBasicAppType])) != value)))
                {
                    this[this.myTable.ColumnYpBasicAppType] = value;
                }
            }
        }

        /// This field will not appear on the screen but will be updated when someone chooses to delete a record. Rather that an actual deletion, the record will be 'marked' for deletion after an agreed upon interval.
        public Boolean YpBasicDeleteFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpBasicDeleteFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpBasicDeleteFlag)
                            || (((Boolean)(this[this.myTable.ColumnYpBasicDeleteFlag])) != value)))
                {
                    this[this.myTable.ColumnYpBasicDeleteFlag] = value;
                }
            }
        }

        /// Indicates if the application fee has been paid.
        public Boolean YpAppFeeReceived
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpAppFeeReceived.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpAppFeeReceived)
                            || (((Boolean)(this[this.myTable.ColumnYpAppFeeReceived])) != value)))
                {
                    this[this.myTable.ColumnYpAppFeeReceived] = value;
                }
            }
        }

        /// Indicates booking at an orientation session.
        public String HoOrientConfBookingKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHoOrientConfBookingKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHoOrientConfBookingKey)
                            || (((String)(this[this.myTable.ColumnHoOrientConfBookingKey])) != value)))
                {
                    this[this.myTable.ColumnHoOrientConfBookingKey] = value;
                }
            }
        }

        /// The agreed support figure.
        public Decimal YpAgreedSupportFigure
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpAgreedSupportFigure.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpAgreedSupportFigure)
                            || (((Decimal)(this[this.myTable.ColumnYpAgreedSupportFigure])) != value)))
                {
                    this[this.myTable.ColumnYpAgreedSupportFigure] = value;
                }
            }
        }

        /// Indicates the agreed upon joining charge for the conference
        /// and / or the summer xyz_tbd.
        public Decimal YpAgreedJoiningCharge
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpAgreedJoiningCharge.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpAgreedJoiningCharge)
                            || (((Decimal)(this[this.myTable.ColumnYpAgreedJoiningCharge])) != value)))
                {
                    this[this.myTable.ColumnYpAgreedJoiningCharge] = value;
                }
            }
        }

        /// Enter the amount of the scholarship.
        public Decimal YpScholarship
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpScholarship.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpScholarship)
                            || (((Decimal)(this[this.myTable.ColumnYpScholarship])) != value)))
                {
                    this[this.myTable.ColumnYpScholarship] = value;
                }
            }
        }

        /// Indicate who authorized the scholarship.
        public String YpScholarshipAthrizedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpScholarshipAthrizedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpScholarshipAthrizedBy)
                            || (((String)(this[this.myTable.ColumnYpScholarshipAthrizedBy])) != value)))
                {
                    this[this.myTable.ColumnYpScholarshipAthrizedBy] = value;
                }
            }
        }

        /// Indicates the begin date for the scholarship.
        public System.DateTime? YpScholarshipBeginDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpScholarshipBeginDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpScholarshipBeginDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnYpScholarshipBeginDate])) != value)))
                {
                    this[this.myTable.ColumnYpScholarshipBeginDate] = value;
                }
            }
        }

        /// Indicates the end date for the scholarship.
        public System.DateTime? YpScholarshipEndDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpScholarshipEndDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpScholarshipEndDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnYpScholarshipEndDate])) != value)))
                {
                    this[this.myTable.ColumnYpScholarshipEndDate] = value;
                }
            }
        }

        /// Indicates the date of the review of the scholarship.
        public System.DateTime? YpScholarshipReviewDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpScholarshipReviewDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpScholarshipReviewDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnYpScholarshipReviewDate])) != value)))
                {
                    this[this.myTable.ColumnYpScholarshipReviewDate] = value;
                }
            }
        }

        /// Length of time the scholarship period covers.
        public String YpScholarshipPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpScholarshipPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpScholarshipPeriod)
                            || (((String)(this[this.myTable.ColumnYpScholarshipPeriod])) != value)))
                {
                    this[this.myTable.ColumnYpScholarshipPeriod] = value;
                }
            }
        }

        /// Period of time the support covers..
        public String YpSupportPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpSupportPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpSupportPeriod)
                            || (((String)(this[this.myTable.ColumnYpSupportPeriod])) != value)))
                {
                    this[this.myTable.ColumnYpSupportPeriod] = value;
                }
            }
        }

        /// Indicates which New Recruits Conference the applicant plans to attend.
        public Int32 YpJoiningConf
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYpJoiningConf.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYpJoiningConf)
                            || (((Int32)(this[this.myTable.ColumnYpJoiningConf])) != value)))
                {
                    this[this.myTable.ColumnYpJoiningConf] = value;
                }
            }
        }

        /// This is the expected date their commitment starts.
        public System.DateTime? StartOfCommitment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartOfCommitment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartOfCommitment)
                            || (((System.DateTime?)(this[this.myTable.ColumnStartOfCommitment])) != value)))
                {
                    this[this.myTable.ColumnStartOfCommitment] = value;
                }
            }
        }

        /// This is the expected date their commitment ends.
        public System.DateTime? EndOfCommitment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEndOfCommitment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEndOfCommitment)
                            || (((System.DateTime?)(this[this.myTable.ColumnEndOfCommitment])) != value)))
                {
                    this[this.myTable.ColumnEndOfCommitment] = value;
                }
            }
        }

        /// Indicates how long the applicant intends to stay with us
        public Int32 IntendedComLengthMonths
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIntendedComLengthMonths.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIntendedComLengthMonths)
                            || (((Int32)(this[this.myTable.ColumnIntendedComLengthMonths])) != value)))
                {
                    this[this.myTable.ColumnIntendedComLengthMonths] = value;
                }
            }
        }

        /// Name of the position.
        public String PositionName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPositionName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPositionName)
                            || (((String)(this[this.myTable.ColumnPositionName])) != value)))
                {
                    this[this.myTable.ColumnPositionName] = value;
                }
            }
        }

        /// Scope of this position.
        public String PositionScope
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPositionScope.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPositionScope)
                            || (((String)(this[this.myTable.ColumnPositionScope])) != value)))
                {
                    this[this.myTable.ColumnPositionScope] = value;
                }
            }
        }

        /// Indicates if the assignment is in assistance to the given position.
        public Boolean AssistantTo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAssistantTo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAssistantTo)
                            || (((Boolean)(this[this.myTable.ColumnAssistantTo])) != value)))
                {
                    this[this.myTable.ColumnAssistantTo] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnApplicationKey.Ordinal] = 0;
            this[this.myTable.ColumnRegistrationOffice.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnYpAppDate);
            this.SetNull(this.myTable.ColumnYpBasicAppType);
            this[this.myTable.ColumnYpBasicDeleteFlag.Ordinal] = false;
            this[this.myTable.ColumnYpAppFeeReceived.Ordinal] = false;
            this.SetNull(this.myTable.ColumnHoOrientConfBookingKey);
            this[this.myTable.ColumnYpAgreedSupportFigure.Ordinal] = 0;
            this[this.myTable.ColumnYpAgreedJoiningCharge.Ordinal] = 0;
            this[this.myTable.ColumnYpScholarship.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnYpScholarshipAthrizedBy);
            this.SetNull(this.myTable.ColumnYpScholarshipBeginDate);
            this.SetNull(this.myTable.ColumnYpScholarshipEndDate);
            this.SetNull(this.myTable.ColumnYpScholarshipReviewDate);
            this.SetNull(this.myTable.ColumnYpScholarshipPeriod);
            this.SetNull(this.myTable.ColumnYpSupportPeriod);
            this[this.myTable.ColumnYpJoiningConf.Ordinal] = 1;
            this.SetNull(this.myTable.ColumnStartOfCommitment);
            this.SetNull(this.myTable.ColumnEndOfCommitment);
            this.SetNull(this.myTable.ColumnIntendedComLengthMonths);
            this.SetNull(this.myTable.ColumnPositionName);
            this.SetNull(this.myTable.ColumnPositionScope);
            this[this.myTable.ColumnAssistantTo.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsApplicationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnApplicationKey);
        }

        /// assign NULL value
        public void SetApplicationKeyNull()
        {
            this.SetNull(this.myTable.ColumnApplicationKey);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsYpAppDateNull()
        {
            return this.IsNull(this.myTable.ColumnYpAppDate);
        }

        /// assign NULL value
        public void SetYpAppDateNull()
        {
            this.SetNull(this.myTable.ColumnYpAppDate);
        }

        /// test for NULL value
        public bool IsYpBasicAppTypeNull()
        {
            return this.IsNull(this.myTable.ColumnYpBasicAppType);
        }

        /// assign NULL value
        public void SetYpBasicAppTypeNull()
        {
            this.SetNull(this.myTable.ColumnYpBasicAppType);
        }

        /// test for NULL value
        public bool IsYpBasicDeleteFlagNull()
        {
            return this.IsNull(this.myTable.ColumnYpBasicDeleteFlag);
        }

        /// assign NULL value
        public void SetYpBasicDeleteFlagNull()
        {
            this.SetNull(this.myTable.ColumnYpBasicDeleteFlag);
        }

        /// test for NULL value
        public bool IsYpAppFeeReceivedNull()
        {
            return this.IsNull(this.myTable.ColumnYpAppFeeReceived);
        }

        /// assign NULL value
        public void SetYpAppFeeReceivedNull()
        {
            this.SetNull(this.myTable.ColumnYpAppFeeReceived);
        }

        /// test for NULL value
        public bool IsHoOrientConfBookingKeyNull()
        {
            return this.IsNull(this.myTable.ColumnHoOrientConfBookingKey);
        }

        /// assign NULL value
        public void SetHoOrientConfBookingKeyNull()
        {
            this.SetNull(this.myTable.ColumnHoOrientConfBookingKey);
        }

        /// test for NULL value
        public bool IsYpAgreedSupportFigureNull()
        {
            return this.IsNull(this.myTable.ColumnYpAgreedSupportFigure);
        }

        /// assign NULL value
        public void SetYpAgreedSupportFigureNull()
        {
            this.SetNull(this.myTable.ColumnYpAgreedSupportFigure);
        }

        /// test for NULL value
        public bool IsYpAgreedJoiningChargeNull()
        {
            return this.IsNull(this.myTable.ColumnYpAgreedJoiningCharge);
        }

        /// assign NULL value
        public void SetYpAgreedJoiningChargeNull()
        {
            this.SetNull(this.myTable.ColumnYpAgreedJoiningCharge);
        }

        /// test for NULL value
        public bool IsYpScholarshipNull()
        {
            return this.IsNull(this.myTable.ColumnYpScholarship);
        }

        /// assign NULL value
        public void SetYpScholarshipNull()
        {
            this.SetNull(this.myTable.ColumnYpScholarship);
        }

        /// test for NULL value
        public bool IsYpScholarshipAthrizedByNull()
        {
            return this.IsNull(this.myTable.ColumnYpScholarshipAthrizedBy);
        }

        /// assign NULL value
        public void SetYpScholarshipAthrizedByNull()
        {
            this.SetNull(this.myTable.ColumnYpScholarshipAthrizedBy);
        }

        /// test for NULL value
        public bool IsYpScholarshipBeginDateNull()
        {
            return this.IsNull(this.myTable.ColumnYpScholarshipBeginDate);
        }

        /// assign NULL value
        public void SetYpScholarshipBeginDateNull()
        {
            this.SetNull(this.myTable.ColumnYpScholarshipBeginDate);
        }

        /// test for NULL value
        public bool IsYpScholarshipEndDateNull()
        {
            return this.IsNull(this.myTable.ColumnYpScholarshipEndDate);
        }

        /// assign NULL value
        public void SetYpScholarshipEndDateNull()
        {
            this.SetNull(this.myTable.ColumnYpScholarshipEndDate);
        }

        /// test for NULL value
        public bool IsYpScholarshipReviewDateNull()
        {
            return this.IsNull(this.myTable.ColumnYpScholarshipReviewDate);
        }

        /// assign NULL value
        public void SetYpScholarshipReviewDateNull()
        {
            this.SetNull(this.myTable.ColumnYpScholarshipReviewDate);
        }

        /// test for NULL value
        public bool IsYpScholarshipPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnYpScholarshipPeriod);
        }

        /// assign NULL value
        public void SetYpScholarshipPeriodNull()
        {
            this.SetNull(this.myTable.ColumnYpScholarshipPeriod);
        }

        /// test for NULL value
        public bool IsYpSupportPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnYpSupportPeriod);
        }

        /// assign NULL value
        public void SetYpSupportPeriodNull()
        {
            this.SetNull(this.myTable.ColumnYpSupportPeriod);
        }

        /// test for NULL value
        public bool IsYpJoiningConfNull()
        {
            return this.IsNull(this.myTable.ColumnYpJoiningConf);
        }

        /// assign NULL value
        public void SetYpJoiningConfNull()
        {
            this.SetNull(this.myTable.ColumnYpJoiningConf);
        }

        /// test for NULL value
        public bool IsStartOfCommitmentNull()
        {
            return this.IsNull(this.myTable.ColumnStartOfCommitment);
        }

        /// assign NULL value
        public void SetStartOfCommitmentNull()
        {
            this.SetNull(this.myTable.ColumnStartOfCommitment);
        }

        /// test for NULL value
        public bool IsEndOfCommitmentNull()
        {
            return this.IsNull(this.myTable.ColumnEndOfCommitment);
        }

        /// assign NULL value
        public void SetEndOfCommitmentNull()
        {
            this.SetNull(this.myTable.ColumnEndOfCommitment);
        }

        /// test for NULL value
        public bool IsIntendedComLengthMonthsNull()
        {
            return this.IsNull(this.myTable.ColumnIntendedComLengthMonths);
        }

        /// assign NULL value
        public void SetIntendedComLengthMonthsNull()
        {
            this.SetNull(this.myTable.ColumnIntendedComLengthMonths);
        }

        /// test for NULL value
        public bool IsPositionNameNull()
        {
            return this.IsNull(this.myTable.ColumnPositionName);
        }

        /// assign NULL value
        public void SetPositionNameNull()
        {
            this.SetNull(this.myTable.ColumnPositionName);
        }

        /// test for NULL value
        public bool IsPositionScopeNull()
        {
            return this.IsNull(this.myTable.ColumnPositionScope);
        }

        /// assign NULL value
        public void SetPositionScopeNull()
        {
            this.SetNull(this.myTable.ColumnPositionScope);
        }

        /// test for NULL value
        public bool IsAssistantToNull()
        {
            return this.IsNull(this.myTable.ColumnAssistantTo);
        }

        /// assign NULL value
        public void SetAssistantToNull()
        {
            this.SetNull(this.myTable.ColumnAssistantTo);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table lists all the various forms that are sent and received in the application process.
    [Serializable()]
    public class PtAppFormTypesTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 207;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormSentIndicatorId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormReceivedIndicatorId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnAppUsedById = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtAppFormTypes", "pt_app_form_types",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FormName", "pt_form_name_c", "Form Name", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "FormSentIndicator", "pt_form_sent_indicator_l", "Sent Form?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(2, "FormReceivedIndicator", "pt_form_received_indicator_l", "Received Form?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "AppUsedBy", "pt_app_used_by_c", "Used By", OdbcType.VarChar, 20, true),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtAppFormTypesTable() :
                base("PtAppFormTypes")
        {
        }

        /// constructor
        public PtAppFormTypesTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtAppFormTypesTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Name of the form type, e.g. Medical, Referral.
        public DataColumn ColumnFormName;
        /// Is this a form that is sent out to an applicant?
        public DataColumn ColumnFormSentIndicator;
        /// Is this a form that is received from an applicant?
        public DataColumn ColumnFormReceivedIndicator;
        /// Indicates if this form is used by either the long application, short application, or both.
        public DataColumn ColumnAppUsedBy;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_form_sent_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_form_received_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_app_used_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormName = this.Columns["pt_form_name_c"];
            this.ColumnFormSentIndicator = this.Columns["pt_form_sent_indicator_l"];
            this.ColumnFormReceivedIndicator = this.Columns["pt_form_received_indicator_l"];
            this.ColumnAppUsedBy = this.Columns["pt_app_used_by_c"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnFormName};
        }

        /// Access a typed row by index
        public PtAppFormTypesRow this[int i]
        {
            get
            {
                return ((PtAppFormTypesRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtAppFormTypesRow NewRowTyped(bool AWithDefaultValues)
        {
            PtAppFormTypesRow ret = ((PtAppFormTypesRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtAppFormTypesRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtAppFormTypesRow(builder);
        }

        /// get typed set of changes
        public PtAppFormTypesTable GetChangesTyped()
        {
            return ((PtAppFormTypesTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtAppFormTypes";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_app_form_types";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "pt_form_name_c";
        }

        /// get character length for column
        public static short GetFormNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetFormSentIndicatorDBName()
        {
            return "pt_form_sent_indicator_l";
        }

        /// get character length for column
        public static short GetFormSentIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFormReceivedIndicatorDBName()
        {
            return "pt_form_received_indicator_l";
        }

        /// get character length for column
        public static short GetFormReceivedIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAppUsedByDBName()
        {
            return "pt_app_used_by_c";
        }

        /// get character length for column
        public static short GetAppUsedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table lists all the various forms that are sent and received in the application process.
    [Serializable()]
    public class PtAppFormTypesRow : System.Data.DataRow
    {
        private PtAppFormTypesTable myTable;

        /// Constructor
        public PtAppFormTypesRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtAppFormTypesTable)(this.Table));
        }

        /// Name of the form type, e.g. Medical, Referral.
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName)
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }

        /// Is this a form that is sent out to an applicant?
        public Boolean FormSentIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormSentIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormSentIndicator)
                            || (((Boolean)(this[this.myTable.ColumnFormSentIndicator])) != value)))
                {
                    this[this.myTable.ColumnFormSentIndicator] = value;
                }
            }
        }

        /// Is this a form that is received from an applicant?
        public Boolean FormReceivedIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormReceivedIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormReceivedIndicator)
                            || (((Boolean)(this[this.myTable.ColumnFormReceivedIndicator])) != value)))
                {
                    this[this.myTable.ColumnFormReceivedIndicator] = value;
                }
            }
        }

        /// Indicates if this form is used by either the long application, short application, or both.
        public String AppUsedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAppUsedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAppUsedBy)
                            || (((String)(this[this.myTable.ColumnAppUsedBy])) != value)))
                {
                    this[this.myTable.ColumnAppUsedBy] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormName);
            this[this.myTable.ColumnFormSentIndicator.Ordinal] = false;
            this[this.myTable.ColumnFormReceivedIndicator.Ordinal] = false;
            this.SetNull(this.myTable.ColumnAppUsedBy);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFormNameNull()
        {
            return this.IsNull(this.myTable.ColumnFormName);
        }

        /// assign NULL value
        public void SetFormNameNull()
        {
            this.SetNull(this.myTable.ColumnFormName);
        }

        /// test for NULL value
        public bool IsFormSentIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnFormSentIndicator);
        }

        /// assign NULL value
        public void SetFormSentIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnFormSentIndicator);
        }

        /// test for NULL value
        public bool IsFormReceivedIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnFormReceivedIndicator);
        }

        /// assign NULL value
        public void SetFormReceivedIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnFormReceivedIndicator);
        }

        /// test for NULL value
        public bool IsAppUsedByNull()
        {
            return this.IsNull(this.myTable.ColumnAppUsedBy);
        }

        /// assign NULL value
        public void SetAppUsedByNull()
        {
            this.SetNull(this.myTable.ColumnAppUsedBy);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the list of forms sent or received during the application process.
    [Serializable()]
    public class PmApplicationFormsTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 208;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnApplicationKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormNameId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormSentId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormReceivedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormDeleteFlagId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormEditedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormSentDateId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormReceivedDateId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnReferencePartnerKeyId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 16;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmApplicationForms", "pm_application_forms",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "ApplicationKey", "pm_application_key_i", "Application Key", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "RegistrationOffice", "pm_registration_office_n", "Registration Office", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "FormName", "pt_form_name_c", "Form Name", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(4, "FormSent", "pm_form_sent_l", "Form Sent?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "FormReceived", "pm_form_received_l", "Form Received?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "FormDeleteFlag", "pm_form_delete_flag_l", "Delete Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(7, "FormEdited", "pm_form_edited_l", "Edited?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(8, "FormSentDate", "pm_form_sent_date_d", "Form Sent Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "FormReceivedDate", "pm_form_received_date_d", "Form Received Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "ReferencePartnerKey", "pm_reference_partner_key_n", "Reference Partner", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(11, "Comment", "pm_comment_c", "Comments", OdbcType.VarChar, 1000, false),
                    new TTypedColumnInfo(12, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3
                }));
            return true;
        }

        /// constructor
        public PmApplicationFormsTable() :
                base("PmApplicationForms")
        {
        }

        /// constructor
        public PmApplicationFormsTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmApplicationFormsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Key to uniquely identify application
        public DataColumn ColumnApplicationKey;
        /// Partner key of office by which application was entered.
        public DataColumn ColumnRegistrationOffice;
        /// Indicates the name of the form.
        public DataColumn ColumnFormName;
        /// Indicates if the form was sent.
        public DataColumn ColumnFormSent;
        /// Indicates if this form was received.
        public DataColumn ColumnFormReceived;
        /// This field will not appear on the screen but will be updated when someone chooses to delete a record. Rather that an actual deletion, the record will be 'marked' for deletion after an agreed upon interval.
        public DataColumn ColumnFormDeleteFlag;
        /// Indicates if the form was edited.
        public DataColumn ColumnFormEdited;
        /// Date the form was sent.
        public DataColumn ColumnFormSentDate;
        /// Date the form was received.
        public DataColumn ColumnFormReceivedDate;
        /// This is the reference partner for this application form.
        public DataColumn ColumnReferencePartnerKey;
        /// Comments
        public DataColumn ColumnComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_application_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pt_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_form_sent_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_form_received_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_form_delete_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_form_edited_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_form_sent_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_form_received_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_reference_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnApplicationKey = this.Columns["pm_application_key_i"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnFormName = this.Columns["pt_form_name_c"];
            this.ColumnFormSent = this.Columns["pm_form_sent_l"];
            this.ColumnFormReceived = this.Columns["pm_form_received_l"];
            this.ColumnFormDeleteFlag = this.Columns["pm_form_delete_flag_l"];
            this.ColumnFormEdited = this.Columns["pm_form_edited_l"];
            this.ColumnFormSentDate = this.Columns["pm_form_sent_date_d"];
            this.ColumnFormReceivedDate = this.Columns["pm_form_received_date_d"];
            this.ColumnReferencePartnerKey = this.Columns["pm_reference_partner_key_n"];
            this.ColumnComment = this.Columns["pm_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnPartnerKey,ColumnApplicationKey,ColumnRegistrationOffice,ColumnFormName};
        }

        /// Access a typed row by index
        public PmApplicationFormsRow this[int i]
        {
            get
            {
                return ((PmApplicationFormsRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmApplicationFormsRow NewRowTyped(bool AWithDefaultValues)
        {
            PmApplicationFormsRow ret = ((PmApplicationFormsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmApplicationFormsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmApplicationFormsRow(builder);
        }

        /// get typed set of changes
        public PmApplicationFormsTable GetChangesTyped()
        {
            return ((PmApplicationFormsTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmApplicationForms";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_application_forms";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetApplicationKeyDBName()
        {
            return "pm_application_key_i";
        }

        /// get character length for column
        public static short GetApplicationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "pt_form_name_c";
        }

        /// get character length for column
        public static short GetFormNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetFormSentDBName()
        {
            return "pm_form_sent_l";
        }

        /// get character length for column
        public static short GetFormSentLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFormReceivedDBName()
        {
            return "pm_form_received_l";
        }

        /// get character length for column
        public static short GetFormReceivedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFormDeleteFlagDBName()
        {
            return "pm_form_delete_flag_l";
        }

        /// get character length for column
        public static short GetFormDeleteFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFormEditedDBName()
        {
            return "pm_form_edited_l";
        }

        /// get character length for column
        public static short GetFormEditedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFormSentDateDBName()
        {
            return "pm_form_sent_date_d";
        }

        /// get character length for column
        public static short GetFormSentDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFormReceivedDateDBName()
        {
            return "pm_form_received_date_d";
        }

        /// get character length for column
        public static short GetFormReceivedDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReferencePartnerKeyDBName()
        {
            return "pm_reference_partner_key_n";
        }

        /// get character length for column
        public static short GetReferencePartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "pm_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 1000;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the list of forms sent or received during the application process.
    [Serializable()]
    public class PmApplicationFormsRow : System.Data.DataRow
    {
        private PmApplicationFormsTable myTable;

        /// Constructor
        public PmApplicationFormsRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmApplicationFormsTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Key to uniquely identify application
        public Int32 ApplicationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApplicationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApplicationKey)
                            || (((Int32)(this[this.myTable.ColumnApplicationKey])) != value)))
                {
                    this[this.myTable.ColumnApplicationKey] = value;
                }
            }
        }

        /// Partner key of office by which application was entered.
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// Indicates the name of the form.
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName)
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }

        /// Indicates if the form was sent.
        public Boolean FormSent
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormSent.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormSent)
                            || (((Boolean)(this[this.myTable.ColumnFormSent])) != value)))
                {
                    this[this.myTable.ColumnFormSent] = value;
                }
            }
        }

        /// Indicates if this form was received.
        public Boolean FormReceived
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormReceived.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormReceived)
                            || (((Boolean)(this[this.myTable.ColumnFormReceived])) != value)))
                {
                    this[this.myTable.ColumnFormReceived] = value;
                }
            }
        }

        /// This field will not appear on the screen but will be updated when someone chooses to delete a record. Rather that an actual deletion, the record will be 'marked' for deletion after an agreed upon interval.
        public Boolean FormDeleteFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormDeleteFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormDeleteFlag)
                            || (((Boolean)(this[this.myTable.ColumnFormDeleteFlag])) != value)))
                {
                    this[this.myTable.ColumnFormDeleteFlag] = value;
                }
            }
        }

        /// Indicates if the form was edited.
        public Boolean FormEdited
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormEdited.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormEdited)
                            || (((Boolean)(this[this.myTable.ColumnFormEdited])) != value)))
                {
                    this[this.myTable.ColumnFormEdited] = value;
                }
            }
        }

        /// Date the form was sent.
        public System.DateTime? FormSentDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormSentDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormSentDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnFormSentDate])) != value)))
                {
                    this[this.myTable.ColumnFormSentDate] = value;
                }
            }
        }

        /// Date the form was received.
        public System.DateTime? FormReceivedDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormReceivedDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormReceivedDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnFormReceivedDate])) != value)))
                {
                    this[this.myTable.ColumnFormReceivedDate] = value;
                }
            }
        }

        /// This is the reference partner for this application form.
        public Int64 ReferencePartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReferencePartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReferencePartnerKey)
                            || (((Int64)(this[this.myTable.ColumnReferencePartnerKey])) != value)))
                {
                    this[this.myTable.ColumnReferencePartnerKey] = value;
                }
            }
        }

        /// Comments
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnApplicationKey.Ordinal] = 0;
            this[this.myTable.ColumnRegistrationOffice.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFormName);
            this[this.myTable.ColumnFormSent.Ordinal] = false;
            this[this.myTable.ColumnFormReceived.Ordinal] = false;
            this[this.myTable.ColumnFormDeleteFlag.Ordinal] = false;
            this[this.myTable.ColumnFormEdited.Ordinal] = false;
            this.SetNull(this.myTable.ColumnFormSentDate);
            this.SetNull(this.myTable.ColumnFormReceivedDate);
            this.SetNull(this.myTable.ColumnReferencePartnerKey);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsApplicationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnApplicationKey);
        }

        /// assign NULL value
        public void SetApplicationKeyNull()
        {
            this.SetNull(this.myTable.ColumnApplicationKey);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsFormNameNull()
        {
            return this.IsNull(this.myTable.ColumnFormName);
        }

        /// assign NULL value
        public void SetFormNameNull()
        {
            this.SetNull(this.myTable.ColumnFormName);
        }

        /// test for NULL value
        public bool IsFormSentNull()
        {
            return this.IsNull(this.myTable.ColumnFormSent);
        }

        /// assign NULL value
        public void SetFormSentNull()
        {
            this.SetNull(this.myTable.ColumnFormSent);
        }

        /// test for NULL value
        public bool IsFormReceivedNull()
        {
            return this.IsNull(this.myTable.ColumnFormReceived);
        }

        /// assign NULL value
        public void SetFormReceivedNull()
        {
            this.SetNull(this.myTable.ColumnFormReceived);
        }

        /// test for NULL value
        public bool IsFormDeleteFlagNull()
        {
            return this.IsNull(this.myTable.ColumnFormDeleteFlag);
        }

        /// assign NULL value
        public void SetFormDeleteFlagNull()
        {
            this.SetNull(this.myTable.ColumnFormDeleteFlag);
        }

        /// test for NULL value
        public bool IsFormEditedNull()
        {
            return this.IsNull(this.myTable.ColumnFormEdited);
        }

        /// assign NULL value
        public void SetFormEditedNull()
        {
            this.SetNull(this.myTable.ColumnFormEdited);
        }

        /// test for NULL value
        public bool IsFormSentDateNull()
        {
            return this.IsNull(this.myTable.ColumnFormSentDate);
        }

        /// assign NULL value
        public void SetFormSentDateNull()
        {
            this.SetNull(this.myTable.ColumnFormSentDate);
        }

        /// test for NULL value
        public bool IsFormReceivedDateNull()
        {
            return this.IsNull(this.myTable.ColumnFormReceivedDate);
        }

        /// assign NULL value
        public void SetFormReceivedDateNull()
        {
            this.SetNull(this.myTable.ColumnFormReceivedDate);
        }

        /// test for NULL value
        public bool IsReferencePartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnReferencePartnerKey);
        }

        /// assign NULL value
        public void SetReferencePartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnReferencePartnerKey);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes that indicate the categories of document types (grouping).
    [Serializable()]
    public class PmDocumentCategoryTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 209;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnExtendableId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmDocumentCategory", "pm_document_category",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pm_code_c", "Document Type Category", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(1, "Description", "pm_description_c", "Description", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(2, "Extendable", "pm_extendable_l", "Extendable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableFlag", "pm_unassignable_flag_l", "Unassignable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(4, "UnassignableDate", "pm_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "DeletableFlag", "pm_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmDocumentCategoryTable() :
                base("PmDocumentCategory")
        {
        }

        /// constructor
        public PmDocumentCategoryTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmDocumentCategoryTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the category of a document type.
        public DataColumn ColumnCode;
        /// This describes the document type category.
        public DataColumn ColumnDescription;
        /// Indicates if document types for this category can be added on the fly
        public DataColumn ColumnExtendable;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pm_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_extendable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pm_code_c"];
            this.ColumnDescription = this.Columns["pm_description_c"];
            this.ColumnExtendable = this.Columns["pm_extendable_l"];
            this.ColumnUnassignableFlag = this.Columns["pm_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pm_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pm_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PmDocumentCategoryRow this[int i]
        {
            get
            {
                return ((PmDocumentCategoryRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmDocumentCategoryRow NewRowTyped(bool AWithDefaultValues)
        {
            PmDocumentCategoryRow ret = ((PmDocumentCategoryRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmDocumentCategoryRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmDocumentCategoryRow(builder);
        }

        /// get typed set of changes
        public PmDocumentCategoryTable GetChangesTyped()
        {
            return ((PmDocumentCategoryTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmDocumentCategory";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_document_category";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pm_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pm_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetExtendableDBName()
        {
            return "pm_extendable_l";
        }

        /// get character length for column
        public static short GetExtendableLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pm_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pm_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pm_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes that indicate the categories of document types (grouping).
    [Serializable()]
    public class PmDocumentCategoryRow : System.Data.DataRow
    {
        private PmDocumentCategoryTable myTable;

        /// Constructor
        public PmDocumentCategoryRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmDocumentCategoryTable)(this.Table));
        }

        /// This code indicates the category of a document type.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the document type category.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if document types for this category can be added on the fly
        public Boolean Extendable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtendable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtendable)
                            || (((Boolean)(this[this.myTable.ColumnExtendable])) != value)))
                {
                    this[this.myTable.ColumnExtendable] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnExtendable.Ordinal] = false;
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsExtendableNull()
        {
            return this.IsNull(this.myTable.ColumnExtendable);
        }

        /// assign NULL value
        public void SetExtendableNull()
        {
            this.SetNull(this.myTable.ColumnExtendable);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes that indicate the types of documents for a person.
    [Serializable()]
    public class PmDocumentTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 210;
        /// used for generic TTypedDataTable functions
        public static short ColumnDocCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDocCategoryId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmDocumentType", "pm_document_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "DocCode", "pm_doc_code_c", "Document Type", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(1, "DocCategory", "pm_doc_category_c", "Document Category", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(2, "Description", "pm_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(3, "UnassignableFlag", "pm_unassignable_flag_l", "Unassignable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(4, "UnassignableDate", "pm_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "DeletableFlag", "pm_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmDocumentTypeTable() :
                base("PmDocumentType")
        {
        }

        /// constructor
        public PmDocumentTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmDocumentTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the type of document for a person.
        public DataColumn ColumnDocCode;
        /// This code indicates the category of a document type.
        public DataColumn ColumnDocCategory;
        /// This describes the document type.
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pm_doc_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_doc_category_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnDocCode = this.Columns["pm_doc_code_c"];
            this.ColumnDocCategory = this.Columns["pm_doc_category_c"];
            this.ColumnDescription = this.Columns["pm_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pm_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pm_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pm_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnDocCode};
        }

        /// Access a typed row by index
        public PmDocumentTypeRow this[int i]
        {
            get
            {
                return ((PmDocumentTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmDocumentTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PmDocumentTypeRow ret = ((PmDocumentTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmDocumentTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmDocumentTypeRow(builder);
        }

        /// get typed set of changes
        public PmDocumentTypeTable GetChangesTyped()
        {
            return ((PmDocumentTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmDocumentType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_document_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetDocCodeDBName()
        {
            return "pm_doc_code_c";
        }

        /// get character length for column
        public static short GetDocCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetDocCategoryDBName()
        {
            return "pm_doc_category_c";
        }

        /// get character length for column
        public static short GetDocCategoryLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pm_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pm_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pm_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pm_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes that indicate the types of documents for a person.
    [Serializable()]
    public class PmDocumentTypeRow : System.Data.DataRow
    {
        private PmDocumentTypeTable myTable;

        /// Constructor
        public PmDocumentTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmDocumentTypeTable)(this.Table));
        }

        /// This code indicates the type of document for a person.
        public String DocCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDocCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDocCode)
                            || (((String)(this[this.myTable.ColumnDocCode])) != value)))
                {
                    this[this.myTable.ColumnDocCode] = value;
                }
            }
        }

        /// This code indicates the category of a document type.
        public String DocCategory
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDocCategory.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDocCategory)
                            || (((String)(this[this.myTable.ColumnDocCategory])) != value)))
                {
                    this[this.myTable.ColumnDocCategory] = value;
                }
            }
        }

        /// This describes the document type.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnDocCode);
            this.SetNull(this.myTable.ColumnDocCategory);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsDocCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDocCode);
        }

        /// assign NULL value
        public void SetDocCodeNull()
        {
            this.SetNull(this.myTable.ColumnDocCode);
        }

        /// test for NULL value
        public bool IsDocCategoryNull()
        {
            return this.IsNull(this.myTable.ColumnDocCategory);
        }

        /// assign NULL value
        public void SetDocCategoryNull()
        {
            this.SetNull(this.myTable.ColumnDocCategory);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Document
    [Serializable()]
    public class PmDocumentTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 211;
        /// used for generic TTypedDataTable functions
        public static short ColumnSiteKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDocumentKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDocCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDocumentIdId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPlaceOfIssueId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfIssueId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfStartId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfExpirationId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDocCommentId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnAssocDocIdId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnContactPartnerKeyId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 16;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmDocument", "pm_document",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "SiteKey", "p_site_key_n", "Site Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "DocumentKey", "pm_document_key_n", "Document Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "DocCode", "pm_doc_code_c", "Document Type", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(4, "DocumentId", "pm_document_id_c", "Document ID", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(5, "PlaceOfIssue", "pm_place_of_issue_c", "Place of Issue", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(6, "DateOfIssue", "pm_date_of_issue_d", "Date of Issue", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "DateOfStart", "pm_date_of_start_d", "Start Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "DateOfExpiration", "pm_date_of_expiration_d", "Date of Expiration", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "DocComment", "pm_doc_comment_c", "Comments", OdbcType.VarChar, 1000, false),
                    new TTypedColumnInfo(10, "AssocDocId", "pm_assoc_doc_id_c", "Associated Document ID", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(11, "ContactPartnerKey", "pm_contact_partner_key_n", "Contact Partner Key", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(12, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public PmDocumentTable() :
                base("PmDocument")
        {
        }

        /// constructor
        public PmDocumentTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmDocumentTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the key that tell what site created this document
        public DataColumn ColumnSiteKey;
        /// Key to identify the document
        public DataColumn ColumnDocumentKey;
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// This code indicates the type of document for a person.
        public DataColumn ColumnDocCode;
        /// Document ID
        public DataColumn ColumnDocumentId;
        /// Place the document was issued.
        public DataColumn ColumnPlaceOfIssue;
        /// The date the document was issued.
        public DataColumn ColumnDateOfIssue;
        /// Date the document takes effect.
        public DataColumn ColumnDateOfStart;
        /// Date the document expires
        public DataColumn ColumnDateOfExpiration;
        /// Comments and details
        public DataColumn ColumnDocComment;
        /// ID of associated document
        public DataColumn ColumnAssocDocId;
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnContactPartnerKey;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_document_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_doc_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_document_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_place_of_issue_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_date_of_issue_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_date_of_start_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_date_of_expiration_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_doc_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_assoc_doc_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_contact_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSiteKey = this.Columns["p_site_key_n"];
            this.ColumnDocumentKey = this.Columns["pm_document_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDocCode = this.Columns["pm_doc_code_c"];
            this.ColumnDocumentId = this.Columns["pm_document_id_c"];
            this.ColumnPlaceOfIssue = this.Columns["pm_place_of_issue_c"];
            this.ColumnDateOfIssue = this.Columns["pm_date_of_issue_d"];
            this.ColumnDateOfStart = this.Columns["pm_date_of_start_d"];
            this.ColumnDateOfExpiration = this.Columns["pm_date_of_expiration_d"];
            this.ColumnDocComment = this.Columns["pm_doc_comment_c"];
            this.ColumnAssocDocId = this.Columns["pm_assoc_doc_id_c"];
            this.ColumnContactPartnerKey = this.Columns["pm_contact_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnSiteKey,ColumnDocumentKey};
        }

        /// Access a typed row by index
        public PmDocumentRow this[int i]
        {
            get
            {
                return ((PmDocumentRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmDocumentRow NewRowTyped(bool AWithDefaultValues)
        {
            PmDocumentRow ret = ((PmDocumentRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmDocumentRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmDocumentRow(builder);
        }

        /// get typed set of changes
        public PmDocumentTable GetChangesTyped()
        {
            return ((PmDocumentTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmDocument";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_document";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetSiteKeyDBName()
        {
            return "p_site_key_n";
        }

        /// get character length for column
        public static short GetSiteKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDocumentKeyDBName()
        {
            return "pm_document_key_n";
        }

        /// get character length for column
        public static short GetDocumentKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDocCodeDBName()
        {
            return "pm_doc_code_c";
        }

        /// get character length for column
        public static short GetDocCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetDocumentIdDBName()
        {
            return "pm_document_id_c";
        }

        /// get character length for column
        public static short GetDocumentIdLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetPlaceOfIssueDBName()
        {
            return "pm_place_of_issue_c";
        }

        /// get character length for column
        public static short GetPlaceOfIssueLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfIssueDBName()
        {
            return "pm_date_of_issue_d";
        }

        /// get character length for column
        public static short GetDateOfIssueLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfStartDBName()
        {
            return "pm_date_of_start_d";
        }

        /// get character length for column
        public static short GetDateOfStartLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfExpirationDBName()
        {
            return "pm_date_of_expiration_d";
        }

        /// get character length for column
        public static short GetDateOfExpirationLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDocCommentDBName()
        {
            return "pm_doc_comment_c";
        }

        /// get character length for column
        public static short GetDocCommentLength()
        {
            return 1000;
        }

        /// get the name of the field in the database for this column
        public static string GetAssocDocIdDBName()
        {
            return "pm_assoc_doc_id_c";
        }

        /// get character length for column
        public static short GetAssocDocIdLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetContactPartnerKeyDBName()
        {
            return "pm_contact_partner_key_n";
        }

        /// get character length for column
        public static short GetContactPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Document
    [Serializable()]
    public class PmDocumentRow : System.Data.DataRow
    {
        private PmDocumentTable myTable;

        /// Constructor
        public PmDocumentRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmDocumentTable)(this.Table));
        }

        /// This is the key that tell what site created this document
        public Int64 SiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSiteKey)
                            || (((Int64)(this[this.myTable.ColumnSiteKey])) != value)))
                {
                    this[this.myTable.ColumnSiteKey] = value;
                }
            }
        }

        /// Key to identify the document
        public Int64 DocumentKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDocumentKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDocumentKey)
                            || (((Int64)(this[this.myTable.ColumnDocumentKey])) != value)))
                {
                    this[this.myTable.ColumnDocumentKey] = value;
                }
            }
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// This code indicates the type of document for a person.
        public String DocCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDocCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDocCode)
                            || (((String)(this[this.myTable.ColumnDocCode])) != value)))
                {
                    this[this.myTable.ColumnDocCode] = value;
                }
            }
        }

        /// Document ID
        public String DocumentId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDocumentId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDocumentId)
                            || (((String)(this[this.myTable.ColumnDocumentId])) != value)))
                {
                    this[this.myTable.ColumnDocumentId] = value;
                }
            }
        }

        /// Place the document was issued.
        public String PlaceOfIssue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPlaceOfIssue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPlaceOfIssue)
                            || (((String)(this[this.myTable.ColumnPlaceOfIssue])) != value)))
                {
                    this[this.myTable.ColumnPlaceOfIssue] = value;
                }
            }
        }

        /// The date the document was issued.
        public System.DateTime? DateOfIssue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfIssue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfIssue)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateOfIssue])) != value)))
                {
                    this[this.myTable.ColumnDateOfIssue] = value;
                }
            }
        }

        /// Date the document takes effect.
        public System.DateTime? DateOfStart
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfStart.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfStart)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateOfStart])) != value)))
                {
                    this[this.myTable.ColumnDateOfStart] = value;
                }
            }
        }

        /// Date the document expires
        public System.DateTime? DateOfExpiration
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfExpiration.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfExpiration)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateOfExpiration])) != value)))
                {
                    this[this.myTable.ColumnDateOfExpiration] = value;
                }
            }
        }

        /// Comments and details
        public String DocComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDocComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDocComment)
                            || (((String)(this[this.myTable.ColumnDocComment])) != value)))
                {
                    this[this.myTable.ColumnDocComment] = value;
                }
            }
        }

        /// ID of associated document
        public String AssocDocId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAssocDocId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAssocDocId)
                            || (((String)(this[this.myTable.ColumnAssocDocId])) != value)))
                {
                    this[this.myTable.ColumnAssocDocId] = value;
                }
            }
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 ContactPartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnContactPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnContactPartnerKey] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnSiteKey.Ordinal] = 0;
            this[this.myTable.ColumnDocumentKey.Ordinal] = 0;
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDocCode);
            this.SetNull(this.myTable.ColumnDocumentId);
            this.SetNull(this.myTable.ColumnPlaceOfIssue);
            this.SetNull(this.myTable.ColumnDateOfIssue);
            this.SetNull(this.myTable.ColumnDateOfStart);
            this.SetNull(this.myTable.ColumnDateOfExpiration);
            this.SetNull(this.myTable.ColumnDocComment);
            this.SetNull(this.myTable.ColumnAssocDocId);
            this[this.myTable.ColumnContactPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsSiteKeyNull()
        {
            return this.IsNull(this.myTable.ColumnSiteKey);
        }

        /// assign NULL value
        public void SetSiteKeyNull()
        {
            this.SetNull(this.myTable.ColumnSiteKey);
        }

        /// test for NULL value
        public bool IsDocumentKeyNull()
        {
            return this.IsNull(this.myTable.ColumnDocumentKey);
        }

        /// assign NULL value
        public void SetDocumentKeyNull()
        {
            this.SetNull(this.myTable.ColumnDocumentKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsDocCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDocCode);
        }

        /// assign NULL value
        public void SetDocCodeNull()
        {
            this.SetNull(this.myTable.ColumnDocCode);
        }

        /// test for NULL value
        public bool IsDocumentIdNull()
        {
            return this.IsNull(this.myTable.ColumnDocumentId);
        }

        /// assign NULL value
        public void SetDocumentIdNull()
        {
            this.SetNull(this.myTable.ColumnDocumentId);
        }

        /// test for NULL value
        public bool IsPlaceOfIssueNull()
        {
            return this.IsNull(this.myTable.ColumnPlaceOfIssue);
        }

        /// assign NULL value
        public void SetPlaceOfIssueNull()
        {
            this.SetNull(this.myTable.ColumnPlaceOfIssue);
        }

        /// test for NULL value
        public bool IsDateOfIssueNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfIssue);
        }

        /// assign NULL value
        public void SetDateOfIssueNull()
        {
            this.SetNull(this.myTable.ColumnDateOfIssue);
        }

        /// test for NULL value
        public bool IsDateOfStartNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfStart);
        }

        /// assign NULL value
        public void SetDateOfStartNull()
        {
            this.SetNull(this.myTable.ColumnDateOfStart);
        }

        /// test for NULL value
        public bool IsDateOfExpirationNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfExpiration);
        }

        /// assign NULL value
        public void SetDateOfExpirationNull()
        {
            this.SetNull(this.myTable.ColumnDateOfExpiration);
        }

        /// test for NULL value
        public bool IsDocCommentNull()
        {
            return this.IsNull(this.myTable.ColumnDocComment);
        }

        /// assign NULL value
        public void SetDocCommentNull()
        {
            this.SetNull(this.myTable.ColumnDocComment);
        }

        /// test for NULL value
        public bool IsAssocDocIdNull()
        {
            return this.IsNull(this.myTable.ColumnAssocDocId);
        }

        /// assign NULL value
        public void SetAssocDocIdNull()
        {
            this.SetNull(this.myTable.ColumnAssocDocId);
        }

        /// test for NULL value
        public bool IsContactPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnContactPartnerKey);
        }

        /// assign NULL value
        public void SetContactPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnContactPartnerKey);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes that indicate the type of passport a person holds.
    [Serializable()]
    public class PtPassportTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 212;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtPassportType", "pt_passport_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Passport Type", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtPassportTypeTable() :
                base("PtPassportType")
        {
        }

        /// constructor
        public PtPassportTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtPassportTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the type of passport a person holds.
        public DataColumn ColumnCode;
        /// This describes the passport type.
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtPassportTypeRow this[int i]
        {
            get
            {
                return ((PtPassportTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtPassportTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            PtPassportTypeRow ret = ((PtPassportTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtPassportTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtPassportTypeRow(builder);
        }

        /// get typed set of changes
        public PtPassportTypeTable GetChangesTyped()
        {
            return ((PtPassportTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtPassportType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_passport_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes that indicate the type of passport a person holds.
    [Serializable()]
    public class PtPassportTypeRow : System.Data.DataRow
    {
        private PtPassportTypeTable myTable;

        /// Constructor
        public PtPassportTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtPassportTypeTable)(this.Table));
        }

        /// This code indicates the type of passport a person holds.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the passport type.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Passport Details
    [Serializable()]
    public class PmPassportDetailsTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 213;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPassportNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnMainPassportId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnActiveFlagId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnFullPassportNameId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPassportDobId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnPlaceOfBirthId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnPassportNationalityCodeId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfExpirationId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnPlaceOfIssueId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCountryOfIssueId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfIssueId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnPassportDetailsTypeId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 17;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPassportDetails", "pm_passport_details",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "PassportNumber", "pm_passport_number_c", "Passport Number", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(2, "MainPassport", "pm_main_passport_l", "Main Passport?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "ActiveFlag", "pm_active_flag_c", "Active?", OdbcType.VarChar, 6, false),
                    new TTypedColumnInfo(4, "FullPassportName", "pm_full_passport_name_c", "Name", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(5, "PassportDob", "pm_passport_dob_d", "DOB", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "PlaceOfBirth", "pm_place_of_birth_c", "Place of Birth", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(7, "PassportNationalityCode", "p_passport_nationality_code_c", "Passport Nationality", OdbcType.VarChar, 8, false),
                    new TTypedColumnInfo(8, "DateOfExpiration", "pm_date_of_expiration_d", "Date of Expiration", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "PlaceOfIssue", "pm_place_of_issue_c", "Place of Issue", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(10, "CountryOfIssue", "p_country_of_issue_c", "Country of Issue", OdbcType.VarChar, 8, false),
                    new TTypedColumnInfo(11, "DateOfIssue", "pm_date_of_issue_d", "Date of Issue", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "PassportDetailsType", "pm_passport_details_type_c", "Type", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(13, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(15, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(16, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(17, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public PmPassportDetailsTable() :
                base("PmPassportDetails")
        {
        }

        /// constructor
        public PmPassportDetailsTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPassportDetailsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Passport Number
        public DataColumn ColumnPassportNumber;
        /// Is this the main passport?
        public DataColumn ColumnMainPassport;
        /// Indicates whether the passport is active or not.
        public DataColumn ColumnActiveFlag;
        /// Full passport name.
        public DataColumn ColumnFullPassportName;
        /// Date of Birth
        public DataColumn ColumnPassportDob;
        /// Location of birth, eg. Cleveland, Ohio, USA, or Oswestry,Shropshire, England.
        public DataColumn ColumnPlaceOfBirth;
        /// Nationality of the passport holder.
        public DataColumn ColumnPassportNationalityCode;
        /// Date the passport expires
        public DataColumn ColumnDateOfExpiration;
        /// Place the passport was issued.
        public DataColumn ColumnPlaceOfIssue;
        /// Country the passport was issued.
        public DataColumn ColumnCountryOfIssue;
        /// The date the passport was issued.
        public DataColumn ColumnDateOfIssue;
        /// Details the type of passport, e.g. Residence, Diplomatic, etc.
        public DataColumn ColumnPassportDetailsType;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_passport_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_main_passport_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_active_flag_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_full_passport_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_passport_dob_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_place_of_birth_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_passport_nationality_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_date_of_expiration_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_place_of_issue_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_country_of_issue_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_date_of_issue_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_passport_details_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnPassportNumber = this.Columns["pm_passport_number_c"];
            this.ColumnMainPassport = this.Columns["pm_main_passport_l"];
            this.ColumnActiveFlag = this.Columns["pm_active_flag_c"];
            this.ColumnFullPassportName = this.Columns["pm_full_passport_name_c"];
            this.ColumnPassportDob = this.Columns["pm_passport_dob_d"];
            this.ColumnPlaceOfBirth = this.Columns["pm_place_of_birth_c"];
            this.ColumnPassportNationalityCode = this.Columns["p_passport_nationality_code_c"];
            this.ColumnDateOfExpiration = this.Columns["pm_date_of_expiration_d"];
            this.ColumnPlaceOfIssue = this.Columns["pm_place_of_issue_c"];
            this.ColumnCountryOfIssue = this.Columns["p_country_of_issue_c"];
            this.ColumnDateOfIssue = this.Columns["pm_date_of_issue_d"];
            this.ColumnPassportDetailsType = this.Columns["pm_passport_details_type_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnPartnerKey,ColumnPassportNumber};
        }

        /// Access a typed row by index
        public PmPassportDetailsRow this[int i]
        {
            get
            {
                return ((PmPassportDetailsRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPassportDetailsRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPassportDetailsRow ret = ((PmPassportDetailsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPassportDetailsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPassportDetailsRow(builder);
        }

        /// get typed set of changes
        public PmPassportDetailsTable GetChangesTyped()
        {
            return ((PmPassportDetailsTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPassportDetails";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_passport_details";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPassportNumberDBName()
        {
            return "pm_passport_number_c";
        }

        /// get character length for column
        public static short GetPassportNumberLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetMainPassportDBName()
        {
            return "pm_main_passport_l";
        }

        /// get character length for column
        public static short GetMainPassportLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetActiveFlagDBName()
        {
            return "pm_active_flag_c";
        }

        /// get character length for column
        public static short GetActiveFlagLength()
        {
            return 6;
        }

        /// get the name of the field in the database for this column
        public static string GetFullPassportNameDBName()
        {
            return "pm_full_passport_name_c";
        }

        /// get character length for column
        public static short GetFullPassportNameLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetPassportDobDBName()
        {
            return "pm_passport_dob_d";
        }

        /// get character length for column
        public static short GetPassportDobLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPlaceOfBirthDBName()
        {
            return "pm_place_of_birth_c";
        }

        /// get character length for column
        public static short GetPlaceOfBirthLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetPassportNationalityCodeDBName()
        {
            return "p_passport_nationality_code_c";
        }

        /// get character length for column
        public static short GetPassportNationalityCodeLength()
        {
            return 8;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfExpirationDBName()
        {
            return "pm_date_of_expiration_d";
        }

        /// get character length for column
        public static short GetDateOfExpirationLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPlaceOfIssueDBName()
        {
            return "pm_place_of_issue_c";
        }

        /// get character length for column
        public static short GetPlaceOfIssueLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetCountryOfIssueDBName()
        {
            return "p_country_of_issue_c";
        }

        /// get character length for column
        public static short GetCountryOfIssueLength()
        {
            return 8;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfIssueDBName()
        {
            return "pm_date_of_issue_d";
        }

        /// get character length for column
        public static short GetDateOfIssueLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPassportDetailsTypeDBName()
        {
            return "pm_passport_details_type_c";
        }

        /// get character length for column
        public static short GetPassportDetailsTypeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Passport Details
    [Serializable()]
    public class PmPassportDetailsRow : System.Data.DataRow
    {
        private PmPassportDetailsTable myTable;

        /// Constructor
        public PmPassportDetailsRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPassportDetailsTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Passport Number
        public String PassportNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPassportNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPassportNumber)
                            || (((String)(this[this.myTable.ColumnPassportNumber])) != value)))
                {
                    this[this.myTable.ColumnPassportNumber] = value;
                }
            }
        }

        /// Is this the main passport?
        public Boolean MainPassport
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMainPassport.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMainPassport)
                            || (((Boolean)(this[this.myTable.ColumnMainPassport])) != value)))
                {
                    this[this.myTable.ColumnMainPassport] = value;
                }
            }
        }

        /// Indicates whether the passport is active or not.
        public String ActiveFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActiveFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActiveFlag)
                            || (((String)(this[this.myTable.ColumnActiveFlag])) != value)))
                {
                    this[this.myTable.ColumnActiveFlag] = value;
                }
            }
        }

        /// Full passport name.
        public String FullPassportName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFullPassportName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFullPassportName)
                            || (((String)(this[this.myTable.ColumnFullPassportName])) != value)))
                {
                    this[this.myTable.ColumnFullPassportName] = value;
                }
            }
        }

        /// Date of Birth
        public System.DateTime? PassportDob
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPassportDob.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPassportDob)
                            || (((System.DateTime?)(this[this.myTable.ColumnPassportDob])) != value)))
                {
                    this[this.myTable.ColumnPassportDob] = value;
                }
            }
        }

        /// Location of birth, eg. Cleveland, Ohio, USA, or Oswestry,Shropshire, England.
        public String PlaceOfBirth
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPlaceOfBirth.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPlaceOfBirth)
                            || (((String)(this[this.myTable.ColumnPlaceOfBirth])) != value)))
                {
                    this[this.myTable.ColumnPlaceOfBirth] = value;
                }
            }
        }

        /// Nationality of the passport holder.
        public String PassportNationalityCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPassportNationalityCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPassportNationalityCode)
                            || (((String)(this[this.myTable.ColumnPassportNationalityCode])) != value)))
                {
                    this[this.myTable.ColumnPassportNationalityCode] = value;
                }
            }
        }

        /// Date the passport expires
        public System.DateTime? DateOfExpiration
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfExpiration.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfExpiration)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateOfExpiration])) != value)))
                {
                    this[this.myTable.ColumnDateOfExpiration] = value;
                }
            }
        }

        /// Place the passport was issued.
        public String PlaceOfIssue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPlaceOfIssue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPlaceOfIssue)
                            || (((String)(this[this.myTable.ColumnPlaceOfIssue])) != value)))
                {
                    this[this.myTable.ColumnPlaceOfIssue] = value;
                }
            }
        }

        /// Country the passport was issued.
        public String CountryOfIssue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCountryOfIssue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCountryOfIssue)
                            || (((String)(this[this.myTable.ColumnCountryOfIssue])) != value)))
                {
                    this[this.myTable.ColumnCountryOfIssue] = value;
                }
            }
        }

        /// The date the passport was issued.
        public System.DateTime? DateOfIssue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfIssue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfIssue)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateOfIssue])) != value)))
                {
                    this[this.myTable.ColumnDateOfIssue] = value;
                }
            }
        }

        /// Details the type of passport, e.g. Residence, Diplomatic, etc.
        public String PassportDetailsType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPassportDetailsType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPassportDetailsType)
                            || (((String)(this[this.myTable.ColumnPassportDetailsType])) != value)))
                {
                    this[this.myTable.ColumnPassportDetailsType] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPassportNumber);
            this[this.myTable.ColumnMainPassport.Ordinal] = false;
            this.SetNull(this.myTable.ColumnActiveFlag);
            this.SetNull(this.myTable.ColumnFullPassportName);
            this.SetNull(this.myTable.ColumnPassportDob);
            this.SetNull(this.myTable.ColumnPlaceOfBirth);
            this.SetNull(this.myTable.ColumnPassportNationalityCode);
            this.SetNull(this.myTable.ColumnDateOfExpiration);
            this.SetNull(this.myTable.ColumnPlaceOfIssue);
            this.SetNull(this.myTable.ColumnCountryOfIssue);
            this.SetNull(this.myTable.ColumnDateOfIssue);
            this.SetNull(this.myTable.ColumnPassportDetailsType);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsPassportNumberNull()
        {
            return this.IsNull(this.myTable.ColumnPassportNumber);
        }

        /// assign NULL value
        public void SetPassportNumberNull()
        {
            this.SetNull(this.myTable.ColumnPassportNumber);
        }

        /// test for NULL value
        public bool IsMainPassportNull()
        {
            return this.IsNull(this.myTable.ColumnMainPassport);
        }

        /// assign NULL value
        public void SetMainPassportNull()
        {
            this.SetNull(this.myTable.ColumnMainPassport);
        }

        /// test for NULL value
        public bool IsActiveFlagNull()
        {
            return this.IsNull(this.myTable.ColumnActiveFlag);
        }

        /// assign NULL value
        public void SetActiveFlagNull()
        {
            this.SetNull(this.myTable.ColumnActiveFlag);
        }

        /// test for NULL value
        public bool IsFullPassportNameNull()
        {
            return this.IsNull(this.myTable.ColumnFullPassportName);
        }

        /// assign NULL value
        public void SetFullPassportNameNull()
        {
            this.SetNull(this.myTable.ColumnFullPassportName);
        }

        /// test for NULL value
        public bool IsPassportDobNull()
        {
            return this.IsNull(this.myTable.ColumnPassportDob);
        }

        /// assign NULL value
        public void SetPassportDobNull()
        {
            this.SetNull(this.myTable.ColumnPassportDob);
        }

        /// test for NULL value
        public bool IsPlaceOfBirthNull()
        {
            return this.IsNull(this.myTable.ColumnPlaceOfBirth);
        }

        /// assign NULL value
        public void SetPlaceOfBirthNull()
        {
            this.SetNull(this.myTable.ColumnPlaceOfBirth);
        }

        /// test for NULL value
        public bool IsPassportNationalityCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPassportNationalityCode);
        }

        /// assign NULL value
        public void SetPassportNationalityCodeNull()
        {
            this.SetNull(this.myTable.ColumnPassportNationalityCode);
        }

        /// test for NULL value
        public bool IsDateOfExpirationNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfExpiration);
        }

        /// assign NULL value
        public void SetDateOfExpirationNull()
        {
            this.SetNull(this.myTable.ColumnDateOfExpiration);
        }

        /// test for NULL value
        public bool IsPlaceOfIssueNull()
        {
            return this.IsNull(this.myTable.ColumnPlaceOfIssue);
        }

        /// assign NULL value
        public void SetPlaceOfIssueNull()
        {
            this.SetNull(this.myTable.ColumnPlaceOfIssue);
        }

        /// test for NULL value
        public bool IsCountryOfIssueNull()
        {
            return this.IsNull(this.myTable.ColumnCountryOfIssue);
        }

        /// assign NULL value
        public void SetCountryOfIssueNull()
        {
            this.SetNull(this.myTable.ColumnCountryOfIssue);
        }

        /// test for NULL value
        public bool IsDateOfIssueNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfIssue);
        }

        /// assign NULL value
        public void SetDateOfIssueNull()
        {
            this.SetNull(this.myTable.ColumnDateOfIssue);
        }

        /// test for NULL value
        public bool IsPassportDetailsTypeNull()
        {
            return this.IsNull(this.myTable.ColumnPassportDetailsType);
        }

        /// assign NULL value
        public void SetPassportDetailsTypeNull()
        {
            this.SetNull(this.myTable.ColumnPassportDetailsType);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains fields pertaining to support and expense items.
    [Serializable()]
    public class PmLongTermSupportFiguresTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 214;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecordNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnAllowanceId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnPeriodId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCurrencyCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnAdminGrantId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnHousingId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnVehicleId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnFoodId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnTravelConferencesId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnInsuranceId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnPensionId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnChildrensEducationId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnHomeAssignmentHolidayId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnMedicalDentalCareId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnPostageTelephoneId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnStudyTrainingId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnMinistryCostsId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonalId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnOtherId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnExtraCost1LabelId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnExtraCost1Id = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnExtraCost2LabelId = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnExtraCost2Id = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnExtraCost3LabelId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnExtraCost3Id = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnActualSupportFigureId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnAgreedSupportFigureId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnAgreementDateId = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnReviewDateId = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 30;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 31;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 32;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 33;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 34;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmLongTermSupportFigures", "pm_long_term_support_figures",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "RecordNumber", "pm_record_number_i", "pm_record_number_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "Allowance", "pm_allowance_n", "Allowance", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(3, "Period", "pm_period_c", "Period", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(4, "CurrencyCode", "a_currency_code_c", "Currency Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "AdminGrant", "pm_admin_grant_n", "Admin Grant", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(6, "Housing", "pm_housing_n", "Housing", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(7, "Vehicle", "pm_vehicle_n", "Vehicle", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(8, "Food", "pm_food_n", "Food", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(9, "TravelConferences", "pm_travel_conferences_n", "Travel / Conferences", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(10, "Insurance", "pm_insurance_n", "Insurance", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(11, "Pension", "pm_pension_n", "Pension", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(12, "ChildrensEducation", "pm_childrens_education_n", "Children's Education", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(13, "HomeAssignmentHoliday", "pm_home_assignment_holiday_n", "Home Assignment/Holiday", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(14, "MedicalDentalCare", "pm_medical_dental_care_n", "Medical / Dental Care", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(15, "PostageTelephone", "pm_postage_telephone_n", "Postage / Telephone", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(16, "StudyTraining", "pm_study_training_n", "Study/Training", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(17, "MinistryCosts", "pm_ministry_costs_n", "Ministry", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(18, "Personal", "pm_personal_n", "Personal", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(19, "Other", "pm_other_n", "Other", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(20, "ExtraCost1Label", "pm_extra_cost1_label_c", "", OdbcType.VarChar, 50, true),
                    new TTypedColumnInfo(21, "ExtraCost1", "pm_extra_cost1_n", "", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(22, "ExtraCost2Label", "pm_extra_cost2_label_c", "", OdbcType.VarChar, 50, true),
                    new TTypedColumnInfo(23, "ExtraCost2", "pm_extra_cost2_n", "", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(24, "ExtraCost3Label", "pm_extra_cost3_label_c", "", OdbcType.VarChar, 50, true),
                    new TTypedColumnInfo(25, "ExtraCost3", "pm_extra_cost3_n", "", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(26, "ActualSupportFigure", "pm_actual_support_figure_n", "Actual Support", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(27, "AgreedSupportFigure", "pm_agreed_support_figure_n", "Agreed Support", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(28, "AgreementDate", "pm_agreement_date_d", "Agreement Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(29, "ReviewDate", "pm_review_date_d", "Review Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(30, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(31, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(32, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(33, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(34, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public PmLongTermSupportFiguresTable() :
                base("PmLongTermSupportFigures")
        {
        }

        /// constructor
        public PmLongTermSupportFiguresTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmLongTermSupportFiguresTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Number of record per Partner. Added to make PK.
        public DataColumn ColumnRecordNumber;
        /// This field represents the monthly allowance.
        public DataColumn ColumnAllowance;
        /// This field represents the allowance period.
        public DataColumn ColumnPeriod;
        /// This defines which currency is being used
        public DataColumn ColumnCurrencyCode;
        /// Amount of any administrative grants.
        public DataColumn ColumnAdminGrant;
        /// Housing costs
        public DataColumn ColumnHousing;
        /// Vehicle costs.
        public DataColumn ColumnVehicle;
        /// Food costs.
        public DataColumn ColumnFood;
        /// Travel and/or conference costs.
        public DataColumn ColumnTravelConferences;
        /// Insurance costs.
        public DataColumn ColumnInsurance;
        /// Pension costs.
        public DataColumn ColumnPension;
        /// Education costs.
        public DataColumn ColumnChildrensEducation;
        /// Home travel or holiday costs.
        public DataColumn ColumnHomeAssignmentHoliday;
        /// Medical and/or Dental costs
        public DataColumn ColumnMedicalDentalCare;
        /// Postage and/or telephone costs.
        public DataColumn ColumnPostageTelephone;
        /// Study and/or training costs
        public DataColumn ColumnStudyTraining;
        /// Ministry costs.
        public DataColumn ColumnMinistryCosts;
        /// Personal costs.
        public DataColumn ColumnPersonal;
        /// Other  miscellaneous costs.
        public DataColumn ColumnOther;
        /// Label for Extra Cost 1
        public DataColumn ColumnExtraCost1Label;
        /// Extra Cost 1
        public DataColumn ColumnExtraCost1;
        /// Label for Extra Cost 2
        public DataColumn ColumnExtraCost2Label;
        /// Extra Cost 2
        public DataColumn ColumnExtraCost2;
        /// Label for Extra Cost 3
        public DataColumn ColumnExtraCost3Label;
        /// Extra Cost 3
        public DataColumn ColumnExtraCost3;
        /// The actual support figure coming in.
        public DataColumn ColumnActualSupportFigure;
        /// The agreed support figure.
        public DataColumn ColumnAgreedSupportFigure;
        /// The date the support figure was agreed upon.
        public DataColumn ColumnAgreementDate;
        /// The date the support figure agreement is reviewed.
        public DataColumn ColumnReviewDate;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_record_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_allowance_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_period_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_admin_grant_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_housing_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_vehicle_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_food_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_travel_conferences_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_insurance_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_pension_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_childrens_education_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_home_assignment_holiday_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_medical_dental_care_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_postage_telephone_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_study_training_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_ministry_costs_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_personal_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_other_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_extra_cost1_label_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_extra_cost1_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_extra_cost2_label_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_extra_cost2_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_extra_cost3_label_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_extra_cost3_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_actual_support_figure_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_agreed_support_figure_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_agreement_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_review_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnRecordNumber = this.Columns["pm_record_number_i"];
            this.ColumnAllowance = this.Columns["pm_allowance_n"];
            this.ColumnPeriod = this.Columns["pm_period_c"];
            this.ColumnCurrencyCode = this.Columns["a_currency_code_c"];
            this.ColumnAdminGrant = this.Columns["pm_admin_grant_n"];
            this.ColumnHousing = this.Columns["pm_housing_n"];
            this.ColumnVehicle = this.Columns["pm_vehicle_n"];
            this.ColumnFood = this.Columns["pm_food_n"];
            this.ColumnTravelConferences = this.Columns["pm_travel_conferences_n"];
            this.ColumnInsurance = this.Columns["pm_insurance_n"];
            this.ColumnPension = this.Columns["pm_pension_n"];
            this.ColumnChildrensEducation = this.Columns["pm_childrens_education_n"];
            this.ColumnHomeAssignmentHoliday = this.Columns["pm_home_assignment_holiday_n"];
            this.ColumnMedicalDentalCare = this.Columns["pm_medical_dental_care_n"];
            this.ColumnPostageTelephone = this.Columns["pm_postage_telephone_n"];
            this.ColumnStudyTraining = this.Columns["pm_study_training_n"];
            this.ColumnMinistryCosts = this.Columns["pm_ministry_costs_n"];
            this.ColumnPersonal = this.Columns["pm_personal_n"];
            this.ColumnOther = this.Columns["pm_other_n"];
            this.ColumnExtraCost1Label = this.Columns["pm_extra_cost1_label_c"];
            this.ColumnExtraCost1 = this.Columns["pm_extra_cost1_n"];
            this.ColumnExtraCost2Label = this.Columns["pm_extra_cost2_label_c"];
            this.ColumnExtraCost2 = this.Columns["pm_extra_cost2_n"];
            this.ColumnExtraCost3Label = this.Columns["pm_extra_cost3_label_c"];
            this.ColumnExtraCost3 = this.Columns["pm_extra_cost3_n"];
            this.ColumnActualSupportFigure = this.Columns["pm_actual_support_figure_n"];
            this.ColumnAgreedSupportFigure = this.Columns["pm_agreed_support_figure_n"];
            this.ColumnAgreementDate = this.Columns["pm_agreement_date_d"];
            this.ColumnReviewDate = this.Columns["pm_review_date_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnPartnerKey,ColumnRecordNumber};
        }

        /// Access a typed row by index
        public PmLongTermSupportFiguresRow this[int i]
        {
            get
            {
                return ((PmLongTermSupportFiguresRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmLongTermSupportFiguresRow NewRowTyped(bool AWithDefaultValues)
        {
            PmLongTermSupportFiguresRow ret = ((PmLongTermSupportFiguresRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmLongTermSupportFiguresRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmLongTermSupportFiguresRow(builder);
        }

        /// get typed set of changes
        public PmLongTermSupportFiguresTable GetChangesTyped()
        {
            return ((PmLongTermSupportFiguresTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmLongTermSupportFigures";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_long_term_support_figures";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetRecordNumberDBName()
        {
            return "pm_record_number_i";
        }

        /// get character length for column
        public static short GetRecordNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAllowanceDBName()
        {
            return "pm_allowance_n";
        }

        /// get character length for column
        public static short GetAllowanceLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetPeriodDBName()
        {
            return "pm_period_c";
        }

        /// get character length for column
        public static short GetPeriodLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetCurrencyCodeDBName()
        {
            return "a_currency_code_c";
        }

        /// get character length for column
        public static short GetCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAdminGrantDBName()
        {
            return "pm_admin_grant_n";
        }

        /// get character length for column
        public static short GetAdminGrantLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetHousingDBName()
        {
            return "pm_housing_n";
        }

        /// get character length for column
        public static short GetHousingLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetVehicleDBName()
        {
            return "pm_vehicle_n";
        }

        /// get character length for column
        public static short GetVehicleLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetFoodDBName()
        {
            return "pm_food_n";
        }

        /// get character length for column
        public static short GetFoodLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTravelConferencesDBName()
        {
            return "pm_travel_conferences_n";
        }

        /// get character length for column
        public static short GetTravelConferencesLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetInsuranceDBName()
        {
            return "pm_insurance_n";
        }

        /// get character length for column
        public static short GetInsuranceLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetPensionDBName()
        {
            return "pm_pension_n";
        }

        /// get character length for column
        public static short GetPensionLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetChildrensEducationDBName()
        {
            return "pm_childrens_education_n";
        }

        /// get character length for column
        public static short GetChildrensEducationLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetHomeAssignmentHolidayDBName()
        {
            return "pm_home_assignment_holiday_n";
        }

        /// get character length for column
        public static short GetHomeAssignmentHolidayLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetMedicalDentalCareDBName()
        {
            return "pm_medical_dental_care_n";
        }

        /// get character length for column
        public static short GetMedicalDentalCareLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetPostageTelephoneDBName()
        {
            return "pm_postage_telephone_n";
        }

        /// get character length for column
        public static short GetPostageTelephoneLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetStudyTrainingDBName()
        {
            return "pm_study_training_n";
        }

        /// get character length for column
        public static short GetStudyTrainingLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetMinistryCostsDBName()
        {
            return "pm_ministry_costs_n";
        }

        /// get character length for column
        public static short GetMinistryCostsLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetPersonalDBName()
        {
            return "pm_personal_n";
        }

        /// get character length for column
        public static short GetPersonalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetOtherDBName()
        {
            return "pm_other_n";
        }

        /// get character length for column
        public static short GetOtherLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExtraCost1LabelDBName()
        {
            return "pm_extra_cost1_label_c";
        }

        /// get character length for column
        public static short GetExtraCost1LabelLength()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetExtraCost1DBName()
        {
            return "pm_extra_cost1_n";
        }

        /// get character length for column
        public static short GetExtraCost1Length()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExtraCost2LabelDBName()
        {
            return "pm_extra_cost2_label_c";
        }

        /// get character length for column
        public static short GetExtraCost2LabelLength()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetExtraCost2DBName()
        {
            return "pm_extra_cost2_n";
        }

        /// get character length for column
        public static short GetExtraCost2Length()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExtraCost3LabelDBName()
        {
            return "pm_extra_cost3_label_c";
        }

        /// get character length for column
        public static short GetExtraCost3LabelLength()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetExtraCost3DBName()
        {
            return "pm_extra_cost3_n";
        }

        /// get character length for column
        public static short GetExtraCost3Length()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetActualSupportFigureDBName()
        {
            return "pm_actual_support_figure_n";
        }

        /// get character length for column
        public static short GetActualSupportFigureLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAgreedSupportFigureDBName()
        {
            return "pm_agreed_support_figure_n";
        }

        /// get character length for column
        public static short GetAgreedSupportFigureLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAgreementDateDBName()
        {
            return "pm_agreement_date_d";
        }

        /// get character length for column
        public static short GetAgreementDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReviewDateDBName()
        {
            return "pm_review_date_d";
        }

        /// get character length for column
        public static short GetReviewDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains fields pertaining to support and expense items.
    [Serializable()]
    public class PmLongTermSupportFiguresRow : System.Data.DataRow
    {
        private PmLongTermSupportFiguresTable myTable;

        /// Constructor
        public PmLongTermSupportFiguresRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmLongTermSupportFiguresTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Number of record per Partner. Added to make PK.
        public Int32 RecordNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecordNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecordNumber)
                            || (((Int32)(this[this.myTable.ColumnRecordNumber])) != value)))
                {
                    this[this.myTable.ColumnRecordNumber] = value;
                }
            }
        }

        /// This field represents the monthly allowance.
        public Decimal Allowance
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAllowance.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAllowance)
                            || (((Decimal)(this[this.myTable.ColumnAllowance])) != value)))
                {
                    this[this.myTable.ColumnAllowance] = value;
                }
            }
        }

        /// This field represents the allowance period.
        public String Period
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriod)
                            || (((String)(this[this.myTable.ColumnPeriod])) != value)))
                {
                    this[this.myTable.ColumnPeriod] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String CurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrencyCode)
                            || (((String)(this[this.myTable.ColumnCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnCurrencyCode] = value;
                }
            }
        }

        /// Amount of any administrative grants.
        public Decimal AdminGrant
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAdminGrant.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAdminGrant)
                            || (((Decimal)(this[this.myTable.ColumnAdminGrant])) != value)))
                {
                    this[this.myTable.ColumnAdminGrant] = value;
                }
            }
        }

        /// Housing costs
        public Decimal Housing
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHousing.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHousing)
                            || (((Decimal)(this[this.myTable.ColumnHousing])) != value)))
                {
                    this[this.myTable.ColumnHousing] = value;
                }
            }
        }

        /// Vehicle costs.
        public Decimal Vehicle
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVehicle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVehicle)
                            || (((Decimal)(this[this.myTable.ColumnVehicle])) != value)))
                {
                    this[this.myTable.ColumnVehicle] = value;
                }
            }
        }

        /// Food costs.
        public Decimal Food
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFood.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFood)
                            || (((Decimal)(this[this.myTable.ColumnFood])) != value)))
                {
                    this[this.myTable.ColumnFood] = value;
                }
            }
        }

        /// Travel and/or conference costs.
        public Decimal TravelConferences
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTravelConferences.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTravelConferences)
                            || (((Decimal)(this[this.myTable.ColumnTravelConferences])) != value)))
                {
                    this[this.myTable.ColumnTravelConferences] = value;
                }
            }
        }

        /// Insurance costs.
        public Decimal Insurance
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInsurance.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInsurance)
                            || (((Decimal)(this[this.myTable.ColumnInsurance])) != value)))
                {
                    this[this.myTable.ColumnInsurance] = value;
                }
            }
        }

        /// Pension costs.
        public Decimal Pension
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPension.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPension)
                            || (((Decimal)(this[this.myTable.ColumnPension])) != value)))
                {
                    this[this.myTable.ColumnPension] = value;
                }
            }
        }

        /// Education costs.
        public Decimal ChildrensEducation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChildrensEducation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChildrensEducation)
                            || (((Decimal)(this[this.myTable.ColumnChildrensEducation])) != value)))
                {
                    this[this.myTable.ColumnChildrensEducation] = value;
                }
            }
        }

        /// Home travel or holiday costs.
        public Decimal HomeAssignmentHoliday
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHomeAssignmentHoliday.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHomeAssignmentHoliday)
                            || (((Decimal)(this[this.myTable.ColumnHomeAssignmentHoliday])) != value)))
                {
                    this[this.myTable.ColumnHomeAssignmentHoliday] = value;
                }
            }
        }

        /// Medical and/or Dental costs
        public Decimal MedicalDentalCare
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMedicalDentalCare.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMedicalDentalCare)
                            || (((Decimal)(this[this.myTable.ColumnMedicalDentalCare])) != value)))
                {
                    this[this.myTable.ColumnMedicalDentalCare] = value;
                }
            }
        }

        /// Postage and/or telephone costs.
        public Decimal PostageTelephone
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPostageTelephone.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPostageTelephone)
                            || (((Decimal)(this[this.myTable.ColumnPostageTelephone])) != value)))
                {
                    this[this.myTable.ColumnPostageTelephone] = value;
                }
            }
        }

        /// Study and/or training costs
        public Decimal StudyTraining
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStudyTraining.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStudyTraining)
                            || (((Decimal)(this[this.myTable.ColumnStudyTraining])) != value)))
                {
                    this[this.myTable.ColumnStudyTraining] = value;
                }
            }
        }

        /// Ministry costs.
        public Decimal MinistryCosts
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMinistryCosts.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMinistryCosts)
                            || (((Decimal)(this[this.myTable.ColumnMinistryCosts])) != value)))
                {
                    this[this.myTable.ColumnMinistryCosts] = value;
                }
            }
        }

        /// Personal costs.
        public Decimal Personal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonal)
                            || (((Decimal)(this[this.myTable.ColumnPersonal])) != value)))
                {
                    this[this.myTable.ColumnPersonal] = value;
                }
            }
        }

        /// Other  miscellaneous costs.
        public Decimal Other
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOther.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOther)
                            || (((Decimal)(this[this.myTable.ColumnOther])) != value)))
                {
                    this[this.myTable.ColumnOther] = value;
                }
            }
        }

        /// Label for Extra Cost 1
        public String ExtraCost1Label
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtraCost1Label.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtraCost1Label)
                            || (((String)(this[this.myTable.ColumnExtraCost1Label])) != value)))
                {
                    this[this.myTable.ColumnExtraCost1Label] = value;
                }
            }
        }

        /// Extra Cost 1
        public Decimal ExtraCost1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtraCost1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtraCost1)
                            || (((Decimal)(this[this.myTable.ColumnExtraCost1])) != value)))
                {
                    this[this.myTable.ColumnExtraCost1] = value;
                }
            }
        }

        /// Label for Extra Cost 2
        public String ExtraCost2Label
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtraCost2Label.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtraCost2Label)
                            || (((String)(this[this.myTable.ColumnExtraCost2Label])) != value)))
                {
                    this[this.myTable.ColumnExtraCost2Label] = value;
                }
            }
        }

        /// Extra Cost 2
        public Decimal ExtraCost2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtraCost2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtraCost2)
                            || (((Decimal)(this[this.myTable.ColumnExtraCost2])) != value)))
                {
                    this[this.myTable.ColumnExtraCost2] = value;
                }
            }
        }

        /// Label for Extra Cost 3
        public String ExtraCost3Label
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtraCost3Label.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtraCost3Label)
                            || (((String)(this[this.myTable.ColumnExtraCost3Label])) != value)))
                {
                    this[this.myTable.ColumnExtraCost3Label] = value;
                }
            }
        }

        /// Extra Cost 3
        public Decimal ExtraCost3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExtraCost3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExtraCost3)
                            || (((Decimal)(this[this.myTable.ColumnExtraCost3])) != value)))
                {
                    this[this.myTable.ColumnExtraCost3] = value;
                }
            }
        }

        /// The actual support figure coming in.
        public Decimal ActualSupportFigure
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualSupportFigure.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualSupportFigure)
                            || (((Decimal)(this[this.myTable.ColumnActualSupportFigure])) != value)))
                {
                    this[this.myTable.ColumnActualSupportFigure] = value;
                }
            }
        }

        /// The agreed support figure.
        public Decimal AgreedSupportFigure
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAgreedSupportFigure.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAgreedSupportFigure)
                            || (((Decimal)(this[this.myTable.ColumnAgreedSupportFigure])) != value)))
                {
                    this[this.myTable.ColumnAgreedSupportFigure] = value;
                }
            }
        }

        /// The date the support figure was agreed upon.
        public System.DateTime? AgreementDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAgreementDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAgreementDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnAgreementDate])) != value)))
                {
                    this[this.myTable.ColumnAgreementDate] = value;
                }
            }
        }

        /// The date the support figure agreement is reviewed.
        public System.DateTime? ReviewDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReviewDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReviewDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnReviewDate])) != value)))
                {
                    this[this.myTable.ColumnReviewDate] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnRecordNumber.Ordinal] = 0;
            this[this.myTable.ColumnAllowance.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPeriod);
            this.SetNull(this.myTable.ColumnCurrencyCode);
            this[this.myTable.ColumnAdminGrant.Ordinal] = 0;
            this[this.myTable.ColumnHousing.Ordinal] = 0;
            this[this.myTable.ColumnVehicle.Ordinal] = 0;
            this[this.myTable.ColumnFood.Ordinal] = 0;
            this[this.myTable.ColumnTravelConferences.Ordinal] = 0;
            this[this.myTable.ColumnInsurance.Ordinal] = 0;
            this[this.myTable.ColumnPension.Ordinal] = 0;
            this[this.myTable.ColumnChildrensEducation.Ordinal] = 0;
            this[this.myTable.ColumnHomeAssignmentHoliday.Ordinal] = 0;
            this[this.myTable.ColumnMedicalDentalCare.Ordinal] = 0;
            this[this.myTable.ColumnPostageTelephone.Ordinal] = 0;
            this[this.myTable.ColumnStudyTraining.Ordinal] = 0;
            this[this.myTable.ColumnMinistryCosts.Ordinal] = 0;
            this[this.myTable.ColumnPersonal.Ordinal] = 0;
            this[this.myTable.ColumnOther.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnExtraCost1Label);
            this[this.myTable.ColumnExtraCost1.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnExtraCost2Label);
            this[this.myTable.ColumnExtraCost2.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnExtraCost3Label);
            this[this.myTable.ColumnExtraCost3.Ordinal] = 0;
            this[this.myTable.ColumnActualSupportFigure.Ordinal] = 0;
            this[this.myTable.ColumnAgreedSupportFigure.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAgreementDate);
            this.SetNull(this.myTable.ColumnReviewDate);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsRecordNumberNull()
        {
            return this.IsNull(this.myTable.ColumnRecordNumber);
        }

        /// assign NULL value
        public void SetRecordNumberNull()
        {
            this.SetNull(this.myTable.ColumnRecordNumber);
        }

        /// test for NULL value
        public bool IsAllowanceNull()
        {
            return this.IsNull(this.myTable.ColumnAllowance);
        }

        /// assign NULL value
        public void SetAllowanceNull()
        {
            this.SetNull(this.myTable.ColumnAllowance);
        }

        /// test for NULL value
        public bool IsPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnPeriod);
        }

        /// assign NULL value
        public void SetPeriodNull()
        {
            this.SetNull(this.myTable.ColumnPeriod);
        }

        /// test for NULL value
        public bool IsCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCurrencyCode);
        }

        /// assign NULL value
        public void SetCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnCurrencyCode);
        }

        /// test for NULL value
        public bool IsAdminGrantNull()
        {
            return this.IsNull(this.myTable.ColumnAdminGrant);
        }

        /// assign NULL value
        public void SetAdminGrantNull()
        {
            this.SetNull(this.myTable.ColumnAdminGrant);
        }

        /// test for NULL value
        public bool IsHousingNull()
        {
            return this.IsNull(this.myTable.ColumnHousing);
        }

        /// assign NULL value
        public void SetHousingNull()
        {
            this.SetNull(this.myTable.ColumnHousing);
        }

        /// test for NULL value
        public bool IsVehicleNull()
        {
            return this.IsNull(this.myTable.ColumnVehicle);
        }

        /// assign NULL value
        public void SetVehicleNull()
        {
            this.SetNull(this.myTable.ColumnVehicle);
        }

        /// test for NULL value
        public bool IsFoodNull()
        {
            return this.IsNull(this.myTable.ColumnFood);
        }

        /// assign NULL value
        public void SetFoodNull()
        {
            this.SetNull(this.myTable.ColumnFood);
        }

        /// test for NULL value
        public bool IsTravelConferencesNull()
        {
            return this.IsNull(this.myTable.ColumnTravelConferences);
        }

        /// assign NULL value
        public void SetTravelConferencesNull()
        {
            this.SetNull(this.myTable.ColumnTravelConferences);
        }

        /// test for NULL value
        public bool IsInsuranceNull()
        {
            return this.IsNull(this.myTable.ColumnInsurance);
        }

        /// assign NULL value
        public void SetInsuranceNull()
        {
            this.SetNull(this.myTable.ColumnInsurance);
        }

        /// test for NULL value
        public bool IsPensionNull()
        {
            return this.IsNull(this.myTable.ColumnPension);
        }

        /// assign NULL value
        public void SetPensionNull()
        {
            this.SetNull(this.myTable.ColumnPension);
        }

        /// test for NULL value
        public bool IsChildrensEducationNull()
        {
            return this.IsNull(this.myTable.ColumnChildrensEducation);
        }

        /// assign NULL value
        public void SetChildrensEducationNull()
        {
            this.SetNull(this.myTable.ColumnChildrensEducation);
        }

        /// test for NULL value
        public bool IsHomeAssignmentHolidayNull()
        {
            return this.IsNull(this.myTable.ColumnHomeAssignmentHoliday);
        }

        /// assign NULL value
        public void SetHomeAssignmentHolidayNull()
        {
            this.SetNull(this.myTable.ColumnHomeAssignmentHoliday);
        }

        /// test for NULL value
        public bool IsMedicalDentalCareNull()
        {
            return this.IsNull(this.myTable.ColumnMedicalDentalCare);
        }

        /// assign NULL value
        public void SetMedicalDentalCareNull()
        {
            this.SetNull(this.myTable.ColumnMedicalDentalCare);
        }

        /// test for NULL value
        public bool IsPostageTelephoneNull()
        {
            return this.IsNull(this.myTable.ColumnPostageTelephone);
        }

        /// assign NULL value
        public void SetPostageTelephoneNull()
        {
            this.SetNull(this.myTable.ColumnPostageTelephone);
        }

        /// test for NULL value
        public bool IsStudyTrainingNull()
        {
            return this.IsNull(this.myTable.ColumnStudyTraining);
        }

        /// assign NULL value
        public void SetStudyTrainingNull()
        {
            this.SetNull(this.myTable.ColumnStudyTraining);
        }

        /// test for NULL value
        public bool IsMinistryCostsNull()
        {
            return this.IsNull(this.myTable.ColumnMinistryCosts);
        }

        /// assign NULL value
        public void SetMinistryCostsNull()
        {
            this.SetNull(this.myTable.ColumnMinistryCosts);
        }

        /// test for NULL value
        public bool IsPersonalNull()
        {
            return this.IsNull(this.myTable.ColumnPersonal);
        }

        /// assign NULL value
        public void SetPersonalNull()
        {
            this.SetNull(this.myTable.ColumnPersonal);
        }

        /// test for NULL value
        public bool IsOtherNull()
        {
            return this.IsNull(this.myTable.ColumnOther);
        }

        /// assign NULL value
        public void SetOtherNull()
        {
            this.SetNull(this.myTable.ColumnOther);
        }

        /// test for NULL value
        public bool IsExtraCost1LabelNull()
        {
            return this.IsNull(this.myTable.ColumnExtraCost1Label);
        }

        /// assign NULL value
        public void SetExtraCost1LabelNull()
        {
            this.SetNull(this.myTable.ColumnExtraCost1Label);
        }

        /// test for NULL value
        public bool IsExtraCost1Null()
        {
            return this.IsNull(this.myTable.ColumnExtraCost1);
        }

        /// assign NULL value
        public void SetExtraCost1Null()
        {
            this.SetNull(this.myTable.ColumnExtraCost1);
        }

        /// test for NULL value
        public bool IsExtraCost2LabelNull()
        {
            return this.IsNull(this.myTable.ColumnExtraCost2Label);
        }

        /// assign NULL value
        public void SetExtraCost2LabelNull()
        {
            this.SetNull(this.myTable.ColumnExtraCost2Label);
        }

        /// test for NULL value
        public bool IsExtraCost2Null()
        {
            return this.IsNull(this.myTable.ColumnExtraCost2);
        }

        /// assign NULL value
        public void SetExtraCost2Null()
        {
            this.SetNull(this.myTable.ColumnExtraCost2);
        }

        /// test for NULL value
        public bool IsExtraCost3LabelNull()
        {
            return this.IsNull(this.myTable.ColumnExtraCost3Label);
        }

        /// assign NULL value
        public void SetExtraCost3LabelNull()
        {
            this.SetNull(this.myTable.ColumnExtraCost3Label);
        }

        /// test for NULL value
        public bool IsExtraCost3Null()
        {
            return this.IsNull(this.myTable.ColumnExtraCost3);
        }

        /// assign NULL value
        public void SetExtraCost3Null()
        {
            this.SetNull(this.myTable.ColumnExtraCost3);
        }

        /// test for NULL value
        public bool IsActualSupportFigureNull()
        {
            return this.IsNull(this.myTable.ColumnActualSupportFigure);
        }

        /// assign NULL value
        public void SetActualSupportFigureNull()
        {
            this.SetNull(this.myTable.ColumnActualSupportFigure);
        }

        /// test for NULL value
        public bool IsAgreedSupportFigureNull()
        {
            return this.IsNull(this.myTable.ColumnAgreedSupportFigure);
        }

        /// assign NULL value
        public void SetAgreedSupportFigureNull()
        {
            this.SetNull(this.myTable.ColumnAgreedSupportFigure);
        }

        /// test for NULL value
        public bool IsAgreementDateNull()
        {
            return this.IsNull(this.myTable.ColumnAgreementDate);
        }

        /// assign NULL value
        public void SetAgreementDateNull()
        {
            this.SetNull(this.myTable.ColumnAgreementDate);
        }

        /// test for NULL value
        public bool IsReviewDateNull()
        {
            return this.IsNull(this.myTable.ColumnReviewDate);
        }

        /// assign NULL value
        public void SetReviewDateNull()
        {
            this.SetNull(this.myTable.ColumnReviewDate);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This is the degree to which a language is spoken, e.g. a little, phrases, fluent.
    [Serializable()]
    public class PtLanguageLevelTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 215;
        /// used for generic TTypedDataTable functions
        public static short ColumnLanguageLevelId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnLanguageLevelDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnLanguageCommentId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtLanguageLevel", "pt_language_level",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LanguageLevel", "pt_language_level_i", "Language Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "LanguageLevelDescr", "pt_language_level_descr_c", "Description", OdbcType.VarChar, 70, true),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Unassignable Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "LanguageComment", "pt_language_comment_c", "Comment", OdbcType.VarChar, 800, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtLanguageLevelTable() :
                base("PtLanguageLevel")
        {
        }

        /// constructor
        public PtLanguageLevelTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtLanguageLevelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This field is a numeric representation of level of language.
        public DataColumn ColumnLanguageLevel;
        /// Describes the level of fluency in a language.
        public DataColumn ColumnLanguageLevelDescr;
        /// Can this contact still be listed?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date from which this contact can no longer be assigned.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// Exhaustive explanation of the Language Level.
        public DataColumn ColumnLanguageComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_language_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pt_language_level_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_language_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLanguageLevel = this.Columns["pt_language_level_i"];
            this.ColumnLanguageLevelDescr = this.Columns["pt_language_level_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnLanguageComment = this.Columns["pt_language_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnLanguageLevel};
        }

        /// Access a typed row by index
        public PtLanguageLevelRow this[int i]
        {
            get
            {
                return ((PtLanguageLevelRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtLanguageLevelRow NewRowTyped(bool AWithDefaultValues)
        {
            PtLanguageLevelRow ret = ((PtLanguageLevelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtLanguageLevelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtLanguageLevelRow(builder);
        }

        /// get typed set of changes
        public PtLanguageLevelTable GetChangesTyped()
        {
            return ((PtLanguageLevelTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtLanguageLevel";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_language_level";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLanguageLevelDBName()
        {
            return "pt_language_level_i";
        }

        /// get character length for column
        public static short GetLanguageLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLanguageLevelDescrDBName()
        {
            return "pt_language_level_descr_c";
        }

        /// get character length for column
        public static short GetLanguageLevelDescrLength()
        {
            return 70;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLanguageCommentDBName()
        {
            return "pt_language_comment_c";
        }

        /// get character length for column
        public static short GetLanguageCommentLength()
        {
            return 800;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This is the degree to which a language is spoken, e.g. a little, phrases, fluent.
    [Serializable()]
    public class PtLanguageLevelRow : System.Data.DataRow
    {
        private PtLanguageLevelTable myTable;

        /// Constructor
        public PtLanguageLevelRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtLanguageLevelTable)(this.Table));
        }

        /// This field is a numeric representation of level of language.
        public Int32 LanguageLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageLevel)
                            || (((Int32)(this[this.myTable.ColumnLanguageLevel])) != value)))
                {
                    this[this.myTable.ColumnLanguageLevel] = value;
                }
            }
        }

        /// Describes the level of fluency in a language.
        public String LanguageLevelDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageLevelDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageLevelDescr)
                            || (((String)(this[this.myTable.ColumnLanguageLevelDescr])) != value)))
                {
                    this[this.myTable.ColumnLanguageLevelDescr] = value;
                }
            }
        }

        /// Can this contact still be listed?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date from which this contact can no longer be assigned.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// Exhaustive explanation of the Language Level.
        public String LanguageComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageComment)
                            || (((String)(this[this.myTable.ColumnLanguageComment])) != value)))
                {
                    this[this.myTable.ColumnLanguageComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLanguageLevel.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnLanguageLevelDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this.SetNull(this.myTable.ColumnLanguageComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLanguageLevelNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageLevel);
        }

        /// assign NULL value
        public void SetLanguageLevelNull()
        {
            this.SetNull(this.myTable.ColumnLanguageLevel);
        }

        /// test for NULL value
        public bool IsLanguageLevelDescrNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageLevelDescr);
        }

        /// assign NULL value
        public void SetLanguageLevelDescrNull()
        {
            this.SetNull(this.myTable.ColumnLanguageLevelDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsLanguageCommentNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageComment);
        }

        /// assign NULL value
        public void SetLanguageCommentNull()
        {
            this.SetNull(this.myTable.ColumnLanguageComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains detail about the
    /// language the person speaks.
    [Serializable()]
    public class PmPersonLanguageTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 216;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnLanguageCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearsOfExperienceId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearsOfExperienceAsOfId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnLanguageLevelId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnWillingToTranslateId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnTranslateIntoId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnTranslateOutOfId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 13;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersonLanguage", "pm_person_language",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "LanguageCode", "p_language_code_c", "Language Area", OdbcType.VarChar, 20, true),
                    new TTypedColumnInfo(2, "YearsOfExperience", "pm_years_of_experience_i", "Years of Experience", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "YearsOfExperienceAsOf", "pm_years_of_experience_as_of_d", "Years of Experience as of", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "LanguageLevel", "pt_language_level_i", "Language Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(5, "WillingToTranslate", "pm_willing_to_translate_l", "Willing to Translate?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "TranslateInto", "pm_translate_into_l", "Translate Into?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(7, "TranslateOutOf", "pm_translate_out_of_l", "Translate Out Of?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(8, "Comment", "pm_comment_c", "Comment", OdbcType.VarChar, 512, false),
                    new TTypedColumnInfo(9, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public PmPersonLanguageTable() :
                base("PmPersonLanguage")
        {
        }

        /// constructor
        public PmPersonLanguageTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersonLanguageTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Name of the language(s) spoken.
        public DataColumn ColumnLanguageCode;
        /// Years of experience this person has spoken this language.
        public DataColumn ColumnYearsOfExperience;
        /// The date the years of experience were up to date.
        public DataColumn ColumnYearsOfExperienceAsOf;
        /// This field is a numeric representation of level of language.
        public DataColumn ColumnLanguageLevel;
        /// Indicates if the person is willing to translate into or out of this language.
        public DataColumn ColumnWillingToTranslate;
        /// Indicate if the person is willing to translate into this language.
        public DataColumn ColumnTranslateInto;
        /// Indicate if the person is willing to translate out of this language.
        public DataColumn ColumnTranslateOutOf;
        ///
        public DataColumn ColumnComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_years_of_experience_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_years_of_experience_as_of_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_language_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_willing_to_translate_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_translate_into_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_translate_out_of_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnLanguageCode = this.Columns["p_language_code_c"];
            this.ColumnYearsOfExperience = this.Columns["pm_years_of_experience_i"];
            this.ColumnYearsOfExperienceAsOf = this.Columns["pm_years_of_experience_as_of_d"];
            this.ColumnLanguageLevel = this.Columns["pt_language_level_i"];
            this.ColumnWillingToTranslate = this.Columns["pm_willing_to_translate_l"];
            this.ColumnTranslateInto = this.Columns["pm_translate_into_l"];
            this.ColumnTranslateOutOf = this.Columns["pm_translate_out_of_l"];
            this.ColumnComment = this.Columns["pm_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnPartnerKey,ColumnLanguageCode};
        }

        /// Access a typed row by index
        public PmPersonLanguageRow this[int i]
        {
            get
            {
                return ((PmPersonLanguageRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersonLanguageRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonLanguageRow ret = ((PmPersonLanguageRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersonLanguageRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonLanguageRow(builder);
        }

        /// get typed set of changes
        public PmPersonLanguageTable GetChangesTyped()
        {
            return ((PmPersonLanguageTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersonLanguage";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_person_language";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "p_language_code_c";
        }

        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetYearsOfExperienceDBName()
        {
            return "pm_years_of_experience_i";
        }

        /// get character length for column
        public static short GetYearsOfExperienceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearsOfExperienceAsOfDBName()
        {
            return "pm_years_of_experience_as_of_d";
        }

        /// get character length for column
        public static short GetYearsOfExperienceAsOfLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLanguageLevelDBName()
        {
            return "pt_language_level_i";
        }

        /// get character length for column
        public static short GetLanguageLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetWillingToTranslateDBName()
        {
            return "pm_willing_to_translate_l";
        }

        /// get character length for column
        public static short GetWillingToTranslateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTranslateIntoDBName()
        {
            return "pm_translate_into_l";
        }

        /// get character length for column
        public static short GetTranslateIntoLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTranslateOutOfDBName()
        {
            return "pm_translate_out_of_l";
        }

        /// get character length for column
        public static short GetTranslateOutOfLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "pm_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 512;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains detail about the
    /// language the person speaks.
    [Serializable()]
    public class PmPersonLanguageRow : System.Data.DataRow
    {
        private PmPersonLanguageTable myTable;

        /// Constructor
        public PmPersonLanguageRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersonLanguageTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Name of the language(s) spoken.
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode)
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }

        /// Years of experience this person has spoken this language.
        public Int32 YearsOfExperience
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearsOfExperience.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearsOfExperience)
                            || (((Int32)(this[this.myTable.ColumnYearsOfExperience])) != value)))
                {
                    this[this.myTable.ColumnYearsOfExperience] = value;
                }
            }
        }

        /// The date the years of experience were up to date.
        public System.DateTime? YearsOfExperienceAsOf
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearsOfExperienceAsOf.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearsOfExperienceAsOf)
                            || (((System.DateTime?)(this[this.myTable.ColumnYearsOfExperienceAsOf])) != value)))
                {
                    this[this.myTable.ColumnYearsOfExperienceAsOf] = value;
                }
            }
        }

        /// This field is a numeric representation of level of language.
        public Int32 LanguageLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageLevel)
                            || (((Int32)(this[this.myTable.ColumnLanguageLevel])) != value)))
                {
                    this[this.myTable.ColumnLanguageLevel] = value;
                }
            }
        }

        /// Indicates if the person is willing to translate into or out of this language.
        public Boolean WillingToTranslate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWillingToTranslate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWillingToTranslate)
                            || (((Boolean)(this[this.myTable.ColumnWillingToTranslate])) != value)))
                {
                    this[this.myTable.ColumnWillingToTranslate] = value;
                }
            }
        }

        /// Indicate if the person is willing to translate into this language.
        public Boolean TranslateInto
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTranslateInto.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTranslateInto)
                            || (((Boolean)(this[this.myTable.ColumnTranslateInto])) != value)))
                {
                    this[this.myTable.ColumnTranslateInto] = value;
                }
            }
        }

        /// Indicate if the person is willing to translate out of this language.
        public Boolean TranslateOutOf
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTranslateOutOf.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTranslateOutOf)
                            || (((Boolean)(this[this.myTable.ColumnTranslateOutOf])) != value)))
                {
                    this[this.myTable.ColumnTranslateOutOf] = value;
                }
            }
        }

        ///
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnLanguageCode);
            this[this.myTable.ColumnYearsOfExperience.Ordinal] = 99;
            this.SetNull(this.myTable.ColumnYearsOfExperienceAsOf);
            this[this.myTable.ColumnLanguageLevel.Ordinal] = 0;
            this[this.myTable.ColumnWillingToTranslate.Ordinal] = false;
            this[this.myTable.ColumnTranslateInto.Ordinal] = false;
            this[this.myTable.ColumnTranslateOutOf.Ordinal] = false;
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsLanguageCodeNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageCode);
        }

        /// assign NULL value
        public void SetLanguageCodeNull()
        {
            this.SetNull(this.myTable.ColumnLanguageCode);
        }

        /// test for NULL value
        public bool IsYearsOfExperienceNull()
        {
            return this.IsNull(this.myTable.ColumnYearsOfExperience);
        }

        /// assign NULL value
        public void SetYearsOfExperienceNull()
        {
            this.SetNull(this.myTable.ColumnYearsOfExperience);
        }

        /// test for NULL value
        public bool IsYearsOfExperienceAsOfNull()
        {
            return this.IsNull(this.myTable.ColumnYearsOfExperienceAsOf);
        }

        /// assign NULL value
        public void SetYearsOfExperienceAsOfNull()
        {
            this.SetNull(this.myTable.ColumnYearsOfExperienceAsOf);
        }

        /// test for NULL value
        public bool IsLanguageLevelNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageLevel);
        }

        /// assign NULL value
        public void SetLanguageLevelNull()
        {
            this.SetNull(this.myTable.ColumnLanguageLevel);
        }

        /// test for NULL value
        public bool IsWillingToTranslateNull()
        {
            return this.IsNull(this.myTable.ColumnWillingToTranslate);
        }

        /// assign NULL value
        public void SetWillingToTranslateNull()
        {
            this.SetNull(this.myTable.ColumnWillingToTranslate);
        }

        /// test for NULL value
        public bool IsTranslateIntoNull()
        {
            return this.IsNull(this.myTable.ColumnTranslateInto);
        }

        /// assign NULL value
        public void SetTranslateIntoNull()
        {
            this.SetNull(this.myTable.ColumnTranslateInto);
        }

        /// test for NULL value
        public bool IsTranslateOutOfNull()
        {
            return this.IsNull(this.myTable.ColumnTranslateOutOf);
        }

        /// assign NULL value
        public void SetTranslateOutOfNull()
        {
            this.SetNull(this.myTable.ColumnTranslateOutOf);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Lists of item(s) of value a person may possess which need to be accounted for various purposes, e.g. customs, or insurance.
    [Serializable()]
    public class PtValuableItemTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 217;
        /// used for generic TTypedDataTable functions
        public static short ColumnValuableItemNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnValuableItemDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtValuableItem", "pt_valuable_item",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "ValuableItemName", "pt_valuable_item_name_c", "Valuable Item", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(1, "ValuableItemDescr", "pt_valuable_item_descr_c", "Description", OdbcType.VarChar, 80, true),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Unassignable Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtValuableItemTable() :
                base("PtValuableItem")
        {
        }

        /// constructor
        public PtValuableItemTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtValuableItemTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Name of the valuable item.
        public DataColumn ColumnValuableItemName;
        /// Describes the valuable item.
        public DataColumn ColumnValuableItemDescr;
        /// Can this valuable item be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_valuable_item_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_valuable_item_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnValuableItemName = this.Columns["pt_valuable_item_name_c"];
            this.ColumnValuableItemDescr = this.Columns["pt_valuable_item_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnValuableItemName};
        }

        /// Access a typed row by index
        public PtValuableItemRow this[int i]
        {
            get
            {
                return ((PtValuableItemRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtValuableItemRow NewRowTyped(bool AWithDefaultValues)
        {
            PtValuableItemRow ret = ((PtValuableItemRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtValuableItemRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtValuableItemRow(builder);
        }

        /// get typed set of changes
        public PtValuableItemTable GetChangesTyped()
        {
            return ((PtValuableItemTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtValuableItem";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_valuable_item";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetValuableItemNameDBName()
        {
            return "pt_valuable_item_name_c";
        }

        /// get character length for column
        public static short GetValuableItemNameLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetValuableItemDescrDBName()
        {
            return "pt_valuable_item_descr_c";
        }

        /// get character length for column
        public static short GetValuableItemDescrLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Lists of item(s) of value a person may possess which need to be accounted for various purposes, e.g. customs, or insurance.
    [Serializable()]
    public class PtValuableItemRow : System.Data.DataRow
    {
        private PtValuableItemTable myTable;

        /// Constructor
        public PtValuableItemRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtValuableItemTable)(this.Table));
        }

        /// Name of the valuable item.
        public String ValuableItemName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValuableItemName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValuableItemName)
                            || (((String)(this[this.myTable.ColumnValuableItemName])) != value)))
                {
                    this[this.myTable.ColumnValuableItemName] = value;
                }
            }
        }

        /// Describes the valuable item.
        public String ValuableItemDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValuableItemDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValuableItemDescr)
                            || (((String)(this[this.myTable.ColumnValuableItemDescr])) != value)))
                {
                    this[this.myTable.ColumnValuableItemDescr] = value;
                }
            }
        }

        /// Can this valuable item be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnValuableItemName);
            this.SetNull(this.myTable.ColumnValuableItemDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsValuableItemNameNull()
        {
            return this.IsNull(this.myTable.ColumnValuableItemName);
        }

        /// assign NULL value
        public void SetValuableItemNameNull()
        {
            this.SetNull(this.myTable.ColumnValuableItemName);
        }

        /// test for NULL value
        public bool IsValuableItemDescrNull()
        {
            return this.IsNull(this.myTable.ColumnValuableItemDescr);
        }

        /// assign NULL value
        public void SetValuableItemDescrNull()
        {
            this.SetNull(this.myTable.ColumnValuableItemDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table describes various things owned by a person whether items of
    /// value or physical characteristics.
    [Serializable()]
    public class PmOwnershipTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 218;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnValuableItemNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnAmountId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCurrencyCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnIdentifierId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnMarksOfIdentificationId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnMakeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModelId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 12;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmOwnership", "pm_ownership",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "ValuableItemName", "pt_valuable_item_name_c", "Valuable Item", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(2, "Amount", "pm_amount_n", "Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(3, "CurrencyCode", "a_currency_code_c", "Currency Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(4, "Identifier", "pm_identifier_c", "Identifier", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(5, "MarksOfIdentification", "pm_marks_of_identification_c", "Identifying Marks", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(6, "Make", "pm_make_c", "Make", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(7, "Model", "pm_model_c", "Model", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(8, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public PmOwnershipTable() :
                base("PmOwnership")
        {
        }

        /// constructor
        public PmOwnershipTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmOwnershipTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Name of the valuable item.
        public DataColumn ColumnValuableItemName;
        /// This field represents the approximate value of a valuable item.
        public DataColumn ColumnAmount;
        /// This defines which currency is being used
        public DataColumn ColumnCurrencyCode;
        /// This is the serial number of the item.
        public DataColumn ColumnIdentifier;
        /// This field lists various physical marks that may help to
        /// identify the item.
        public DataColumn ColumnMarksOfIdentification;
        /// This is the make of the item.
        public DataColumn ColumnMake;
        /// This is the model of the item.
        public DataColumn ColumnModel;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pt_valuable_item_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_identifier_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_marks_of_identification_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_make_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_model_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnValuableItemName = this.Columns["pt_valuable_item_name_c"];
            this.ColumnAmount = this.Columns["pm_amount_n"];
            this.ColumnCurrencyCode = this.Columns["a_currency_code_c"];
            this.ColumnIdentifier = this.Columns["pm_identifier_c"];
            this.ColumnMarksOfIdentification = this.Columns["pm_marks_of_identification_c"];
            this.ColumnMake = this.Columns["pm_make_c"];
            this.ColumnModel = this.Columns["pm_model_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnPartnerKey,ColumnValuableItemName};
        }

        /// Access a typed row by index
        public PmOwnershipRow this[int i]
        {
            get
            {
                return ((PmOwnershipRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmOwnershipRow NewRowTyped(bool AWithDefaultValues)
        {
            PmOwnershipRow ret = ((PmOwnershipRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmOwnershipRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmOwnershipRow(builder);
        }

        /// get typed set of changes
        public PmOwnershipTable GetChangesTyped()
        {
            return ((PmOwnershipTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmOwnership";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_ownership";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetValuableItemNameDBName()
        {
            return "pt_valuable_item_name_c";
        }

        /// get character length for column
        public static short GetValuableItemNameLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetAmountDBName()
        {
            return "pm_amount_n";
        }

        /// get character length for column
        public static short GetAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetCurrencyCodeDBName()
        {
            return "a_currency_code_c";
        }

        /// get character length for column
        public static short GetCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetIdentifierDBName()
        {
            return "pm_identifier_c";
        }

        /// get character length for column
        public static short GetIdentifierLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetMarksOfIdentificationDBName()
        {
            return "pm_marks_of_identification_c";
        }

        /// get character length for column
        public static short GetMarksOfIdentificationLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetMakeDBName()
        {
            return "pm_make_c";
        }

        /// get character length for column
        public static short GetMakeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetModelDBName()
        {
            return "pm_model_c";
        }

        /// get character length for column
        public static short GetModelLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table describes various things owned by a person whether items of
    /// value or physical characteristics.
    [Serializable()]
    public class PmOwnershipRow : System.Data.DataRow
    {
        private PmOwnershipTable myTable;

        /// Constructor
        public PmOwnershipRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmOwnershipTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Name of the valuable item.
        public String ValuableItemName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValuableItemName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValuableItemName)
                            || (((String)(this[this.myTable.ColumnValuableItemName])) != value)))
                {
                    this[this.myTable.ColumnValuableItemName] = value;
                }
            }
        }

        /// This field represents the approximate value of a valuable item.
        public Decimal Amount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmount)
                            || (((Decimal)(this[this.myTable.ColumnAmount])) != value)))
                {
                    this[this.myTable.ColumnAmount] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String CurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrencyCode)
                            || (((String)(this[this.myTable.ColumnCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnCurrencyCode] = value;
                }
            }
        }

        /// This is the serial number of the item.
        public String Identifier
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIdentifier.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIdentifier)
                            || (((String)(this[this.myTable.ColumnIdentifier])) != value)))
                {
                    this[this.myTable.ColumnIdentifier] = value;
                }
            }
        }

        /// This field lists various physical marks that may help to
        /// identify the item.
        public String MarksOfIdentification
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMarksOfIdentification.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMarksOfIdentification)
                            || (((String)(this[this.myTable.ColumnMarksOfIdentification])) != value)))
                {
                    this[this.myTable.ColumnMarksOfIdentification] = value;
                }
            }
        }

        /// This is the make of the item.
        public String Make
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMake.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMake)
                            || (((String)(this[this.myTable.ColumnMake])) != value)))
                {
                    this[this.myTable.ColumnMake] = value;
                }
            }
        }

        /// This is the model of the item.
        public String Model
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModel)
                            || (((String)(this[this.myTable.ColumnModel])) != value)))
                {
                    this[this.myTable.ColumnModel] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnValuableItemName);
            this[this.myTable.ColumnAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCurrencyCode);
            this.SetNull(this.myTable.ColumnIdentifier);
            this.SetNull(this.myTable.ColumnMarksOfIdentification);
            this.SetNull(this.myTable.ColumnMake);
            this.SetNull(this.myTable.ColumnModel);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsValuableItemNameNull()
        {
            return this.IsNull(this.myTable.ColumnValuableItemName);
        }

        /// assign NULL value
        public void SetValuableItemNameNull()
        {
            this.SetNull(this.myTable.ColumnValuableItemName);
        }

        /// test for NULL value
        public bool IsAmountNull()
        {
            return this.IsNull(this.myTable.ColumnAmount);
        }

        /// assign NULL value
        public void SetAmountNull()
        {
            this.SetNull(this.myTable.ColumnAmount);
        }

        /// test for NULL value
        public bool IsCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCurrencyCode);
        }

        /// assign NULL value
        public void SetCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnCurrencyCode);
        }

        /// test for NULL value
        public bool IsIdentifierNull()
        {
            return this.IsNull(this.myTable.ColumnIdentifier);
        }

        /// assign NULL value
        public void SetIdentifierNull()
        {
            this.SetNull(this.myTable.ColumnIdentifier);
        }

        /// test for NULL value
        public bool IsMarksOfIdentificationNull()
        {
            return this.IsNull(this.myTable.ColumnMarksOfIdentification);
        }

        /// assign NULL value
        public void SetMarksOfIdentificationNull()
        {
            this.SetNull(this.myTable.ColumnMarksOfIdentification);
        }

        /// test for NULL value
        public bool IsMakeNull()
        {
            return this.IsNull(this.myTable.ColumnMake);
        }

        /// assign NULL value
        public void SetMakeNull()
        {
            this.SetNull(this.myTable.ColumnMake);
        }

        /// test for NULL value
        public bool IsModelNull()
        {
            return this.IsNull(this.myTable.ColumnModel);
        }

        /// assign NULL value
        public void SetModelNull()
        {
            this.SetNull(this.myTable.ColumnModel);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This details any previous ministry experience the individual has.
    [Serializable()]
    public class PmPastExperienceTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 219;
        /// used for generic TTypedDataTable functions
        public static short ColumnSiteKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnStartDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnEndDateId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrevLocationId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrevRoleId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCategoryId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnOtherOrganisationId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnPastExpCommentsId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrevWorkHereId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrevWorkId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 16;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPastExperience", "pm_past_experience",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "SiteKey", "p_site_key_n", "Site Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "Key", "pm_key_n", "pm_key_n", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "StartDate", "pm_start_date_d", "Start Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "EndDate", "pm_end_date_d", "End Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "PrevLocation", "pm_prev_location_c", "Location", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(6, "PrevRole", "pm_prev_role_c", "Previous Role", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(7, "Category", "pm_category_c", "Category", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(8, "OtherOrganisation", "pm_other_organisation_c", "Other Org.", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(9, "PastExpComments", "pm_past_exp_comments_c", "Comments", OdbcType.VarChar, 640, false),
                    new TTypedColumnInfo(10, "PrevWorkHere", "pm_prev_work_here_l", "With us?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(11, "PrevWork", "pm_prev_work_l", "With charities?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(12, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }, new int[] {
                    2, 4, 3, 5
                }));
            return true;
        }

        /// constructor
        public PmPastExperienceTable() :
                base("PmPastExperience")
        {
        }

        /// constructor
        public PmPastExperienceTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPastExperienceTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The connection to the site
        public DataColumn ColumnSiteKey;
        /// Key to make editing these records easier
        public DataColumn ColumnKey;
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Start date of previous experience.
        public DataColumn ColumnStartDate;
        /// End date of previous experience.
        public DataColumn ColumnEndDate;
        /// Location of previous work .
        public DataColumn ColumnPrevLocation;
        /// Describes role played in previous work.
        public DataColumn ColumnPrevRole;
        /// Category/area of previous work
        public DataColumn ColumnCategory;
        /// Worked with which organisation before (if other than our organisation).
        public DataColumn ColumnOtherOrganisation;
        /// Comments on previous experience.
        public DataColumn ColumnPastExpComments;
        /// Indicates if past experience was with this organisation.
        public DataColumn ColumnPrevWorkHere;
        /// Indicates whether the individual has previous worked with similar organisations.
        public DataColumn ColumnPrevWork;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_start_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_end_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_prev_location_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_prev_role_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_category_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_other_organisation_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_past_exp_comments_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_prev_work_here_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_prev_work_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSiteKey = this.Columns["p_site_key_n"];
            this.ColumnKey = this.Columns["pm_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnStartDate = this.Columns["pm_start_date_d"];
            this.ColumnEndDate = this.Columns["pm_end_date_d"];
            this.ColumnPrevLocation = this.Columns["pm_prev_location_c"];
            this.ColumnPrevRole = this.Columns["pm_prev_role_c"];
            this.ColumnCategory = this.Columns["pm_category_c"];
            this.ColumnOtherOrganisation = this.Columns["pm_other_organisation_c"];
            this.ColumnPastExpComments = this.Columns["pm_past_exp_comments_c"];
            this.ColumnPrevWorkHere = this.Columns["pm_prev_work_here_l"];
            this.ColumnPrevWork = this.Columns["pm_prev_work_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnSiteKey,ColumnKey};
        }

        /// Access a typed row by index
        public PmPastExperienceRow this[int i]
        {
            get
            {
                return ((PmPastExperienceRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPastExperienceRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPastExperienceRow ret = ((PmPastExperienceRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPastExperienceRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPastExperienceRow(builder);
        }

        /// get typed set of changes
        public PmPastExperienceTable GetChangesTyped()
        {
            return ((PmPastExperienceTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPastExperience";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_past_experience";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetSiteKeyDBName()
        {
            return "p_site_key_n";
        }

        /// get character length for column
        public static short GetSiteKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetKeyDBName()
        {
            return "pm_key_n";
        }

        /// get character length for column
        public static short GetKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStartDateDBName()
        {
            return "pm_start_date_d";
        }

        /// get character length for column
        public static short GetStartDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetEndDateDBName()
        {
            return "pm_end_date_d";
        }

        /// get character length for column
        public static short GetEndDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPrevLocationDBName()
        {
            return "pm_prev_location_c";
        }

        /// get character length for column
        public static short GetPrevLocationLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetPrevRoleDBName()
        {
            return "pm_prev_role_c";
        }

        /// get character length for column
        public static short GetPrevRoleLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetCategoryDBName()
        {
            return "pm_category_c";
        }

        /// get character length for column
        public static short GetCategoryLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetOtherOrganisationDBName()
        {
            return "pm_other_organisation_c";
        }

        /// get character length for column
        public static short GetOtherOrganisationLength()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPastExpCommentsDBName()
        {
            return "pm_past_exp_comments_c";
        }

        /// get character length for column
        public static short GetPastExpCommentsLength()
        {
            return 640;
        }

        /// get the name of the field in the database for this column
        public static string GetPrevWorkHereDBName()
        {
            return "pm_prev_work_here_l";
        }

        /// get character length for column
        public static short GetPrevWorkHereLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPrevWorkDBName()
        {
            return "pm_prev_work_l";
        }

        /// get character length for column
        public static short GetPrevWorkLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This details any previous ministry experience the individual has.
    [Serializable()]
    public class PmPastExperienceRow : System.Data.DataRow
    {
        private PmPastExperienceTable myTable;

        /// Constructor
        public PmPastExperienceRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPastExperienceTable)(this.Table));
        }

        /// The connection to the site
        public Int64 SiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSiteKey)
                            || (((Int64)(this[this.myTable.ColumnSiteKey])) != value)))
                {
                    this[this.myTable.ColumnSiteKey] = value;
                }
            }
        }

        /// Key to make editing these records easier
        public Int64 Key
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKey)
                            || (((Int64)(this[this.myTable.ColumnKey])) != value)))
                {
                    this[this.myTable.ColumnKey] = value;
                }
            }
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Start date of previous experience.
        public System.DateTime? StartDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnStartDate])) != value)))
                {
                    this[this.myTable.ColumnStartDate] = value;
                }
            }
        }

        /// End date of previous experience.
        public System.DateTime? EndDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEndDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEndDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnEndDate])) != value)))
                {
                    this[this.myTable.ColumnEndDate] = value;
                }
            }
        }

        /// Location of previous work .
        public String PrevLocation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrevLocation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrevLocation)
                            || (((String)(this[this.myTable.ColumnPrevLocation])) != value)))
                {
                    this[this.myTable.ColumnPrevLocation] = value;
                }
            }
        }

        /// Describes role played in previous work.
        public String PrevRole
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrevRole.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrevRole)
                            || (((String)(this[this.myTable.ColumnPrevRole])) != value)))
                {
                    this[this.myTable.ColumnPrevRole] = value;
                }
            }
        }

        /// Category/area of previous work
        public String Category
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCategory.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCategory)
                            || (((String)(this[this.myTable.ColumnCategory])) != value)))
                {
                    this[this.myTable.ColumnCategory] = value;
                }
            }
        }

        /// Worked with which organisation before (if other than our organisation).
        public String OtherOrganisation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOtherOrganisation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOtherOrganisation)
                            || (((String)(this[this.myTable.ColumnOtherOrganisation])) != value)))
                {
                    this[this.myTable.ColumnOtherOrganisation] = value;
                }
            }
        }

        /// Comments on previous experience.
        public String PastExpComments
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPastExpComments.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPastExpComments)
                            || (((String)(this[this.myTable.ColumnPastExpComments])) != value)))
                {
                    this[this.myTable.ColumnPastExpComments] = value;
                }
            }
        }

        /// Indicates if past experience was with this organisation.
        public Boolean PrevWorkHere
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrevWorkHere.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrevWorkHere)
                            || (((Boolean)(this[this.myTable.ColumnPrevWorkHere])) != value)))
                {
                    this[this.myTable.ColumnPrevWorkHere] = value;
                }
            }
        }

        /// Indicates whether the individual has previous worked with similar organisations.
        public Boolean PrevWork
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrevWork.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrevWork)
                            || (((Boolean)(this[this.myTable.ColumnPrevWork])) != value)))
                {
                    this[this.myTable.ColumnPrevWork] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnSiteKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnKey);
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnStartDate);
            this.SetNull(this.myTable.ColumnEndDate);
            this.SetNull(this.myTable.ColumnPrevLocation);
            this.SetNull(this.myTable.ColumnPrevRole);
            this.SetNull(this.myTable.ColumnCategory);
            this.SetNull(this.myTable.ColumnOtherOrganisation);
            this.SetNull(this.myTable.ColumnPastExpComments);
            this[this.myTable.ColumnPrevWorkHere.Ordinal] = false;
            this[this.myTable.ColumnPrevWork.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsSiteKeyNull()
        {
            return this.IsNull(this.myTable.ColumnSiteKey);
        }

        /// assign NULL value
        public void SetSiteKeyNull()
        {
            this.SetNull(this.myTable.ColumnSiteKey);
        }

        /// test for NULL value
        public bool IsKeyNull()
        {
            return this.IsNull(this.myTable.ColumnKey);
        }

        /// assign NULL value
        public void SetKeyNull()
        {
            this.SetNull(this.myTable.ColumnKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsStartDateNull()
        {
            return this.IsNull(this.myTable.ColumnStartDate);
        }

        /// assign NULL value
        public void SetStartDateNull()
        {
            this.SetNull(this.myTable.ColumnStartDate);
        }

        /// test for NULL value
        public bool IsEndDateNull()
        {
            return this.IsNull(this.myTable.ColumnEndDate);
        }

        /// assign NULL value
        public void SetEndDateNull()
        {
            this.SetNull(this.myTable.ColumnEndDate);
        }

        /// test for NULL value
        public bool IsPrevLocationNull()
        {
            return this.IsNull(this.myTable.ColumnPrevLocation);
        }

        /// assign NULL value
        public void SetPrevLocationNull()
        {
            this.SetNull(this.myTable.ColumnPrevLocation);
        }

        /// test for NULL value
        public bool IsPrevRoleNull()
        {
            return this.IsNull(this.myTable.ColumnPrevRole);
        }

        /// assign NULL value
        public void SetPrevRoleNull()
        {
            this.SetNull(this.myTable.ColumnPrevRole);
        }

        /// test for NULL value
        public bool IsCategoryNull()
        {
            return this.IsNull(this.myTable.ColumnCategory);
        }

        /// assign NULL value
        public void SetCategoryNull()
        {
            this.SetNull(this.myTable.ColumnCategory);
        }

        /// test for NULL value
        public bool IsOtherOrganisationNull()
        {
            return this.IsNull(this.myTable.ColumnOtherOrganisation);
        }

        /// assign NULL value
        public void SetOtherOrganisationNull()
        {
            this.SetNull(this.myTable.ColumnOtherOrganisation);
        }

        /// test for NULL value
        public bool IsPastExpCommentsNull()
        {
            return this.IsNull(this.myTable.ColumnPastExpComments);
        }

        /// assign NULL value
        public void SetPastExpCommentsNull()
        {
            this.SetNull(this.myTable.ColumnPastExpComments);
        }

        /// test for NULL value
        public bool IsPrevWorkHereNull()
        {
            return this.IsNull(this.myTable.ColumnPrevWorkHere);
        }

        /// assign NULL value
        public void SetPrevWorkHereNull()
        {
            this.SetNull(this.myTable.ColumnPrevWorkHere);
        }

        /// test for NULL value
        public bool IsPrevWorkNull()
        {
            return this.IsNull(this.myTable.ColumnPrevWork);
        }

        /// assign NULL value
        public void SetPrevWorkNull()
        {
            this.SetNull(this.myTable.ColumnPrevWork);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Defines the areas in which a person may possess an ability, e.g. plays the guitar.
    [Serializable()]
    public class PtAbilityAreaTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 220;
        /// used for generic TTypedDataTable functions
        public static short ColumnAbilityAreaNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAbilityAreaDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRequirementAreaDescrId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtAbilityArea", "pt_ability_area",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "AbilityAreaName", "pt_ability_area_name_c", "Ability Area", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "AbilityAreaDescr", "pt_ability_area_descr_c", "Description", OdbcType.VarChar, 90, true),
                    new TTypedColumnInfo(2, "RequirementAreaDescr", "pt_requirement_area_descr_c", "pt_requirement_area_descr_c", OdbcType.VarChar, 90, true),
                    new TTypedColumnInfo(3, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(4, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtAbilityAreaTable() :
                base("PtAbilityArea")
        {
        }

        /// constructor
        public PtAbilityAreaTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtAbilityAreaTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Name of the area of ability
        public DataColumn ColumnAbilityAreaName;
        /// Describes the area of ability.
        public DataColumn ColumnAbilityAreaDescr;
        /// Describes the area of ability
        public DataColumn ColumnRequirementAreaDescr;
        /// Can this ability be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_ability_area_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_ability_area_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_requirement_area_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAbilityAreaName = this.Columns["pt_ability_area_name_c"];
            this.ColumnAbilityAreaDescr = this.Columns["pt_ability_area_descr_c"];
            this.ColumnRequirementAreaDescr = this.Columns["pt_requirement_area_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnAbilityAreaName};
        }

        /// Access a typed row by index
        public PtAbilityAreaRow this[int i]
        {
            get
            {
                return ((PtAbilityAreaRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtAbilityAreaRow NewRowTyped(bool AWithDefaultValues)
        {
            PtAbilityAreaRow ret = ((PtAbilityAreaRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtAbilityAreaRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtAbilityAreaRow(builder);
        }

        /// get typed set of changes
        public PtAbilityAreaTable GetChangesTyped()
        {
            return ((PtAbilityAreaTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtAbilityArea";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_ability_area";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetAbilityAreaNameDBName()
        {
            return "pt_ability_area_name_c";
        }

        /// get character length for column
        public static short GetAbilityAreaNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetAbilityAreaDescrDBName()
        {
            return "pt_ability_area_descr_c";
        }

        /// get character length for column
        public static short GetAbilityAreaDescrLength()
        {
            return 90;
        }

        /// get the name of the field in the database for this column
        public static string GetRequirementAreaDescrDBName()
        {
            return "pt_requirement_area_descr_c";
        }

        /// get character length for column
        public static short GetRequirementAreaDescrLength()
        {
            return 90;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Defines the areas in which a person may possess an ability, e.g. plays the guitar.
    [Serializable()]
    public class PtAbilityAreaRow : System.Data.DataRow
    {
        private PtAbilityAreaTable myTable;

        /// Constructor
        public PtAbilityAreaRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtAbilityAreaTable)(this.Table));
        }

        /// Name of the area of ability
        public String AbilityAreaName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAbilityAreaName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAbilityAreaName)
                            || (((String)(this[this.myTable.ColumnAbilityAreaName])) != value)))
                {
                    this[this.myTable.ColumnAbilityAreaName] = value;
                }
            }
        }

        /// Describes the area of ability.
        public String AbilityAreaDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAbilityAreaDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAbilityAreaDescr)
                            || (((String)(this[this.myTable.ColumnAbilityAreaDescr])) != value)))
                {
                    this[this.myTable.ColumnAbilityAreaDescr] = value;
                }
            }
        }

        /// Describes the area of ability
        public String RequirementAreaDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRequirementAreaDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRequirementAreaDescr)
                            || (((String)(this[this.myTable.ColumnRequirementAreaDescr])) != value)))
                {
                    this[this.myTable.ColumnRequirementAreaDescr] = value;
                }
            }
        }

        /// Can this ability be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnAbilityAreaName);
            this.SetNull(this.myTable.ColumnAbilityAreaDescr);
            this.SetNull(this.myTable.ColumnRequirementAreaDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsAbilityAreaNameNull()
        {
            return this.IsNull(this.myTable.ColumnAbilityAreaName);
        }

        /// assign NULL value
        public void SetAbilityAreaNameNull()
        {
            this.SetNull(this.myTable.ColumnAbilityAreaName);
        }

        /// test for NULL value
        public bool IsAbilityAreaDescrNull()
        {
            return this.IsNull(this.myTable.ColumnAbilityAreaDescr);
        }

        /// assign NULL value
        public void SetAbilityAreaDescrNull()
        {
            this.SetNull(this.myTable.ColumnAbilityAreaDescr);
        }

        /// test for NULL value
        public bool IsRequirementAreaDescrNull()
        {
            return this.IsNull(this.myTable.ColumnRequirementAreaDescr);
        }

        /// assign NULL value
        public void SetRequirementAreaDescrNull()
        {
            this.SetNull(this.myTable.ColumnRequirementAreaDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This is the degree to which an ability
    /// is possessed, e.g. a little. professional.
    [Serializable()]
    public class PtAbilityLevelTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 221;
        /// used for generic TTypedDataTable functions
        public static short ColumnAbilityLevelId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAbilityLevelDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtAbilityLevel", "pt_ability_level",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "AbilityLevel", "pt_ability_level_i", "Ability Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "AbilityLevelDescr", "pt_ability_level_descr_c", "Description", OdbcType.VarChar, 90, true),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtAbilityLevelTable() :
                base("PtAbilityLevel")
        {
        }

        /// constructor
        public PtAbilityLevelTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtAbilityLevelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This field is a numeric representation of level of ability.
        public DataColumn ColumnAbilityLevel;
        /// Describes the level of ability.
        public DataColumn ColumnAbilityLevelDescr;
        /// Can this ability level be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_ability_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pt_ability_level_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAbilityLevel = this.Columns["pt_ability_level_i"];
            this.ColumnAbilityLevelDescr = this.Columns["pt_ability_level_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnAbilityLevel};
        }

        /// Access a typed row by index
        public PtAbilityLevelRow this[int i]
        {
            get
            {
                return ((PtAbilityLevelRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtAbilityLevelRow NewRowTyped(bool AWithDefaultValues)
        {
            PtAbilityLevelRow ret = ((PtAbilityLevelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtAbilityLevelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtAbilityLevelRow(builder);
        }

        /// get typed set of changes
        public PtAbilityLevelTable GetChangesTyped()
        {
            return ((PtAbilityLevelTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtAbilityLevel";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_ability_level";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetAbilityLevelDBName()
        {
            return "pt_ability_level_i";
        }

        /// get character length for column
        public static short GetAbilityLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAbilityLevelDescrDBName()
        {
            return "pt_ability_level_descr_c";
        }

        /// get character length for column
        public static short GetAbilityLevelDescrLength()
        {
            return 90;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This is the degree to which an ability
    /// is possessed, e.g. a little. professional.
    [Serializable()]
    public class PtAbilityLevelRow : System.Data.DataRow
    {
        private PtAbilityLevelTable myTable;

        /// Constructor
        public PtAbilityLevelRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtAbilityLevelTable)(this.Table));
        }

        /// This field is a numeric representation of level of ability.
        public Int32 AbilityLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAbilityLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAbilityLevel)
                            || (((Int32)(this[this.myTable.ColumnAbilityLevel])) != value)))
                {
                    this[this.myTable.ColumnAbilityLevel] = value;
                }
            }
        }

        /// Describes the level of ability.
        public String AbilityLevelDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAbilityLevelDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAbilityLevelDescr)
                            || (((String)(this[this.myTable.ColumnAbilityLevelDescr])) != value)))
                {
                    this[this.myTable.ColumnAbilityLevelDescr] = value;
                }
            }
        }

        /// Can this ability level be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnAbilityLevel.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAbilityLevelDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsAbilityLevelNull()
        {
            return this.IsNull(this.myTable.ColumnAbilityLevel);
        }

        /// assign NULL value
        public void SetAbilityLevelNull()
        {
            this.SetNull(this.myTable.ColumnAbilityLevel);
        }

        /// test for NULL value
        public bool IsAbilityLevelDescrNull()
        {
            return this.IsNull(this.myTable.ColumnAbilityLevelDescr);
        }

        /// assign NULL value
        public void SetAbilityLevelDescrNull()
        {
            this.SetNull(this.myTable.ColumnAbilityLevelDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table describes the ability or
    /// abilities one possesses.
    [Serializable()]
    public class PmPersonAbilityTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 222;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAbilityAreaNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnAbilityLevelId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearsOfExperienceId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearsOfExperienceAsOfId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnBringingInstrumentId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 11;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersonAbility", "pm_person_ability",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "AbilityAreaName", "pt_ability_area_name_c", "Ability Area", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(2, "AbilityLevel", "pt_ability_level_i", "Ability Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "YearsOfExperience", "pm_years_of_experience_i", "Years of Experience", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "YearsOfExperienceAsOf", "pm_years_of_experience_as_of_d", "Years of Experience as of", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "BringingInstrument", "pm_bringing_instrument_l", "Bringing Instrument?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "Comment", "pm_comment_c", "Comment", OdbcType.VarChar, 512, false),
                    new TTypedColumnInfo(7, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public PmPersonAbilityTable() :
                base("PmPersonAbility")
        {
        }

        /// constructor
        public PmPersonAbilityTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersonAbilityTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Name of the area of ability
        public DataColumn ColumnAbilityAreaName;
        /// This field is a numeric representation of level of ability.
        public DataColumn ColumnAbilityLevel;
        /// Years of experience this person has had this ability.
        public DataColumn ColumnYearsOfExperience;
        /// The date the years of experience were up to date.
        public DataColumn ColumnYearsOfExperienceAsOf;
        /// Indicates whether the applicant is bringing his instrument.
        public DataColumn ColumnBringingInstrument;
        ///
        public DataColumn ColumnComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pt_ability_area_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_ability_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_years_of_experience_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_years_of_experience_as_of_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_bringing_instrument_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnAbilityAreaName = this.Columns["pt_ability_area_name_c"];
            this.ColumnAbilityLevel = this.Columns["pt_ability_level_i"];
            this.ColumnYearsOfExperience = this.Columns["pm_years_of_experience_i"];
            this.ColumnYearsOfExperienceAsOf = this.Columns["pm_years_of_experience_as_of_d"];
            this.ColumnBringingInstrument = this.Columns["pm_bringing_instrument_l"];
            this.ColumnComment = this.Columns["pm_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnPartnerKey,ColumnAbilityAreaName};
        }

        /// Access a typed row by index
        public PmPersonAbilityRow this[int i]
        {
            get
            {
                return ((PmPersonAbilityRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersonAbilityRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonAbilityRow ret = ((PmPersonAbilityRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersonAbilityRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonAbilityRow(builder);
        }

        /// get typed set of changes
        public PmPersonAbilityTable GetChangesTyped()
        {
            return ((PmPersonAbilityTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersonAbility";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_person_ability";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetAbilityAreaNameDBName()
        {
            return "pt_ability_area_name_c";
        }

        /// get character length for column
        public static short GetAbilityAreaNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetAbilityLevelDBName()
        {
            return "pt_ability_level_i";
        }

        /// get character length for column
        public static short GetAbilityLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearsOfExperienceDBName()
        {
            return "pm_years_of_experience_i";
        }

        /// get character length for column
        public static short GetYearsOfExperienceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearsOfExperienceAsOfDBName()
        {
            return "pm_years_of_experience_as_of_d";
        }

        /// get character length for column
        public static short GetYearsOfExperienceAsOfLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBringingInstrumentDBName()
        {
            return "pm_bringing_instrument_l";
        }

        /// get character length for column
        public static short GetBringingInstrumentLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "pm_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 512;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table describes the ability or
    /// abilities one possesses.
    [Serializable()]
    public class PmPersonAbilityRow : System.Data.DataRow
    {
        private PmPersonAbilityTable myTable;

        /// Constructor
        public PmPersonAbilityRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersonAbilityTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Name of the area of ability
        public String AbilityAreaName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAbilityAreaName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAbilityAreaName)
                            || (((String)(this[this.myTable.ColumnAbilityAreaName])) != value)))
                {
                    this[this.myTable.ColumnAbilityAreaName] = value;
                }
            }
        }

        /// This field is a numeric representation of level of ability.
        public Int32 AbilityLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAbilityLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAbilityLevel)
                            || (((Int32)(this[this.myTable.ColumnAbilityLevel])) != value)))
                {
                    this[this.myTable.ColumnAbilityLevel] = value;
                }
            }
        }

        /// Years of experience this person has had this ability.
        public Int32 YearsOfExperience
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearsOfExperience.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearsOfExperience)
                            || (((Int32)(this[this.myTable.ColumnYearsOfExperience])) != value)))
                {
                    this[this.myTable.ColumnYearsOfExperience] = value;
                }
            }
        }

        /// The date the years of experience were up to date.
        public System.DateTime? YearsOfExperienceAsOf
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearsOfExperienceAsOf.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearsOfExperienceAsOf)
                            || (((System.DateTime?)(this[this.myTable.ColumnYearsOfExperienceAsOf])) != value)))
                {
                    this[this.myTable.ColumnYearsOfExperienceAsOf] = value;
                }
            }
        }

        /// Indicates whether the applicant is bringing his instrument.
        public Boolean BringingInstrument
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBringingInstrument.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBringingInstrument)
                            || (((Boolean)(this[this.myTable.ColumnBringingInstrument])) != value)))
                {
                    this[this.myTable.ColumnBringingInstrument] = value;
                }
            }
        }

        ///
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAbilityAreaName);
            this[this.myTable.ColumnAbilityLevel.Ordinal] = 0;
            this[this.myTable.ColumnYearsOfExperience.Ordinal] = 99;
            this.SetNull(this.myTable.ColumnYearsOfExperienceAsOf);
            this[this.myTable.ColumnBringingInstrument.Ordinal] = false;
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsAbilityAreaNameNull()
        {
            return this.IsNull(this.myTable.ColumnAbilityAreaName);
        }

        /// assign NULL value
        public void SetAbilityAreaNameNull()
        {
            this.SetNull(this.myTable.ColumnAbilityAreaName);
        }

        /// test for NULL value
        public bool IsAbilityLevelNull()
        {
            return this.IsNull(this.myTable.ColumnAbilityLevel);
        }

        /// assign NULL value
        public void SetAbilityLevelNull()
        {
            this.SetNull(this.myTable.ColumnAbilityLevel);
        }

        /// test for NULL value
        public bool IsYearsOfExperienceNull()
        {
            return this.IsNull(this.myTable.ColumnYearsOfExperience);
        }

        /// assign NULL value
        public void SetYearsOfExperienceNull()
        {
            this.SetNull(this.myTable.ColumnYearsOfExperience);
        }

        /// test for NULL value
        public bool IsYearsOfExperienceAsOfNull()
        {
            return this.IsNull(this.myTable.ColumnYearsOfExperienceAsOf);
        }

        /// assign NULL value
        public void SetYearsOfExperienceAsOfNull()
        {
            this.SetNull(this.myTable.ColumnYearsOfExperienceAsOf);
        }

        /// test for NULL value
        public bool IsBringingInstrumentNull()
        {
            return this.IsNull(this.myTable.ColumnBringingInstrument);
        }

        /// assign NULL value
        public void SetBringingInstrumentNull()
        {
            this.SetNull(this.myTable.ColumnBringingInstrument);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This defines the areas in which a person may posess a qualification, e.g. computing or accountancy.
    [Serializable()]
    public class PtQualificationAreaTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 223;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationAreaNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationAreaDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtQualificationArea", "pt_qualification_area",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "QualificationAreaName", "pt_qualification_area_name_c", "Qualification Area", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "QualificationAreaDescr", "pt_qualification_area_descr_c", "Description", OdbcType.VarChar, 80, true),
                    new TTypedColumnInfo(2, "QualificationFlag", "pt_qualification_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "QualificationDate", "pt_qualification_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtQualificationAreaTable() :
                base("PtQualificationArea")
        {
        }

        /// constructor
        public PtQualificationAreaTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtQualificationAreaTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Name of the area of qualification.
        public DataColumn ColumnQualificationAreaName;
        /// Describes the area of qualification.
        public DataColumn ColumnQualificationAreaDescr;
        /// Can this qualification be assigned?
        public DataColumn ColumnQualificationFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnQualificationDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_qualification_area_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_qualification_area_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_qualification_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_qualification_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnQualificationAreaName = this.Columns["pt_qualification_area_name_c"];
            this.ColumnQualificationAreaDescr = this.Columns["pt_qualification_area_descr_c"];
            this.ColumnQualificationFlag = this.Columns["pt_qualification_flag_l"];
            this.ColumnQualificationDate = this.Columns["pt_qualification_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnQualificationAreaName};
        }

        /// Access a typed row by index
        public PtQualificationAreaRow this[int i]
        {
            get
            {
                return ((PtQualificationAreaRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtQualificationAreaRow NewRowTyped(bool AWithDefaultValues)
        {
            PtQualificationAreaRow ret = ((PtQualificationAreaRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtQualificationAreaRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtQualificationAreaRow(builder);
        }

        /// get typed set of changes
        public PtQualificationAreaTable GetChangesTyped()
        {
            return ((PtQualificationAreaTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtQualificationArea";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_qualification_area";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationAreaNameDBName()
        {
            return "pt_qualification_area_name_c";
        }

        /// get character length for column
        public static short GetQualificationAreaNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationAreaDescrDBName()
        {
            return "pt_qualification_area_descr_c";
        }

        /// get character length for column
        public static short GetQualificationAreaDescrLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationFlagDBName()
        {
            return "pt_qualification_flag_l";
        }

        /// get character length for column
        public static short GetQualificationFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationDateDBName()
        {
            return "pt_qualification_date_d";
        }

        /// get character length for column
        public static short GetQualificationDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This defines the areas in which a person may posess a qualification, e.g. computing or accountancy.
    [Serializable()]
    public class PtQualificationAreaRow : System.Data.DataRow
    {
        private PtQualificationAreaTable myTable;

        /// Constructor
        public PtQualificationAreaRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtQualificationAreaTable)(this.Table));
        }

        /// Name of the area of qualification.
        public String QualificationAreaName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationAreaName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationAreaName)
                            || (((String)(this[this.myTable.ColumnQualificationAreaName])) != value)))
                {
                    this[this.myTable.ColumnQualificationAreaName] = value;
                }
            }
        }

        /// Describes the area of qualification.
        public String QualificationAreaDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationAreaDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationAreaDescr)
                            || (((String)(this[this.myTable.ColumnQualificationAreaDescr])) != value)))
                {
                    this[this.myTable.ColumnQualificationAreaDescr] = value;
                }
            }
        }

        /// Can this qualification be assigned?
        public Boolean QualificationFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationFlag)
                            || (((Boolean)(this[this.myTable.ColumnQualificationFlag])) != value)))
                {
                    this[this.myTable.ColumnQualificationFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? QualificationDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnQualificationDate])) != value)))
                {
                    this[this.myTable.ColumnQualificationDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnQualificationAreaName);
            this.SetNull(this.myTable.ColumnQualificationAreaDescr);
            this[this.myTable.ColumnQualificationFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnQualificationDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsQualificationAreaNameNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationAreaName);
        }

        /// assign NULL value
        public void SetQualificationAreaNameNull()
        {
            this.SetNull(this.myTable.ColumnQualificationAreaName);
        }

        /// test for NULL value
        public bool IsQualificationAreaDescrNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationAreaDescr);
        }

        /// assign NULL value
        public void SetQualificationAreaDescrNull()
        {
            this.SetNull(this.myTable.ColumnQualificationAreaDescr);
        }

        /// test for NULL value
        public bool IsQualificationFlagNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationFlag);
        }

        /// assign NULL value
        public void SetQualificationFlagNull()
        {
            this.SetNull(this.myTable.ColumnQualificationFlag);
        }

        /// test for NULL value
        public bool IsQualificationDateNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationDate);
        }

        /// assign NULL value
        public void SetQualificationDateNull()
        {
            this.SetNull(this.myTable.ColumnQualificationDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This is the level to which a qualifications is possessed, e.g. Secondary education, Master's Degree.
    [Serializable()]
    public class PtQualificationLevelTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 224;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationLevelId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationLevelDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtQualificationLevel", "pt_qualification_level",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "QualificationLevel", "pt_qualification_level_i", "Qualification Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "QualificationLevelDescr", "pt_qualification_level_descr_c", "Description", OdbcType.VarChar, 80, true),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtQualificationLevelTable() :
                base("PtQualificationLevel")
        {
        }

        /// constructor
        public PtQualificationLevelTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtQualificationLevelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This field is a numeric representation of level of qualification.
        public DataColumn ColumnQualificationLevel;
        /// Describes the level of qualification.
        public DataColumn ColumnQualificationLevelDescr;
        /// Can this qualification level be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_qualification_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pt_qualification_level_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnQualificationLevel = this.Columns["pt_qualification_level_i"];
            this.ColumnQualificationLevelDescr = this.Columns["pt_qualification_level_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnQualificationLevel};
        }

        /// Access a typed row by index
        public PtQualificationLevelRow this[int i]
        {
            get
            {
                return ((PtQualificationLevelRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtQualificationLevelRow NewRowTyped(bool AWithDefaultValues)
        {
            PtQualificationLevelRow ret = ((PtQualificationLevelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtQualificationLevelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtQualificationLevelRow(builder);
        }

        /// get typed set of changes
        public PtQualificationLevelTable GetChangesTyped()
        {
            return ((PtQualificationLevelTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtQualificationLevel";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_qualification_level";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationLevelDBName()
        {
            return "pt_qualification_level_i";
        }

        /// get character length for column
        public static short GetQualificationLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationLevelDescrDBName()
        {
            return "pt_qualification_level_descr_c";
        }

        /// get character length for column
        public static short GetQualificationLevelDescrLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This is the level to which a qualifications is possessed, e.g. Secondary education, Master's Degree.
    [Serializable()]
    public class PtQualificationLevelRow : System.Data.DataRow
    {
        private PtQualificationLevelTable myTable;

        /// Constructor
        public PtQualificationLevelRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtQualificationLevelTable)(this.Table));
        }

        /// This field is a numeric representation of level of qualification.
        public Int32 QualificationLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationLevel)
                            || (((Int32)(this[this.myTable.ColumnQualificationLevel])) != value)))
                {
                    this[this.myTable.ColumnQualificationLevel] = value;
                }
            }
        }

        /// Describes the level of qualification.
        public String QualificationLevelDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationLevelDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationLevelDescr)
                            || (((String)(this[this.myTable.ColumnQualificationLevelDescr])) != value)))
                {
                    this[this.myTable.ColumnQualificationLevelDescr] = value;
                }
            }
        }

        /// Can this qualification level be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnQualificationLevel.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnQualificationLevelDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsQualificationLevelNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationLevel);
        }

        /// assign NULL value
        public void SetQualificationLevelNull()
        {
            this.SetNull(this.myTable.ColumnQualificationLevel);
        }

        /// test for NULL value
        public bool IsQualificationLevelDescrNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationLevelDescr);
        }

        /// assign NULL value
        public void SetQualificationLevelDescrNull()
        {
            this.SetNull(this.myTable.ColumnQualificationLevelDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table provides detail on qualifications someone may possess.
    [Serializable()]
    public class PmPersonQualificationTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 225;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationAreaNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearsOfExperienceId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearsOfExperienceAsOfId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnInformalFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationLevelId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationDateId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnQualificationExpiryId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 13;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersonQualification", "pm_person_qualification",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "QualificationAreaName", "pt_qualification_area_name_c", "Qualification Area", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(2, "YearsOfExperience", "pm_years_of_experience_i", "Years of Experience", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "YearsOfExperienceAsOf", "pm_years_of_experience_as_of_d", "Years of Experience as of", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "InformalFlag", "pm_informal_flag_l", "Informal Training", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(5, "QualificationLevel", "pt_qualification_level_i", "Qualification Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(6, "Comment", "pm_comment_c", "Comment", OdbcType.VarChar, 512, false),
                    new TTypedColumnInfo(7, "QualificationDate", "pm_qualification_date_d", "Date Qualified", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "QualificationExpiry", "pm_qualification_expiry_d", "Date of Expiry", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public PmPersonQualificationTable() :
                base("PmPersonQualification")
        {
        }

        /// constructor
        public PmPersonQualificationTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersonQualificationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Name of the area of qualification.
        public DataColumn ColumnQualificationAreaName;
        /// Years of experience this person has had this qualification.
        public DataColumn ColumnYearsOfExperience;
        /// The date the years of experience were up to date.
        public DataColumn ColumnYearsOfExperienceAsOf;
        /// This field indicate whether the qualifications are the result of
        /// informal training.
        public DataColumn ColumnInformalFlag;
        /// This field is a numeric representation of level of qualification.
        public DataColumn ColumnQualificationLevel;
        ///
        public DataColumn ColumnComment;
        /// The date the person qualified.
        public DataColumn ColumnQualificationDate;
        /// The date the qualification expires.
        public DataColumn ColumnQualificationExpiry;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pt_qualification_area_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_years_of_experience_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_years_of_experience_as_of_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_informal_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_qualification_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_qualification_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_qualification_expiry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnQualificationAreaName = this.Columns["pt_qualification_area_name_c"];
            this.ColumnYearsOfExperience = this.Columns["pm_years_of_experience_i"];
            this.ColumnYearsOfExperienceAsOf = this.Columns["pm_years_of_experience_as_of_d"];
            this.ColumnInformalFlag = this.Columns["pm_informal_flag_l"];
            this.ColumnQualificationLevel = this.Columns["pt_qualification_level_i"];
            this.ColumnComment = this.Columns["pm_comment_c"];
            this.ColumnQualificationDate = this.Columns["pm_qualification_date_d"];
            this.ColumnQualificationExpiry = this.Columns["pm_qualification_expiry_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnPartnerKey,ColumnQualificationAreaName};
        }

        /// Access a typed row by index
        public PmPersonQualificationRow this[int i]
        {
            get
            {
                return ((PmPersonQualificationRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersonQualificationRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonQualificationRow ret = ((PmPersonQualificationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersonQualificationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonQualificationRow(builder);
        }

        /// get typed set of changes
        public PmPersonQualificationTable GetChangesTyped()
        {
            return ((PmPersonQualificationTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersonQualification";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_person_qualification";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationAreaNameDBName()
        {
            return "pt_qualification_area_name_c";
        }

        /// get character length for column
        public static short GetQualificationAreaNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetYearsOfExperienceDBName()
        {
            return "pm_years_of_experience_i";
        }

        /// get character length for column
        public static short GetYearsOfExperienceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearsOfExperienceAsOfDBName()
        {
            return "pm_years_of_experience_as_of_d";
        }

        /// get character length for column
        public static short GetYearsOfExperienceAsOfLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetInformalFlagDBName()
        {
            return "pm_informal_flag_l";
        }

        /// get character length for column
        public static short GetInformalFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationLevelDBName()
        {
            return "pt_qualification_level_i";
        }

        /// get character length for column
        public static short GetQualificationLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "pm_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 512;
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationDateDBName()
        {
            return "pm_qualification_date_d";
        }

        /// get character length for column
        public static short GetQualificationDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetQualificationExpiryDBName()
        {
            return "pm_qualification_expiry_d";
        }

        /// get character length for column
        public static short GetQualificationExpiryLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table provides detail on qualifications someone may possess.
    [Serializable()]
    public class PmPersonQualificationRow : System.Data.DataRow
    {
        private PmPersonQualificationTable myTable;

        /// Constructor
        public PmPersonQualificationRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersonQualificationTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Name of the area of qualification.
        public String QualificationAreaName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationAreaName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationAreaName)
                            || (((String)(this[this.myTable.ColumnQualificationAreaName])) != value)))
                {
                    this[this.myTable.ColumnQualificationAreaName] = value;
                }
            }
        }

        /// Years of experience this person has had this qualification.
        public Int32 YearsOfExperience
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearsOfExperience.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearsOfExperience)
                            || (((Int32)(this[this.myTable.ColumnYearsOfExperience])) != value)))
                {
                    this[this.myTable.ColumnYearsOfExperience] = value;
                }
            }
        }

        /// The date the years of experience were up to date.
        public System.DateTime? YearsOfExperienceAsOf
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearsOfExperienceAsOf.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearsOfExperienceAsOf)
                            || (((System.DateTime?)(this[this.myTable.ColumnYearsOfExperienceAsOf])) != value)))
                {
                    this[this.myTable.ColumnYearsOfExperienceAsOf] = value;
                }
            }
        }

        /// This field indicate whether the qualifications are the result of
        /// informal training.
        public Boolean InformalFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInformalFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInformalFlag)
                            || (((Boolean)(this[this.myTable.ColumnInformalFlag])) != value)))
                {
                    this[this.myTable.ColumnInformalFlag] = value;
                }
            }
        }

        /// This field is a numeric representation of level of qualification.
        public Int32 QualificationLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationLevel)
                            || (((Int32)(this[this.myTable.ColumnQualificationLevel])) != value)))
                {
                    this[this.myTable.ColumnQualificationLevel] = value;
                }
            }
        }

        ///
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// The date the person qualified.
        public System.DateTime? QualificationDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnQualificationDate])) != value)))
                {
                    this[this.myTable.ColumnQualificationDate] = value;
                }
            }
        }

        /// The date the qualification expires.
        public System.DateTime? QualificationExpiry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnQualificationExpiry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnQualificationExpiry)
                            || (((System.DateTime?)(this[this.myTable.ColumnQualificationExpiry])) != value)))
                {
                    this[this.myTable.ColumnQualificationExpiry] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnQualificationAreaName);
            this[this.myTable.ColumnYearsOfExperience.Ordinal] = 99;
            this.SetNull(this.myTable.ColumnYearsOfExperienceAsOf);
            this[this.myTable.ColumnInformalFlag.Ordinal] = false;
            this[this.myTable.ColumnQualificationLevel.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnComment);
            this.SetNull(this.myTable.ColumnQualificationDate);
            this.SetNull(this.myTable.ColumnQualificationExpiry);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsQualificationAreaNameNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationAreaName);
        }

        /// assign NULL value
        public void SetQualificationAreaNameNull()
        {
            this.SetNull(this.myTable.ColumnQualificationAreaName);
        }

        /// test for NULL value
        public bool IsYearsOfExperienceNull()
        {
            return this.IsNull(this.myTable.ColumnYearsOfExperience);
        }

        /// assign NULL value
        public void SetYearsOfExperienceNull()
        {
            this.SetNull(this.myTable.ColumnYearsOfExperience);
        }

        /// test for NULL value
        public bool IsYearsOfExperienceAsOfNull()
        {
            return this.IsNull(this.myTable.ColumnYearsOfExperienceAsOf);
        }

        /// assign NULL value
        public void SetYearsOfExperienceAsOfNull()
        {
            this.SetNull(this.myTable.ColumnYearsOfExperienceAsOf);
        }

        /// test for NULL value
        public bool IsInformalFlagNull()
        {
            return this.IsNull(this.myTable.ColumnInformalFlag);
        }

        /// assign NULL value
        public void SetInformalFlagNull()
        {
            this.SetNull(this.myTable.ColumnInformalFlag);
        }

        /// test for NULL value
        public bool IsQualificationLevelNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationLevel);
        }

        /// assign NULL value
        public void SetQualificationLevelNull()
        {
            this.SetNull(this.myTable.ColumnQualificationLevel);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsQualificationDateNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationDate);
        }

        /// assign NULL value
        public void SetQualificationDateNull()
        {
            this.SetNull(this.myTable.ColumnQualificationDate);
        }

        /// test for NULL value
        public bool IsQualificationExpiryNull()
        {
            return this.IsNull(this.myTable.ColumnQualificationExpiry);
        }

        /// assign NULL value
        public void SetQualificationExpiryNull()
        {
            this.SetNull(this.myTable.ColumnQualificationExpiry);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This is the category that will be used for a person's skill
    [Serializable()]
    public class PtSkillCategoryTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 226;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtSkillCategory", "pt_skill_category",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Code", OdbcType.VarChar, 60, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtSkillCategoryTable() :
                base("PtSkillCategory")
        {
        }

        /// constructor
        public PtSkillCategoryTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtSkillCategoryTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Code for the Skill Category
        public DataColumn ColumnCode;
        /// Describes the Category used for skills
        public DataColumn ColumnDescription;
        /// Can this category be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtSkillCategoryRow this[int i]
        {
            get
            {
                return ((PtSkillCategoryRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtSkillCategoryRow NewRowTyped(bool AWithDefaultValues)
        {
            PtSkillCategoryRow ret = ((PtSkillCategoryRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtSkillCategoryRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtSkillCategoryRow(builder);
        }

        /// get typed set of changes
        public PtSkillCategoryTable GetChangesTyped()
        {
            return ((PtSkillCategoryTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtSkillCategory";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_skill_category";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This is the category that will be used for a person's skill
    [Serializable()]
    public class PtSkillCategoryRow : System.Data.DataRow
    {
        private PtSkillCategoryTable myTable;

        /// Constructor
        public PtSkillCategoryRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtSkillCategoryTable)(this.Table));
        }

        /// Code for the Skill Category
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// Describes the Category used for skills
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Can this category be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This is the level to which a skill is possessed
    [Serializable()]
    public class PtSkillLevelTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 227;
        /// used for generic TTypedDataTable functions
        public static short ColumnLevelId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtSkillLevel", "pt_skill_level",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Level", "pt_level_i", "Skill Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 100, true),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtSkillLevelTable() :
                base("PtSkillLevel")
        {
        }

        /// constructor
        public PtSkillLevelTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtSkillLevelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This field is a numeric representation of level of skill.
        public DataColumn ColumnLevel;
        /// Describes the level of skill.
        public DataColumn ColumnDescription;
        /// Can this skill level be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLevel = this.Columns["pt_level_i"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnLevel};
        }

        /// Access a typed row by index
        public PtSkillLevelRow this[int i]
        {
            get
            {
                return ((PtSkillLevelRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtSkillLevelRow NewRowTyped(bool AWithDefaultValues)
        {
            PtSkillLevelRow ret = ((PtSkillLevelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtSkillLevelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtSkillLevelRow(builder);
        }

        /// get typed set of changes
        public PtSkillLevelTable GetChangesTyped()
        {
            return ((PtSkillLevelTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtSkillLevel";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_skill_level";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLevelDBName()
        {
            return "pt_level_i";
        }

        /// get character length for column
        public static short GetLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This is the level to which a skill is possessed
    [Serializable()]
    public class PtSkillLevelRow : System.Data.DataRow
    {
        private PtSkillLevelTable myTable;

        /// Constructor
        public PtSkillLevelRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtSkillLevelTable)(this.Table));
        }

        /// This field is a numeric representation of level of skill.
        public Int32 Level
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLevel)
                            || (((Int32)(this[this.myTable.ColumnLevel])) != value)))
                {
                    this[this.myTable.ColumnLevel] = value;
                }
            }
        }

        /// Describes the level of skill.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Can this skill level be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLevel.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLevelNull()
        {
            return this.IsNull(this.myTable.ColumnLevel);
        }

        /// assign NULL value
        public void SetLevelNull()
        {
            this.SetNull(this.myTable.ColumnLevel);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table describes the skills that a person has (including professional skills but also other ones).
    [Serializable()]
    public class PmPersonSkillTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 228;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonSkillKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnSkillCategoryCodeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionEnglishId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionLocalId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionLanguageId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnSkillLevelId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearsOfExperienceId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearsOfExperienceAsOfId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnProfessionalSkillId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCurrentOccupationId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDegreeId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearOfDegreeId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 18;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersonSkill", "pm_person_skill",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PersonSkillKey", "pm_person_skill_key_i", "", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "SkillCategoryCode", "pm_skill_category_code_c", "Skill Category", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(3, "DescriptionEnglish", "pm_description_english_c", "Description (english)", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(4, "DescriptionLocal", "pm_description_local_c", "Description (local)", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(5, "DescriptionLanguage", "pm_description_language_c", "Local Language", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "SkillLevel", "pm_skill_level_i", "Skill Level", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(7, "YearsOfExperience", "pm_years_of_experience_i", "Years of Experience", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(8, "YearsOfExperienceAsOf", "pm_years_of_experience_as_of_d", "Years of Experience as of", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ProfessionalSkill", "pm_professional_skill_l", "Professional Skill", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(10, "CurrentOccupation", "pm_current_occupation_l", "Current Occupation", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(11, "Degree", "pm_degree_c", "Degree", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(12, "YearOfDegree", "pm_year_of_degree_i", "Degree Year", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(13, "Comment", "pm_comment_c", "Comment", OdbcType.VarChar, 1000, false),
                    new TTypedColumnInfo(14, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(17, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(18, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmPersonSkillTable() :
                base("PmPersonSkill")
        {
        }

        /// constructor
        public PmPersonSkillTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersonSkillTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnPersonSkillKey;
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Skill Category
        public DataColumn ColumnSkillCategoryCode;
        /// Description of skill in english language
        public DataColumn ColumnDescriptionEnglish;
        /// Description of skill in local language
        public DataColumn ColumnDescriptionLocal;
        /// Language that is used in field pm_description_local_c
        public DataColumn ColumnDescriptionLanguage;
        /// This field is a numeric representation of level of skill.
        public DataColumn ColumnSkillLevel;
        /// Years of experience this person has had this skill.
        public DataColumn ColumnYearsOfExperience;
        /// The date the years of experience were up to date.
        public DataColumn ColumnYearsOfExperienceAsOf;
        /// Indicates if this is a professional skill
        public DataColumn ColumnProfessionalSkill;
        /// Indicates if this is the person's current occupation
        public DataColumn ColumnCurrentOccupation;
        /// Degree that is linked with the skill (if applicable)
        public DataColumn ColumnDegree;
        /// Year the degree was obtained.
        public DataColumn ColumnYearOfDegree;
        ///
        public DataColumn ColumnComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pm_person_skill_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_skill_category_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_description_english_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_description_local_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_description_language_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_skill_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_years_of_experience_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_years_of_experience_as_of_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_professional_skill_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_current_occupation_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_degree_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_year_of_degree_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPersonSkillKey = this.Columns["pm_person_skill_key_i"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnSkillCategoryCode = this.Columns["pm_skill_category_code_c"];
            this.ColumnDescriptionEnglish = this.Columns["pm_description_english_c"];
            this.ColumnDescriptionLocal = this.Columns["pm_description_local_c"];
            this.ColumnDescriptionLanguage = this.Columns["pm_description_language_c"];
            this.ColumnSkillLevel = this.Columns["pm_skill_level_i"];
            this.ColumnYearsOfExperience = this.Columns["pm_years_of_experience_i"];
            this.ColumnYearsOfExperienceAsOf = this.Columns["pm_years_of_experience_as_of_d"];
            this.ColumnProfessionalSkill = this.Columns["pm_professional_skill_l"];
            this.ColumnCurrentOccupation = this.Columns["pm_current_occupation_l"];
            this.ColumnDegree = this.Columns["pm_degree_c"];
            this.ColumnYearOfDegree = this.Columns["pm_year_of_degree_i"];
            this.ColumnComment = this.Columns["pm_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnPersonSkillKey};
        }

        /// Access a typed row by index
        public PmPersonSkillRow this[int i]
        {
            get
            {
                return ((PmPersonSkillRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersonSkillRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonSkillRow ret = ((PmPersonSkillRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersonSkillRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonSkillRow(builder);
        }

        /// get typed set of changes
        public PmPersonSkillTable GetChangesTyped()
        {
            return ((PmPersonSkillTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersonSkill";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_person_skill";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPersonSkillKeyDBName()
        {
            return "pm_person_skill_key_i";
        }

        /// get character length for column
        public static short GetPersonSkillKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetSkillCategoryCodeDBName()
        {
            return "pm_skill_category_code_c";
        }

        /// get character length for column
        public static short GetSkillCategoryCodeLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionEnglishDBName()
        {
            return "pm_description_english_c";
        }

        /// get character length for column
        public static short GetDescriptionEnglishLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionLocalDBName()
        {
            return "pm_description_local_c";
        }

        /// get character length for column
        public static short GetDescriptionLocalLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionLanguageDBName()
        {
            return "pm_description_language_c";
        }

        /// get character length for column
        public static short GetDescriptionLanguageLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetSkillLevelDBName()
        {
            return "pm_skill_level_i";
        }

        /// get character length for column
        public static short GetSkillLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearsOfExperienceDBName()
        {
            return "pm_years_of_experience_i";
        }

        /// get character length for column
        public static short GetYearsOfExperienceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearsOfExperienceAsOfDBName()
        {
            return "pm_years_of_experience_as_of_d";
        }

        /// get character length for column
        public static short GetYearsOfExperienceAsOfLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetProfessionalSkillDBName()
        {
            return "pm_professional_skill_l";
        }

        /// get character length for column
        public static short GetProfessionalSkillLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCurrentOccupationDBName()
        {
            return "pm_current_occupation_l";
        }

        /// get character length for column
        public static short GetCurrentOccupationLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDegreeDBName()
        {
            return "pm_degree_c";
        }

        /// get character length for column
        public static short GetDegreeLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetYearOfDegreeDBName()
        {
            return "pm_year_of_degree_i";
        }

        /// get character length for column
        public static short GetYearOfDegreeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "pm_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 1000;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table describes the skills that a person has (including professional skills but also other ones).
    [Serializable()]
    public class PmPersonSkillRow : System.Data.DataRow
    {
        private PmPersonSkillTable myTable;

        /// Constructor
        public PmPersonSkillRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersonSkillTable)(this.Table));
        }

        ///
        public Int32 PersonSkillKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonSkillKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonSkillKey)
                            || (((Int32)(this[this.myTable.ColumnPersonSkillKey])) != value)))
                {
                    this[this.myTable.ColumnPersonSkillKey] = value;
                }
            }
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Skill Category
        public String SkillCategoryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSkillCategoryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSkillCategoryCode)
                            || (((String)(this[this.myTable.ColumnSkillCategoryCode])) != value)))
                {
                    this[this.myTable.ColumnSkillCategoryCode] = value;
                }
            }
        }

        /// Description of skill in english language
        public String DescriptionEnglish
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescriptionEnglish.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescriptionEnglish)
                            || (((String)(this[this.myTable.ColumnDescriptionEnglish])) != value)))
                {
                    this[this.myTable.ColumnDescriptionEnglish] = value;
                }
            }
        }

        /// Description of skill in local language
        public String DescriptionLocal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescriptionLocal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescriptionLocal)
                            || (((String)(this[this.myTable.ColumnDescriptionLocal])) != value)))
                {
                    this[this.myTable.ColumnDescriptionLocal] = value;
                }
            }
        }

        /// Language that is used in field pm_description_local_c
        public String DescriptionLanguage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescriptionLanguage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescriptionLanguage)
                            || (((String)(this[this.myTable.ColumnDescriptionLanguage])) != value)))
                {
                    this[this.myTable.ColumnDescriptionLanguage] = value;
                }
            }
        }

        /// This field is a numeric representation of level of skill.
        public Int32 SkillLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSkillLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSkillLevel)
                            || (((Int32)(this[this.myTable.ColumnSkillLevel])) != value)))
                {
                    this[this.myTable.ColumnSkillLevel] = value;
                }
            }
        }

        /// Years of experience this person has had this skill.
        public Int32 YearsOfExperience
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearsOfExperience.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearsOfExperience)
                            || (((Int32)(this[this.myTable.ColumnYearsOfExperience])) != value)))
                {
                    this[this.myTable.ColumnYearsOfExperience] = value;
                }
            }
        }

        /// The date the years of experience were up to date.
        public System.DateTime? YearsOfExperienceAsOf
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearsOfExperienceAsOf.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearsOfExperienceAsOf)
                            || (((System.DateTime?)(this[this.myTable.ColumnYearsOfExperienceAsOf])) != value)))
                {
                    this[this.myTable.ColumnYearsOfExperienceAsOf] = value;
                }
            }
        }

        /// Indicates if this is a professional skill
        public Boolean ProfessionalSkill
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProfessionalSkill.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProfessionalSkill)
                            || (((Boolean)(this[this.myTable.ColumnProfessionalSkill])) != value)))
                {
                    this[this.myTable.ColumnProfessionalSkill] = value;
                }
            }
        }

        /// Indicates if this is the person's current occupation
        public Boolean CurrentOccupation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrentOccupation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrentOccupation)
                            || (((Boolean)(this[this.myTable.ColumnCurrentOccupation])) != value)))
                {
                    this[this.myTable.ColumnCurrentOccupation] = value;
                }
            }
        }

        /// Degree that is linked with the skill (if applicable)
        public String Degree
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDegree.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDegree)
                            || (((String)(this[this.myTable.ColumnDegree])) != value)))
                {
                    this[this.myTable.ColumnDegree] = value;
                }
            }
        }

        /// Year the degree was obtained.
        public Int32 YearOfDegree
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearOfDegree.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearOfDegree)
                            || (((Int32)(this[this.myTable.ColumnYearOfDegree])) != value)))
                {
                    this[this.myTable.ColumnYearOfDegree] = value;
                }
            }
        }

        ///
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPersonSkillKey);
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSkillCategoryCode);
            this.SetNull(this.myTable.ColumnDescriptionEnglish);
            this.SetNull(this.myTable.ColumnDescriptionLocal);
            this.SetNull(this.myTable.ColumnDescriptionLanguage);
            this[this.myTable.ColumnSkillLevel.Ordinal] = 0;
            this[this.myTable.ColumnYearsOfExperience.Ordinal] = 99;
            this.SetNull(this.myTable.ColumnYearsOfExperienceAsOf);
            this[this.myTable.ColumnProfessionalSkill.Ordinal] = false;
            this[this.myTable.ColumnCurrentOccupation.Ordinal] = false;
            this.SetNull(this.myTable.ColumnDegree);
            this.SetNull(this.myTable.ColumnYearOfDegree);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPersonSkillKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPersonSkillKey);
        }

        /// assign NULL value
        public void SetPersonSkillKeyNull()
        {
            this.SetNull(this.myTable.ColumnPersonSkillKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsSkillCategoryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSkillCategoryCode);
        }

        /// assign NULL value
        public void SetSkillCategoryCodeNull()
        {
            this.SetNull(this.myTable.ColumnSkillCategoryCode);
        }

        /// test for NULL value
        public bool IsDescriptionEnglishNull()
        {
            return this.IsNull(this.myTable.ColumnDescriptionEnglish);
        }

        /// assign NULL value
        public void SetDescriptionEnglishNull()
        {
            this.SetNull(this.myTable.ColumnDescriptionEnglish);
        }

        /// test for NULL value
        public bool IsDescriptionLocalNull()
        {
            return this.IsNull(this.myTable.ColumnDescriptionLocal);
        }

        /// assign NULL value
        public void SetDescriptionLocalNull()
        {
            this.SetNull(this.myTable.ColumnDescriptionLocal);
        }

        /// test for NULL value
        public bool IsDescriptionLanguageNull()
        {
            return this.IsNull(this.myTable.ColumnDescriptionLanguage);
        }

        /// assign NULL value
        public void SetDescriptionLanguageNull()
        {
            this.SetNull(this.myTable.ColumnDescriptionLanguage);
        }

        /// test for NULL value
        public bool IsSkillLevelNull()
        {
            return this.IsNull(this.myTable.ColumnSkillLevel);
        }

        /// assign NULL value
        public void SetSkillLevelNull()
        {
            this.SetNull(this.myTable.ColumnSkillLevel);
        }

        /// test for NULL value
        public bool IsYearsOfExperienceNull()
        {
            return this.IsNull(this.myTable.ColumnYearsOfExperience);
        }

        /// assign NULL value
        public void SetYearsOfExperienceNull()
        {
            this.SetNull(this.myTable.ColumnYearsOfExperience);
        }

        /// test for NULL value
        public bool IsYearsOfExperienceAsOfNull()
        {
            return this.IsNull(this.myTable.ColumnYearsOfExperienceAsOf);
        }

        /// assign NULL value
        public void SetYearsOfExperienceAsOfNull()
        {
            this.SetNull(this.myTable.ColumnYearsOfExperienceAsOf);
        }

        /// test for NULL value
        public bool IsProfessionalSkillNull()
        {
            return this.IsNull(this.myTable.ColumnProfessionalSkill);
        }

        /// assign NULL value
        public void SetProfessionalSkillNull()
        {
            this.SetNull(this.myTable.ColumnProfessionalSkill);
        }

        /// test for NULL value
        public bool IsCurrentOccupationNull()
        {
            return this.IsNull(this.myTable.ColumnCurrentOccupation);
        }

        /// assign NULL value
        public void SetCurrentOccupationNull()
        {
            this.SetNull(this.myTable.ColumnCurrentOccupation);
        }

        /// test for NULL value
        public bool IsDegreeNull()
        {
            return this.IsNull(this.myTable.ColumnDegree);
        }

        /// assign NULL value
        public void SetDegreeNull()
        {
            this.SetNull(this.myTable.ColumnDegree);
        }

        /// test for NULL value
        public bool IsYearOfDegreeNull()
        {
            return this.IsNull(this.myTable.ColumnYearOfDegree);
        }

        /// assign NULL value
        public void SetYearOfDegreeNull()
        {
            this.SetNull(this.myTable.ColumnYearOfDegree);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table records the formal education that a person has
    [Serializable()]
    public class PmFormalEducationTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 229;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormalEducationKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnEducationCategoryId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDegreeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearOfDegreeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnInstitutionId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCountryCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 12;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmFormalEducation", "pm_formal_education",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FormalEducationKey", "pm_formal_education_key_i", "", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "EducationCategory", "pm_education_category_c", "Education Category", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(3, "Degree", "pm_degree_c", "Degree", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(4, "YearOfDegree", "pm_year_of_degree_i", "Degree Year", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(5, "Institution", "pm_institution_c", "Institution", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(6, "CountryCode", "p_country_code_c", "p_country_code_c", OdbcType.VarChar, 8, false),
                    new TTypedColumnInfo(7, "Comment", "pm_comment_c", "Comment", OdbcType.VarChar, 2000, false),
                    new TTypedColumnInfo(8, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmFormalEducationTable() :
                base("PmFormalEducation")
        {
        }

        /// constructor
        public PmFormalEducationTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmFormalEducationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnFormalEducationKey;
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Education Category
        public DataColumn ColumnEducationCategory;
        /// Description of degree (incl. title and subject)
        public DataColumn ColumnDegree;
        /// Year the degree was obtained.
        public DataColumn ColumnYearOfDegree;
        /// Institution the degree was obtained from
        public DataColumn ColumnInstitution;
        /// Code of country in which the degree was obtained
        public DataColumn ColumnCountryCode;
        ///
        public DataColumn ColumnComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pm_formal_education_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_education_category_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_degree_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_year_of_degree_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_institution_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_country_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormalEducationKey = this.Columns["pm_formal_education_key_i"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnEducationCategory = this.Columns["pm_education_category_c"];
            this.ColumnDegree = this.Columns["pm_degree_c"];
            this.ColumnYearOfDegree = this.Columns["pm_year_of_degree_i"];
            this.ColumnInstitution = this.Columns["pm_institution_c"];
            this.ColumnCountryCode = this.Columns["p_country_code_c"];
            this.ColumnComment = this.Columns["pm_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnFormalEducationKey};
        }

        /// Access a typed row by index
        public PmFormalEducationRow this[int i]
        {
            get
            {
                return ((PmFormalEducationRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmFormalEducationRow NewRowTyped(bool AWithDefaultValues)
        {
            PmFormalEducationRow ret = ((PmFormalEducationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmFormalEducationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmFormalEducationRow(builder);
        }

        /// get typed set of changes
        public PmFormalEducationTable GetChangesTyped()
        {
            return ((PmFormalEducationTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmFormalEducation";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_formal_education";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFormalEducationKeyDBName()
        {
            return "pm_formal_education_key_i";
        }

        /// get character length for column
        public static short GetFormalEducationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetEducationCategoryDBName()
        {
            return "pm_education_category_c";
        }

        /// get character length for column
        public static short GetEducationCategoryLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetDegreeDBName()
        {
            return "pm_degree_c";
        }

        /// get character length for column
        public static short GetDegreeLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetYearOfDegreeDBName()
        {
            return "pm_year_of_degree_i";
        }

        /// get character length for column
        public static short GetYearOfDegreeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetInstitutionDBName()
        {
            return "pm_institution_c";
        }

        /// get character length for column
        public static short GetInstitutionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetCountryCodeDBName()
        {
            return "p_country_code_c";
        }

        /// get character length for column
        public static short GetCountryCodeLength()
        {
            return 8;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "pm_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 2000;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table records the formal education that a person has
    [Serializable()]
    public class PmFormalEducationRow : System.Data.DataRow
    {
        private PmFormalEducationTable myTable;

        /// Constructor
        public PmFormalEducationRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmFormalEducationTable)(this.Table));
        }

        ///
        public Int32 FormalEducationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormalEducationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormalEducationKey)
                            || (((Int32)(this[this.myTable.ColumnFormalEducationKey])) != value)))
                {
                    this[this.myTable.ColumnFormalEducationKey] = value;
                }
            }
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Education Category
        public String EducationCategory
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEducationCategory.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEducationCategory)
                            || (((String)(this[this.myTable.ColumnEducationCategory])) != value)))
                {
                    this[this.myTable.ColumnEducationCategory] = value;
                }
            }
        }

        /// Description of degree (incl. title and subject)
        public String Degree
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDegree.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDegree)
                            || (((String)(this[this.myTable.ColumnDegree])) != value)))
                {
                    this[this.myTable.ColumnDegree] = value;
                }
            }
        }

        /// Year the degree was obtained.
        public Int32 YearOfDegree
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearOfDegree.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearOfDegree)
                            || (((Int32)(this[this.myTable.ColumnYearOfDegree])) != value)))
                {
                    this[this.myTable.ColumnYearOfDegree] = value;
                }
            }
        }

        /// Institution the degree was obtained from
        public String Institution
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInstitution.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInstitution)
                            || (((String)(this[this.myTable.ColumnInstitution])) != value)))
                {
                    this[this.myTable.ColumnInstitution] = value;
                }
            }
        }

        /// Code of country in which the degree was obtained
        public String CountryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCountryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCountryCode)
                            || (((String)(this[this.myTable.ColumnCountryCode])) != value)))
                {
                    this[this.myTable.ColumnCountryCode] = value;
                }
            }
        }

        ///
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormalEducationKey);
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnEducationCategory);
            this.SetNull(this.myTable.ColumnDegree);
            this[this.myTable.ColumnYearOfDegree.Ordinal] = 99;
            this.SetNull(this.myTable.ColumnInstitution);
            this.SetNull(this.myTable.ColumnCountryCode);
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFormalEducationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFormalEducationKey);
        }

        /// assign NULL value
        public void SetFormalEducationKeyNull()
        {
            this.SetNull(this.myTable.ColumnFormalEducationKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsEducationCategoryNull()
        {
            return this.IsNull(this.myTable.ColumnEducationCategory);
        }

        /// assign NULL value
        public void SetEducationCategoryNull()
        {
            this.SetNull(this.myTable.ColumnEducationCategory);
        }

        /// test for NULL value
        public bool IsDegreeNull()
        {
            return this.IsNull(this.myTable.ColumnDegree);
        }

        /// assign NULL value
        public void SetDegreeNull()
        {
            this.SetNull(this.myTable.ColumnDegree);
        }

        /// test for NULL value
        public bool IsYearOfDegreeNull()
        {
            return this.IsNull(this.myTable.ColumnYearOfDegree);
        }

        /// assign NULL value
        public void SetYearOfDegreeNull()
        {
            this.SetNull(this.myTable.ColumnYearOfDegree);
        }

        /// test for NULL value
        public bool IsInstitutionNull()
        {
            return this.IsNull(this.myTable.ColumnInstitution);
        }

        /// assign NULL value
        public void SetInstitutionNull()
        {
            this.SetNull(this.myTable.ColumnInstitution);
        }

        /// test for NULL value
        public bool IsCountryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCountryCode);
        }

        /// assign NULL value
        public void SetCountryCodeNull()
        {
            this.SetNull(this.myTable.ColumnCountryCode);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the codes that indicate the level of ability a drive has.
    [Serializable()]
    public class PtDriverStatusTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 230;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtDriverStatus", "pt_driver_status",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pt_code_c", "Driver Status", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "Description", "pt_description_c", "Description", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtDriverStatusTable() :
                base("PtDriverStatus")
        {
        }

        /// constructor
        public PtDriverStatusTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtDriverStatusTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This code indicates the driver status of a person.
        public DataColumn ColumnCode;
        /// This describes the driver status.
        public DataColumn ColumnDescription;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pt_code_c"];
            this.ColumnDescription = this.Columns["pt_description_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PtDriverStatusRow this[int i]
        {
            get
            {
                return ((PtDriverStatusRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtDriverStatusRow NewRowTyped(bool AWithDefaultValues)
        {
            PtDriverStatusRow ret = ((PtDriverStatusRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtDriverStatusRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtDriverStatusRow(builder);
        }

        /// get typed set of changes
        public PtDriverStatusTable GetChangesTyped()
        {
            return ((PtDriverStatusTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtDriverStatus";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_driver_status";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pt_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "pt_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the codes that indicate the level of ability a drive has.
    [Serializable()]
    public class PtDriverStatusRow : System.Data.DataRow
    {
        private PtDriverStatusTable myTable;

        /// Constructor
        public PtDriverStatusRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtDriverStatusTable)(this.Table));
        }

        /// This code indicates the driver status of a person.
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// This describes the driver status.
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the labels that are attached to the data fields in the Personal Data table.
    [Serializable()]
    public class PtPersonalDataLabelsTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 231;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataLabel1Id = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataLabel2Id = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataLabel3Id = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataLabel4Id = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataLabel5Id = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataLabel6Id = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataLabel7Id = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataHelp1Id = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataHelp2Id = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataHelp3Id = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataHelp4Id = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataHelp5Id = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataHelp6Id = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersDataHelp7Id = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 18;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtPersonalDataLabels", "pt_personal_data_labels",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PersDataLabel1", "pt_pers_data_label1_c", "Label-1", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(1, "PersDataLabel2", "pt_pers_data_label2_c", "Label-2", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(2, "PersDataLabel3", "pt_pers_data_label3_c", "Label-3", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(3, "PersDataLabel4", "pt_pers_data_label4_c", "Label-4", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(4, "PersDataLabel5", "pt_pers_data_label5_c", "Label-5", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(5, "PersDataLabel6", "pt_pers_data_label6_c", "Label-6", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(6, "PersDataLabel7", "pt_pers_data_label7_c", "Label-7", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(7, "PersDataHelp1", "pt_pers_data_help_1_c", "Help Text1", OdbcType.VarChar, 96, false),
                    new TTypedColumnInfo(8, "PersDataHelp2", "pt_pers_data_help_2_c", "Help Text2", OdbcType.VarChar, 96, false),
                    new TTypedColumnInfo(9, "PersDataHelp3", "pt_pers_data_help_3_c", "Help Text3", OdbcType.VarChar, 96, false),
                    new TTypedColumnInfo(10, "PersDataHelp4", "pt_pers_data_help_4_c", "Help Text4", OdbcType.VarChar, 96, false),
                    new TTypedColumnInfo(11, "PersDataHelp5", "pt_pers_data_help_5_c", "Help Text5", OdbcType.VarChar, 96, false),
                    new TTypedColumnInfo(12, "PersDataHelp6", "pt_pers_data_help_6_c", "Help Text6", OdbcType.VarChar, 96, false),
                    new TTypedColumnInfo(13, "PersDataHelp7", "pt_pers_data_help_7_c", "Help Text7", OdbcType.VarChar, 96, false),
                    new TTypedColumnInfo(14, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(17, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(18, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                }));
            return true;
        }

        /// constructor
        public PtPersonalDataLabelsTable() :
                base("PtPersonalDataLabels")
        {
        }

        /// constructor
        public PtPersonalDataLabelsTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtPersonalDataLabelsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Label for user defined data field-1.
        public DataColumn ColumnPersDataLabel1;
        /// Label for user defined data field-2.
        public DataColumn ColumnPersDataLabel2;
        /// Label for user defined data field-3.
        public DataColumn ColumnPersDataLabel3;
        /// Label for user defined data field-4.
        public DataColumn ColumnPersDataLabel4;
        /// Label for user defined data field-5.
        public DataColumn ColumnPersDataLabel5;
        /// Label for user defined data field-6.
        public DataColumn ColumnPersDataLabel6;
        /// Label for user defined data field-7.
        public DataColumn ColumnPersDataLabel7;
        /// Help text
        public DataColumn ColumnPersDataHelp1;
        /// Help text
        public DataColumn ColumnPersDataHelp2;
        /// Help text
        public DataColumn ColumnPersDataHelp3;
        /// Help text
        public DataColumn ColumnPersDataHelp4;
        /// Help text
        public DataColumn ColumnPersDataHelp5;
        /// Help text
        public DataColumn ColumnPersDataHelp6;
        /// Help text
        public DataColumn ColumnPersDataHelp7;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_label1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_label2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_label3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_label4_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_label5_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_label6_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_label7_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_help_1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_help_2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_help_3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_help_4_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_help_5_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_help_6_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_pers_data_help_7_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPersDataLabel1 = this.Columns["pt_pers_data_label1_c"];
            this.ColumnPersDataLabel2 = this.Columns["pt_pers_data_label2_c"];
            this.ColumnPersDataLabel3 = this.Columns["pt_pers_data_label3_c"];
            this.ColumnPersDataLabel4 = this.Columns["pt_pers_data_label4_c"];
            this.ColumnPersDataLabel5 = this.Columns["pt_pers_data_label5_c"];
            this.ColumnPersDataLabel6 = this.Columns["pt_pers_data_label6_c"];
            this.ColumnPersDataLabel7 = this.Columns["pt_pers_data_label7_c"];
            this.ColumnPersDataHelp1 = this.Columns["pt_pers_data_help_1_c"];
            this.ColumnPersDataHelp2 = this.Columns["pt_pers_data_help_2_c"];
            this.ColumnPersDataHelp3 = this.Columns["pt_pers_data_help_3_c"];
            this.ColumnPersDataHelp4 = this.Columns["pt_pers_data_help_4_c"];
            this.ColumnPersDataHelp5 = this.Columns["pt_pers_data_help_5_c"];
            this.ColumnPersDataHelp6 = this.Columns["pt_pers_data_help_6_c"];
            this.ColumnPersDataHelp7 = this.Columns["pt_pers_data_help_7_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
        }

        /// Access a typed row by index
        public PtPersonalDataLabelsRow this[int i]
        {
            get
            {
                return ((PtPersonalDataLabelsRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtPersonalDataLabelsRow NewRowTyped(bool AWithDefaultValues)
        {
            PtPersonalDataLabelsRow ret = ((PtPersonalDataLabelsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtPersonalDataLabelsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtPersonalDataLabelsRow(builder);
        }

        /// get typed set of changes
        public PtPersonalDataLabelsTable GetChangesTyped()
        {
            return ((PtPersonalDataLabelsTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtPersonalDataLabels";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_personal_data_labels";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataLabel1DBName()
        {
            return "pt_pers_data_label1_c";
        }

        /// get character length for column
        public static short GetPersDataLabel1Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataLabel2DBName()
        {
            return "pt_pers_data_label2_c";
        }

        /// get character length for column
        public static short GetPersDataLabel2Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataLabel3DBName()
        {
            return "pt_pers_data_label3_c";
        }

        /// get character length for column
        public static short GetPersDataLabel3Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataLabel4DBName()
        {
            return "pt_pers_data_label4_c";
        }

        /// get character length for column
        public static short GetPersDataLabel4Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataLabel5DBName()
        {
            return "pt_pers_data_label5_c";
        }

        /// get character length for column
        public static short GetPersDataLabel5Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataLabel6DBName()
        {
            return "pt_pers_data_label6_c";
        }

        /// get character length for column
        public static short GetPersDataLabel6Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataLabel7DBName()
        {
            return "pt_pers_data_label7_c";
        }

        /// get character length for column
        public static short GetPersDataLabel7Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataHelp1DBName()
        {
            return "pt_pers_data_help_1_c";
        }

        /// get character length for column
        public static short GetPersDataHelp1Length()
        {
            return 96;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataHelp2DBName()
        {
            return "pt_pers_data_help_2_c";
        }

        /// get character length for column
        public static short GetPersDataHelp2Length()
        {
            return 96;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataHelp3DBName()
        {
            return "pt_pers_data_help_3_c";
        }

        /// get character length for column
        public static short GetPersDataHelp3Length()
        {
            return 96;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataHelp4DBName()
        {
            return "pt_pers_data_help_4_c";
        }

        /// get character length for column
        public static short GetPersDataHelp4Length()
        {
            return 96;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataHelp5DBName()
        {
            return "pt_pers_data_help_5_c";
        }

        /// get character length for column
        public static short GetPersDataHelp5Length()
        {
            return 96;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataHelp6DBName()
        {
            return "pt_pers_data_help_6_c";
        }

        /// get character length for column
        public static short GetPersDataHelp6Length()
        {
            return 96;
        }

        /// get the name of the field in the database for this column
        public static string GetPersDataHelp7DBName()
        {
            return "pt_pers_data_help_7_c";
        }

        /// get character length for column
        public static short GetPersDataHelp7Length()
        {
            return 96;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the labels that are attached to the data fields in the Personal Data table.
    [Serializable()]
    public class PtPersonalDataLabelsRow : System.Data.DataRow
    {
        private PtPersonalDataLabelsTable myTable;

        /// Constructor
        public PtPersonalDataLabelsRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtPersonalDataLabelsTable)(this.Table));
        }

        /// Label for user defined data field-1.
        public String PersDataLabel1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataLabel1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataLabel1)
                            || (((String)(this[this.myTable.ColumnPersDataLabel1])) != value)))
                {
                    this[this.myTable.ColumnPersDataLabel1] = value;
                }
            }
        }

        /// Label for user defined data field-2.
        public String PersDataLabel2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataLabel2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataLabel2)
                            || (((String)(this[this.myTable.ColumnPersDataLabel2])) != value)))
                {
                    this[this.myTable.ColumnPersDataLabel2] = value;
                }
            }
        }

        /// Label for user defined data field-3.
        public String PersDataLabel3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataLabel3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataLabel3)
                            || (((String)(this[this.myTable.ColumnPersDataLabel3])) != value)))
                {
                    this[this.myTable.ColumnPersDataLabel3] = value;
                }
            }
        }

        /// Label for user defined data field-4.
        public String PersDataLabel4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataLabel4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataLabel4)
                            || (((String)(this[this.myTable.ColumnPersDataLabel4])) != value)))
                {
                    this[this.myTable.ColumnPersDataLabel4] = value;
                }
            }
        }

        /// Label for user defined data field-5.
        public String PersDataLabel5
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataLabel5.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataLabel5)
                            || (((String)(this[this.myTable.ColumnPersDataLabel5])) != value)))
                {
                    this[this.myTable.ColumnPersDataLabel5] = value;
                }
            }
        }

        /// Label for user defined data field-6.
        public String PersDataLabel6
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataLabel6.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataLabel6)
                            || (((String)(this[this.myTable.ColumnPersDataLabel6])) != value)))
                {
                    this[this.myTable.ColumnPersDataLabel6] = value;
                }
            }
        }

        /// Label for user defined data field-7.
        public String PersDataLabel7
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataLabel7.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataLabel7)
                            || (((String)(this[this.myTable.ColumnPersDataLabel7])) != value)))
                {
                    this[this.myTable.ColumnPersDataLabel7] = value;
                }
            }
        }

        /// Help text
        public String PersDataHelp1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataHelp1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataHelp1)
                            || (((String)(this[this.myTable.ColumnPersDataHelp1])) != value)))
                {
                    this[this.myTable.ColumnPersDataHelp1] = value;
                }
            }
        }

        /// Help text
        public String PersDataHelp2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataHelp2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataHelp2)
                            || (((String)(this[this.myTable.ColumnPersDataHelp2])) != value)))
                {
                    this[this.myTable.ColumnPersDataHelp2] = value;
                }
            }
        }

        /// Help text
        public String PersDataHelp3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataHelp3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataHelp3)
                            || (((String)(this[this.myTable.ColumnPersDataHelp3])) != value)))
                {
                    this[this.myTable.ColumnPersDataHelp3] = value;
                }
            }
        }

        /// Help text
        public String PersDataHelp4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataHelp4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataHelp4)
                            || (((String)(this[this.myTable.ColumnPersDataHelp4])) != value)))
                {
                    this[this.myTable.ColumnPersDataHelp4] = value;
                }
            }
        }

        /// Help text
        public String PersDataHelp5
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataHelp5.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataHelp5)
                            || (((String)(this[this.myTable.ColumnPersDataHelp5])) != value)))
                {
                    this[this.myTable.ColumnPersDataHelp5] = value;
                }
            }
        }

        /// Help text
        public String PersDataHelp6
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataHelp6.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataHelp6)
                            || (((String)(this[this.myTable.ColumnPersDataHelp6])) != value)))
                {
                    this[this.myTable.ColumnPersDataHelp6] = value;
                }
            }
        }

        /// Help text
        public String PersDataHelp7
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersDataHelp7.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersDataHelp7)
                            || (((String)(this[this.myTable.ColumnPersDataHelp7])) != value)))
                {
                    this[this.myTable.ColumnPersDataHelp7] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPersDataLabel1);
            this.SetNull(this.myTable.ColumnPersDataLabel2);
            this.SetNull(this.myTable.ColumnPersDataLabel3);
            this.SetNull(this.myTable.ColumnPersDataLabel4);
            this.SetNull(this.myTable.ColumnPersDataLabel5);
            this.SetNull(this.myTable.ColumnPersDataLabel6);
            this.SetNull(this.myTable.ColumnPersDataLabel7);
            this.SetNull(this.myTable.ColumnPersDataHelp1);
            this.SetNull(this.myTable.ColumnPersDataHelp2);
            this.SetNull(this.myTable.ColumnPersDataHelp3);
            this.SetNull(this.myTable.ColumnPersDataHelp4);
            this.SetNull(this.myTable.ColumnPersDataHelp5);
            this.SetNull(this.myTable.ColumnPersDataHelp6);
            this.SetNull(this.myTable.ColumnPersDataHelp7);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPersDataLabel1Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataLabel1);
        }

        /// assign NULL value
        public void SetPersDataLabel1Null()
        {
            this.SetNull(this.myTable.ColumnPersDataLabel1);
        }

        /// test for NULL value
        public bool IsPersDataLabel2Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataLabel2);
        }

        /// assign NULL value
        public void SetPersDataLabel2Null()
        {
            this.SetNull(this.myTable.ColumnPersDataLabel2);
        }

        /// test for NULL value
        public bool IsPersDataLabel3Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataLabel3);
        }

        /// assign NULL value
        public void SetPersDataLabel3Null()
        {
            this.SetNull(this.myTable.ColumnPersDataLabel3);
        }

        /// test for NULL value
        public bool IsPersDataLabel4Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataLabel4);
        }

        /// assign NULL value
        public void SetPersDataLabel4Null()
        {
            this.SetNull(this.myTable.ColumnPersDataLabel4);
        }

        /// test for NULL value
        public bool IsPersDataLabel5Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataLabel5);
        }

        /// assign NULL value
        public void SetPersDataLabel5Null()
        {
            this.SetNull(this.myTable.ColumnPersDataLabel5);
        }

        /// test for NULL value
        public bool IsPersDataLabel6Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataLabel6);
        }

        /// assign NULL value
        public void SetPersDataLabel6Null()
        {
            this.SetNull(this.myTable.ColumnPersDataLabel6);
        }

        /// test for NULL value
        public bool IsPersDataLabel7Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataLabel7);
        }

        /// assign NULL value
        public void SetPersDataLabel7Null()
        {
            this.SetNull(this.myTable.ColumnPersDataLabel7);
        }

        /// test for NULL value
        public bool IsPersDataHelp1Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataHelp1);
        }

        /// assign NULL value
        public void SetPersDataHelp1Null()
        {
            this.SetNull(this.myTable.ColumnPersDataHelp1);
        }

        /// test for NULL value
        public bool IsPersDataHelp2Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataHelp2);
        }

        /// assign NULL value
        public void SetPersDataHelp2Null()
        {
            this.SetNull(this.myTable.ColumnPersDataHelp2);
        }

        /// test for NULL value
        public bool IsPersDataHelp3Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataHelp3);
        }

        /// assign NULL value
        public void SetPersDataHelp3Null()
        {
            this.SetNull(this.myTable.ColumnPersDataHelp3);
        }

        /// test for NULL value
        public bool IsPersDataHelp4Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataHelp4);
        }

        /// assign NULL value
        public void SetPersDataHelp4Null()
        {
            this.SetNull(this.myTable.ColumnPersDataHelp4);
        }

        /// test for NULL value
        public bool IsPersDataHelp5Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataHelp5);
        }

        /// assign NULL value
        public void SetPersDataHelp5Null()
        {
            this.SetNull(this.myTable.ColumnPersDataHelp5);
        }

        /// test for NULL value
        public bool IsPersDataHelp6Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataHelp6);
        }

        /// assign NULL value
        public void SetPersDataHelp6Null()
        {
            this.SetNull(this.myTable.ColumnPersDataHelp6);
        }

        /// test for NULL value
        public bool IsPersDataHelp7Null()
        {
            return this.IsNull(this.myTable.ColumnPersDataHelp7);
        }

        /// assign NULL value
        public void SetPersDataHelp7Null()
        {
            this.SetNull(this.myTable.ColumnPersDataHelp7);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains personal data about our staff, eg. tax id.
    [Serializable()]
    public class PmPersonalDataTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 232;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnHeightCmId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnWeightKgId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnEyeColourId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnHairColourId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnFacialHairId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnPhysicalDescId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnBloodTypeId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnEthnicOriginId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnLifeQuestion1Id = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnLifeAnswer1Id = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnLifeQuestion2Id = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnLifeAnswer2Id = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnLifeQuestion3Id = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnLifeAnswer3Id = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnLifeQuestion4Id = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnLifeAnswer4Id = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonalFld1Id = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonalFld2Id = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonalFld3Id = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonalFld4Id = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonalFld5Id = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonalFld6Id = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnDrivingLicenseNumberId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnInternalDriverLicenseId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnGenDriverLicenseId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnDriverStatusId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnLanguageCodeId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 30;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 31;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 32;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersonalData", "pm_personal_data",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "HeightCm", "pm_height_cm_i", "Height", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(2, "WeightKg", "pm_weight_kg_n", "Weight", OdbcType.Decimal, 5, false),
                    new TTypedColumnInfo(3, "EyeColour", "pm_eye_colour_c", "Eye Colour", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(4, "HairColour", "pm_hair_colour_c", "Hair Colour", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(5, "FacialHair", "pm_facial_hair_c", "Facial Hair", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(6, "PhysicalDesc", "pm_physical_desc_c", "Physical Description", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(7, "BloodType", "pm_blood_type_c", "Blood Type", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "EthnicOrigin", "pm_ethnic_origin_c", "Ethnic Origin", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(9, "LifeQuestion1", "pm_life_question_1_c", "Proof of life question", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(10, "LifeAnswer1", "pm_life_answer_1_c", "Answer 1", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(11, "LifeQuestion2", "pm_life_question_2_c", "Proof of life question 2", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(12, "LifeAnswer2", "pm_life_answer_2_c", "Answer 2", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(13, "LifeQuestion3", "pm_life_question_3_c", "Proof of life question 3", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(14, "LifeAnswer3", "pm_life_answer_3_c", "Answer 3", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(15, "LifeQuestion4", "pm_life_question_4_c", "Proof of life question 4", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(16, "LifeAnswer4", "pm_life_answer_4_c", "Answer 4", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(17, "PersonalFld1", "pm_personal_fld1_c", "", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(18, "PersonalFld2", "pm_personal_fld2_c", "", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(19, "PersonalFld3", "pm_personal_fld3_c", "", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(20, "PersonalFld4", "pm_personal_fld4_c", "", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(21, "PersonalFld5", "pm_personal_fld5_c", "", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(22, "PersonalFld6", "pm_personal_fld6_c", "", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(23, "DrivingLicenseNumber", "pm_driving_license_number_c", "", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(24, "InternalDriverLicense", "pm_internal_driver_license_l", "Drive for us?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(25, "GenDriverLicense", "pm_gen_driver_license_l", "Licensed Driver ?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(26, "DriverStatus", "pm_driver_status_c", "Driver Status", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(27, "LanguageCode", "p_language_code_c", "Mother Tongue", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(28, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(29, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(30, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(31, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(32, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmPersonalDataTable() :
                base("PmPersonalData")
        {
        }

        /// constructor
        public PmPersonalDataTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersonalDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// The person's height in cm
        public DataColumn ColumnHeightCm;
        /// The person's weight in kg
        public DataColumn ColumnWeightKg;
        /// The person's eye colour
        public DataColumn ColumnEyeColour;
        /// The person's hair colour
        public DataColumn ColumnHairColour;
        /// Information about the person's facial hair, e.g. beard, mustache
        public DataColumn ColumnFacialHair;
        /// Further physical information about the person like tatoos, piercings, scars or marks
        public DataColumn ColumnPhysicalDesc;
        /// The person's blood type
        public DataColumn ColumnBloodType;
        /// Ethnic Origin
        public DataColumn ColumnEthnicOrigin;
        /// Proof of life question 1
        public DataColumn ColumnLifeQuestion1;
        /// Answer to proof of life question 1
        public DataColumn ColumnLifeAnswer1;
        /// Proof of life question 2
        public DataColumn ColumnLifeQuestion2;
        /// Answer to proof of life question 2
        public DataColumn ColumnLifeAnswer2;
        /// Proof of life question 3
        public DataColumn ColumnLifeQuestion3;
        /// Answer to proof of life question 3
        public DataColumn ColumnLifeAnswer3;
        /// Proof of life question 4
        public DataColumn ColumnLifeQuestion4;
        /// Answer to proof of life question 4
        public DataColumn ColumnLifeAnswer4;
        /// User defined field-1 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public DataColumn ColumnPersonalFld1;
        /// User defined field-2 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public DataColumn ColumnPersonalFld2;
        /// User defined field-3 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public DataColumn ColumnPersonalFld3;
        /// User defined field-4 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public DataColumn ColumnPersonalFld4;
        /// User defined field-5 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public DataColumn ColumnPersonalFld5;
        /// User defined field-6 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public DataColumn ColumnPersonalFld6;
        /// Driving Licence Number
        public DataColumn ColumnDrivingLicenseNumber;
        /// This field indicates if the person has approval to drive for us.
        public DataColumn ColumnInternalDriverLicense;
        /// This field indicates if the person is a licensed driver.
        public DataColumn ColumnGenDriverLicense;
        /// Indicates the level of driving ability.
        public DataColumn ColumnDriverStatus;
        /// Name of the person's first language.
        public DataColumn ColumnLanguageCode;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_height_cm_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_weight_kg_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("pm_eye_colour_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_hair_colour_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_facial_hair_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_physical_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_blood_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_ethnic_origin_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_life_question_1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_life_answer_1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_life_question_2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_life_answer_2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_life_question_3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_life_answer_3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_life_question_4_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_life_answer_4_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_personal_fld1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_personal_fld2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_personal_fld3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_personal_fld4_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_personal_fld5_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_personal_fld6_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_driving_license_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_internal_driver_license_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_gen_driver_license_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_driver_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnHeightCm = this.Columns["pm_height_cm_i"];
            this.ColumnWeightKg = this.Columns["pm_weight_kg_n"];
            this.ColumnEyeColour = this.Columns["pm_eye_colour_c"];
            this.ColumnHairColour = this.Columns["pm_hair_colour_c"];
            this.ColumnFacialHair = this.Columns["pm_facial_hair_c"];
            this.ColumnPhysicalDesc = this.Columns["pm_physical_desc_c"];
            this.ColumnBloodType = this.Columns["pm_blood_type_c"];
            this.ColumnEthnicOrigin = this.Columns["pm_ethnic_origin_c"];
            this.ColumnLifeQuestion1 = this.Columns["pm_life_question_1_c"];
            this.ColumnLifeAnswer1 = this.Columns["pm_life_answer_1_c"];
            this.ColumnLifeQuestion2 = this.Columns["pm_life_question_2_c"];
            this.ColumnLifeAnswer2 = this.Columns["pm_life_answer_2_c"];
            this.ColumnLifeQuestion3 = this.Columns["pm_life_question_3_c"];
            this.ColumnLifeAnswer3 = this.Columns["pm_life_answer_3_c"];
            this.ColumnLifeQuestion4 = this.Columns["pm_life_question_4_c"];
            this.ColumnLifeAnswer4 = this.Columns["pm_life_answer_4_c"];
            this.ColumnPersonalFld1 = this.Columns["pm_personal_fld1_c"];
            this.ColumnPersonalFld2 = this.Columns["pm_personal_fld2_c"];
            this.ColumnPersonalFld3 = this.Columns["pm_personal_fld3_c"];
            this.ColumnPersonalFld4 = this.Columns["pm_personal_fld4_c"];
            this.ColumnPersonalFld5 = this.Columns["pm_personal_fld5_c"];
            this.ColumnPersonalFld6 = this.Columns["pm_personal_fld6_c"];
            this.ColumnDrivingLicenseNumber = this.Columns["pm_driving_license_number_c"];
            this.ColumnInternalDriverLicense = this.Columns["pm_internal_driver_license_l"];
            this.ColumnGenDriverLicense = this.Columns["pm_gen_driver_license_l"];
            this.ColumnDriverStatus = this.Columns["pm_driver_status_c"];
            this.ColumnLanguageCode = this.Columns["p_language_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnPartnerKey};
        }

        /// Access a typed row by index
        public PmPersonalDataRow this[int i]
        {
            get
            {
                return ((PmPersonalDataRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersonalDataRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonalDataRow ret = ((PmPersonalDataRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersonalDataRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonalDataRow(builder);
        }

        /// get typed set of changes
        public PmPersonalDataTable GetChangesTyped()
        {
            return ((PmPersonalDataTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersonalData";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_personal_data";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetHeightCmDBName()
        {
            return "pm_height_cm_i";
        }

        /// get character length for column
        public static short GetHeightCmLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetWeightKgDBName()
        {
            return "pm_weight_kg_n";
        }

        /// get character length for column
        public static short GetWeightKgLength()
        {
            return 5;
        }

        /// get the name of the field in the database for this column
        public static string GetEyeColourDBName()
        {
            return "pm_eye_colour_c";
        }

        /// get character length for column
        public static short GetEyeColourLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetHairColourDBName()
        {
            return "pm_hair_colour_c";
        }

        /// get character length for column
        public static short GetHairColourLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetFacialHairDBName()
        {
            return "pm_facial_hair_c";
        }

        /// get character length for column
        public static short GetFacialHairLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetPhysicalDescDBName()
        {
            return "pm_physical_desc_c";
        }

        /// get character length for column
        public static short GetPhysicalDescLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetBloodTypeDBName()
        {
            return "pm_blood_type_c";
        }

        /// get character length for column
        public static short GetBloodTypeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetEthnicOriginDBName()
        {
            return "pm_ethnic_origin_c";
        }

        /// get character length for column
        public static short GetEthnicOriginLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetLifeQuestion1DBName()
        {
            return "pm_life_question_1_c";
        }

        /// get character length for column
        public static short GetLifeQuestion1Length()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetLifeAnswer1DBName()
        {
            return "pm_life_answer_1_c";
        }

        /// get character length for column
        public static short GetLifeAnswer1Length()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetLifeQuestion2DBName()
        {
            return "pm_life_question_2_c";
        }

        /// get character length for column
        public static short GetLifeQuestion2Length()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetLifeAnswer2DBName()
        {
            return "pm_life_answer_2_c";
        }

        /// get character length for column
        public static short GetLifeAnswer2Length()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetLifeQuestion3DBName()
        {
            return "pm_life_question_3_c";
        }

        /// get character length for column
        public static short GetLifeQuestion3Length()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetLifeAnswer3DBName()
        {
            return "pm_life_answer_3_c";
        }

        /// get character length for column
        public static short GetLifeAnswer3Length()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetLifeQuestion4DBName()
        {
            return "pm_life_question_4_c";
        }

        /// get character length for column
        public static short GetLifeQuestion4Length()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetLifeAnswer4DBName()
        {
            return "pm_life_answer_4_c";
        }

        /// get character length for column
        public static short GetLifeAnswer4Length()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetPersonalFld1DBName()
        {
            return "pm_personal_fld1_c";
        }

        /// get character length for column
        public static short GetPersonalFld1Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersonalFld2DBName()
        {
            return "pm_personal_fld2_c";
        }

        /// get character length for column
        public static short GetPersonalFld2Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersonalFld3DBName()
        {
            return "pm_personal_fld3_c";
        }

        /// get character length for column
        public static short GetPersonalFld3Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersonalFld4DBName()
        {
            return "pm_personal_fld4_c";
        }

        /// get character length for column
        public static short GetPersonalFld4Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersonalFld5DBName()
        {
            return "pm_personal_fld5_c";
        }

        /// get character length for column
        public static short GetPersonalFld5Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetPersonalFld6DBName()
        {
            return "pm_personal_fld6_c";
        }

        /// get character length for column
        public static short GetPersonalFld6Length()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetDrivingLicenseNumberDBName()
        {
            return "pm_driving_license_number_c";
        }

        /// get character length for column
        public static short GetDrivingLicenseNumberLength()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetInternalDriverLicenseDBName()
        {
            return "pm_internal_driver_license_l";
        }

        /// get character length for column
        public static short GetInternalDriverLicenseLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGenDriverLicenseDBName()
        {
            return "pm_gen_driver_license_l";
        }

        /// get character length for column
        public static short GetGenDriverLicenseLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDriverStatusDBName()
        {
            return "pm_driver_status_c";
        }

        /// get character length for column
        public static short GetDriverStatusLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "p_language_code_c";
        }

        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains personal data about our staff, eg. tax id.
    [Serializable()]
    public class PmPersonalDataRow : System.Data.DataRow
    {
        private PmPersonalDataTable myTable;

        /// Constructor
        public PmPersonalDataRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersonalDataTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// The person's height in cm
        public Int32 HeightCm
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeightCm.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeightCm)
                            || (((Int32)(this[this.myTable.ColumnHeightCm])) != value)))
                {
                    this[this.myTable.ColumnHeightCm] = value;
                }
            }
        }

        /// The person's weight in kg
        public Decimal WeightKg
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWeightKg.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWeightKg)
                            || (((Decimal)(this[this.myTable.ColumnWeightKg])) != value)))
                {
                    this[this.myTable.ColumnWeightKg] = value;
                }
            }
        }

        /// The person's eye colour
        public String EyeColour
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEyeColour.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEyeColour)
                            || (((String)(this[this.myTable.ColumnEyeColour])) != value)))
                {
                    this[this.myTable.ColumnEyeColour] = value;
                }
            }
        }

        /// The person's hair colour
        public String HairColour
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHairColour.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHairColour)
                            || (((String)(this[this.myTable.ColumnHairColour])) != value)))
                {
                    this[this.myTable.ColumnHairColour] = value;
                }
            }
        }

        /// Information about the person's facial hair, e.g. beard, mustache
        public String FacialHair
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFacialHair.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFacialHair)
                            || (((String)(this[this.myTable.ColumnFacialHair])) != value)))
                {
                    this[this.myTable.ColumnFacialHair] = value;
                }
            }
        }

        /// Further physical information about the person like tatoos, piercings, scars or marks
        public String PhysicalDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPhysicalDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPhysicalDesc)
                            || (((String)(this[this.myTable.ColumnPhysicalDesc])) != value)))
                {
                    this[this.myTable.ColumnPhysicalDesc] = value;
                }
            }
        }

        /// The person's blood type
        public String BloodType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBloodType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBloodType)
                            || (((String)(this[this.myTable.ColumnBloodType])) != value)))
                {
                    this[this.myTable.ColumnBloodType] = value;
                }
            }
        }

        /// Ethnic Origin
        public String EthnicOrigin
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEthnicOrigin.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEthnicOrigin)
                            || (((String)(this[this.myTable.ColumnEthnicOrigin])) != value)))
                {
                    this[this.myTable.ColumnEthnicOrigin] = value;
                }
            }
        }

        /// Proof of life question 1
        public String LifeQuestion1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLifeQuestion1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLifeQuestion1)
                            || (((String)(this[this.myTable.ColumnLifeQuestion1])) != value)))
                {
                    this[this.myTable.ColumnLifeQuestion1] = value;
                }
            }
        }

        /// Answer to proof of life question 1
        public String LifeAnswer1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLifeAnswer1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLifeAnswer1)
                            || (((String)(this[this.myTable.ColumnLifeAnswer1])) != value)))
                {
                    this[this.myTable.ColumnLifeAnswer1] = value;
                }
            }
        }

        /// Proof of life question 2
        public String LifeQuestion2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLifeQuestion2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLifeQuestion2)
                            || (((String)(this[this.myTable.ColumnLifeQuestion2])) != value)))
                {
                    this[this.myTable.ColumnLifeQuestion2] = value;
                }
            }
        }

        /// Answer to proof of life question 2
        public String LifeAnswer2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLifeAnswer2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLifeAnswer2)
                            || (((String)(this[this.myTable.ColumnLifeAnswer2])) != value)))
                {
                    this[this.myTable.ColumnLifeAnswer2] = value;
                }
            }
        }

        /// Proof of life question 3
        public String LifeQuestion3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLifeQuestion3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLifeQuestion3)
                            || (((String)(this[this.myTable.ColumnLifeQuestion3])) != value)))
                {
                    this[this.myTable.ColumnLifeQuestion3] = value;
                }
            }
        }

        /// Answer to proof of life question 3
        public String LifeAnswer3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLifeAnswer3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLifeAnswer3)
                            || (((String)(this[this.myTable.ColumnLifeAnswer3])) != value)))
                {
                    this[this.myTable.ColumnLifeAnswer3] = value;
                }
            }
        }

        /// Proof of life question 4
        public String LifeQuestion4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLifeQuestion4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLifeQuestion4)
                            || (((String)(this[this.myTable.ColumnLifeQuestion4])) != value)))
                {
                    this[this.myTable.ColumnLifeQuestion4] = value;
                }
            }
        }

        /// Answer to proof of life question 4
        public String LifeAnswer4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLifeAnswer4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLifeAnswer4)
                            || (((String)(this[this.myTable.ColumnLifeAnswer4])) != value)))
                {
                    this[this.myTable.ColumnLifeAnswer4] = value;
                }
            }
        }

        /// User defined field-1 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public String PersonalFld1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonalFld1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonalFld1)
                            || (((String)(this[this.myTable.ColumnPersonalFld1])) != value)))
                {
                    this[this.myTable.ColumnPersonalFld1] = value;
                }
            }
        }

        /// User defined field-2 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public String PersonalFld2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonalFld2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonalFld2)
                            || (((String)(this[this.myTable.ColumnPersonalFld2])) != value)))
                {
                    this[this.myTable.ColumnPersonalFld2] = value;
                }
            }
        }

        /// User defined field-3 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public String PersonalFld3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonalFld3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonalFld3)
                            || (((String)(this[this.myTable.ColumnPersonalFld3])) != value)))
                {
                    this[this.myTable.ColumnPersonalFld3] = value;
                }
            }
        }

        /// User defined field-4 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public String PersonalFld4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonalFld4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonalFld4)
                            || (((String)(this[this.myTable.ColumnPersonalFld4])) != value)))
                {
                    this[this.myTable.ColumnPersonalFld4] = value;
                }
            }
        }

        /// User defined field-5 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public String PersonalFld5
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonalFld5.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonalFld5)
                            || (((String)(this[this.myTable.ColumnPersonalFld5])) != value)))
                {
                    this[this.myTable.ColumnPersonalFld5] = value;
                }
            }
        }

        /// User defined field-6 for personal information (not in use any longer, replaced by p_data_label_value_partner)
        public String PersonalFld6
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonalFld6.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonalFld6)
                            || (((String)(this[this.myTable.ColumnPersonalFld6])) != value)))
                {
                    this[this.myTable.ColumnPersonalFld6] = value;
                }
            }
        }

        /// Driving Licence Number
        public String DrivingLicenseNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDrivingLicenseNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDrivingLicenseNumber)
                            || (((String)(this[this.myTable.ColumnDrivingLicenseNumber])) != value)))
                {
                    this[this.myTable.ColumnDrivingLicenseNumber] = value;
                }
            }
        }

        /// This field indicates if the person has approval to drive for us.
        public Boolean InternalDriverLicense
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInternalDriverLicense.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInternalDriverLicense)
                            || (((Boolean)(this[this.myTable.ColumnInternalDriverLicense])) != value)))
                {
                    this[this.myTable.ColumnInternalDriverLicense] = value;
                }
            }
        }

        /// This field indicates if the person is a licensed driver.
        public Boolean GenDriverLicense
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGenDriverLicense.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGenDriverLicense)
                            || (((Boolean)(this[this.myTable.ColumnGenDriverLicense])) != value)))
                {
                    this[this.myTable.ColumnGenDriverLicense] = value;
                }
            }
        }

        /// Indicates the level of driving ability.
        public String DriverStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDriverStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDriverStatus)
                            || (((String)(this[this.myTable.ColumnDriverStatus])) != value)))
                {
                    this[this.myTable.ColumnDriverStatus] = value;
                }
            }
        }

        /// Name of the person's first language.
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode)
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnHeightCm);
            this.SetNull(this.myTable.ColumnWeightKg);
            this.SetNull(this.myTable.ColumnEyeColour);
            this.SetNull(this.myTable.ColumnHairColour);
            this.SetNull(this.myTable.ColumnFacialHair);
            this.SetNull(this.myTable.ColumnPhysicalDesc);
            this.SetNull(this.myTable.ColumnBloodType);
            this.SetNull(this.myTable.ColumnEthnicOrigin);
            this.SetNull(this.myTable.ColumnLifeQuestion1);
            this.SetNull(this.myTable.ColumnLifeAnswer1);
            this.SetNull(this.myTable.ColumnLifeQuestion2);
            this.SetNull(this.myTable.ColumnLifeAnswer2);
            this.SetNull(this.myTable.ColumnLifeQuestion3);
            this.SetNull(this.myTable.ColumnLifeAnswer3);
            this.SetNull(this.myTable.ColumnLifeQuestion4);
            this.SetNull(this.myTable.ColumnLifeAnswer4);
            this.SetNull(this.myTable.ColumnPersonalFld1);
            this.SetNull(this.myTable.ColumnPersonalFld2);
            this.SetNull(this.myTable.ColumnPersonalFld3);
            this.SetNull(this.myTable.ColumnPersonalFld4);
            this.SetNull(this.myTable.ColumnPersonalFld5);
            this.SetNull(this.myTable.ColumnPersonalFld6);
            this.SetNull(this.myTable.ColumnDrivingLicenseNumber);
            this[this.myTable.ColumnInternalDriverLicense.Ordinal] = false;
            this[this.myTable.ColumnGenDriverLicense.Ordinal] = false;
            this.SetNull(this.myTable.ColumnDriverStatus);
            this.SetNull(this.myTable.ColumnLanguageCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsHeightCmNull()
        {
            return this.IsNull(this.myTable.ColumnHeightCm);
        }

        /// assign NULL value
        public void SetHeightCmNull()
        {
            this.SetNull(this.myTable.ColumnHeightCm);
        }

        /// test for NULL value
        public bool IsWeightKgNull()
        {
            return this.IsNull(this.myTable.ColumnWeightKg);
        }

        /// assign NULL value
        public void SetWeightKgNull()
        {
            this.SetNull(this.myTable.ColumnWeightKg);
        }

        /// test for NULL value
        public bool IsEyeColourNull()
        {
            return this.IsNull(this.myTable.ColumnEyeColour);
        }

        /// assign NULL value
        public void SetEyeColourNull()
        {
            this.SetNull(this.myTable.ColumnEyeColour);
        }

        /// test for NULL value
        public bool IsHairColourNull()
        {
            return this.IsNull(this.myTable.ColumnHairColour);
        }

        /// assign NULL value
        public void SetHairColourNull()
        {
            this.SetNull(this.myTable.ColumnHairColour);
        }

        /// test for NULL value
        public bool IsFacialHairNull()
        {
            return this.IsNull(this.myTable.ColumnFacialHair);
        }

        /// assign NULL value
        public void SetFacialHairNull()
        {
            this.SetNull(this.myTable.ColumnFacialHair);
        }

        /// test for NULL value
        public bool IsPhysicalDescNull()
        {
            return this.IsNull(this.myTable.ColumnPhysicalDesc);
        }

        /// assign NULL value
        public void SetPhysicalDescNull()
        {
            this.SetNull(this.myTable.ColumnPhysicalDesc);
        }

        /// test for NULL value
        public bool IsBloodTypeNull()
        {
            return this.IsNull(this.myTable.ColumnBloodType);
        }

        /// assign NULL value
        public void SetBloodTypeNull()
        {
            this.SetNull(this.myTable.ColumnBloodType);
        }

        /// test for NULL value
        public bool IsEthnicOriginNull()
        {
            return this.IsNull(this.myTable.ColumnEthnicOrigin);
        }

        /// assign NULL value
        public void SetEthnicOriginNull()
        {
            this.SetNull(this.myTable.ColumnEthnicOrigin);
        }

        /// test for NULL value
        public bool IsLifeQuestion1Null()
        {
            return this.IsNull(this.myTable.ColumnLifeQuestion1);
        }

        /// assign NULL value
        public void SetLifeQuestion1Null()
        {
            this.SetNull(this.myTable.ColumnLifeQuestion1);
        }

        /// test for NULL value
        public bool IsLifeAnswer1Null()
        {
            return this.IsNull(this.myTable.ColumnLifeAnswer1);
        }

        /// assign NULL value
        public void SetLifeAnswer1Null()
        {
            this.SetNull(this.myTable.ColumnLifeAnswer1);
        }

        /// test for NULL value
        public bool IsLifeQuestion2Null()
        {
            return this.IsNull(this.myTable.ColumnLifeQuestion2);
        }

        /// assign NULL value
        public void SetLifeQuestion2Null()
        {
            this.SetNull(this.myTable.ColumnLifeQuestion2);
        }

        /// test for NULL value
        public bool IsLifeAnswer2Null()
        {
            return this.IsNull(this.myTable.ColumnLifeAnswer2);
        }

        /// assign NULL value
        public void SetLifeAnswer2Null()
        {
            this.SetNull(this.myTable.ColumnLifeAnswer2);
        }

        /// test for NULL value
        public bool IsLifeQuestion3Null()
        {
            return this.IsNull(this.myTable.ColumnLifeQuestion3);
        }

        /// assign NULL value
        public void SetLifeQuestion3Null()
        {
            this.SetNull(this.myTable.ColumnLifeQuestion3);
        }

        /// test for NULL value
        public bool IsLifeAnswer3Null()
        {
            return this.IsNull(this.myTable.ColumnLifeAnswer3);
        }

        /// assign NULL value
        public void SetLifeAnswer3Null()
        {
            this.SetNull(this.myTable.ColumnLifeAnswer3);
        }

        /// test for NULL value
        public bool IsLifeQuestion4Null()
        {
            return this.IsNull(this.myTable.ColumnLifeQuestion4);
        }

        /// assign NULL value
        public void SetLifeQuestion4Null()
        {
            this.SetNull(this.myTable.ColumnLifeQuestion4);
        }

        /// test for NULL value
        public bool IsLifeAnswer4Null()
        {
            return this.IsNull(this.myTable.ColumnLifeAnswer4);
        }

        /// assign NULL value
        public void SetLifeAnswer4Null()
        {
            this.SetNull(this.myTable.ColumnLifeAnswer4);
        }

        /// test for NULL value
        public bool IsPersonalFld1Null()
        {
            return this.IsNull(this.myTable.ColumnPersonalFld1);
        }

        /// assign NULL value
        public void SetPersonalFld1Null()
        {
            this.SetNull(this.myTable.ColumnPersonalFld1);
        }

        /// test for NULL value
        public bool IsPersonalFld2Null()
        {
            return this.IsNull(this.myTable.ColumnPersonalFld2);
        }

        /// assign NULL value
        public void SetPersonalFld2Null()
        {
            this.SetNull(this.myTable.ColumnPersonalFld2);
        }

        /// test for NULL value
        public bool IsPersonalFld3Null()
        {
            return this.IsNull(this.myTable.ColumnPersonalFld3);
        }

        /// assign NULL value
        public void SetPersonalFld3Null()
        {
            this.SetNull(this.myTable.ColumnPersonalFld3);
        }

        /// test for NULL value
        public bool IsPersonalFld4Null()
        {
            return this.IsNull(this.myTable.ColumnPersonalFld4);
        }

        /// assign NULL value
        public void SetPersonalFld4Null()
        {
            this.SetNull(this.myTable.ColumnPersonalFld4);
        }

        /// test for NULL value
        public bool IsPersonalFld5Null()
        {
            return this.IsNull(this.myTable.ColumnPersonalFld5);
        }

        /// assign NULL value
        public void SetPersonalFld5Null()
        {
            this.SetNull(this.myTable.ColumnPersonalFld5);
        }

        /// test for NULL value
        public bool IsPersonalFld6Null()
        {
            return this.IsNull(this.myTable.ColumnPersonalFld6);
        }

        /// assign NULL value
        public void SetPersonalFld6Null()
        {
            this.SetNull(this.myTable.ColumnPersonalFld6);
        }

        /// test for NULL value
        public bool IsDrivingLicenseNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDrivingLicenseNumber);
        }

        /// assign NULL value
        public void SetDrivingLicenseNumberNull()
        {
            this.SetNull(this.myTable.ColumnDrivingLicenseNumber);
        }

        /// test for NULL value
        public bool IsInternalDriverLicenseNull()
        {
            return this.IsNull(this.myTable.ColumnInternalDriverLicense);
        }

        /// assign NULL value
        public void SetInternalDriverLicenseNull()
        {
            this.SetNull(this.myTable.ColumnInternalDriverLicense);
        }

        /// test for NULL value
        public bool IsGenDriverLicenseNull()
        {
            return this.IsNull(this.myTable.ColumnGenDriverLicense);
        }

        /// assign NULL value
        public void SetGenDriverLicenseNull()
        {
            this.SetNull(this.myTable.ColumnGenDriverLicense);
        }

        /// test for NULL value
        public bool IsDriverStatusNull()
        {
            return this.IsNull(this.myTable.ColumnDriverStatus);
        }

        /// assign NULL value
        public void SetDriverStatusNull()
        {
            this.SetNull(this.myTable.ColumnDriverStatus);
        }

        /// test for NULL value
        public bool IsLanguageCodeNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageCode);
        }

        /// assign NULL value
        public void SetLanguageCodeNull()
        {
            this.SetNull(this.myTable.ColumnLanguageCode);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains the data labels that will be used in the office specific data screen.
    [Serializable()]
    public class PtOfficeSpecificDataLabelsTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 233;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel1Id = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel2Id = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel3Id = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel4Id = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel5Id = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel6Id = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel7Id = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel8Id = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel9Id = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnOffSpecificLabel10Id = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 14;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtOfficeSpecificDataLabels", "pt_office_specific_data_labels",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "OffSpecificLabel1", "pt_off_specific_label1_c", "Label-1", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(1, "OffSpecificLabel2", "pt_off_specific_label2_c", "Label-2", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(2, "OffSpecificLabel3", "pt_off_specific_label3_c", "Label-3", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(3, "OffSpecificLabel4", "pt_off_specific_label4_c", "Label-4", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(4, "OffSpecificLabel5", "pt_off_specific_label5_c", "Label-5", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(5, "OffSpecificLabel6", "pt_off_specific_label6_c", "Label-6", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(6, "OffSpecificLabel7", "pt_off_specific_label7_c", "Label-7", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(7, "OffSpecificLabel8", "pt_off_specific_label8_c", "Label-8", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(8, "OffSpecificLabel9", "pt_off_specific_label9_c", "Label-9", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(9, "OffSpecificLabel10", "pt_off_specific_label10_c", "Label-10", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(10, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                }));
            return true;
        }

        /// constructor
        public PtOfficeSpecificDataLabelsTable() :
                base("PtOfficeSpecificDataLabels")
        {
        }

        /// constructor
        public PtOfficeSpecificDataLabelsTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtOfficeSpecificDataLabelsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Label for user defined data field-1.
        public DataColumn ColumnOffSpecificLabel1;
        /// Label for user defined data field-2.
        public DataColumn ColumnOffSpecificLabel2;
        /// Label for user defined data field-3.
        public DataColumn ColumnOffSpecificLabel3;
        /// Label for user defined data field-4.
        public DataColumn ColumnOffSpecificLabel4;
        /// Label for user defined data field-5.
        public DataColumn ColumnOffSpecificLabel5;
        /// Label for user defined data field-6.
        public DataColumn ColumnOffSpecificLabel6;
        /// Label for user defined data field-7.
        public DataColumn ColumnOffSpecificLabel7;
        /// Label for user defined data field-8.
        public DataColumn ColumnOffSpecificLabel8;
        /// Label for user defined data field-9.
        public DataColumn ColumnOffSpecificLabel9;
        /// Label for user defined data field-10.
        public DataColumn ColumnOffSpecificLabel10;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label1_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label4_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label5_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label6_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label7_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label8_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label9_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_off_specific_label10_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnOffSpecificLabel1 = this.Columns["pt_off_specific_label1_c"];
            this.ColumnOffSpecificLabel2 = this.Columns["pt_off_specific_label2_c"];
            this.ColumnOffSpecificLabel3 = this.Columns["pt_off_specific_label3_c"];
            this.ColumnOffSpecificLabel4 = this.Columns["pt_off_specific_label4_c"];
            this.ColumnOffSpecificLabel5 = this.Columns["pt_off_specific_label5_c"];
            this.ColumnOffSpecificLabel6 = this.Columns["pt_off_specific_label6_c"];
            this.ColumnOffSpecificLabel7 = this.Columns["pt_off_specific_label7_c"];
            this.ColumnOffSpecificLabel8 = this.Columns["pt_off_specific_label8_c"];
            this.ColumnOffSpecificLabel9 = this.Columns["pt_off_specific_label9_c"];
            this.ColumnOffSpecificLabel10 = this.Columns["pt_off_specific_label10_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
        }

        /// Access a typed row by index
        public PtOfficeSpecificDataLabelsRow this[int i]
        {
            get
            {
                return ((PtOfficeSpecificDataLabelsRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtOfficeSpecificDataLabelsRow NewRowTyped(bool AWithDefaultValues)
        {
            PtOfficeSpecificDataLabelsRow ret = ((PtOfficeSpecificDataLabelsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtOfficeSpecificDataLabelsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtOfficeSpecificDataLabelsRow(builder);
        }

        /// get typed set of changes
        public PtOfficeSpecificDataLabelsTable GetChangesTyped()
        {
            return ((PtOfficeSpecificDataLabelsTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtOfficeSpecificDataLabels";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_office_specific_data_labels";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel1DBName()
        {
            return "pt_off_specific_label1_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel1Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel2DBName()
        {
            return "pt_off_specific_label2_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel2Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel3DBName()
        {
            return "pt_off_specific_label3_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel3Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel4DBName()
        {
            return "pt_off_specific_label4_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel4Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel5DBName()
        {
            return "pt_off_specific_label5_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel5Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel6DBName()
        {
            return "pt_off_specific_label6_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel6Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel7DBName()
        {
            return "pt_off_specific_label7_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel7Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel8DBName()
        {
            return "pt_off_specific_label8_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel8Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel9DBName()
        {
            return "pt_off_specific_label9_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel9Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetOffSpecificLabel10DBName()
        {
            return "pt_off_specific_label10_c";
        }

        /// get character length for column
        public static short GetOffSpecificLabel10Length()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains the data labels that will be used in the office specific data screen.
    [Serializable()]
    public class PtOfficeSpecificDataLabelsRow : System.Data.DataRow
    {
        private PtOfficeSpecificDataLabelsTable myTable;

        /// Constructor
        public PtOfficeSpecificDataLabelsRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtOfficeSpecificDataLabelsTable)(this.Table));
        }

        /// Label for user defined data field-1.
        public String OffSpecificLabel1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel1)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel1])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel1] = value;
                }
            }
        }

        /// Label for user defined data field-2.
        public String OffSpecificLabel2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel2)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel2])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel2] = value;
                }
            }
        }

        /// Label for user defined data field-3.
        public String OffSpecificLabel3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel3)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel3])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel3] = value;
                }
            }
        }

        /// Label for user defined data field-4.
        public String OffSpecificLabel4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel4)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel4])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel4] = value;
                }
            }
        }

        /// Label for user defined data field-5.
        public String OffSpecificLabel5
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel5.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel5)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel5])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel5] = value;
                }
            }
        }

        /// Label for user defined data field-6.
        public String OffSpecificLabel6
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel6.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel6)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel6])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel6] = value;
                }
            }
        }

        /// Label for user defined data field-7.
        public String OffSpecificLabel7
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel7.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel7)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel7])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel7] = value;
                }
            }
        }

        /// Label for user defined data field-8.
        public String OffSpecificLabel8
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel8.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel8)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel8])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel8] = value;
                }
            }
        }

        /// Label for user defined data field-9.
        public String OffSpecificLabel9
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel9.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel9)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel9])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel9] = value;
                }
            }
        }

        /// Label for user defined data field-10.
        public String OffSpecificLabel10
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOffSpecificLabel10.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOffSpecificLabel10)
                            || (((String)(this[this.myTable.ColumnOffSpecificLabel10])) != value)))
                {
                    this[this.myTable.ColumnOffSpecificLabel10] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel1);
            this.SetNull(this.myTable.ColumnOffSpecificLabel2);
            this.SetNull(this.myTable.ColumnOffSpecificLabel3);
            this.SetNull(this.myTable.ColumnOffSpecificLabel4);
            this.SetNull(this.myTable.ColumnOffSpecificLabel5);
            this.SetNull(this.myTable.ColumnOffSpecificLabel6);
            this.SetNull(this.myTable.ColumnOffSpecificLabel7);
            this.SetNull(this.myTable.ColumnOffSpecificLabel8);
            this.SetNull(this.myTable.ColumnOffSpecificLabel9);
            this.SetNull(this.myTable.ColumnOffSpecificLabel10);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel1Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel1);
        }

        /// assign NULL value
        public void SetOffSpecificLabel1Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel1);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel2Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel2);
        }

        /// assign NULL value
        public void SetOffSpecificLabel2Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel2);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel3Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel3);
        }

        /// assign NULL value
        public void SetOffSpecificLabel3Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel3);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel4Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel4);
        }

        /// assign NULL value
        public void SetOffSpecificLabel4Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel4);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel5Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel5);
        }

        /// assign NULL value
        public void SetOffSpecificLabel5Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel5);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel6Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel6);
        }

        /// assign NULL value
        public void SetOffSpecificLabel6Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel6);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel7Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel7);
        }

        /// assign NULL value
        public void SetOffSpecificLabel7Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel7);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel8Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel8);
        }

        /// assign NULL value
        public void SetOffSpecificLabel8Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel8);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel9Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel9);
        }

        /// assign NULL value
        public void SetOffSpecificLabel9Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel9);
        }

        /// test for NULL value
        public bool IsOffSpecificLabel10Null()
        {
            return this.IsNull(this.myTable.ColumnOffSpecificLabel10);
        }

        /// assign NULL value
        public void SetOffSpecificLabel10Null()
        {
            this.SetNull(this.myTable.ColumnOffSpecificLabel10);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table is a 'free-form' table for each office to use as needed.
    [Serializable()]
    public class PmPersOfficeSpecificDataTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 234;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld1Id = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld2Id = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld3Id = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld4Id = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld5Id = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld6Id = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld7Id = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld8Id = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld9Id = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersOfficeSpecificFld10Id = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 15;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersOfficeSpecificData", "pm_pers_office_specific_data",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "PersOfficeSpecificFld1", "pm_pers_office_specific_fld1", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(2, "PersOfficeSpecificFld2", "pm_pers_office_specific_fld2", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(3, "PersOfficeSpecificFld3", "pm_pers_office_specific_fld3", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(4, "PersOfficeSpecificFld4", "pm_pers_office_specific_fld4", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(5, "PersOfficeSpecificFld5", "pm_pers_office_specific_fld5", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(6, "PersOfficeSpecificFld6", "pm_pers_office_specific_fld6", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(7, "PersOfficeSpecificFld7", "pm_pers_office_specific_fld7", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(8, "PersOfficeSpecificFld8", "pm_pers_office_specific_fld8", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(9, "PersOfficeSpecificFld9", "pm_pers_office_specific_fld9", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(10, "PersOfficeSpecificFld10", "pm_pers_office_specific_fld10", "", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(11, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(15, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmPersOfficeSpecificDataTable() :
                base("PmPersOfficeSpecificData")
        {
        }

        /// constructor
        public PmPersOfficeSpecificDataTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersOfficeSpecificDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// User defined field-1 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld1;
        /// User defined field-2 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld2;
        /// User defined field-3 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld3;
        /// User defined field-4 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld4;
        /// User defined field-5 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld5;
        /// User defined field-6 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld6;
        /// User defined field-7 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld7;
        /// User defined field-8 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld8;
        /// User defined field-9 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld9;
        /// User defined field-10 for office specific information.
        public DataColumn ColumnPersOfficeSpecificFld10;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld1", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld2", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld3", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld4", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld5", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld6", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld7", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld8", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld9", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_pers_office_specific_fld10", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnPersOfficeSpecificFld1 = this.Columns["pm_pers_office_specific_fld1"];
            this.ColumnPersOfficeSpecificFld2 = this.Columns["pm_pers_office_specific_fld2"];
            this.ColumnPersOfficeSpecificFld3 = this.Columns["pm_pers_office_specific_fld3"];
            this.ColumnPersOfficeSpecificFld4 = this.Columns["pm_pers_office_specific_fld4"];
            this.ColumnPersOfficeSpecificFld5 = this.Columns["pm_pers_office_specific_fld5"];
            this.ColumnPersOfficeSpecificFld6 = this.Columns["pm_pers_office_specific_fld6"];
            this.ColumnPersOfficeSpecificFld7 = this.Columns["pm_pers_office_specific_fld7"];
            this.ColumnPersOfficeSpecificFld8 = this.Columns["pm_pers_office_specific_fld8"];
            this.ColumnPersOfficeSpecificFld9 = this.Columns["pm_pers_office_specific_fld9"];
            this.ColumnPersOfficeSpecificFld10 = this.Columns["pm_pers_office_specific_fld10"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnPartnerKey};
        }

        /// Access a typed row by index
        public PmPersOfficeSpecificDataRow this[int i]
        {
            get
            {
                return ((PmPersOfficeSpecificDataRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersOfficeSpecificDataRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersOfficeSpecificDataRow ret = ((PmPersOfficeSpecificDataRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersOfficeSpecificDataRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersOfficeSpecificDataRow(builder);
        }

        /// get typed set of changes
        public PmPersOfficeSpecificDataTable GetChangesTyped()
        {
            return ((PmPersOfficeSpecificDataTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersOfficeSpecificData";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_pers_office_specific_data";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld1DBName()
        {
            return "pm_pers_office_specific_fld1";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld1Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld2DBName()
        {
            return "pm_pers_office_specific_fld2";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld2Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld3DBName()
        {
            return "pm_pers_office_specific_fld3";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld3Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld4DBName()
        {
            return "pm_pers_office_specific_fld4";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld4Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld5DBName()
        {
            return "pm_pers_office_specific_fld5";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld5Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld6DBName()
        {
            return "pm_pers_office_specific_fld6";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld6Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld7DBName()
        {
            return "pm_pers_office_specific_fld7";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld7Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld8DBName()
        {
            return "pm_pers_office_specific_fld8";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld8Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld9DBName()
        {
            return "pm_pers_office_specific_fld9";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld9Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetPersOfficeSpecificFld10DBName()
        {
            return "pm_pers_office_specific_fld10";
        }

        /// get character length for column
        public static short GetPersOfficeSpecificFld10Length()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table is a 'free-form' table for each office to use as needed.
    [Serializable()]
    public class PmPersOfficeSpecificDataRow : System.Data.DataRow
    {
        private PmPersOfficeSpecificDataTable myTable;

        /// Constructor
        public PmPersOfficeSpecificDataRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersOfficeSpecificDataTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// User defined field-1 for office specific information.
        public String PersOfficeSpecificFld1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld1)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld1])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld1] = value;
                }
            }
        }

        /// User defined field-2 for office specific information.
        public String PersOfficeSpecificFld2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld2)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld2])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld2] = value;
                }
            }
        }

        /// User defined field-3 for office specific information.
        public String PersOfficeSpecificFld3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld3)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld3])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld3] = value;
                }
            }
        }

        /// User defined field-4 for office specific information.
        public String PersOfficeSpecificFld4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld4)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld4])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld4] = value;
                }
            }
        }

        /// User defined field-5 for office specific information.
        public String PersOfficeSpecificFld5
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld5.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld5)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld5])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld5] = value;
                }
            }
        }

        /// User defined field-6 for office specific information.
        public String PersOfficeSpecificFld6
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld6.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld6)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld6])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld6] = value;
                }
            }
        }

        /// User defined field-7 for office specific information.
        public String PersOfficeSpecificFld7
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld7.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld7)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld7])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld7] = value;
                }
            }
        }

        /// User defined field-8 for office specific information.
        public String PersOfficeSpecificFld8
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld8.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld8)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld8])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld8] = value;
                }
            }
        }

        /// User defined field-9 for office specific information.
        public String PersOfficeSpecificFld9
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld9.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld9)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld9])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld9] = value;
                }
            }
        }

        /// User defined field-10 for office specific information.
        public String PersOfficeSpecificFld10
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersOfficeSpecificFld10.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersOfficeSpecificFld10)
                            || (((String)(this[this.myTable.ColumnPersOfficeSpecificFld10])) != value)))
                {
                    this[this.myTable.ColumnPersOfficeSpecificFld10] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld1);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld2);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld3);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld4);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld5);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld6);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld7);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld8);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld9);
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld10);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld1Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld1);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld1Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld1);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld2Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld2);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld2Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld2);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld3Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld3);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld3Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld3);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld4Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld4);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld4Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld4);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld5Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld5);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld5Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld5);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld6Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld6);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld6Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld6);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld7Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld7);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld7Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld7);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld8Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld8);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld8Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld8);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld9Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld9);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld9Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld9);
        }

        /// test for NULL value
        public bool IsPersOfficeSpecificFld10Null()
        {
            return this.IsNull(this.myTable.ColumnPersOfficeSpecificFld10);
        }

        /// assign NULL value
        public void SetPersOfficeSpecificFld10Null()
        {
            this.SetNull(this.myTable.ColumnPersOfficeSpecificFld10);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table holds the label values for application related data.
    [Serializable()]
    public class PDataLabelValueApplicationTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 238;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnApplicationKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDataLabelKeyId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnValueCharId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnValueNumId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnValueCurrencyId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnValueIntId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnValueBoolId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnValueDateId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnValueTimeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnValuePartnerKeyId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnValueLookupId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 17;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PDataLabelValueApplication", "p_data_label_value_application",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "ApplicationKey", "pm_application_key_i", "Application Key", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(2, "RegistrationOffice", "pm_registration_office_n", "Registration Office", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "DataLabelKey", "p_data_label_key_i", "p_data_label_key_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "ValueChar", "p_value_char_c", "Value", OdbcType.VarChar, 8192, false),
                    new TTypedColumnInfo(5, "ValueNum", "p_value_num_n", "Value", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(6, "ValueCurrency", "p_value_currency_n", "Value", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(7, "ValueInt", "p_value_int_i", "Value", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(8, "ValueBool", "p_value_bool_l", "Value", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(9, "ValueDate", "p_value_date_d", "Value", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "ValueTime", "p_value_time_i", "Value", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(11, "ValuePartnerKey", "p_value_partner_key_n", "Value", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(12, "ValueLookup", "p_value_lookup_c", "Value", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(13, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(15, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(16, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(17, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3
                }));
            return true;
        }

        /// constructor
        public PDataLabelValueApplicationTable() :
                base("PDataLabelValueApplication")
        {
        }

        /// constructor
        public PDataLabelValueApplicationTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PDataLabelValueApplicationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Key to uniquely identify application
        public DataColumn ColumnApplicationKey;
        /// Partner key of office by which application was entered.
        public DataColumn ColumnRegistrationOffice;
        /// A sequence key for data labels.
        public DataColumn ColumnDataLabelKey;
        /// Label value for type Character.
        public DataColumn ColumnValueChar;
        /// Label value for type Numeric.
        public DataColumn ColumnValueNum;
        /// Label value for type Currency.
        public DataColumn ColumnValueCurrency;
        /// Label value for type Integer.
        public DataColumn ColumnValueInt;
        /// Label value for type Boolean.
        public DataColumn ColumnValueBool;
        /// Label value for type Date.
        public DataColumn ColumnValueDate;
        /// Label value for type Time.
        public DataColumn ColumnValueTime;
        /// Label value for type Partner Key.
        public DataColumn ColumnValuePartnerKey;
        /// Label value for type Lookup Value.
        public DataColumn ColumnValueLookup;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_application_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_data_label_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_value_char_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_value_num_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("p_value_currency_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("p_value_int_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_value_bool_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_value_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("p_value_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_value_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_value_lookup_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnApplicationKey = this.Columns["pm_application_key_i"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnDataLabelKey = this.Columns["p_data_label_key_i"];
            this.ColumnValueChar = this.Columns["p_value_char_c"];
            this.ColumnValueNum = this.Columns["p_value_num_n"];
            this.ColumnValueCurrency = this.Columns["p_value_currency_n"];
            this.ColumnValueInt = this.Columns["p_value_int_i"];
            this.ColumnValueBool = this.Columns["p_value_bool_l"];
            this.ColumnValueDate = this.Columns["p_value_date_d"];
            this.ColumnValueTime = this.Columns["p_value_time_i"];
            this.ColumnValuePartnerKey = this.Columns["p_value_partner_key_n"];
            this.ColumnValueLookup = this.Columns["p_value_lookup_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnPartnerKey,ColumnApplicationKey,ColumnRegistrationOffice,ColumnDataLabelKey};
        }

        /// Access a typed row by index
        public PDataLabelValueApplicationRow this[int i]
        {
            get
            {
                return ((PDataLabelValueApplicationRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PDataLabelValueApplicationRow NewRowTyped(bool AWithDefaultValues)
        {
            PDataLabelValueApplicationRow ret = ((PDataLabelValueApplicationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PDataLabelValueApplicationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PDataLabelValueApplicationRow(builder);
        }

        /// get typed set of changes
        public PDataLabelValueApplicationTable GetChangesTyped()
        {
            return ((PDataLabelValueApplicationTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PDataLabelValueApplication";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "p_data_label_value_application";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetApplicationKeyDBName()
        {
            return "pm_application_key_i";
        }

        /// get character length for column
        public static short GetApplicationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDataLabelKeyDBName()
        {
            return "p_data_label_key_i";
        }

        /// get character length for column
        public static short GetDataLabelKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetValueCharDBName()
        {
            return "p_value_char_c";
        }

        /// get character length for column
        public static short GetValueCharLength()
        {
            return 8192;
        }

        /// get the name of the field in the database for this column
        public static string GetValueNumDBName()
        {
            return "p_value_num_n";
        }

        /// get character length for column
        public static short GetValueNumLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetValueCurrencyDBName()
        {
            return "p_value_currency_n";
        }

        /// get character length for column
        public static short GetValueCurrencyLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetValueIntDBName()
        {
            return "p_value_int_i";
        }

        /// get character length for column
        public static short GetValueIntLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetValueBoolDBName()
        {
            return "p_value_bool_l";
        }

        /// get character length for column
        public static short GetValueBoolLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetValueDateDBName()
        {
            return "p_value_date_d";
        }

        /// get character length for column
        public static short GetValueDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetValueTimeDBName()
        {
            return "p_value_time_i";
        }

        /// get character length for column
        public static short GetValueTimeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetValuePartnerKeyDBName()
        {
            return "p_value_partner_key_n";
        }

        /// get character length for column
        public static short GetValuePartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetValueLookupDBName()
        {
            return "p_value_lookup_c";
        }

        /// get character length for column
        public static short GetValueLookupLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table holds the label values for application related data.
    [Serializable()]
    public class PDataLabelValueApplicationRow : System.Data.DataRow
    {
        private PDataLabelValueApplicationTable myTable;

        /// Constructor
        public PDataLabelValueApplicationRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PDataLabelValueApplicationTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Key to uniquely identify application
        public Int32 ApplicationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApplicationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApplicationKey)
                            || (((Int32)(this[this.myTable.ColumnApplicationKey])) != value)))
                {
                    this[this.myTable.ColumnApplicationKey] = value;
                }
            }
        }

        /// Partner key of office by which application was entered.
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// A sequence key for data labels.
        public Int32 DataLabelKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDataLabelKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDataLabelKey)
                            || (((Int32)(this[this.myTable.ColumnDataLabelKey])) != value)))
                {
                    this[this.myTable.ColumnDataLabelKey] = value;
                }
            }
        }

        /// Label value for type Character.
        public String ValueChar
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueChar.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueChar)
                            || (((String)(this[this.myTable.ColumnValueChar])) != value)))
                {
                    this[this.myTable.ColumnValueChar] = value;
                }
            }
        }

        /// Label value for type Numeric.
        public Decimal ValueNum
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueNum.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueNum)
                            || (((Decimal)(this[this.myTable.ColumnValueNum])) != value)))
                {
                    this[this.myTable.ColumnValueNum] = value;
                }
            }
        }

        /// Label value for type Currency.
        public Decimal ValueCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueCurrency)
                            || (((Decimal)(this[this.myTable.ColumnValueCurrency])) != value)))
                {
                    this[this.myTable.ColumnValueCurrency] = value;
                }
            }
        }

        /// Label value for type Integer.
        public Int32 ValueInt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueInt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueInt)
                            || (((Int32)(this[this.myTable.ColumnValueInt])) != value)))
                {
                    this[this.myTable.ColumnValueInt] = value;
                }
            }
        }

        /// Label value for type Boolean.
        public Boolean ValueBool
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueBool.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueBool)
                            || (((Boolean)(this[this.myTable.ColumnValueBool])) != value)))
                {
                    this[this.myTable.ColumnValueBool] = value;
                }
            }
        }

        /// Label value for type Date.
        public System.DateTime? ValueDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnValueDate])) != value)))
                {
                    this[this.myTable.ColumnValueDate] = value;
                }
            }
        }

        /// Label value for type Time.
        public Int32 ValueTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueTime)
                            || (((Int32)(this[this.myTable.ColumnValueTime])) != value)))
                {
                    this[this.myTable.ColumnValueTime] = value;
                }
            }
        }

        /// Label value for type Partner Key.
        public Int64 ValuePartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValuePartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValuePartnerKey)
                            || (((Int64)(this[this.myTable.ColumnValuePartnerKey])) != value)))
                {
                    this[this.myTable.ColumnValuePartnerKey] = value;
                }
            }
        }

        /// Label value for type Lookup Value.
        public String ValueLookup
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValueLookup.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValueLookup)
                            || (((String)(this[this.myTable.ColumnValueLookup])) != value)))
                {
                    this[this.myTable.ColumnValueLookup] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnApplicationKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnRegistrationOffice);
            this.SetNull(this.myTable.ColumnDataLabelKey);
            this.SetNull(this.myTable.ColumnValueChar);
            this[this.myTable.ColumnValueNum.Ordinal] = 0;
            this[this.myTable.ColumnValueCurrency.Ordinal] = 0;
            this[this.myTable.ColumnValueInt.Ordinal] = 0;
            this[this.myTable.ColumnValueBool.Ordinal] = false;
            this.SetNull(this.myTable.ColumnValueDate);
            this[this.myTable.ColumnValueTime.Ordinal] = 0;
            this[this.myTable.ColumnValuePartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnValueLookup);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsApplicationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnApplicationKey);
        }

        /// assign NULL value
        public void SetApplicationKeyNull()
        {
            this.SetNull(this.myTable.ColumnApplicationKey);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsDataLabelKeyNull()
        {
            return this.IsNull(this.myTable.ColumnDataLabelKey);
        }

        /// assign NULL value
        public void SetDataLabelKeyNull()
        {
            this.SetNull(this.myTable.ColumnDataLabelKey);
        }

        /// test for NULL value
        public bool IsValueCharNull()
        {
            return this.IsNull(this.myTable.ColumnValueChar);
        }

        /// assign NULL value
        public void SetValueCharNull()
        {
            this.SetNull(this.myTable.ColumnValueChar);
        }

        /// test for NULL value
        public bool IsValueNumNull()
        {
            return this.IsNull(this.myTable.ColumnValueNum);
        }

        /// assign NULL value
        public void SetValueNumNull()
        {
            this.SetNull(this.myTable.ColumnValueNum);
        }

        /// test for NULL value
        public bool IsValueCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnValueCurrency);
        }

        /// assign NULL value
        public void SetValueCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnValueCurrency);
        }

        /// test for NULL value
        public bool IsValueIntNull()
        {
            return this.IsNull(this.myTable.ColumnValueInt);
        }

        /// assign NULL value
        public void SetValueIntNull()
        {
            this.SetNull(this.myTable.ColumnValueInt);
        }

        /// test for NULL value
        public bool IsValueBoolNull()
        {
            return this.IsNull(this.myTable.ColumnValueBool);
        }

        /// assign NULL value
        public void SetValueBoolNull()
        {
            this.SetNull(this.myTable.ColumnValueBool);
        }

        /// test for NULL value
        public bool IsValueDateNull()
        {
            return this.IsNull(this.myTable.ColumnValueDate);
        }

        /// assign NULL value
        public void SetValueDateNull()
        {
            this.SetNull(this.myTable.ColumnValueDate);
        }

        /// test for NULL value
        public bool IsValueTimeNull()
        {
            return this.IsNull(this.myTable.ColumnValueTime);
        }

        /// assign NULL value
        public void SetValueTimeNull()
        {
            this.SetNull(this.myTable.ColumnValueTime);
        }

        /// test for NULL value
        public bool IsValuePartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnValuePartnerKey);
        }

        /// assign NULL value
        public void SetValuePartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnValuePartnerKey);
        }

        /// test for NULL value
        public bool IsValueLookupNull()
        {
            return this.IsNull(this.myTable.ColumnValueLookup);
        }

        /// assign NULL value
        public void SetValueLookupNull()
        {
            this.SetNull(this.myTable.ColumnValueLookup);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Details of the personal interview of the Worker.
    [Serializable()]
    public class PmInterviewTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 241;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnInterviewDateId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnInterviewerId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnInterviewCommentId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnIntvwActionToTakeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnInterviewedForId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnInterviewUnitKeyId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 11;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmInterview", "pm_interview",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "InterviewDate", "pm_interview_date_d", "Interview Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(2, "Interviewer", "pm_interviewer_c", "Interviewer", OdbcType.VarChar, 70, true),
                    new TTypedColumnInfo(3, "InterviewComment", "pm_interview_comment_c", "Interview Comment", OdbcType.VarChar, 1000, false),
                    new TTypedColumnInfo(4, "IntvwActionToTake", "pm_intvw_action_to_take_c", "Action to Take", OdbcType.VarChar, 1000, false),
                    new TTypedColumnInfo(5, "InterviewedFor", "pm_interviewed_for_c", "Interviewed For", OdbcType.VarChar, 30, false),
                    new TTypedColumnInfo(6, "InterviewUnitKey", "pm_interview_unit_key_n", "Field Interviewed for", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(7, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 5
                }));
            return true;
        }

        /// constructor
        public PmInterviewTable() :
                base("PmInterview")
        {
        }

        /// constructor
        public PmInterviewTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmInterviewTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Date of the interview.
        public DataColumn ColumnInterviewDate;
        /// Name of the person conducting the interview.
        public DataColumn ColumnInterviewer;
        /// Comments pertaining to the interview.
        public DataColumn ColumnInterviewComment;
        /// Describes what action to take.
        public DataColumn ColumnIntvwActionToTake;
        /// Describes the program interviewed for.
        public DataColumn ColumnInterviewedFor;
        /// This is the field or team the applicant was interviewed for.
        public DataColumn ColumnInterviewUnitKey;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_interview_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_interviewer_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_interview_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_intvw_action_to_take_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_interviewed_for_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_interview_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnInterviewDate = this.Columns["pm_interview_date_d"];
            this.ColumnInterviewer = this.Columns["pm_interviewer_c"];
            this.ColumnInterviewComment = this.Columns["pm_interview_comment_c"];
            this.ColumnIntvwActionToTake = this.Columns["pm_intvw_action_to_take_c"];
            this.ColumnInterviewedFor = this.Columns["pm_interviewed_for_c"];
            this.ColumnInterviewUnitKey = this.Columns["pm_interview_unit_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnPartnerKey,ColumnInterviewDate,ColumnInterviewer,ColumnInterviewedFor};
        }

        /// Access a typed row by index
        public PmInterviewRow this[int i]
        {
            get
            {
                return ((PmInterviewRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmInterviewRow NewRowTyped(bool AWithDefaultValues)
        {
            PmInterviewRow ret = ((PmInterviewRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmInterviewRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmInterviewRow(builder);
        }

        /// get typed set of changes
        public PmInterviewTable GetChangesTyped()
        {
            return ((PmInterviewTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmInterview";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_interview";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetInterviewDateDBName()
        {
            return "pm_interview_date_d";
        }

        /// get character length for column
        public static short GetInterviewDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetInterviewerDBName()
        {
            return "pm_interviewer_c";
        }

        /// get character length for column
        public static short GetInterviewerLength()
        {
            return 70;
        }

        /// get the name of the field in the database for this column
        public static string GetInterviewCommentDBName()
        {
            return "pm_interview_comment_c";
        }

        /// get character length for column
        public static short GetInterviewCommentLength()
        {
            return 1000;
        }

        /// get the name of the field in the database for this column
        public static string GetIntvwActionToTakeDBName()
        {
            return "pm_intvw_action_to_take_c";
        }

        /// get character length for column
        public static short GetIntvwActionToTakeLength()
        {
            return 1000;
        }

        /// get the name of the field in the database for this column
        public static string GetInterviewedForDBName()
        {
            return "pm_interviewed_for_c";
        }

        /// get character length for column
        public static short GetInterviewedForLength()
        {
            return 30;
        }

        /// get the name of the field in the database for this column
        public static string GetInterviewUnitKeyDBName()
        {
            return "pm_interview_unit_key_n";
        }

        /// get character length for column
        public static short GetInterviewUnitKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Details of the personal interview of the Worker.
    [Serializable()]
    public class PmInterviewRow : System.Data.DataRow
    {
        private PmInterviewTable myTable;

        /// Constructor
        public PmInterviewRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmInterviewTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Date of the interview.
        public System.DateTime InterviewDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInterviewDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInterviewDate)
                            || (((System.DateTime)(this[this.myTable.ColumnInterviewDate])) != value)))
                {
                    this[this.myTable.ColumnInterviewDate] = value;
                }
            }
        }

        /// Name of the person conducting the interview.
        public String Interviewer
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInterviewer.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInterviewer)
                            || (((String)(this[this.myTable.ColumnInterviewer])) != value)))
                {
                    this[this.myTable.ColumnInterviewer] = value;
                }
            }
        }

        /// Comments pertaining to the interview.
        public String InterviewComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInterviewComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInterviewComment)
                            || (((String)(this[this.myTable.ColumnInterviewComment])) != value)))
                {
                    this[this.myTable.ColumnInterviewComment] = value;
                }
            }
        }

        /// Describes what action to take.
        public String IntvwActionToTake
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIntvwActionToTake.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIntvwActionToTake)
                            || (((String)(this[this.myTable.ColumnIntvwActionToTake])) != value)))
                {
                    this[this.myTable.ColumnIntvwActionToTake] = value;
                }
            }
        }

        /// Describes the program interviewed for.
        public String InterviewedFor
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInterviewedFor.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInterviewedFor)
                            || (((String)(this[this.myTable.ColumnInterviewedFor])) != value)))
                {
                    this[this.myTable.ColumnInterviewedFor] = value;
                }
            }
        }

        /// This is the field or team the applicant was interviewed for.
        public Int64 InterviewUnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInterviewUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInterviewUnitKey)
                            || (((Int64)(this[this.myTable.ColumnInterviewUnitKey])) != value)))
                {
                    this[this.myTable.ColumnInterviewUnitKey] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnInterviewDate);
            this.SetNull(this.myTable.ColumnInterviewer);
            this.SetNull(this.myTable.ColumnInterviewComment);
            this.SetNull(this.myTable.ColumnIntvwActionToTake);
            this.SetNull(this.myTable.ColumnInterviewedFor);
            this[this.myTable.ColumnInterviewUnitKey.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsInterviewDateNull()
        {
            return this.IsNull(this.myTable.ColumnInterviewDate);
        }

        /// assign NULL value
        public void SetInterviewDateNull()
        {
            this.SetNull(this.myTable.ColumnInterviewDate);
        }

        /// test for NULL value
        public bool IsInterviewerNull()
        {
            return this.IsNull(this.myTable.ColumnInterviewer);
        }

        /// assign NULL value
        public void SetInterviewerNull()
        {
            this.SetNull(this.myTable.ColumnInterviewer);
        }

        /// test for NULL value
        public bool IsInterviewCommentNull()
        {
            return this.IsNull(this.myTable.ColumnInterviewComment);
        }

        /// assign NULL value
        public void SetInterviewCommentNull()
        {
            this.SetNull(this.myTable.ColumnInterviewComment);
        }

        /// test for NULL value
        public bool IsIntvwActionToTakeNull()
        {
            return this.IsNull(this.myTable.ColumnIntvwActionToTake);
        }

        /// assign NULL value
        public void SetIntvwActionToTakeNull()
        {
            this.SetNull(this.myTable.ColumnIntvwActionToTake);
        }

        /// test for NULL value
        public bool IsInterviewedForNull()
        {
            return this.IsNull(this.myTable.ColumnInterviewedFor);
        }

        /// assign NULL value
        public void SetInterviewedForNull()
        {
            this.SetNull(this.myTable.ColumnInterviewedFor);
        }

        /// test for NULL value
        public bool IsInterviewUnitKeyNull()
        {
            return this.IsNull(this.myTable.ColumnInterviewUnitKey);
        }

        /// assign NULL value
        public void SetInterviewUnitKeyNull()
        {
            this.SetNull(this.myTable.ColumnInterviewUnitKey);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains information regarding personal progress reports.
    [Serializable()]
    public class PmPersonEvaluationTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 242;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnEvaluationTypeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnEvaluationDateId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnEvaluationCommentsId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnPersonEvalActionId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnEvaluatorId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnNextEvaluationDateId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 11;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersonEvaluation", "pm_person_evaluation",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "EvaluationType", "pm_evaluation_type_c", "Report Type", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(2, "EvaluationDate", "pm_evaluation_date_d", "Report Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(3, "EvaluationComments", "pm_evaluation_comments_c", "Comments", OdbcType.VarChar, 1000, false),
                    new TTypedColumnInfo(4, "PersonEvalAction", "pm_person_eval_action_c", "Action to Take", OdbcType.VarChar, 1000, false),
                    new TTypedColumnInfo(5, "Evaluator", "pm_evaluator_c", "Reporter", OdbcType.VarChar, 60, true),
                    new TTypedColumnInfo(6, "NextEvaluationDate", "pm_next_evaluation_date_d", "Report Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 2, 5
                }));
            return true;
        }

        /// constructor
        public PmPersonEvaluationTable() :
                base("PmPersonEvaluation")
        {
        }

        /// constructor
        public PmPersonEvaluationTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersonEvaluationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// This field describes the timing of the progress report, eg.  Semi-Annual, Annual, or Leaving.
        public DataColumn ColumnEvaluationType;
        /// The date the evaluation was conducted.
        public DataColumn ColumnEvaluationDate;
        /// Comments on the progress report.
        public DataColumn ColumnEvaluationComments;
        /// Describe possible actions to take.
        public DataColumn ColumnPersonEvalAction;
        /// Describes the person who conducted the progress report.
        public DataColumn ColumnEvaluator;
        /// Date of next evaluation.
        public DataColumn ColumnNextEvaluationDate;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_evaluation_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_evaluation_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_evaluation_comments_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_person_eval_action_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_evaluator_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_next_evaluation_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnEvaluationType = this.Columns["pm_evaluation_type_c"];
            this.ColumnEvaluationDate = this.Columns["pm_evaluation_date_d"];
            this.ColumnEvaluationComments = this.Columns["pm_evaluation_comments_c"];
            this.ColumnPersonEvalAction = this.Columns["pm_person_eval_action_c"];
            this.ColumnEvaluator = this.Columns["pm_evaluator_c"];
            this.ColumnNextEvaluationDate = this.Columns["pm_next_evaluation_date_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnPartnerKey,ColumnEvaluationDate,ColumnEvaluator};
        }

        /// Access a typed row by index
        public PmPersonEvaluationRow this[int i]
        {
            get
            {
                return ((PmPersonEvaluationRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersonEvaluationRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonEvaluationRow ret = ((PmPersonEvaluationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersonEvaluationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonEvaluationRow(builder);
        }

        /// get typed set of changes
        public PmPersonEvaluationTable GetChangesTyped()
        {
            return ((PmPersonEvaluationTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersonEvaluation";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_person_evaluation";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetEvaluationTypeDBName()
        {
            return "pm_evaluation_type_c";
        }

        /// get character length for column
        public static short GetEvaluationTypeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetEvaluationDateDBName()
        {
            return "pm_evaluation_date_d";
        }

        /// get character length for column
        public static short GetEvaluationDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetEvaluationCommentsDBName()
        {
            return "pm_evaluation_comments_c";
        }

        /// get character length for column
        public static short GetEvaluationCommentsLength()
        {
            return 1000;
        }

        /// get the name of the field in the database for this column
        public static string GetPersonEvalActionDBName()
        {
            return "pm_person_eval_action_c";
        }

        /// get character length for column
        public static short GetPersonEvalActionLength()
        {
            return 1000;
        }

        /// get the name of the field in the database for this column
        public static string GetEvaluatorDBName()
        {
            return "pm_evaluator_c";
        }

        /// get character length for column
        public static short GetEvaluatorLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetNextEvaluationDateDBName()
        {
            return "pm_next_evaluation_date_d";
        }

        /// get character length for column
        public static short GetNextEvaluationDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains information regarding personal progress reports.
    [Serializable()]
    public class PmPersonEvaluationRow : System.Data.DataRow
    {
        private PmPersonEvaluationTable myTable;

        /// Constructor
        public PmPersonEvaluationRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersonEvaluationTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// This field describes the timing of the progress report, eg.  Semi-Annual, Annual, or Leaving.
        public String EvaluationType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEvaluationType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEvaluationType)
                            || (((String)(this[this.myTable.ColumnEvaluationType])) != value)))
                {
                    this[this.myTable.ColumnEvaluationType] = value;
                }
            }
        }

        /// The date the evaluation was conducted.
        public System.DateTime EvaluationDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEvaluationDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEvaluationDate)
                            || (((System.DateTime)(this[this.myTable.ColumnEvaluationDate])) != value)))
                {
                    this[this.myTable.ColumnEvaluationDate] = value;
                }
            }
        }

        /// Comments on the progress report.
        public String EvaluationComments
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEvaluationComments.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEvaluationComments)
                            || (((String)(this[this.myTable.ColumnEvaluationComments])) != value)))
                {
                    this[this.myTable.ColumnEvaluationComments] = value;
                }
            }
        }

        /// Describe possible actions to take.
        public String PersonEvalAction
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPersonEvalAction.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPersonEvalAction)
                            || (((String)(this[this.myTable.ColumnPersonEvalAction])) != value)))
                {
                    this[this.myTable.ColumnPersonEvalAction] = value;
                }
            }
        }

        /// Describes the person who conducted the progress report.
        public String Evaluator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEvaluator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEvaluator)
                            || (((String)(this[this.myTable.ColumnEvaluator])) != value)))
                {
                    this[this.myTable.ColumnEvaluator] = value;
                }
            }
        }

        /// Date of next evaluation.
        public System.DateTime? NextEvaluationDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNextEvaluationDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNextEvaluationDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnNextEvaluationDate])) != value)))
                {
                    this[this.myTable.ColumnNextEvaluationDate] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnEvaluationType);
            this.SetNull(this.myTable.ColumnEvaluationDate);
            this.SetNull(this.myTable.ColumnEvaluationComments);
            this.SetNull(this.myTable.ColumnPersonEvalAction);
            this.SetNull(this.myTable.ColumnEvaluator);
            this.SetNull(this.myTable.ColumnNextEvaluationDate);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsEvaluationTypeNull()
        {
            return this.IsNull(this.myTable.ColumnEvaluationType);
        }

        /// assign NULL value
        public void SetEvaluationTypeNull()
        {
            this.SetNull(this.myTable.ColumnEvaluationType);
        }

        /// test for NULL value
        public bool IsEvaluationDateNull()
        {
            return this.IsNull(this.myTable.ColumnEvaluationDate);
        }

        /// assign NULL value
        public void SetEvaluationDateNull()
        {
            this.SetNull(this.myTable.ColumnEvaluationDate);
        }

        /// test for NULL value
        public bool IsEvaluationCommentsNull()
        {
            return this.IsNull(this.myTable.ColumnEvaluationComments);
        }

        /// assign NULL value
        public void SetEvaluationCommentsNull()
        {
            this.SetNull(this.myTable.ColumnEvaluationComments);
        }

        /// test for NULL value
        public bool IsPersonEvalActionNull()
        {
            return this.IsNull(this.myTable.ColumnPersonEvalAction);
        }

        /// assign NULL value
        public void SetPersonEvalActionNull()
        {
            this.SetNull(this.myTable.ColumnPersonEvalAction);
        }

        /// test for NULL value
        public bool IsEvaluatorNull()
        {
            return this.IsNull(this.myTable.ColumnEvaluator);
        }

        /// assign NULL value
        public void SetEvaluatorNull()
        {
            this.SetNull(this.myTable.ColumnEvaluator);
        }

        /// test for NULL value
        public bool IsNextEvaluationDateNull()
        {
            return this.IsNull(this.myTable.ColumnNextEvaluationDate);
        }

        /// assign NULL value
        public void SetNextEvaluationDateNull()
        {
            this.SetNull(this.myTable.ColumnNextEvaluationDate);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This  defines the area a person may have vision for, e.g. children's work or a particular country.
    [Serializable()]
    public class PtVisionAreaTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 243;
        /// used for generic TTypedDataTable functions
        public static short ColumnVisionAreaNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnVisionAreaDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtVisionArea", "pt_vision_area",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "VisionAreaName", "pt_vision_area_name_c", "Vision Area", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(1, "VisionAreaDescr", "pt_vision_area_descr_c", "Description", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Unassignable Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtVisionAreaTable() :
                base("PtVisionArea")
        {
        }

        /// constructor
        public PtVisionAreaTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtVisionAreaTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Name of the area of vision
        public DataColumn ColumnVisionAreaName;
        /// Describes the area of vision.
        public DataColumn ColumnVisionAreaDescr;
        /// Can this vision be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_vision_area_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_vision_area_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnVisionAreaName = this.Columns["pt_vision_area_name_c"];
            this.ColumnVisionAreaDescr = this.Columns["pt_vision_area_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnVisionAreaName};
        }

        /// Access a typed row by index
        public PtVisionAreaRow this[int i]
        {
            get
            {
                return ((PtVisionAreaRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtVisionAreaRow NewRowTyped(bool AWithDefaultValues)
        {
            PtVisionAreaRow ret = ((PtVisionAreaRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtVisionAreaRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtVisionAreaRow(builder);
        }

        /// get typed set of changes
        public PtVisionAreaTable GetChangesTyped()
        {
            return ((PtVisionAreaTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtVisionArea";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_vision_area";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetVisionAreaNameDBName()
        {
            return "pt_vision_area_name_c";
        }

        /// get character length for column
        public static short GetVisionAreaNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetVisionAreaDescrDBName()
        {
            return "pt_vision_area_descr_c";
        }

        /// get character length for column
        public static short GetVisionAreaDescrLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This  defines the area a person may have vision for, e.g. children's work or a particular country.
    [Serializable()]
    public class PtVisionAreaRow : System.Data.DataRow
    {
        private PtVisionAreaTable myTable;

        /// Constructor
        public PtVisionAreaRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtVisionAreaTable)(this.Table));
        }

        /// Name of the area of vision
        public String VisionAreaName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVisionAreaName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVisionAreaName)
                            || (((String)(this[this.myTable.ColumnVisionAreaName])) != value)))
                {
                    this[this.myTable.ColumnVisionAreaName] = value;
                }
            }
        }

        /// Describes the area of vision.
        public String VisionAreaDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVisionAreaDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVisionAreaDescr)
                            || (((String)(this[this.myTable.ColumnVisionAreaDescr])) != value)))
                {
                    this[this.myTable.ColumnVisionAreaDescr] = value;
                }
            }
        }

        /// Can this vision be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnVisionAreaName);
            this.SetNull(this.myTable.ColumnVisionAreaDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsVisionAreaNameNull()
        {
            return this.IsNull(this.myTable.ColumnVisionAreaName);
        }

        /// assign NULL value
        public void SetVisionAreaNameNull()
        {
            this.SetNull(this.myTable.ColumnVisionAreaName);
        }

        /// test for NULL value
        public bool IsVisionAreaDescrNull()
        {
            return this.IsNull(this.myTable.ColumnVisionAreaDescr);
        }

        /// assign NULL value
        public void SetVisionAreaDescrNull()
        {
            this.SetNull(this.myTable.ColumnVisionAreaDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This is the level to which a vision is possessed, e.g. a possibility, do nothing else.
    [Serializable()]
    public class PtVisionLevelTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 244;
        /// used for generic TTypedDataTable functions
        public static short ColumnVisionLevelId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnVisionLevelDescrId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtVisionLevel", "pt_vision_level",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "VisionLevel", "pt_vision_level_i", "Vision Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "VisionLevelDescr", "pt_vision_level_descr_c", "Description", OdbcType.VarChar, 80, true),
                    new TTypedColumnInfo(2, "UnassignableFlag", "pt_unassignable_flag_l", "Unassignable?", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "UnassignableDate", "pt_unassignable_date_d", "Unassignable Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "DeletableFlag", "pt_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtVisionLevelTable() :
                base("PtVisionLevel")
        {
        }

        /// constructor
        public PtVisionLevelTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtVisionLevelTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This field is a numeric representation of level of vision.
        public DataColumn ColumnVisionLevel;
        /// Describes the level of vision.
        public DataColumn ColumnVisionLevelDescr;
        /// Can this vision level be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// This is the date the record was last updated.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_vision_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pt_vision_level_descr_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pt_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnVisionLevel = this.Columns["pt_vision_level_i"];
            this.ColumnVisionLevelDescr = this.Columns["pt_vision_level_descr_c"];
            this.ColumnUnassignableFlag = this.Columns["pt_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pt_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pt_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnVisionLevel};
        }

        /// Access a typed row by index
        public PtVisionLevelRow this[int i]
        {
            get
            {
                return ((PtVisionLevelRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtVisionLevelRow NewRowTyped(bool AWithDefaultValues)
        {
            PtVisionLevelRow ret = ((PtVisionLevelRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtVisionLevelRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtVisionLevelRow(builder);
        }

        /// get typed set of changes
        public PtVisionLevelTable GetChangesTyped()
        {
            return ((PtVisionLevelTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtVisionLevel";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_vision_level";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetVisionLevelDBName()
        {
            return "pt_vision_level_i";
        }

        /// get character length for column
        public static short GetVisionLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetVisionLevelDescrDBName()
        {
            return "pt_vision_level_descr_c";
        }

        /// get character length for column
        public static short GetVisionLevelDescrLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pt_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pt_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pt_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This is the level to which a vision is possessed, e.g. a possibility, do nothing else.
    [Serializable()]
    public class PtVisionLevelRow : System.Data.DataRow
    {
        private PtVisionLevelTable myTable;

        /// Constructor
        public PtVisionLevelRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtVisionLevelTable)(this.Table));
        }

        /// This field is a numeric representation of level of vision.
        public Int32 VisionLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVisionLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVisionLevel)
                            || (((Int32)(this[this.myTable.ColumnVisionLevel])) != value)))
                {
                    this[this.myTable.ColumnVisionLevel] = value;
                }
            }
        }

        /// Describes the level of vision.
        public String VisionLevelDescr
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVisionLevelDescr.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVisionLevelDescr)
                            || (((String)(this[this.myTable.ColumnVisionLevelDescr])) != value)))
                {
                    this[this.myTable.ColumnVisionLevelDescr] = value;
                }
            }
        }

        /// Can this vision level be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// This is the date the record was last updated.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnVisionLevel.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnVisionLevelDescr);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsVisionLevelNull()
        {
            return this.IsNull(this.myTable.ColumnVisionLevel);
        }

        /// assign NULL value
        public void SetVisionLevelNull()
        {
            this.SetNull(this.myTable.ColumnVisionLevel);
        }

        /// test for NULL value
        public bool IsVisionLevelDescrNull()
        {
            return this.IsNull(this.myTable.ColumnVisionLevelDescr);
        }

        /// assign NULL value
        public void SetVisionLevelDescrNull()
        {
            this.SetNull(this.myTable.ColumnVisionLevelDescr);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Personal Vision
    [Serializable()]
    public class PmPersonVisionTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 245;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnVisionAreaNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnVisionLevelId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnVisionCommentId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersonVision", "pm_person_vision",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "VisionAreaName", "pt_vision_area_name_c", "Vision Area", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(2, "VisionLevel", "pt_vision_level_i", "Vision Level", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "VisionComment", "pm_vision_comment_c", "Vision Comment", OdbcType.VarChar, 250, false),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public PmPersonVisionTable() :
                base("PmPersonVision")
        {
        }

        /// constructor
        public PmPersonVisionTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersonVisionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Name of the area of vision
        public DataColumn ColumnVisionAreaName;
        /// This field is a numeric representation of level of vision.
        public DataColumn ColumnVisionLevel;
        /// List any pertinent vision information. Can be used to identify the time frame for a vision, e.g. for a special conference only.
        public DataColumn ColumnVisionComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pt_vision_area_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_vision_level_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_vision_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnVisionAreaName = this.Columns["pt_vision_area_name_c"];
            this.ColumnVisionLevel = this.Columns["pt_vision_level_i"];
            this.ColumnVisionComment = this.Columns["pm_vision_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnPartnerKey,ColumnVisionAreaName};
        }

        /// Access a typed row by index
        public PmPersonVisionRow this[int i]
        {
            get
            {
                return ((PmPersonVisionRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersonVisionRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonVisionRow ret = ((PmPersonVisionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersonVisionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonVisionRow(builder);
        }

        /// get typed set of changes
        public PmPersonVisionTable GetChangesTyped()
        {
            return ((PmPersonVisionTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersonVision";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_person_vision";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetVisionAreaNameDBName()
        {
            return "pt_vision_area_name_c";
        }

        /// get character length for column
        public static short GetVisionAreaNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetVisionLevelDBName()
        {
            return "pt_vision_level_i";
        }

        /// get character length for column
        public static short GetVisionLevelLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetVisionCommentDBName()
        {
            return "pm_vision_comment_c";
        }

        /// get character length for column
        public static short GetVisionCommentLength()
        {
            return 250;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Personal Vision
    [Serializable()]
    public class PmPersonVisionRow : System.Data.DataRow
    {
        private PmPersonVisionTable myTable;

        /// Constructor
        public PmPersonVisionRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersonVisionTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Name of the area of vision
        public String VisionAreaName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVisionAreaName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVisionAreaName)
                            || (((String)(this[this.myTable.ColumnVisionAreaName])) != value)))
                {
                    this[this.myTable.ColumnVisionAreaName] = value;
                }
            }
        }

        /// This field is a numeric representation of level of vision.
        public Int32 VisionLevel
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVisionLevel.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVisionLevel)
                            || (((Int32)(this[this.myTable.ColumnVisionLevel])) != value)))
                {
                    this[this.myTable.ColumnVisionLevel] = value;
                }
            }
        }

        /// List any pertinent vision information. Can be used to identify the time frame for a vision, e.g. for a special conference only.
        public String VisionComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVisionComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVisionComment)
                            || (((String)(this[this.myTable.ColumnVisionComment])) != value)))
                {
                    this[this.myTable.ColumnVisionComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnVisionAreaName);
            this[this.myTable.ColumnVisionLevel.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnVisionComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsVisionAreaNameNull()
        {
            return this.IsNull(this.myTable.ColumnVisionAreaName);
        }

        /// assign NULL value
        public void SetVisionAreaNameNull()
        {
            this.SetNull(this.myTable.ColumnVisionAreaName);
        }

        /// test for NULL value
        public bool IsVisionLevelNull()
        {
            return this.IsNull(this.myTable.ColumnVisionLevel);
        }

        /// assign NULL value
        public void SetVisionLevelNull()
        {
            this.SetNull(this.myTable.ColumnVisionLevel);
        }

        /// test for NULL value
        public bool IsVisionCommentNull()
        {
            return this.IsNull(this.myTable.ColumnVisionComment);
        }

        /// assign NULL value
        public void SetVisionCommentNull()
        {
            this.SetNull(this.myTable.ColumnVisionComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table includes special medical or dietary needs someone may have.
    [Serializable()]
    public class PmSpecialNeedTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 246;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnMedicalCommentId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDietaryCommentId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnOtherSpecialNeedId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnContactHomeOfficeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnVegetarianFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmSpecialNeed", "pm_special_need",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "MedicalComment", "pm_medical_comment_c", "Medical Comment", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(2, "DietaryComment", "pm_dietary_comment_c", "Dietary Comment", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(3, "OtherSpecialNeed", "pm_other_special_need_c", "Other Needs", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(4, "ContactHomeOffice", "pm_contact_home_office_l", "Contact Home Office?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "VegetarianFlag", "pm_vegetarian_flag_l", "Vegetarian Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmSpecialNeedTable() :
                base("PmSpecialNeed")
        {
        }

        /// constructor
        public PmSpecialNeedTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmSpecialNeedTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Contains special medical information if needed.
        public DataColumn ColumnMedicalComment;
        /// Contains special dietary information if needed.
        public DataColumn ColumnDietaryComment;
        /// Contains any other special need that may be applicable.
        public DataColumn ColumnOtherSpecialNeed;
        /// Indicates home office has important information on applicant.
        public DataColumn ColumnContactHomeOffice;
        /// Indicates if there are vegetarian needs.
        public DataColumn ColumnVegetarianFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_medical_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_dietary_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_other_special_need_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_contact_home_office_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_vegetarian_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnMedicalComment = this.Columns["pm_medical_comment_c"];
            this.ColumnDietaryComment = this.Columns["pm_dietary_comment_c"];
            this.ColumnOtherSpecialNeed = this.Columns["pm_other_special_need_c"];
            this.ColumnContactHomeOffice = this.Columns["pm_contact_home_office_l"];
            this.ColumnVegetarianFlag = this.Columns["pm_vegetarian_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnPartnerKey};
        }

        /// Access a typed row by index
        public PmSpecialNeedRow this[int i]
        {
            get
            {
                return ((PmSpecialNeedRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmSpecialNeedRow NewRowTyped(bool AWithDefaultValues)
        {
            PmSpecialNeedRow ret = ((PmSpecialNeedRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmSpecialNeedRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmSpecialNeedRow(builder);
        }

        /// get typed set of changes
        public PmSpecialNeedTable GetChangesTyped()
        {
            return ((PmSpecialNeedTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmSpecialNeed";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_special_need";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetMedicalCommentDBName()
        {
            return "pm_medical_comment_c";
        }

        /// get character length for column
        public static short GetMedicalCommentLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetDietaryCommentDBName()
        {
            return "pm_dietary_comment_c";
        }

        /// get character length for column
        public static short GetDietaryCommentLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetOtherSpecialNeedDBName()
        {
            return "pm_other_special_need_c";
        }

        /// get character length for column
        public static short GetOtherSpecialNeedLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetContactHomeOfficeDBName()
        {
            return "pm_contact_home_office_l";
        }

        /// get character length for column
        public static short GetContactHomeOfficeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetVegetarianFlagDBName()
        {
            return "pm_vegetarian_flag_l";
        }

        /// get character length for column
        public static short GetVegetarianFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table includes special medical or dietary needs someone may have.
    [Serializable()]
    public class PmSpecialNeedRow : System.Data.DataRow
    {
        private PmSpecialNeedTable myTable;

        /// Constructor
        public PmSpecialNeedRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmSpecialNeedTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Contains special medical information if needed.
        public String MedicalComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMedicalComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMedicalComment)
                            || (((String)(this[this.myTable.ColumnMedicalComment])) != value)))
                {
                    this[this.myTable.ColumnMedicalComment] = value;
                }
            }
        }

        /// Contains special dietary information if needed.
        public String DietaryComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDietaryComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDietaryComment)
                            || (((String)(this[this.myTable.ColumnDietaryComment])) != value)))
                {
                    this[this.myTable.ColumnDietaryComment] = value;
                }
            }
        }

        /// Contains any other special need that may be applicable.
        public String OtherSpecialNeed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOtherSpecialNeed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOtherSpecialNeed)
                            || (((String)(this[this.myTable.ColumnOtherSpecialNeed])) != value)))
                {
                    this[this.myTable.ColumnOtherSpecialNeed] = value;
                }
            }
        }

        /// Indicates home office has important information on applicant.
        public Boolean ContactHomeOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnContactHomeOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnContactHomeOffice)
                            || (((Boolean)(this[this.myTable.ColumnContactHomeOffice])) != value)))
                {
                    this[this.myTable.ColumnContactHomeOffice] = value;
                }
            }
        }

        /// Indicates if there are vegetarian needs.
        public Boolean VegetarianFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnVegetarianFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnVegetarianFlag)
                            || (((Boolean)(this[this.myTable.ColumnVegetarianFlag])) != value)))
                {
                    this[this.myTable.ColumnVegetarianFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnMedicalComment);
            this.SetNull(this.myTable.ColumnDietaryComment);
            this.SetNull(this.myTable.ColumnOtherSpecialNeed);
            this[this.myTable.ColumnContactHomeOffice.Ordinal] = false;
            this[this.myTable.ColumnVegetarianFlag.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsMedicalCommentNull()
        {
            return this.IsNull(this.myTable.ColumnMedicalComment);
        }

        /// assign NULL value
        public void SetMedicalCommentNull()
        {
            this.SetNull(this.myTable.ColumnMedicalComment);
        }

        /// test for NULL value
        public bool IsDietaryCommentNull()
        {
            return this.IsNull(this.myTable.ColumnDietaryComment);
        }

        /// assign NULL value
        public void SetDietaryCommentNull()
        {
            this.SetNull(this.myTable.ColumnDietaryComment);
        }

        /// test for NULL value
        public bool IsOtherSpecialNeedNull()
        {
            return this.IsNull(this.myTable.ColumnOtherSpecialNeed);
        }

        /// assign NULL value
        public void SetOtherSpecialNeedNull()
        {
            this.SetNull(this.myTable.ColumnOtherSpecialNeed);
        }

        /// test for NULL value
        public bool IsContactHomeOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnContactHomeOffice);
        }

        /// assign NULL value
        public void SetContactHomeOfficeNull()
        {
            this.SetNull(this.myTable.ColumnContactHomeOffice);
        }

        /// test for NULL value
        public bool IsVegetarianFlagNull()
        {
            return this.IsNull(this.myTable.ColumnVegetarianFlag);
        }

        /// assign NULL value
        public void SetVegetarianFlagNull()
        {
            this.SetNull(this.myTable.ColumnVegetarianFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table contains information regarding recruitment, home office, field office, etc. .
    [Serializable()]
    public class PmStaffDataTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 247;
        /// used for generic TTypedDataTable functions
        public static short ColumnSiteKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnStatusCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnStartOfCommitmentId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnStartDateApproxId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnEndOfCommitmentId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnOfficeRecruitedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnHomeOfficeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnReceivingFieldId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnReceivingFieldOfficeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnStaffDataCommentsId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnJobTitleId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnOfficePhoneExtId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 18;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmStaffData", "pm_staff_data",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "SiteKey", "p_site_key_n", "Site Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "Key", "pm_key_n", "pm_key_n", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "StatusCode", "pm_status_code_c", "Status", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(4, "StartOfCommitment", "pm_start_of_commitment_d", "Committment Start Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(5, "StartDateApprox", "pm_start_date_approx_l", "Approximate?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "EndOfCommitment", "pm_end_of_commitment_d", "Committment End Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "OfficeRecruitedBy", "pm_office_recruited_by_n", "Recruiting Office", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(8, "HomeOffice", "pm_home_office_n", "Home Office", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(9, "ReceivingField", "pm_receiving_field_n", "Receiving Field", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(10, "ReceivingFieldOffice", "pm_receiving_field_office_n", "Receiving Field Office", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(11, "StaffDataComments", "pm_staff_data_comments_c", "Comments", OdbcType.VarChar, 640, false),
                    new TTypedColumnInfo(12, "JobTitle", "pm_job_title_c", "Job Title", OdbcType.VarChar, 400, false),
                    new TTypedColumnInfo(13, "OfficePhoneExt", "pm_office_phone_ext_c", "Phone Extension", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(14, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(17, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(18, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }, new int[] {
                    2, 4, 6
                }));
            return true;
        }

        /// constructor
        public PmStaffDataTable() :
                base("PmStaffData")
        {
        }

        /// constructor
        public PmStaffDataTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmStaffDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The connection to the site
        public DataColumn ColumnSiteKey;
        /// Key to make editing these records easier
        public DataColumn ColumnKey;
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// This is a field indicating the status of the commitment
        public DataColumn ColumnStatusCode;
        /// This is the expected date their committment starts.
        public DataColumn ColumnStartOfCommitment;
        /// Is the commitment start date an approximate date?
        public DataColumn ColumnStartDateApprox;
        /// This is the expected date their committment ends.
        public DataColumn ColumnEndOfCommitment;
        /// The office that recruited the partner. This is a unit of type field, not of type office.
        public DataColumn ColumnOfficeRecruitedBy;
        /// The home office of the person. This is a unit of type field, not of type office.
        public DataColumn ColumnHomeOffice;
        /// The person's is serving for that field.
        public DataColumn ColumnReceivingField;
        /// The office they work at in the receiving field.
        public DataColumn ColumnReceivingFieldOffice;
        /// Comments on commitment record.
        public DataColumn ColumnStaffDataComments;
        /// A free text field for a job title for a person. This is not the same as the person's role, however it may be auto generated from the roles.
        public DataColumn ColumnJobTitle;
        /// Phone extension of the person at this office
        public DataColumn ColumnOfficePhoneExt;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_status_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_start_of_commitment_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_start_date_approx_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_end_of_commitment_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_office_recruited_by_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_home_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_receiving_field_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_receiving_field_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_staff_data_comments_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_job_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_office_phone_ext_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSiteKey = this.Columns["p_site_key_n"];
            this.ColumnKey = this.Columns["pm_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnStatusCode = this.Columns["pm_status_code_c"];
            this.ColumnStartOfCommitment = this.Columns["pm_start_of_commitment_d"];
            this.ColumnStartDateApprox = this.Columns["pm_start_date_approx_l"];
            this.ColumnEndOfCommitment = this.Columns["pm_end_of_commitment_d"];
            this.ColumnOfficeRecruitedBy = this.Columns["pm_office_recruited_by_n"];
            this.ColumnHomeOffice = this.Columns["pm_home_office_n"];
            this.ColumnReceivingField = this.Columns["pm_receiving_field_n"];
            this.ColumnReceivingFieldOffice = this.Columns["pm_receiving_field_office_n"];
            this.ColumnStaffDataComments = this.Columns["pm_staff_data_comments_c"];
            this.ColumnJobTitle = this.Columns["pm_job_title_c"];
            this.ColumnOfficePhoneExt = this.Columns["pm_office_phone_ext_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnSiteKey,ColumnKey};
        }

        /// Access a typed row by index
        public PmStaffDataRow this[int i]
        {
            get
            {
                return ((PmStaffDataRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmStaffDataRow NewRowTyped(bool AWithDefaultValues)
        {
            PmStaffDataRow ret = ((PmStaffDataRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmStaffDataRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmStaffDataRow(builder);
        }

        /// get typed set of changes
        public PmStaffDataTable GetChangesTyped()
        {
            return ((PmStaffDataTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmStaffData";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_staff_data";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetSiteKeyDBName()
        {
            return "p_site_key_n";
        }

        /// get character length for column
        public static short GetSiteKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetKeyDBName()
        {
            return "pm_key_n";
        }

        /// get character length for column
        public static short GetKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStatusCodeDBName()
        {
            return "pm_status_code_c";
        }

        /// get character length for column
        public static short GetStatusCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetStartOfCommitmentDBName()
        {
            return "pm_start_of_commitment_d";
        }

        /// get character length for column
        public static short GetStartOfCommitmentLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStartDateApproxDBName()
        {
            return "pm_start_date_approx_l";
        }

        /// get character length for column
        public static short GetStartDateApproxLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetEndOfCommitmentDBName()
        {
            return "pm_end_of_commitment_d";
        }

        /// get character length for column
        public static short GetEndOfCommitmentLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetOfficeRecruitedByDBName()
        {
            return "pm_office_recruited_by_n";
        }

        /// get character length for column
        public static short GetOfficeRecruitedByLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetHomeOfficeDBName()
        {
            return "pm_home_office_n";
        }

        /// get character length for column
        public static short GetHomeOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetReceivingFieldDBName()
        {
            return "pm_receiving_field_n";
        }

        /// get character length for column
        public static short GetReceivingFieldLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetReceivingFieldOfficeDBName()
        {
            return "pm_receiving_field_office_n";
        }

        /// get character length for column
        public static short GetReceivingFieldOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStaffDataCommentsDBName()
        {
            return "pm_staff_data_comments_c";
        }

        /// get character length for column
        public static short GetStaffDataCommentsLength()
        {
            return 640;
        }

        /// get the name of the field in the database for this column
        public static string GetJobTitleDBName()
        {
            return "pm_job_title_c";
        }

        /// get character length for column
        public static short GetJobTitleLength()
        {
            return 400;
        }

        /// get the name of the field in the database for this column
        public static string GetOfficePhoneExtDBName()
        {
            return "pm_office_phone_ext_c";
        }

        /// get character length for column
        public static short GetOfficePhoneExtLength()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table contains information regarding recruitment, home office, field office, etc. .
    [Serializable()]
    public class PmStaffDataRow : System.Data.DataRow
    {
        private PmStaffDataTable myTable;

        /// Constructor
        public PmStaffDataRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmStaffDataTable)(this.Table));
        }

        /// The connection to the site
        public Int64 SiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSiteKey)
                            || (((Int64)(this[this.myTable.ColumnSiteKey])) != value)))
                {
                    this[this.myTable.ColumnSiteKey] = value;
                }
            }
        }

        /// Key to make editing these records easier
        public Int64 Key
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKey)
                            || (((Int64)(this[this.myTable.ColumnKey])) != value)))
                {
                    this[this.myTable.ColumnKey] = value;
                }
            }
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// This is a field indicating the status of the commitment
        public String StatusCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusCode)
                            || (((String)(this[this.myTable.ColumnStatusCode])) != value)))
                {
                    this[this.myTable.ColumnStatusCode] = value;
                }
            }
        }

        /// This is the expected date their committment starts.
        public System.DateTime StartOfCommitment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartOfCommitment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartOfCommitment)
                            || (((System.DateTime)(this[this.myTable.ColumnStartOfCommitment])) != value)))
                {
                    this[this.myTable.ColumnStartOfCommitment] = value;
                }
            }
        }

        /// Is the commitment start date an approximate date?
        public Boolean StartDateApprox
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartDateApprox.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartDateApprox)
                            || (((Boolean)(this[this.myTable.ColumnStartDateApprox])) != value)))
                {
                    this[this.myTable.ColumnStartDateApprox] = value;
                }
            }
        }

        /// This is the expected date their committment ends.
        public System.DateTime? EndOfCommitment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEndOfCommitment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEndOfCommitment)
                            || (((System.DateTime?)(this[this.myTable.ColumnEndOfCommitment])) != value)))
                {
                    this[this.myTable.ColumnEndOfCommitment] = value;
                }
            }
        }

        /// The office that recruited the partner. This is a unit of type field, not of type office.
        public Int64 OfficeRecruitedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOfficeRecruitedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOfficeRecruitedBy)
                            || (((Int64)(this[this.myTable.ColumnOfficeRecruitedBy])) != value)))
                {
                    this[this.myTable.ColumnOfficeRecruitedBy] = value;
                }
            }
        }

        /// The home office of the person. This is a unit of type field, not of type office.
        public Int64 HomeOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHomeOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHomeOffice)
                            || (((Int64)(this[this.myTable.ColumnHomeOffice])) != value)))
                {
                    this[this.myTable.ColumnHomeOffice] = value;
                }
            }
        }

        /// The person's is serving for that field.
        public Int64 ReceivingField
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReceivingField.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReceivingField)
                            || (((Int64)(this[this.myTable.ColumnReceivingField])) != value)))
                {
                    this[this.myTable.ColumnReceivingField] = value;
                }
            }
        }

        /// The office they work at in the receiving field.
        public Int64 ReceivingFieldOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReceivingFieldOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReceivingFieldOffice)
                            || (((Int64)(this[this.myTable.ColumnReceivingFieldOffice])) != value)))
                {
                    this[this.myTable.ColumnReceivingFieldOffice] = value;
                }
            }
        }

        /// Comments on commitment record.
        public String StaffDataComments
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStaffDataComments.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStaffDataComments)
                            || (((String)(this[this.myTable.ColumnStaffDataComments])) != value)))
                {
                    this[this.myTable.ColumnStaffDataComments] = value;
                }
            }
        }

        /// A free text field for a job title for a person. This is not the same as the person's role, however it may be auto generated from the roles.
        public String JobTitle
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJobTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJobTitle)
                            || (((String)(this[this.myTable.ColumnJobTitle])) != value)))
                {
                    this[this.myTable.ColumnJobTitle] = value;
                }
            }
        }

        /// Phone extension of the person at this office
        public String OfficePhoneExt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOfficePhoneExt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOfficePhoneExt)
                            || (((String)(this[this.myTable.ColumnOfficePhoneExt])) != value)))
                {
                    this[this.myTable.ColumnOfficePhoneExt] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnSiteKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnKey);
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnStatusCode);
            this.SetNull(this.myTable.ColumnStartOfCommitment);
            this[this.myTable.ColumnStartDateApprox.Ordinal] = false;
            this.SetNull(this.myTable.ColumnEndOfCommitment);
            this.SetNull(this.myTable.ColumnOfficeRecruitedBy);
            this.SetNull(this.myTable.ColumnHomeOffice);
            this.SetNull(this.myTable.ColumnReceivingField);
            this.SetNull(this.myTable.ColumnReceivingFieldOffice);
            this.SetNull(this.myTable.ColumnStaffDataComments);
            this.SetNull(this.myTable.ColumnJobTitle);
            this.SetNull(this.myTable.ColumnOfficePhoneExt);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsSiteKeyNull()
        {
            return this.IsNull(this.myTable.ColumnSiteKey);
        }

        /// assign NULL value
        public void SetSiteKeyNull()
        {
            this.SetNull(this.myTable.ColumnSiteKey);
        }

        /// test for NULL value
        public bool IsKeyNull()
        {
            return this.IsNull(this.myTable.ColumnKey);
        }

        /// assign NULL value
        public void SetKeyNull()
        {
            this.SetNull(this.myTable.ColumnKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsStatusCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStatusCode);
        }

        /// assign NULL value
        public void SetStatusCodeNull()
        {
            this.SetNull(this.myTable.ColumnStatusCode);
        }

        /// test for NULL value
        public bool IsStartOfCommitmentNull()
        {
            return this.IsNull(this.myTable.ColumnStartOfCommitment);
        }

        /// assign NULL value
        public void SetStartOfCommitmentNull()
        {
            this.SetNull(this.myTable.ColumnStartOfCommitment);
        }

        /// test for NULL value
        public bool IsStartDateApproxNull()
        {
            return this.IsNull(this.myTable.ColumnStartDateApprox);
        }

        /// assign NULL value
        public void SetStartDateApproxNull()
        {
            this.SetNull(this.myTable.ColumnStartDateApprox);
        }

        /// test for NULL value
        public bool IsEndOfCommitmentNull()
        {
            return this.IsNull(this.myTable.ColumnEndOfCommitment);
        }

        /// assign NULL value
        public void SetEndOfCommitmentNull()
        {
            this.SetNull(this.myTable.ColumnEndOfCommitment);
        }

        /// test for NULL value
        public bool IsOfficeRecruitedByNull()
        {
            return this.IsNull(this.myTable.ColumnOfficeRecruitedBy);
        }

        /// assign NULL value
        public void SetOfficeRecruitedByNull()
        {
            this.SetNull(this.myTable.ColumnOfficeRecruitedBy);
        }

        /// test for NULL value
        public bool IsHomeOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnHomeOffice);
        }

        /// assign NULL value
        public void SetHomeOfficeNull()
        {
            this.SetNull(this.myTable.ColumnHomeOffice);
        }

        /// test for NULL value
        public bool IsReceivingFieldNull()
        {
            return this.IsNull(this.myTable.ColumnReceivingField);
        }

        /// assign NULL value
        public void SetReceivingFieldNull()
        {
            this.SetNull(this.myTable.ColumnReceivingField);
        }

        /// test for NULL value
        public bool IsReceivingFieldOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnReceivingFieldOffice);
        }

        /// assign NULL value
        public void SetReceivingFieldOfficeNull()
        {
            this.SetNull(this.myTable.ColumnReceivingFieldOffice);
        }

        /// test for NULL value
        public bool IsStaffDataCommentsNull()
        {
            return this.IsNull(this.myTable.ColumnStaffDataComments);
        }

        /// assign NULL value
        public void SetStaffDataCommentsNull()
        {
            this.SetNull(this.myTable.ColumnStaffDataComments);
        }

        /// test for NULL value
        public bool IsJobTitleNull()
        {
            return this.IsNull(this.myTable.ColumnJobTitle);
        }

        /// assign NULL value
        public void SetJobTitleNull()
        {
            this.SetNull(this.myTable.ColumnJobTitle);
        }

        /// test for NULL value
        public bool IsOfficePhoneExtNull()
        {
            return this.IsNull(this.myTable.ColumnOfficePhoneExt);
        }

        /// assign NULL value
        public void SetOfficePhoneExtNull()
        {
            this.SetNull(this.myTable.ColumnOfficePhoneExt);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table holds the statuses that are be used for commitments.
    [Serializable()]
    public class PmCommitmentStatusTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 248;
        /// used for generic TTypedDataTable functions
        public static short ColumnCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnExplanationId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnIntranetAccessId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDisplayIdx1Id = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnassignableDateId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableFlagId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 12;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmCommitmentStatus", "pm_commitment_status",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "Code", "pm_code_c", "Status Code", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(1, "Desc", "pm_desc_c", "Description", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(2, "Explanation", "pm_explanation_c", "Explanation", OdbcType.VarChar, 1000, false),
                    new TTypedColumnInfo(3, "IntranetAccess", "pm_intranet_access_l", "Intranet Access", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(4, "DisplayIdx1", "pm_display_idx1_i", "Display Index", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(5, "UnassignableFlag", "pm_unassignable_flag_l", "Unassignable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "UnassignableDate", "pm_unassignable_date_d", "Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "DeletableFlag", "pm_deletable_flag_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(8, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmCommitmentStatusTable() :
                base("PmCommitmentStatus")
        {
        }

        /// constructor
        public PmCommitmentStatusTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmCommitmentStatusTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Code for Status
        public DataColumn ColumnCode;
        /// Description for Status
        public DataColumn ColumnDesc;
        /// Detailed Explanation for the Status
        public DataColumn ColumnExplanation;
        /// Indicates if the person with this status is generally supposed to have access to the worldwide intranet of the organisation
        public DataColumn ColumnIntranetAccess;
        /// Display Index (for sorting other than alphabetically).
        public DataColumn ColumnDisplayIdx1;
        /// Indicates if this code can still be assigned?
        public DataColumn ColumnUnassignableFlag;
        /// Date from which this code was made unassignable.
        public DataColumn ColumnUnassignableDate;
        /// Indicates if a record can be deleted.
        public DataColumn ColumnDeletableFlag;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pm_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_explanation_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_intranet_access_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_display_idx1_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_unassignable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_unassignable_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_deletable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCode = this.Columns["pm_code_c"];
            this.ColumnDesc = this.Columns["pm_desc_c"];
            this.ColumnExplanation = this.Columns["pm_explanation_c"];
            this.ColumnIntranetAccess = this.Columns["pm_intranet_access_l"];
            this.ColumnDisplayIdx1 = this.Columns["pm_display_idx1_i"];
            this.ColumnUnassignableFlag = this.Columns["pm_unassignable_flag_l"];
            this.ColumnUnassignableDate = this.Columns["pm_unassignable_date_d"];
            this.ColumnDeletableFlag = this.Columns["pm_deletable_flag_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnCode};
        }

        /// Access a typed row by index
        public PmCommitmentStatusRow this[int i]
        {
            get
            {
                return ((PmCommitmentStatusRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmCommitmentStatusRow NewRowTyped(bool AWithDefaultValues)
        {
            PmCommitmentStatusRow ret = ((PmCommitmentStatusRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmCommitmentStatusRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmCommitmentStatusRow(builder);
        }

        /// get typed set of changes
        public PmCommitmentStatusTable GetChangesTyped()
        {
            return ((PmCommitmentStatusTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmCommitmentStatus";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_commitment_status";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCodeDBName()
        {
            return "pm_code_c";
        }

        /// get character length for column
        public static short GetCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetDescDBName()
        {
            return "pm_desc_c";
        }

        /// get character length for column
        public static short GetDescLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetExplanationDBName()
        {
            return "pm_explanation_c";
        }

        /// get character length for column
        public static short GetExplanationLength()
        {
            return 1000;
        }

        /// get the name of the field in the database for this column
        public static string GetIntranetAccessDBName()
        {
            return "pm_intranet_access_l";
        }

        /// get character length for column
        public static short GetIntranetAccessLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDisplayIdx1DBName()
        {
            return "pm_display_idx1_i";
        }

        /// get character length for column
        public static short GetDisplayIdx1Length()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableFlagDBName()
        {
            return "pm_unassignable_flag_l";
        }

        /// get character length for column
        public static short GetUnassignableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUnassignableDateDBName()
        {
            return "pm_unassignable_date_d";
        }

        /// get character length for column
        public static short GetUnassignableDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableFlagDBName()
        {
            return "pm_deletable_flag_l";
        }

        /// get character length for column
        public static short GetDeletableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table holds the statuses that are be used for commitments.
    [Serializable()]
    public class PmCommitmentStatusRow : System.Data.DataRow
    {
        private PmCommitmentStatusTable myTable;

        /// Constructor
        public PmCommitmentStatusRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmCommitmentStatusTable)(this.Table));
        }

        /// Code for Status
        public String Code
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCode)
                            || (((String)(this[this.myTable.ColumnCode])) != value)))
                {
                    this[this.myTable.ColumnCode] = value;
                }
            }
        }

        /// Description for Status
        public String Desc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDesc)
                            || (((String)(this[this.myTable.ColumnDesc])) != value)))
                {
                    this[this.myTable.ColumnDesc] = value;
                }
            }
        }

        /// Detailed Explanation for the Status
        public String Explanation
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExplanation.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExplanation)
                            || (((String)(this[this.myTable.ColumnExplanation])) != value)))
                {
                    this[this.myTable.ColumnExplanation] = value;
                }
            }
        }

        /// Indicates if the person with this status is generally supposed to have access to the worldwide intranet of the organisation
        public Boolean IntranetAccess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIntranetAccess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIntranetAccess)
                            || (((Boolean)(this[this.myTable.ColumnIntranetAccess])) != value)))
                {
                    this[this.myTable.ColumnIntranetAccess] = value;
                }
            }
        }

        /// Display Index (for sorting other than alphabetically).
        public Int32 DisplayIdx1
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDisplayIdx1.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDisplayIdx1)
                            || (((Int32)(this[this.myTable.ColumnDisplayIdx1])) != value)))
                {
                    this[this.myTable.ColumnDisplayIdx1] = value;
                }
            }
        }

        /// Indicates if this code can still be assigned?
        public Boolean UnassignableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableFlag)
                            || (((Boolean)(this[this.myTable.ColumnUnassignableFlag])) != value)))
                {
                    this[this.myTable.ColumnUnassignableFlag] = value;
                }
            }
        }

        /// Date from which this code was made unassignable.
        public System.DateTime? UnassignableDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnassignableDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnassignableDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnUnassignableDate])) != value)))
                {
                    this[this.myTable.ColumnUnassignableDate] = value;
                }
            }
        }

        /// Indicates if a record can be deleted.
        public Boolean DeletableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeletableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeletableFlag] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCode);
            this.SetNull(this.myTable.ColumnDesc);
            this.SetNull(this.myTable.ColumnExplanation);
            this[this.myTable.ColumnIntranetAccess.Ordinal] = true;
            this.SetNull(this.myTable.ColumnDisplayIdx1);
            this[this.myTable.ColumnUnassignableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnUnassignableDate);
            this[this.myTable.ColumnDeletableFlag.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCode);
        }

        /// assign NULL value
        public void SetCodeNull()
        {
            this.SetNull(this.myTable.ColumnCode);
        }

        /// test for NULL value
        public bool IsDescNull()
        {
            return this.IsNull(this.myTable.ColumnDesc);
        }

        /// assign NULL value
        public void SetDescNull()
        {
            this.SetNull(this.myTable.ColumnDesc);
        }

        /// test for NULL value
        public bool IsExplanationNull()
        {
            return this.IsNull(this.myTable.ColumnExplanation);
        }

        /// assign NULL value
        public void SetExplanationNull()
        {
            this.SetNull(this.myTable.ColumnExplanation);
        }

        /// test for NULL value
        public bool IsIntranetAccessNull()
        {
            return this.IsNull(this.myTable.ColumnIntranetAccess);
        }

        /// assign NULL value
        public void SetIntranetAccessNull()
        {
            this.SetNull(this.myTable.ColumnIntranetAccess);
        }

        /// test for NULL value
        public bool IsDisplayIdx1Null()
        {
            return this.IsNull(this.myTable.ColumnDisplayIdx1);
        }

        /// assign NULL value
        public void SetDisplayIdx1Null()
        {
            this.SetNull(this.myTable.ColumnDisplayIdx1);
        }

        /// test for NULL value
        public bool IsUnassignableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableFlag);
        }

        /// assign NULL value
        public void SetUnassignableFlagNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableFlag);
        }

        /// test for NULL value
        public bool IsUnassignableDateNull()
        {
            return this.IsNull(this.myTable.ColumnUnassignableDate);
        }

        /// assign NULL value
        public void SetUnassignableDateNull()
        {
            this.SetNull(this.myTable.ColumnUnassignableDate);
        }

        /// test for NULL value
        public bool IsDeletableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeletableFlag);
        }

        /// assign NULL value
        public void SetDeletableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeletableFlag);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This table holds the commitment status history of a person
    [Serializable()]
    public class PmPersonCommitmentStatusTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 249;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnStatusCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnStatusSinceId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 7;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmPersonCommitmentStatus", "pm_person_commitment_status",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "StatusCode", "pm_status_code_c", "Status Code", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(2, "StatusSince", "pm_status_since_d", "Status since", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(3, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(5, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public PmPersonCommitmentStatusTable() :
                base("PmPersonCommitmentStatus")
        {
        }

        /// constructor
        public PmPersonCommitmentStatusTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmPersonCommitmentStatusTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// Code for Status
        public DataColumn ColumnStatusCode;
        /// This is the date since the status is valid
        public DataColumn ColumnStatusSince;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_status_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_status_since_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnStatusCode = this.Columns["pm_status_code_c"];
            this.ColumnStatusSince = this.Columns["pm_status_since_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnPartnerKey,ColumnStatusCode,ColumnStatusSince};
        }

        /// Access a typed row by index
        public PmPersonCommitmentStatusRow this[int i]
        {
            get
            {
                return ((PmPersonCommitmentStatusRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmPersonCommitmentStatusRow NewRowTyped(bool AWithDefaultValues)
        {
            PmPersonCommitmentStatusRow ret = ((PmPersonCommitmentStatusRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmPersonCommitmentStatusRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmPersonCommitmentStatusRow(builder);
        }

        /// get typed set of changes
        public PmPersonCommitmentStatusTable GetChangesTyped()
        {
            return ((PmPersonCommitmentStatusTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmPersonCommitmentStatus";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_person_commitment_status";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetStatusCodeDBName()
        {
            return "pm_status_code_c";
        }

        /// get character length for column
        public static short GetStatusCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetStatusSinceDBName()
        {
            return "pm_status_since_d";
        }

        /// get character length for column
        public static short GetStatusSinceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This table holds the commitment status history of a person
    [Serializable()]
    public class PmPersonCommitmentStatusRow : System.Data.DataRow
    {
        private PmPersonCommitmentStatusTable myTable;

        /// Constructor
        public PmPersonCommitmentStatusRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmPersonCommitmentStatusTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Code for Status
        public String StatusCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusCode)
                            || (((String)(this[this.myTable.ColumnStatusCode])) != value)))
                {
                    this[this.myTable.ColumnStatusCode] = value;
                }
            }
        }

        /// This is the date since the status is valid
        public System.DateTime StatusSince
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatusSince.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatusSince)
                            || (((System.DateTime)(this[this.myTable.ColumnStatusSince])) != value)))
                {
                    this[this.myTable.ColumnStatusSince] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnStatusCode);
            this.SetNull(this.myTable.ColumnStatusSince);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsStatusCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStatusCode);
        }

        /// assign NULL value
        public void SetStatusCodeNull()
        {
            this.SetNull(this.myTable.ColumnStatusCode);
        }

        /// test for NULL value
        public bool IsStatusSinceNull()
        {
            return this.IsNull(this.myTable.ColumnStatusSince);
        }

        /// assign NULL value
        public void SetStatusSinceNull()
        {
            this.SetNull(this.myTable.ColumnStatusSince);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Associates Progress program files with their Petra Personnel report names.
    [Serializable()]
    public class PtReportsTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 250;
        /// used for generic TTypedDataTable functions
        public static short ColumnReportNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnReportDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnReportProgramId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 7;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PtReports", "pt_reports",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "ReportName", "pt_report_name_c", "Report Name", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(1, "ReportDescription", "pt_report_description_c", "Description", OdbcType.VarChar, 510, false),
                    new TTypedColumnInfo(2, "ReportProgram", "pt_report_program_c", "Report Program", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(3, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(5, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PtReportsTable() :
                base("PtReports")
        {
        }

        /// constructor
        public PtReportsTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PtReportsTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnReportName;
        ///
        public DataColumn ColumnReportDescription;
        ///
        public DataColumn ColumnReportProgram;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("pt_report_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_report_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_report_program_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnReportName = this.Columns["pt_report_name_c"];
            this.ColumnReportDescription = this.Columns["pt_report_description_c"];
            this.ColumnReportProgram = this.Columns["pt_report_program_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnReportName};
        }

        /// Access a typed row by index
        public PtReportsRow this[int i]
        {
            get
            {
                return ((PtReportsRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PtReportsRow NewRowTyped(bool AWithDefaultValues)
        {
            PtReportsRow ret = ((PtReportsRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PtReportsRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PtReportsRow(builder);
        }

        /// get typed set of changes
        public PtReportsTable GetChangesTyped()
        {
            return ((PtReportsTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PtReports";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pt_reports";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetReportNameDBName()
        {
            return "pt_report_name_c";
        }

        /// get character length for column
        public static short GetReportNameLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetReportDescriptionDBName()
        {
            return "pt_report_description_c";
        }

        /// get character length for column
        public static short GetReportDescriptionLength()
        {
            return 510;
        }

        /// get the name of the field in the database for this column
        public static string GetReportProgramDBName()
        {
            return "pt_report_program_c";
        }

        /// get character length for column
        public static short GetReportProgramLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Associates Progress program files with their Petra Personnel report names.
    [Serializable()]
    public class PtReportsRow : System.Data.DataRow
    {
        private PtReportsTable myTable;

        /// Constructor
        public PtReportsRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PtReportsTable)(this.Table));
        }

        ///
        public String ReportName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportName)
                            || (((String)(this[this.myTable.ColumnReportName])) != value)))
                {
                    this[this.myTable.ColumnReportName] = value;
                }
            }
        }

        ///
        public String ReportDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportDescription)
                            || (((String)(this[this.myTable.ColumnReportDescription])) != value)))
                {
                    this[this.myTable.ColumnReportDescription] = value;
                }
            }
        }

        ///
        public String ReportProgram
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportProgram.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportProgram)
                            || (((String)(this[this.myTable.ColumnReportProgram])) != value)))
                {
                    this[this.myTable.ColumnReportProgram] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnReportName);
            this.SetNull(this.myTable.ColumnReportDescription);
            this.SetNull(this.myTable.ColumnReportProgram);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsReportNameNull()
        {
            return this.IsNull(this.myTable.ColumnReportName);
        }

        /// assign NULL value
        public void SetReportNameNull()
        {
            this.SetNull(this.myTable.ColumnReportName);
        }

        /// test for NULL value
        public bool IsReportDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnReportDescription);
        }

        /// assign NULL value
        public void SetReportDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnReportDescription);
        }

        /// test for NULL value
        public bool IsReportProgramNull()
        {
            return this.IsNull(this.myTable.ColumnReportProgram);
        }

        /// assign NULL value
        public void SetReportProgramNull()
        {
            this.SetNull(this.myTable.ColumnReportProgram);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This defines the position one fills.
    [Serializable()]
    public class PmJobAssignmentTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 259;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnitKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPositionNameId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnPositionScopeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnJobKeyId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnJobAssignmentKeyId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnAssistantToId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnAssignmentTypeCodeId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostsChangedFlagId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnFromDateId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnToDateId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnLeavingCodeId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnLeavingCodeUpdatedDateId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnHrdCpyDetailChangeFlagId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeleteableFlagId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 20;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmJobAssignment", "pm_job_assignment",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "UnitKey", "pm_unit_key_n", "Unit Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "PositionName", "pt_position_name_c", "Position", OdbcType.VarChar, 60, true),
                    new TTypedColumnInfo(3, "PositionScope", "pt_position_scope_c", "Position Scope", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(4, "JobKey", "um_job_key_i", "um_job_key_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(5, "JobAssignmentKey", "pm_job_assignment_key_i", "pm_job_assignment_key_i", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(6, "AssistantTo", "pt_assistant_to_l", "pt_assistant_to_l", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(7, "AssignmentTypeCode", "pt_assignment_type_code_c", "Assignment Type", OdbcType.VarChar, 2, false),
                    new TTypedColumnInfo(8, "CostsChangedFlag", "um_costs_changed_flag_l", "Costs Changed", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(9, "FromDate", "pm_from_date_d", "From Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(10, "ToDate", "pm_to_date_d", "To Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "LeavingCode", "pm_leaving_code_c", "Leaving Code", OdbcType.VarChar, 4, false),
                    new TTypedColumnInfo(12, "LeavingCodeUpdatedDate", "pm_leaving_code_updated_date_d", "Updated Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "HrdCpyDetailChangeFlag", "pm_hrd_cpy_detail_change_flag_l", "Hard Copy change flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(14, "DeleteableFlag", "pm_deleteable_flag_l", "Deletable Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(15, "RegistrationOffice", "pm_registration_office_n", "pm_registration_office_n", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(16, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(17, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(18, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(19, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(20, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3, 4, 5
                }));
            return true;
        }

        /// constructor
        public PmJobAssignmentTable() :
                base("PmJobAssignment")
        {
        }

        /// constructor
        public PmJobAssignmentTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmJobAssignmentTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// This is the partner key of the unit to which this person is assigned. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnUnitKey;
        /// Name of the position.
        public DataColumn ColumnPositionName;
        /// Scope of the position.
        public DataColumn ColumnPositionScope;
        ///
        public DataColumn ColumnJobKey;
        /// A number to make this unique as other wise we would need to add date from/to
        public DataColumn ColumnJobAssignmentKey;
        /// Indicates if the assignment is in assistance to the given position.
        public DataColumn ColumnAssistantTo;
        /// This defines the type of assignment.
        public DataColumn ColumnAssignmentTypeCode;
        /// Can these costs be changed?
        public DataColumn ColumnCostsChangedFlag;
        /// This is the date from which this job is assigned.
        public DataColumn ColumnFromDate;
        /// This is the date to which a job is expected to be filled.
        public DataColumn ColumnToDate;
        /// This is a one character field indicating the leaving code.
        public DataColumn ColumnLeavingCode;
        /// This date field indicating the date the leaving code was updated.
        public DataColumn ColumnLeavingCodeUpdatedDate;
        /// This field indicates if the hard copy details have been changed.
        public DataColumn ColumnHrdCpyDetailChangeFlag;
        /// This field indicates if the record is deletable.
        public DataColumn ColumnDeleteableFlag;
        /// The office that entered this assignment
        public DataColumn ColumnRegistrationOffice;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_unit_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pt_position_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pt_position_scope_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("um_job_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_job_assignment_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pt_assistant_to_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pt_assignment_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("um_costs_changed_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_from_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_to_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_leaving_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("pm_leaving_code_updated_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("pm_hrd_cpy_detail_change_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_deleteable_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnUnitKey = this.Columns["pm_unit_key_n"];
            this.ColumnPositionName = this.Columns["pt_position_name_c"];
            this.ColumnPositionScope = this.Columns["pt_position_scope_c"];
            this.ColumnJobKey = this.Columns["um_job_key_i"];
            this.ColumnJobAssignmentKey = this.Columns["pm_job_assignment_key_i"];
            this.ColumnAssistantTo = this.Columns["pt_assistant_to_l"];
            this.ColumnAssignmentTypeCode = this.Columns["pt_assignment_type_code_c"];
            this.ColumnCostsChangedFlag = this.Columns["um_costs_changed_flag_l"];
            this.ColumnFromDate = this.Columns["pm_from_date_d"];
            this.ColumnToDate = this.Columns["pm_to_date_d"];
            this.ColumnLeavingCode = this.Columns["pm_leaving_code_c"];
            this.ColumnLeavingCodeUpdatedDate = this.Columns["pm_leaving_code_updated_date_d"];
            this.ColumnHrdCpyDetailChangeFlag = this.Columns["pm_hrd_cpy_detail_change_flag_l"];
            this.ColumnDeleteableFlag = this.Columns["pm_deleteable_flag_l"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[6] {
                    ColumnPartnerKey,ColumnUnitKey,ColumnPositionName,ColumnPositionScope,ColumnJobKey,ColumnJobAssignmentKey};
        }

        /// Access a typed row by index
        public PmJobAssignmentRow this[int i]
        {
            get
            {
                return ((PmJobAssignmentRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmJobAssignmentRow NewRowTyped(bool AWithDefaultValues)
        {
            PmJobAssignmentRow ret = ((PmJobAssignmentRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmJobAssignmentRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmJobAssignmentRow(builder);
        }

        /// get typed set of changes
        public PmJobAssignmentTable GetChangesTyped()
        {
            return ((PmJobAssignmentTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmJobAssignment";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_job_assignment";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetUnitKeyDBName()
        {
            return "pm_unit_key_n";
        }

        /// get character length for column
        public static short GetUnitKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPositionNameDBName()
        {
            return "pt_position_name_c";
        }

        /// get character length for column
        public static short GetPositionNameLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetPositionScopeDBName()
        {
            return "pt_position_scope_c";
        }

        /// get character length for column
        public static short GetPositionScopeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJobKeyDBName()
        {
            return "um_job_key_i";
        }

        /// get character length for column
        public static short GetJobKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJobAssignmentKeyDBName()
        {
            return "pm_job_assignment_key_i";
        }

        /// get character length for column
        public static short GetJobAssignmentKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAssistantToDBName()
        {
            return "pt_assistant_to_l";
        }

        /// get character length for column
        public static short GetAssistantToLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAssignmentTypeCodeDBName()
        {
            return "pt_assignment_type_code_c";
        }

        /// get character length for column
        public static short GetAssignmentTypeCodeLength()
        {
            return 2;
        }

        /// get the name of the field in the database for this column
        public static string GetCostsChangedFlagDBName()
        {
            return "um_costs_changed_flag_l";
        }

        /// get character length for column
        public static short GetCostsChangedFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFromDateDBName()
        {
            return "pm_from_date_d";
        }

        /// get character length for column
        public static short GetFromDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetToDateDBName()
        {
            return "pm_to_date_d";
        }

        /// get character length for column
        public static short GetToDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLeavingCodeDBName()
        {
            return "pm_leaving_code_c";
        }

        /// get character length for column
        public static short GetLeavingCodeLength()
        {
            return 4;
        }

        /// get the name of the field in the database for this column
        public static string GetLeavingCodeUpdatedDateDBName()
        {
            return "pm_leaving_code_updated_date_d";
        }

        /// get character length for column
        public static short GetLeavingCodeUpdatedDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetHrdCpyDetailChangeFlagDBName()
        {
            return "pm_hrd_cpy_detail_change_flag_l";
        }

        /// get character length for column
        public static short GetHrdCpyDetailChangeFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeleteableFlagDBName()
        {
            return "pm_deleteable_flag_l";
        }

        /// get character length for column
        public static short GetDeleteableFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This defines the position one fills.
    [Serializable()]
    public class PmJobAssignmentRow : System.Data.DataRow
    {
        private PmJobAssignmentTable myTable;

        /// Constructor
        public PmJobAssignmentRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmJobAssignmentTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// This is the partner key of the unit to which this person is assigned. It consists of the fund id followed by a computer generated six digit number.
        public Int64 UnitKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitKey)
                            || (((Int64)(this[this.myTable.ColumnUnitKey])) != value)))
                {
                    this[this.myTable.ColumnUnitKey] = value;
                }
            }
        }

        /// Name of the position.
        public String PositionName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPositionName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPositionName)
                            || (((String)(this[this.myTable.ColumnPositionName])) != value)))
                {
                    this[this.myTable.ColumnPositionName] = value;
                }
            }
        }

        /// Scope of the position.
        public String PositionScope
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPositionScope.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPositionScope)
                            || (((String)(this[this.myTable.ColumnPositionScope])) != value)))
                {
                    this[this.myTable.ColumnPositionScope] = value;
                }
            }
        }

        ///
        public Int32 JobKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJobKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJobKey)
                            || (((Int32)(this[this.myTable.ColumnJobKey])) != value)))
                {
                    this[this.myTable.ColumnJobKey] = value;
                }
            }
        }

        /// A number to make this unique as other wise we would need to add date from/to
        public Int32 JobAssignmentKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJobAssignmentKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJobAssignmentKey)
                            || (((Int32)(this[this.myTable.ColumnJobAssignmentKey])) != value)))
                {
                    this[this.myTable.ColumnJobAssignmentKey] = value;
                }
            }
        }

        /// Indicates if the assignment is in assistance to the given position.
        public Boolean AssistantTo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAssistantTo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAssistantTo)
                            || (((Boolean)(this[this.myTable.ColumnAssistantTo])) != value)))
                {
                    this[this.myTable.ColumnAssistantTo] = value;
                }
            }
        }

        /// This defines the type of assignment.
        public String AssignmentTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAssignmentTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAssignmentTypeCode)
                            || (((String)(this[this.myTable.ColumnAssignmentTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAssignmentTypeCode] = value;
                }
            }
        }

        /// Can these costs be changed?
        public Boolean CostsChangedFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostsChangedFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostsChangedFlag)
                            || (((Boolean)(this[this.myTable.ColumnCostsChangedFlag])) != value)))
                {
                    this[this.myTable.ColumnCostsChangedFlag] = value;
                }
            }
        }

        /// This is the date from which this job is assigned.
        public System.DateTime FromDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromDate)
                            || (((System.DateTime)(this[this.myTable.ColumnFromDate])) != value)))
                {
                    this[this.myTable.ColumnFromDate] = value;
                }
            }
        }

        /// This is the date to which a job is expected to be filled.
        public System.DateTime? ToDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnToDate])) != value)))
                {
                    this[this.myTable.ColumnToDate] = value;
                }
            }
        }

        /// This is a one character field indicating the leaving code.
        public String LeavingCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLeavingCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLeavingCode)
                            || (((String)(this[this.myTable.ColumnLeavingCode])) != value)))
                {
                    this[this.myTable.ColumnLeavingCode] = value;
                }
            }
        }

        /// This date field indicating the date the leaving code was updated.
        public System.DateTime? LeavingCodeUpdatedDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLeavingCodeUpdatedDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLeavingCodeUpdatedDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnLeavingCodeUpdatedDate])) != value)))
                {
                    this[this.myTable.ColumnLeavingCodeUpdatedDate] = value;
                }
            }
        }

        /// This field indicates if the hard copy details have been changed.
        public Boolean HrdCpyDetailChangeFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHrdCpyDetailChangeFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHrdCpyDetailChangeFlag)
                            || (((Boolean)(this[this.myTable.ColumnHrdCpyDetailChangeFlag])) != value)))
                {
                    this[this.myTable.ColumnHrdCpyDetailChangeFlag] = value;
                }
            }
        }

        /// This field indicates if the record is deletable.
        public Boolean DeleteableFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteableFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteableFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeleteableFlag])) != value)))
                {
                    this[this.myTable.ColumnDeleteableFlag] = value;
                }
            }
        }

        /// The office that entered this assignment
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnUnitKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPositionName);
            this.SetNull(this.myTable.ColumnPositionScope);
            this.SetNull(this.myTable.ColumnJobKey);
            this.SetNull(this.myTable.ColumnJobAssignmentKey);
            this[this.myTable.ColumnAssistantTo.Ordinal] = false;
            this.SetNull(this.myTable.ColumnAssignmentTypeCode);
            this[this.myTable.ColumnCostsChangedFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnFromDate);
            this.SetNull(this.myTable.ColumnToDate);
            this.SetNull(this.myTable.ColumnLeavingCode);
            this.SetNull(this.myTable.ColumnLeavingCodeUpdatedDate);
            this[this.myTable.ColumnHrdCpyDetailChangeFlag.Ordinal] = false;
            this[this.myTable.ColumnDeleteableFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnRegistrationOffice);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsUnitKeyNull()
        {
            return this.IsNull(this.myTable.ColumnUnitKey);
        }

        /// assign NULL value
        public void SetUnitKeyNull()
        {
            this.SetNull(this.myTable.ColumnUnitKey);
        }

        /// test for NULL value
        public bool IsPositionNameNull()
        {
            return this.IsNull(this.myTable.ColumnPositionName);
        }

        /// assign NULL value
        public void SetPositionNameNull()
        {
            this.SetNull(this.myTable.ColumnPositionName);
        }

        /// test for NULL value
        public bool IsPositionScopeNull()
        {
            return this.IsNull(this.myTable.ColumnPositionScope);
        }

        /// assign NULL value
        public void SetPositionScopeNull()
        {
            this.SetNull(this.myTable.ColumnPositionScope);
        }

        /// test for NULL value
        public bool IsJobKeyNull()
        {
            return this.IsNull(this.myTable.ColumnJobKey);
        }

        /// assign NULL value
        public void SetJobKeyNull()
        {
            this.SetNull(this.myTable.ColumnJobKey);
        }

        /// test for NULL value
        public bool IsJobAssignmentKeyNull()
        {
            return this.IsNull(this.myTable.ColumnJobAssignmentKey);
        }

        /// assign NULL value
        public void SetJobAssignmentKeyNull()
        {
            this.SetNull(this.myTable.ColumnJobAssignmentKey);
        }

        /// test for NULL value
        public bool IsAssistantToNull()
        {
            return this.IsNull(this.myTable.ColumnAssistantTo);
        }

        /// assign NULL value
        public void SetAssistantToNull()
        {
            this.SetNull(this.myTable.ColumnAssistantTo);
        }

        /// test for NULL value
        public bool IsAssignmentTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAssignmentTypeCode);
        }

        /// assign NULL value
        public void SetAssignmentTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAssignmentTypeCode);
        }

        /// test for NULL value
        public bool IsCostsChangedFlagNull()
        {
            return this.IsNull(this.myTable.ColumnCostsChangedFlag);
        }

        /// assign NULL value
        public void SetCostsChangedFlagNull()
        {
            this.SetNull(this.myTable.ColumnCostsChangedFlag);
        }

        /// test for NULL value
        public bool IsFromDateNull()
        {
            return this.IsNull(this.myTable.ColumnFromDate);
        }

        /// assign NULL value
        public void SetFromDateNull()
        {
            this.SetNull(this.myTable.ColumnFromDate);
        }

        /// test for NULL value
        public bool IsToDateNull()
        {
            return this.IsNull(this.myTable.ColumnToDate);
        }

        /// assign NULL value
        public void SetToDateNull()
        {
            this.SetNull(this.myTable.ColumnToDate);
        }

        /// test for NULL value
        public bool IsLeavingCodeNull()
        {
            return this.IsNull(this.myTable.ColumnLeavingCode);
        }

        /// assign NULL value
        public void SetLeavingCodeNull()
        {
            this.SetNull(this.myTable.ColumnLeavingCode);
        }

        /// test for NULL value
        public bool IsLeavingCodeUpdatedDateNull()
        {
            return this.IsNull(this.myTable.ColumnLeavingCodeUpdatedDate);
        }

        /// assign NULL value
        public void SetLeavingCodeUpdatedDateNull()
        {
            this.SetNull(this.myTable.ColumnLeavingCodeUpdatedDate);
        }

        /// test for NULL value
        public bool IsHrdCpyDetailChangeFlagNull()
        {
            return this.IsNull(this.myTable.ColumnHrdCpyDetailChangeFlag);
        }

        /// assign NULL value
        public void SetHrdCpyDetailChangeFlagNull()
        {
            this.SetNull(this.myTable.ColumnHrdCpyDetailChangeFlag);
        }

        /// test for NULL value
        public bool IsDeleteableFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteableFlag);
        }

        /// assign NULL value
        public void SetDeleteableFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeleteableFlag);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Link file with a personal document
    [Serializable()]
    public class PmDocumentFileTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 337;
        /// used for generic TTypedDataTable functions
        public static short ColumnFileInfoKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnSiteKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDocumentKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmDocumentFile", "pm_document_file",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FileInfoKey", "p_file_info_key_n", "", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "SiteKey", "p_site_key_n", "Site Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "DocumentKey", "pm_document_key_n", "Document Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmDocumentFileTable() :
                base("PmDocumentFile")
        {
        }

        /// constructor
        public PmDocumentFileTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmDocumentFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnFileInfoKey;
        /// This is the key that tell what site created this document
        public DataColumn ColumnSiteKey;
        /// Key to identify the document
        public DataColumn ColumnDocumentKey;
        /// Partner key that the file is linked with (needed for performance reasons to find all records linked with a partner)
        public DataColumn ColumnPartnerKey;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_file_info_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_site_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_document_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileInfoKey = this.Columns["p_file_info_key_n"];
            this.ColumnSiteKey = this.Columns["p_site_key_n"];
            this.ColumnDocumentKey = this.Columns["pm_document_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnFileInfoKey};
        }

        /// Access a typed row by index
        public PmDocumentFileRow this[int i]
        {
            get
            {
                return ((PmDocumentFileRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmDocumentFileRow NewRowTyped(bool AWithDefaultValues)
        {
            PmDocumentFileRow ret = ((PmDocumentFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmDocumentFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmDocumentFileRow(builder);
        }

        /// get typed set of changes
        public PmDocumentFileTable GetChangesTyped()
        {
            return ((PmDocumentFileTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmDocumentFile";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_document_file";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFileInfoKeyDBName()
        {
            return "p_file_info_key_n";
        }

        /// get character length for column
        public static short GetFileInfoKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetSiteKeyDBName()
        {
            return "p_site_key_n";
        }

        /// get character length for column
        public static short GetSiteKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDocumentKeyDBName()
        {
            return "pm_document_key_n";
        }

        /// get character length for column
        public static short GetDocumentKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Link file with a personal document
    [Serializable()]
    public class PmDocumentFileRow : System.Data.DataRow
    {
        private PmDocumentFileTable myTable;

        /// Constructor
        public PmDocumentFileRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmDocumentFileTable)(this.Table));
        }

        ///
        public Int64 FileInfoKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileInfoKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileInfoKey)
                            || (((Int64)(this[this.myTable.ColumnFileInfoKey])) != value)))
                {
                    this[this.myTable.ColumnFileInfoKey] = value;
                }
            }
        }

        /// This is the key that tell what site created this document
        public Int64 SiteKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSiteKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSiteKey)
                            || (((Int64)(this[this.myTable.ColumnSiteKey])) != value)))
                {
                    this[this.myTable.ColumnSiteKey] = value;
                }
            }
        }

        /// Key to identify the document
        public Int64 DocumentKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDocumentKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDocumentKey)
                            || (((Int64)(this[this.myTable.ColumnDocumentKey])) != value)))
                {
                    this[this.myTable.ColumnDocumentKey] = value;
                }
            }
        }

        /// Partner key that the file is linked with (needed for performance reasons to find all records linked with a partner)
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
            this[this.myTable.ColumnSiteKey.Ordinal] = 0;
            this[this.myTable.ColumnDocumentKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPartnerKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFileInfoKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFileInfoKey);
        }

        /// assign NULL value
        public void SetFileInfoKeyNull()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
        }

        /// test for NULL value
        public bool IsSiteKeyNull()
        {
            return this.IsNull(this.myTable.ColumnSiteKey);
        }

        /// assign NULL value
        public void SetSiteKeyNull()
        {
            this.SetNull(this.myTable.ColumnSiteKey);
        }

        /// test for NULL value
        public bool IsDocumentKeyNull()
        {
            return this.IsNull(this.myTable.ColumnDocumentKey);
        }

        /// assign NULL value
        public void SetDocumentKeyNull()
        {
            this.SetNull(this.myTable.ColumnDocumentKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Link file with an application
    [Serializable()]
    public class PmApplicationFileTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 338;
        /// used for generic TTypedDataTable functions
        public static short ColumnFileInfoKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnApplicationKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmApplicationFile", "pm_application_file",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FileInfoKey", "p_file_info_key_n", "", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "ApplicationKey", "pm_application_key_i", "Application Key", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(3, "RegistrationOffice", "pm_registration_office_n", "Registration Office", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmApplicationFileTable() :
                base("PmApplicationFile")
        {
        }

        /// constructor
        public PmApplicationFileTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmApplicationFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnFileInfoKey;
        /// Partner key that the file is linked with
        public DataColumn ColumnPartnerKey;
        /// Key to uniquely identify application
        public DataColumn ColumnApplicationKey;
        /// Partner key of office by which application was entered.
        public DataColumn ColumnRegistrationOffice;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_file_info_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_application_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileInfoKey = this.Columns["p_file_info_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnApplicationKey = this.Columns["pm_application_key_i"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnFileInfoKey};
        }

        /// Access a typed row by index
        public PmApplicationFileRow this[int i]
        {
            get
            {
                return ((PmApplicationFileRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmApplicationFileRow NewRowTyped(bool AWithDefaultValues)
        {
            PmApplicationFileRow ret = ((PmApplicationFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmApplicationFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmApplicationFileRow(builder);
        }

        /// get typed set of changes
        public PmApplicationFileTable GetChangesTyped()
        {
            return ((PmApplicationFileTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmApplicationFile";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_application_file";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFileInfoKeyDBName()
        {
            return "p_file_info_key_n";
        }

        /// get character length for column
        public static short GetFileInfoKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetApplicationKeyDBName()
        {
            return "pm_application_key_i";
        }

        /// get character length for column
        public static short GetApplicationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Link file with an application
    [Serializable()]
    public class PmApplicationFileRow : System.Data.DataRow
    {
        private PmApplicationFileTable myTable;

        /// Constructor
        public PmApplicationFileRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmApplicationFileTable)(this.Table));
        }

        ///
        public Int64 FileInfoKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileInfoKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileInfoKey)
                            || (((Int64)(this[this.myTable.ColumnFileInfoKey])) != value)))
                {
                    this[this.myTable.ColumnFileInfoKey] = value;
                }
            }
        }

        /// Partner key that the file is linked with
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Key to uniquely identify application
        public Int32 ApplicationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApplicationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApplicationKey)
                            || (((Int32)(this[this.myTable.ColumnApplicationKey])) != value)))
                {
                    this[this.myTable.ColumnApplicationKey] = value;
                }
            }
        }

        /// Partner key of office by which application was entered.
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnApplicationKey);
            this.SetNull(this.myTable.ColumnRegistrationOffice);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFileInfoKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFileInfoKey);
        }

        /// assign NULL value
        public void SetFileInfoKeyNull()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsApplicationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnApplicationKey);
        }

        /// assign NULL value
        public void SetApplicationKeyNull()
        {
            this.SetNull(this.myTable.ColumnApplicationKey);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Link file with an application form
    [Serializable()]
    public class PmApplicationFormsFileTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 339;
        /// used for generic TTypedDataTable functions
        public static short ColumnFileInfoKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnApplicationKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnRegistrationOfficeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormNameId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PmApplicationFormsFile", "pm_application_forms_file",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FileInfoKey", "p_file_info_key_n", "", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(2, "ApplicationKey", "pm_application_key_i", "Application Key", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(3, "RegistrationOffice", "pm_registration_office_n", "Registration Office", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(4, "FormName", "pt_form_name_c", "Form Name", OdbcType.VarChar, 32, true),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PmApplicationFormsFileTable() :
                base("PmApplicationFormsFile")
        {
        }

        /// constructor
        public PmApplicationFormsFileTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PmApplicationFormsFileTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnFileInfoKey;
        /// Partner key that the file is linked with
        public DataColumn ColumnPartnerKey;
        /// Key to uniquely identify application
        public DataColumn ColumnApplicationKey;
        /// Partner key of office by which application was entered.
        public DataColumn ColumnRegistrationOffice;
        /// Indicates the name of the form
        public DataColumn ColumnFormName;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_file_info_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pm_application_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("pm_registration_office_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("pt_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileInfoKey = this.Columns["p_file_info_key_n"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnApplicationKey = this.Columns["pm_application_key_i"];
            this.ColumnRegistrationOffice = this.Columns["pm_registration_office_n"];
            this.ColumnFormName = this.Columns["pt_form_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnFileInfoKey};
        }

        /// Access a typed row by index
        public PmApplicationFormsFileRow this[int i]
        {
            get
            {
                return ((PmApplicationFormsFileRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PmApplicationFormsFileRow NewRowTyped(bool AWithDefaultValues)
        {
            PmApplicationFormsFileRow ret = ((PmApplicationFormsFileRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PmApplicationFormsFileRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PmApplicationFormsFileRow(builder);
        }

        /// get typed set of changes
        public PmApplicationFormsFileTable GetChangesTyped()
        {
            return ((PmApplicationFormsFileTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PmApplicationFormsFile";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "pm_application_forms_file";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFileInfoKeyDBName()
        {
            return "p_file_info_key_n";
        }

        /// get character length for column
        public static short GetFileInfoKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetApplicationKeyDBName()
        {
            return "pm_application_key_i";
        }

        /// get character length for column
        public static short GetApplicationKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRegistrationOfficeDBName()
        {
            return "pm_registration_office_n";
        }

        /// get character length for column
        public static short GetRegistrationOfficeLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "pt_form_name_c";
        }

        /// get character length for column
        public static short GetFormNameLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Link file with an application form
    [Serializable()]
    public class PmApplicationFormsFileRow : System.Data.DataRow
    {
        private PmApplicationFormsFileTable myTable;

        /// Constructor
        public PmApplicationFormsFileRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PmApplicationFormsFileTable)(this.Table));
        }

        ///
        public Int64 FileInfoKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileInfoKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileInfoKey)
                            || (((Int64)(this[this.myTable.ColumnFileInfoKey])) != value)))
                {
                    this[this.myTable.ColumnFileInfoKey] = value;
                }
            }
        }

        /// Partner key that the file is linked with
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// Key to uniquely identify application
        public Int32 ApplicationKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnApplicationKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnApplicationKey)
                            || (((Int32)(this[this.myTable.ColumnApplicationKey])) != value)))
                {
                    this[this.myTable.ColumnApplicationKey] = value;
                }
            }
        }

        /// Partner key of office by which application was entered.
        public Int64 RegistrationOffice
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRegistrationOffice.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRegistrationOffice)
                            || (((Int64)(this[this.myTable.ColumnRegistrationOffice])) != value)))
                {
                    this[this.myTable.ColumnRegistrationOffice] = value;
                }
            }
        }

        /// Indicates the name of the form
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName)
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
            this.SetNull(this.myTable.ColumnPartnerKey);
            this.SetNull(this.myTable.ColumnApplicationKey);
            this.SetNull(this.myTable.ColumnRegistrationOffice);
            this.SetNull(this.myTable.ColumnFormName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFileInfoKeyNull()
        {
            return this.IsNull(this.myTable.ColumnFileInfoKey);
        }

        /// assign NULL value
        public void SetFileInfoKeyNull()
        {
            this.SetNull(this.myTable.ColumnFileInfoKey);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsApplicationKeyNull()
        {
            return this.IsNull(this.myTable.ColumnApplicationKey);
        }

        /// assign NULL value
        public void SetApplicationKeyNull()
        {
            this.SetNull(this.myTable.ColumnApplicationKey);
        }

        /// test for NULL value
        public bool IsRegistrationOfficeNull()
        {
            return this.IsNull(this.myTable.ColumnRegistrationOffice);
        }

        /// assign NULL value
        public void SetRegistrationOfficeNull()
        {
            this.SetNull(this.myTable.ColumnRegistrationOffice);
        }

        /// test for NULL value
        public bool IsFormNameNull()
        {
            return this.IsNull(this.myTable.ColumnFormName);
        }

        /// assign NULL value
        public void SetFormNameNull()
        {
            this.SetNull(this.myTable.ColumnFormName);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
}
