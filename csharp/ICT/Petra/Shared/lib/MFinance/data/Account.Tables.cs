// auto generated with nant generateORM
// Do not modify this file manually!
//
//
// DO NOT REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// @Authors:
//       auto generated
//
// Copyright 2004-2011 by OM International
//
// This file is part of OpenPetra.org.
//
// OpenPetra.org is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OpenPetra.org is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with OpenPetra.org.  If not, see <http://www.gnu.org/licenses/>.
//

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.Odbc;
using System.Runtime.Serialization;
using System.Xml;
using Ict.Common;
using Ict.Common.Data;

namespace Ict.Petra.Shared.MFinance.Account.Data
{

    /// This contains the settings for one specific bank account
    [Serializable()]
    public class AEpAccountTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 63;
        /// used for generic TTypedDataTable functions
        public static short ColumnBankingDetailsKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnImportfilePathId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnExportfilePathId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPluginFilenameId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnPluginParametersId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnConfidentialGiftFlagId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxDeductableId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnMotivationGroupCodeId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnMotivationDetailCodeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 15;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AEpAccount", "a_ep_account",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "BankingDetailsKey", "a_banking_details_key_i", "a_banking_details_key_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "AccountCode", "a_account_code_c", "a_account_code_c", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(3, "ImportfilePath", "a_importfile_path_c", "a_importfile_path_c", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(4, "ExportfilePath", "a_exportfile_path_c", "a_exportfile_path_c", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(5, "PluginFilename", "a_plugin_filename_c", "a_plugin_filename_c", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(6, "PluginParameters", "a_plugin_parameters_c", "a_plugin_parameters_c", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(7, "ConfidentialGiftFlag", "a_confidential_gift_flag_l", "Confidential Gift", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(8, "TaxDeductable", "a_tax_deductable_l", "Tax Deductable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(9, "MotivationGroupCode", "a_motivation_group_code_c", "a_motivation_group_code_c", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(10, "MotivationDetailCode", "a_motivation_detail_code_c", "a_motivation_detail_code_c", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(11, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(15, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public AEpAccountTable() :
                base("AEpAccount")
        {
        }

        /// constructor
        public AEpAccountTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AEpAccountTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The bank account whose settings are defined here
        public DataColumn ColumnBankingDetailsKey;
        /// The bank account has to be assigned to a ledger
        public DataColumn ColumnLedgerNumber;
        /// The GL account for the bank account
        public DataColumn ColumnAccountCode;
        /// This tells the plugin where to find the statement files for this bank account
        public DataColumn ColumnImportfilePath;
        /// This tells the plugin where to write any generated files for this bank account
        public DataColumn ColumnExportfilePath;
        /// This can be either the name of an executable or a DLL that is able to process the country (or bank) specific bank statements
        public DataColumn ColumnPluginFilename;
        /// Other parameters for the plugin can be stored here
        public DataColumn ColumnPluginParameters;
        /// if this is true, all gifts to this bank account get this flag set
        public DataColumn ColumnConfidentialGiftFlag;
        /// Whether the gifts to this bank account are tax deductable
        public DataColumn ColumnTaxDeductable;
        /// This defines a default motivation group.
        public DataColumn ColumnMotivationGroupCode;
        /// This defines a default motivation detail within a motivation group.
        public DataColumn ColumnMotivationDetailCode;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_banking_details_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_importfile_path_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exportfile_path_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_plugin_filename_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_plugin_parameters_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_confidential_gift_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_deductable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_group_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_detail_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBankingDetailsKey = this.Columns["a_banking_details_key_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnImportfilePath = this.Columns["a_importfile_path_c"];
            this.ColumnExportfilePath = this.Columns["a_exportfile_path_c"];
            this.ColumnPluginFilename = this.Columns["a_plugin_filename_c"];
            this.ColumnPluginParameters = this.Columns["a_plugin_parameters_c"];
            this.ColumnConfidentialGiftFlag = this.Columns["a_confidential_gift_flag_l"];
            this.ColumnTaxDeductable = this.Columns["a_tax_deductable_l"];
            this.ColumnMotivationGroupCode = this.Columns["a_motivation_group_code_c"];
            this.ColumnMotivationDetailCode = this.Columns["a_motivation_detail_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnBankingDetailsKey};
        }

        /// Access a typed row by index
        public AEpAccountRow this[int i]
        {
            get
            {
                return ((AEpAccountRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AEpAccountRow NewRowTyped(bool AWithDefaultValues)
        {
            AEpAccountRow ret = ((AEpAccountRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AEpAccountRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEpAccountRow(builder);
        }

        /// get typed set of changes
        public AEpAccountTable GetChangesTyped()
        {
            return ((AEpAccountTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AEpAccount";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_ep_account";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetBankingDetailsKeyDBName()
        {
            return "a_banking_details_key_i";
        }

        /// get character length for column
        public static short GetBankingDetailsKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetImportfilePathDBName()
        {
            return "a_importfile_path_c";
        }

        /// get character length for column
        public static short GetImportfilePathLength()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetExportfilePathDBName()
        {
            return "a_exportfile_path_c";
        }

        /// get character length for column
        public static short GetExportfilePathLength()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetPluginFilenameDBName()
        {
            return "a_plugin_filename_c";
        }

        /// get character length for column
        public static short GetPluginFilenameLength()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetPluginParametersDBName()
        {
            return "a_plugin_parameters_c";
        }

        /// get character length for column
        public static short GetPluginParametersLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetConfidentialGiftFlagDBName()
        {
            return "a_confidential_gift_flag_l";
        }

        /// get character length for column
        public static short GetConfidentialGiftFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxDeductableDBName()
        {
            return "a_tax_deductable_l";
        }

        /// get character length for column
        public static short GetTaxDeductableLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetMotivationGroupCodeDBName()
        {
            return "a_motivation_group_code_c";
        }

        /// get character length for column
        public static short GetMotivationGroupCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetMotivationDetailCodeDBName()
        {
            return "a_motivation_detail_code_c";
        }

        /// get character length for column
        public static short GetMotivationDetailCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This contains the settings for one specific bank account
    [Serializable()]
    public class AEpAccountRow : System.Data.DataRow
    {
        private AEpAccountTable myTable;

        /// Constructor
        public AEpAccountRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AEpAccountTable)(this.Table));
        }

        /// The bank account whose settings are defined here
        public Int32 BankingDetailsKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankingDetailsKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankingDetailsKey)
                            || (((Int32)(this[this.myTable.ColumnBankingDetailsKey])) != value)))
                {
                    this[this.myTable.ColumnBankingDetailsKey] = value;
                }
            }
        }

        /// The bank account has to be assigned to a ledger
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The GL account for the bank account
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// This tells the plugin where to find the statement files for this bank account
        public String ImportfilePath
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnImportfilePath.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnImportfilePath)
                            || (((String)(this[this.myTable.ColumnImportfilePath])) != value)))
                {
                    this[this.myTable.ColumnImportfilePath] = value;
                }
            }
        }

        /// This tells the plugin where to write any generated files for this bank account
        public String ExportfilePath
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExportfilePath.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExportfilePath)
                            || (((String)(this[this.myTable.ColumnExportfilePath])) != value)))
                {
                    this[this.myTable.ColumnExportfilePath] = value;
                }
            }
        }

        /// This can be either the name of an executable or a DLL that is able to process the country (or bank) specific bank statements
        public String PluginFilename
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPluginFilename.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPluginFilename)
                            || (((String)(this[this.myTable.ColumnPluginFilename])) != value)))
                {
                    this[this.myTable.ColumnPluginFilename] = value;
                }
            }
        }

        /// Other parameters for the plugin can be stored here
        public String PluginParameters
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPluginParameters.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPluginParameters)
                            || (((String)(this[this.myTable.ColumnPluginParameters])) != value)))
                {
                    this[this.myTable.ColumnPluginParameters] = value;
                }
            }
        }

        /// if this is true, all gifts to this bank account get this flag set
        public Boolean ConfidentialGiftFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConfidentialGiftFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConfidentialGiftFlag)
                            || (((Boolean)(this[this.myTable.ColumnConfidentialGiftFlag])) != value)))
                {
                    this[this.myTable.ColumnConfidentialGiftFlag] = value;
                }
            }
        }

        /// Whether the gifts to this bank account are tax deductable
        public Boolean TaxDeductable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxDeductable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxDeductable)
                            || (((Boolean)(this[this.myTable.ColumnTaxDeductable])) != value)))
                {
                    this[this.myTable.ColumnTaxDeductable] = value;
                }
            }
        }

        /// This defines a default motivation group.
        public String MotivationGroupCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationGroupCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationGroupCode)
                            || (((String)(this[this.myTable.ColumnMotivationGroupCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationGroupCode] = value;
                }
            }
        }

        /// This defines a default motivation detail within a motivation group.
        public String MotivationDetailCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationDetailCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationDetailCode)
                            || (((String)(this[this.myTable.ColumnMotivationDetailCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationDetailCode] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnImportfilePath);
            this.SetNull(this.myTable.ColumnExportfilePath);
            this.SetNull(this.myTable.ColumnPluginFilename);
            this.SetNull(this.myTable.ColumnPluginParameters);
            this[this.myTable.ColumnConfidentialGiftFlag.Ordinal] = false;
            this[this.myTable.ColumnTaxDeductable.Ordinal] = true;
            this.SetNull(this.myTable.ColumnMotivationGroupCode);
            this.SetNull(this.myTable.ColumnMotivationDetailCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsBankingDetailsKeyNull()
        {
            return this.IsNull(this.myTable.ColumnBankingDetailsKey);
        }

        /// assign NULL value
        public void SetBankingDetailsKeyNull()
        {
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsImportfilePathNull()
        {
            return this.IsNull(this.myTable.ColumnImportfilePath);
        }

        /// assign NULL value
        public void SetImportfilePathNull()
        {
            this.SetNull(this.myTable.ColumnImportfilePath);
        }

        /// test for NULL value
        public bool IsExportfilePathNull()
        {
            return this.IsNull(this.myTable.ColumnExportfilePath);
        }

        /// assign NULL value
        public void SetExportfilePathNull()
        {
            this.SetNull(this.myTable.ColumnExportfilePath);
        }

        /// test for NULL value
        public bool IsPluginFilenameNull()
        {
            return this.IsNull(this.myTable.ColumnPluginFilename);
        }

        /// assign NULL value
        public void SetPluginFilenameNull()
        {
            this.SetNull(this.myTable.ColumnPluginFilename);
        }

        /// test for NULL value
        public bool IsPluginParametersNull()
        {
            return this.IsNull(this.myTable.ColumnPluginParameters);
        }

        /// assign NULL value
        public void SetPluginParametersNull()
        {
            this.SetNull(this.myTable.ColumnPluginParameters);
        }

        /// test for NULL value
        public bool IsConfidentialGiftFlagNull()
        {
            return this.IsNull(this.myTable.ColumnConfidentialGiftFlag);
        }

        /// assign NULL value
        public void SetConfidentialGiftFlagNull()
        {
            this.SetNull(this.myTable.ColumnConfidentialGiftFlag);
        }

        /// test for NULL value
        public bool IsTaxDeductableNull()
        {
            return this.IsNull(this.myTable.ColumnTaxDeductable);
        }

        /// assign NULL value
        public void SetTaxDeductableNull()
        {
            this.SetNull(this.myTable.ColumnTaxDeductable);
        }

        /// test for NULL value
        public bool IsMotivationGroupCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMotivationGroupCode);
        }

        /// assign NULL value
        public void SetMotivationGroupCodeNull()
        {
            this.SetNull(this.myTable.ColumnMotivationGroupCode);
        }

        /// test for NULL value
        public bool IsMotivationDetailCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMotivationDetailCode);
        }

        /// assign NULL value
        public void SetMotivationDetailCodeNull()
        {
            this.SetNull(this.myTable.ColumnMotivationDetailCode);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// List of recently imported bank statements
    [Serializable()]
    public class AEpStatementTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 64;
        /// used for generic TTypedDataTable functions
        public static short ColumnStatementKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBankAccountKeyId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnBankAccountCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnIdFromBankId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnFilenameId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnEndBalanceId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCurrencyCodeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 13;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AEpStatement", "a_ep_statement",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "StatementKey", "a_statement_key_i", "Bank statement", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BankAccountKey", "a_bank_account_key_i", "banking details", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(2, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "BankAccountCode", "a_bank_account_code_c", "Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(4, "Date", "a_date_d", "Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(5, "IdFromBank", "a_id_from_bank_c", "Id from Bank", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(6, "Filename", "a_filename_c", "filename of statement", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(7, "EndBalance", "a_end_balance_n", "End balance", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(8, "CurrencyCode", "a_currency_code_c", "a_currency_code_c", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(9, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public AEpStatementTable() :
                base("AEpStatement")
        {
        }

        /// constructor
        public AEpStatementTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AEpStatementTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// auto generated unique identifier for bank statements
        public DataColumn ColumnStatementKey;
        /// this is the bank account that this statement is for; this is necessary because you can have several accounts at the same bank
        public DataColumn ColumnBankAccountKey;
        /// The four digit ledger number of the gift.
        public DataColumn ColumnLedgerNumber;
        /// The bank account for creating GL transactions against
        public DataColumn ColumnBankAccountCode;
        /// The date of this statement
        public DataColumn ColumnDate;
        /// This is the ID that the bank uses for this statement; it can be used to find the paper version of the bank statement
        public DataColumn ColumnIdFromBank;
        /// This is the name of the file that this statement was read from; this can be used to prevent duplicate import of bank statements
        public DataColumn ColumnFilename;
        /// The end balance of the bank account after the statement
        public DataColumn ColumnEndBalance;
        /// This defines the currency of the transactions on this statement
        public DataColumn ColumnCurrencyCode;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_statement_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_bank_account_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_bank_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_id_from_bank_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_filename_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_end_balance_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnStatementKey = this.Columns["a_statement_key_i"];
            this.ColumnBankAccountKey = this.Columns["a_bank_account_key_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBankAccountCode = this.Columns["a_bank_account_code_c"];
            this.ColumnDate = this.Columns["a_date_d"];
            this.ColumnIdFromBank = this.Columns["a_id_from_bank_c"];
            this.ColumnFilename = this.Columns["a_filename_c"];
            this.ColumnEndBalance = this.Columns["a_end_balance_n"];
            this.ColumnCurrencyCode = this.Columns["a_currency_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnStatementKey};
        }

        /// Access a typed row by index
        public AEpStatementRow this[int i]
        {
            get
            {
                return ((AEpStatementRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AEpStatementRow NewRowTyped(bool AWithDefaultValues)
        {
            AEpStatementRow ret = ((AEpStatementRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AEpStatementRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEpStatementRow(builder);
        }

        /// get typed set of changes
        public AEpStatementTable GetChangesTyped()
        {
            return ((AEpStatementTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AEpStatement";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_ep_statement";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetStatementKeyDBName()
        {
            return "a_statement_key_i";
        }

        /// get character length for column
        public static short GetStatementKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBankAccountKeyDBName()
        {
            return "a_bank_account_key_i";
        }

        /// get character length for column
        public static short GetBankAccountKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBankAccountCodeDBName()
        {
            return "a_bank_account_code_c";
        }

        /// get character length for column
        public static short GetBankAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateDBName()
        {
            return "a_date_d";
        }

        /// get character length for column
        public static short GetDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIdFromBankDBName()
        {
            return "a_id_from_bank_c";
        }

        /// get character length for column
        public static short GetIdFromBankLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetFilenameDBName()
        {
            return "a_filename_c";
        }

        /// get character length for column
        public static short GetFilenameLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetEndBalanceDBName()
        {
            return "a_end_balance_n";
        }

        /// get character length for column
        public static short GetEndBalanceLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetCurrencyCodeDBName()
        {
            return "a_currency_code_c";
        }

        /// get character length for column
        public static short GetCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// List of recently imported bank statements
    [Serializable()]
    public class AEpStatementRow : System.Data.DataRow
    {
        private AEpStatementTable myTable;

        /// Constructor
        public AEpStatementRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AEpStatementTable)(this.Table));
        }

        /// auto generated unique identifier for bank statements
        public Int32 StatementKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatementKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatementKey)
                            || (((Int32)(this[this.myTable.ColumnStatementKey])) != value)))
                {
                    this[this.myTable.ColumnStatementKey] = value;
                }
            }
        }

        /// this is the bank account that this statement is for; this is necessary because you can have several accounts at the same bank
        public Int32 BankAccountKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankAccountKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankAccountKey)
                            || (((Int32)(this[this.myTable.ColumnBankAccountKey])) != value)))
                {
                    this[this.myTable.ColumnBankAccountKey] = value;
                }
            }
        }

        /// The four digit ledger number of the gift.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The bank account for creating GL transactions against
        public String BankAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankAccountCode)
                            || (((String)(this[this.myTable.ColumnBankAccountCode])) != value)))
                {
                    this[this.myTable.ColumnBankAccountCode] = value;
                }
            }
        }

        /// The date of this statement
        public System.DateTime Date
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDate)
                            || (((System.DateTime)(this[this.myTable.ColumnDate])) != value)))
                {
                    this[this.myTable.ColumnDate] = value;
                }
            }
        }

        /// This is the ID that the bank uses for this statement; it can be used to find the paper version of the bank statement
        public String IdFromBank
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIdFromBank.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIdFromBank)
                            || (((String)(this[this.myTable.ColumnIdFromBank])) != value)))
                {
                    this[this.myTable.ColumnIdFromBank] = value;
                }
            }
        }

        /// This is the name of the file that this statement was read from; this can be used to prevent duplicate import of bank statements
        public String Filename
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFilename.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFilename)
                            || (((String)(this[this.myTable.ColumnFilename])) != value)))
                {
                    this[this.myTable.ColumnFilename] = value;
                }
            }
        }

        /// The end balance of the bank account after the statement
        public Decimal EndBalance
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEndBalance.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEndBalance)
                            || (((Decimal)(this[this.myTable.ColumnEndBalance])) != value)))
                {
                    this[this.myTable.ColumnEndBalance] = value;
                }
            }
        }

        /// This defines the currency of the transactions on this statement
        public String CurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrencyCode)
                            || (((String)(this[this.myTable.ColumnCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnCurrencyCode] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnStatementKey);
            this.SetNull(this.myTable.ColumnBankAccountKey);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBankAccountCode);
            this[this.myTable.ColumnDate.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnIdFromBank);
            this.SetNull(this.myTable.ColumnFilename);
            this.SetNull(this.myTable.ColumnEndBalance);
            this.SetNull(this.myTable.ColumnCurrencyCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsStatementKeyNull()
        {
            return this.IsNull(this.myTable.ColumnStatementKey);
        }

        /// assign NULL value
        public void SetStatementKeyNull()
        {
            this.SetNull(this.myTable.ColumnStatementKey);
        }

        /// test for NULL value
        public bool IsBankAccountKeyNull()
        {
            return this.IsNull(this.myTable.ColumnBankAccountKey);
        }

        /// assign NULL value
        public void SetBankAccountKeyNull()
        {
            this.SetNull(this.myTable.ColumnBankAccountKey);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBankAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBankAccountCode);
        }

        /// assign NULL value
        public void SetBankAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnBankAccountCode);
        }

        /// test for NULL value
        public bool IsDateNull()
        {
            return this.IsNull(this.myTable.ColumnDate);
        }

        /// assign NULL value
        public void SetDateNull()
        {
            this.SetNull(this.myTable.ColumnDate);
        }

        /// test for NULL value
        public bool IsIdFromBankNull()
        {
            return this.IsNull(this.myTable.ColumnIdFromBank);
        }

        /// assign NULL value
        public void SetIdFromBankNull()
        {
            this.SetNull(this.myTable.ColumnIdFromBank);
        }

        /// test for NULL value
        public bool IsFilenameNull()
        {
            return this.IsNull(this.myTable.ColumnFilename);
        }

        /// assign NULL value
        public void SetFilenameNull()
        {
            this.SetNull(this.myTable.ColumnFilename);
        }

        /// test for NULL value
        public bool IsEndBalanceNull()
        {
            return this.IsNull(this.myTable.ColumnEndBalance);
        }

        /// assign NULL value
        public void SetEndBalanceNull()
        {
            this.SetNull(this.myTable.ColumnEndBalance);
        }

        /// test for NULL value
        public bool IsCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCurrencyCode);
        }

        /// assign NULL value
        public void SetCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnCurrencyCode);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// the matches that can be used to identify recurring gift or GL transactions
    [Serializable()]
    public class AEpMatchTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 65;
        /// used for generic TTypedDataTable functions
        public static short ColumnEpMatchKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnMatchTextId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDetailId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnActionId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecentMatchId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecipientLedgerNumberId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnMotivationGroupCodeId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnMotivationDetailCodeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentOneTypeId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnGiftCommentOneId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnConfidentialGiftFlagId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxDeductableId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecipientKeyId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnChargeFlagId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnMailingCodeId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentTwoTypeId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnGiftCommentTwoId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentThreeTypeId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnGiftCommentThreeId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnGiftTransactionAmountId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnHomeAdminChargesFlagId = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnIltAdminChargesFlagId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnReceiptLetterCodeId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnMethodOfGivingCodeId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnMethodOfPaymentCodeId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnDonorKeyId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnAdminChargeId = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnNarrativeId = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnReferenceId = 30;
        /// used for generic TTypedDataTable functions
        public static short ColumnDonorShortNameId = 31;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecipientShortNameId = 32;
        /// used for generic TTypedDataTable functions
        public static short ColumnRestrictedId = 33;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 34;
        /// used for generic TTypedDataTable functions
        public static short ColumnKeyMinistryKeyId = 35;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 36;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 37;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 38;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 39;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 40;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AEpMatch", "a_ep_match",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "EpMatchKey", "a_ep_match_key_i", "a_ep_match_key_i", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(1, "MatchText", "a_match_text_c", "a_match_text_c", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(2, "Detail", "a_detail_i", "a_detail_i", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(3, "Action", "a_action_c", "a_action_c", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(4, "RecentMatch", "a_recent_match_d", "Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(5, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(6, "RecipientLedgerNumber", "a_recipient_ledger_number_n", "Recipient Ledger", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(7, "MotivationGroupCode", "a_motivation_group_code_c", "Motivation Group", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(8, "MotivationDetailCode", "a_motivation_detail_code_c", "Motivation Detail", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(9, "CommentOneType", "a_comment_one_type_c", "Comment Type", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(10, "GiftCommentOne", "a_gift_comment_one_c", "Comment One", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(11, "ConfidentialGiftFlag", "a_confidential_gift_flag_l", "Confidential Gift", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(12, "TaxDeductable", "a_tax_deductable_l", "Tax Deductable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(13, "RecipientKey", "p_recipient_key_n", "Recipient", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(14, "ChargeFlag", "a_charge_flag_l", "Charge Fee", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(15, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(16, "MailingCode", "p_mailing_code_c", "Mailing Code", OdbcType.VarChar, 50, false),
                    new TTypedColumnInfo(17, "CommentTwoType", "a_comment_two_type_c", "Comment Type", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(18, "GiftCommentTwo", "a_gift_comment_two_c", "Comment Two", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(19, "CommentThreeType", "a_comment_three_type_c", "Comment Type", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(20, "GiftCommentThree", "a_gift_comment_three_c", "Comment Three", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(21, "GiftTransactionAmount", "a_gift_transaction_amount_n", "Transaction Gift Amount", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(22, "HomeAdminChargesFlag", "a_home_admin_charges_flag_l", "Local Admin Charges", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(23, "IltAdminChargesFlag", "a_ilt_admin_charges_flag_l", "IT Admin Charges", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(24, "ReceiptLetterCode", "a_receipt_letter_code_c", "Receipt Letter Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(25, "MethodOfGivingCode", "a_method_of_giving_code_c", "Method Of Giving", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(26, "MethodOfPaymentCode", "a_method_of_payment_code_c", "Method of Payment", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(27, "DonorKey", "p_donor_key_n", "Donor", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(28, "AdminCharge", "a_admin_charge_l", "Admin Charge", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(29, "Narrative", "a_narrative_c", "Narrative", OdbcType.VarChar, 240, false),
                    new TTypedColumnInfo(30, "Reference", "a_reference_c", "Reference", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(31, "DonorShortName", "p_donor_short_name_c", "p_donor_short_name_c", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(32, "RecipientShortName", "p_recipient_short_name_c", "p_recipient_short_name_c", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(33, "Restricted", "a_restricted_l", "Gift Restricted", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(34, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(35, "KeyMinistryKey", "a_key_ministry_key_n", "Key Ministry", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(36, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(37, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(38, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(39, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(40, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }, new int[] {
                    1, 2
                }));
            return true;
        }

        /// constructor
        public AEpMatchTable() :
                base("AEpMatch")
        {
        }

        /// constructor
        public AEpMatchTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AEpMatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// this is a sequence to easily identify which transaction has been matched and how
        public DataColumn ColumnEpMatchKey;
        /// this is a separated list of all the recurring details of a_ep_transaction (ie. name, bank account, sort code, IBAN, amount, description)
        public DataColumn ColumnMatchText;
        /// the match can be applied to split gifts as well
        public DataColumn ColumnDetail;
        /// What to do with this match: gift, GL, or discard
        public DataColumn ColumnAction;
        /// The date when this match was recently applied; useful for purging old entries
        public DataColumn ColumnRecentMatch;
        /// The four digit ledger number of the gift.
        public DataColumn ColumnLedgerNumber;
        /// The partner key of the commitment field (the unit) of the recipient of the gift.  This is not the ledger number but rather the partner key of the unit associated with the ledger.
        public DataColumn ColumnRecipientLedgerNumber;
        /// This defines a motivation group.
        public DataColumn ColumnMotivationGroupCode;
        /// This defines the motivation detail within a motivation group.
        public DataColumn ColumnMotivationDetailCode;
        /// Used to decide whose reports will see this comment
        public DataColumn ColumnCommentOneType;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnGiftCommentOne;
        /// Defines whether the donor wishes the recipient to know who gave the gift
        public DataColumn ColumnConfidentialGiftFlag;
        /// Whether this gift is tax deductable
        public DataColumn ColumnTaxDeductable;
        /// The partner key of the recipient of the gift.
        public DataColumn ColumnRecipientKey;
        /// To determine whether an admin fee on the transaction should be overwritten if it normally has a charge associated with it. Used for both local and ilt transaction.
        public DataColumn ColumnChargeFlag;
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner.
        public DataColumn ColumnCostCentreCode;
        /// Mailing Code of the mailing that the gift was a response to.
        public DataColumn ColumnMailingCode;
        /// Used to decide whose reports will see this comment
        public DataColumn ColumnCommentTwoType;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnGiftCommentTwo;
        /// Used to decide whose reports will see this comment
        public DataColumn ColumnCommentThreeType;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnGiftCommentThree;
        /// This is a number of currency units in the entered Currency
        public DataColumn ColumnGiftTransactionAmount;
        /// Used to get a yes no response from the user
        public DataColumn ColumnHomeAdminChargesFlag;
        /// Used to get a yes no response from the user
        public DataColumn ColumnIltAdminChargesFlag;
        ///
        public DataColumn ColumnReceiptLetterCode;
        /// Defines how a gift is given.
        public DataColumn ColumnMethodOfGivingCode;
        /// This is how the partner paid. Eg cash, Cheque etc
        public DataColumn ColumnMethodOfPaymentCode;
        /// This is the partner key of the donor.
        public DataColumn ColumnDonorKey;
        /// NOT USED AT ALL
        public DataColumn ColumnAdminCharge;
        ///
        public DataColumn ColumnNarrative;
        /// Reference number/code for the transaction
        public DataColumn ColumnReference;
        /// short name of the donor; will be used for generating export files
        public DataColumn ColumnDonorShortName;
        /// short name of recipient
        public DataColumn ColumnRecipientShortName;
        /// Indicates whether or not the gift has restricted access. If it does then the access will be controlled by s_group_gift
        public DataColumn ColumnRestricted;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// Key ministry to which this transaction applies (just for fund transfers)
        public DataColumn ColumnKeyMinistryKey;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ep_match_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_match_text_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_action_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_recent_match_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_recipient_ledger_number_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_group_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_motivation_detail_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_comment_one_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_comment_one_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_confidential_gift_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_deductable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_recipient_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_mailing_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_comment_two_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_comment_two_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_comment_three_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_comment_three_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_transaction_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_home_admin_charges_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_admin_charges_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_receipt_letter_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_method_of_giving_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_method_of_payment_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_donor_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_admin_charge_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_donor_short_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_recipient_short_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_restricted_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_key_ministry_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnEpMatchKey = this.Columns["a_ep_match_key_i"];
            this.ColumnMatchText = this.Columns["a_match_text_c"];
            this.ColumnDetail = this.Columns["a_detail_i"];
            this.ColumnAction = this.Columns["a_action_c"];
            this.ColumnRecentMatch = this.Columns["a_recent_match_d"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnRecipientLedgerNumber = this.Columns["a_recipient_ledger_number_n"];
            this.ColumnMotivationGroupCode = this.Columns["a_motivation_group_code_c"];
            this.ColumnMotivationDetailCode = this.Columns["a_motivation_detail_code_c"];
            this.ColumnCommentOneType = this.Columns["a_comment_one_type_c"];
            this.ColumnGiftCommentOne = this.Columns["a_gift_comment_one_c"];
            this.ColumnConfidentialGiftFlag = this.Columns["a_confidential_gift_flag_l"];
            this.ColumnTaxDeductable = this.Columns["a_tax_deductable_l"];
            this.ColumnRecipientKey = this.Columns["p_recipient_key_n"];
            this.ColumnChargeFlag = this.Columns["a_charge_flag_l"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnMailingCode = this.Columns["p_mailing_code_c"];
            this.ColumnCommentTwoType = this.Columns["a_comment_two_type_c"];
            this.ColumnGiftCommentTwo = this.Columns["a_gift_comment_two_c"];
            this.ColumnCommentThreeType = this.Columns["a_comment_three_type_c"];
            this.ColumnGiftCommentThree = this.Columns["a_gift_comment_three_c"];
            this.ColumnGiftTransactionAmount = this.Columns["a_gift_transaction_amount_n"];
            this.ColumnHomeAdminChargesFlag = this.Columns["a_home_admin_charges_flag_l"];
            this.ColumnIltAdminChargesFlag = this.Columns["a_ilt_admin_charges_flag_l"];
            this.ColumnReceiptLetterCode = this.Columns["a_receipt_letter_code_c"];
            this.ColumnMethodOfGivingCode = this.Columns["a_method_of_giving_code_c"];
            this.ColumnMethodOfPaymentCode = this.Columns["a_method_of_payment_code_c"];
            this.ColumnDonorKey = this.Columns["p_donor_key_n"];
            this.ColumnAdminCharge = this.Columns["a_admin_charge_l"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnDonorShortName = this.Columns["p_donor_short_name_c"];
            this.ColumnRecipientShortName = this.Columns["p_recipient_short_name_c"];
            this.ColumnRestricted = this.Columns["a_restricted_l"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnKeyMinistryKey = this.Columns["a_key_ministry_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnEpMatchKey};
        }

        /// Access a typed row by index
        public AEpMatchRow this[int i]
        {
            get
            {
                return ((AEpMatchRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AEpMatchRow NewRowTyped(bool AWithDefaultValues)
        {
            AEpMatchRow ret = ((AEpMatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AEpMatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEpMatchRow(builder);
        }

        /// get typed set of changes
        public AEpMatchTable GetChangesTyped()
        {
            return ((AEpMatchTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AEpMatch";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_ep_match";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetEpMatchKeyDBName()
        {
            return "a_ep_match_key_i";
        }

        /// get character length for column
        public static short GetEpMatchKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetMatchTextDBName()
        {
            return "a_match_text_c";
        }

        /// get character length for column
        public static short GetMatchTextLength()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetDetailDBName()
        {
            return "a_detail_i";
        }

        /// get character length for column
        public static short GetDetailLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetActionDBName()
        {
            return "a_action_c";
        }

        /// get character length for column
        public static short GetActionLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetRecentMatchDBName()
        {
            return "a_recent_match_d";
        }

        /// get character length for column
        public static short GetRecentMatchLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRecipientLedgerNumberDBName()
        {
            return "a_recipient_ledger_number_n";
        }

        /// get character length for column
        public static short GetRecipientLedgerNumberLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetMotivationGroupCodeDBName()
        {
            return "a_motivation_group_code_c";
        }

        /// get character length for column
        public static short GetMotivationGroupCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetMotivationDetailCodeDBName()
        {
            return "a_motivation_detail_code_c";
        }

        /// get character length for column
        public static short GetMotivationDetailCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentOneTypeDBName()
        {
            return "a_comment_one_type_c";
        }

        /// get character length for column
        public static short GetCommentOneTypeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetGiftCommentOneDBName()
        {
            return "a_gift_comment_one_c";
        }

        /// get character length for column
        public static short GetGiftCommentOneLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetConfidentialGiftFlagDBName()
        {
            return "a_confidential_gift_flag_l";
        }

        /// get character length for column
        public static short GetConfidentialGiftFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxDeductableDBName()
        {
            return "a_tax_deductable_l";
        }

        /// get character length for column
        public static short GetTaxDeductableLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRecipientKeyDBName()
        {
            return "p_recipient_key_n";
        }

        /// get character length for column
        public static short GetRecipientKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetChargeFlagDBName()
        {
            return "a_charge_flag_l";
        }

        /// get character length for column
        public static short GetChargeFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetMailingCodeDBName()
        {
            return "p_mailing_code_c";
        }

        /// get character length for column
        public static short GetMailingCodeLength()
        {
            return 50;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentTwoTypeDBName()
        {
            return "a_comment_two_type_c";
        }

        /// get character length for column
        public static short GetCommentTwoTypeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetGiftCommentTwoDBName()
        {
            return "a_gift_comment_two_c";
        }

        /// get character length for column
        public static short GetGiftCommentTwoLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentThreeTypeDBName()
        {
            return "a_comment_three_type_c";
        }

        /// get character length for column
        public static short GetCommentThreeTypeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetGiftCommentThreeDBName()
        {
            return "a_gift_comment_three_c";
        }

        /// get character length for column
        public static short GetGiftCommentThreeLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetGiftTransactionAmountDBName()
        {
            return "a_gift_transaction_amount_n";
        }

        /// get character length for column
        public static short GetGiftTransactionAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetHomeAdminChargesFlagDBName()
        {
            return "a_home_admin_charges_flag_l";
        }

        /// get character length for column
        public static short GetHomeAdminChargesFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIltAdminChargesFlagDBName()
        {
            return "a_ilt_admin_charges_flag_l";
        }

        /// get character length for column
        public static short GetIltAdminChargesFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReceiptLetterCodeDBName()
        {
            return "a_receipt_letter_code_c";
        }

        /// get character length for column
        public static short GetReceiptLetterCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetMethodOfGivingCodeDBName()
        {
            return "a_method_of_giving_code_c";
        }

        /// get character length for column
        public static short GetMethodOfGivingCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetMethodOfPaymentCodeDBName()
        {
            return "a_method_of_payment_code_c";
        }

        /// get character length for column
        public static short GetMethodOfPaymentCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDonorKeyDBName()
        {
            return "p_donor_key_n";
        }

        /// get character length for column
        public static short GetDonorKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetAdminChargeDBName()
        {
            return "a_admin_charge_l";
        }

        /// get character length for column
        public static short GetAdminChargeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }

        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 240;
        }

        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }

        /// get character length for column
        public static short GetReferenceLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDonorShortNameDBName()
        {
            return "p_donor_short_name_c";
        }

        /// get character length for column
        public static short GetDonorShortNameLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetRecipientShortNameDBName()
        {
            return "p_recipient_short_name_c";
        }

        /// get character length for column
        public static short GetRecipientShortNameLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetRestrictedDBName()
        {
            return "a_restricted_l";
        }

        /// get character length for column
        public static short GetRestrictedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetKeyMinistryKeyDBName()
        {
            return "a_key_ministry_key_n";
        }

        /// get character length for column
        public static short GetKeyMinistryKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// the matches that can be used to identify recurring gift or GL transactions
    [Serializable()]
    public class AEpMatchRow : System.Data.DataRow
    {
        private AEpMatchTable myTable;

        /// Constructor
        public AEpMatchRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AEpMatchTable)(this.Table));
        }

        /// this is a sequence to easily identify which transaction has been matched and how
        public Int32 EpMatchKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEpMatchKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEpMatchKey)
                            || (((Int32)(this[this.myTable.ColumnEpMatchKey])) != value)))
                {
                    this[this.myTable.ColumnEpMatchKey] = value;
                }
            }
        }

        /// this is a separated list of all the recurring details of a_ep_transaction (ie. name, bank account, sort code, IBAN, amount, description)
        public String MatchText
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMatchText.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMatchText)
                            || (((String)(this[this.myTable.ColumnMatchText])) != value)))
                {
                    this[this.myTable.ColumnMatchText] = value;
                }
            }
        }

        /// the match can be applied to split gifts as well
        public Int32 Detail
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetail.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetail)
                            || (((Int32)(this[this.myTable.ColumnDetail])) != value)))
                {
                    this[this.myTable.ColumnDetail] = value;
                }
            }
        }

        /// What to do with this match: gift, GL, or discard
        public String Action
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAction.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAction)
                            || (((String)(this[this.myTable.ColumnAction])) != value)))
                {
                    this[this.myTable.ColumnAction] = value;
                }
            }
        }

        /// The date when this match was recently applied; useful for purging old entries
        public System.DateTime RecentMatch
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecentMatch.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecentMatch)
                            || (((System.DateTime)(this[this.myTable.ColumnRecentMatch])) != value)))
                {
                    this[this.myTable.ColumnRecentMatch] = value;
                }
            }
        }

        /// The four digit ledger number of the gift.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The partner key of the commitment field (the unit) of the recipient of the gift.  This is not the ledger number but rather the partner key of the unit associated with the ledger.
        public Int64 RecipientLedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientLedgerNumber)
                            || (((Int64)(this[this.myTable.ColumnRecipientLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnRecipientLedgerNumber] = value;
                }
            }
        }

        /// This defines a motivation group.
        public String MotivationGroupCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationGroupCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationGroupCode)
                            || (((String)(this[this.myTable.ColumnMotivationGroupCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationGroupCode] = value;
                }
            }
        }

        /// This defines the motivation detail within a motivation group.
        public String MotivationDetailCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMotivationDetailCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMotivationDetailCode)
                            || (((String)(this[this.myTable.ColumnMotivationDetailCode])) != value)))
                {
                    this[this.myTable.ColumnMotivationDetailCode] = value;
                }
            }
        }

        /// Used to decide whose reports will see this comment
        public String CommentOneType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommentOneType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommentOneType)
                            || (((String)(this[this.myTable.ColumnCommentOneType])) != value)))
                {
                    this[this.myTable.ColumnCommentOneType] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String GiftCommentOne
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftCommentOne.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftCommentOne)
                            || (((String)(this[this.myTable.ColumnGiftCommentOne])) != value)))
                {
                    this[this.myTable.ColumnGiftCommentOne] = value;
                }
            }
        }

        /// Defines whether the donor wishes the recipient to know who gave the gift
        public Boolean ConfidentialGiftFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConfidentialGiftFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConfidentialGiftFlag)
                            || (((Boolean)(this[this.myTable.ColumnConfidentialGiftFlag])) != value)))
                {
                    this[this.myTable.ColumnConfidentialGiftFlag] = value;
                }
            }
        }

        /// Whether this gift is tax deductable
        public Boolean TaxDeductable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxDeductable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxDeductable)
                            || (((Boolean)(this[this.myTable.ColumnTaxDeductable])) != value)))
                {
                    this[this.myTable.ColumnTaxDeductable] = value;
                }
            }
        }

        /// The partner key of the recipient of the gift.
        public Int64 RecipientKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientKey)
                            || (((Int64)(this[this.myTable.ColumnRecipientKey])) != value)))
                {
                    this[this.myTable.ColumnRecipientKey] = value;
                }
            }
        }

        /// To determine whether an admin fee on the transaction should be overwritten if it normally has a charge associated with it. Used for both local and ilt transaction.
        public Boolean ChargeFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeFlag)
                            || (((Boolean)(this[this.myTable.ColumnChargeFlag])) != value)))
                {
                    this[this.myTable.ColumnChargeFlag] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to. A cost centre can be a partner.
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// Mailing Code of the mailing that the gift was a response to.
        public String MailingCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMailingCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMailingCode)
                            || (((String)(this[this.myTable.ColumnMailingCode])) != value)))
                {
                    this[this.myTable.ColumnMailingCode] = value;
                }
            }
        }

        /// Used to decide whose reports will see this comment
        public String CommentTwoType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommentTwoType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommentTwoType)
                            || (((String)(this[this.myTable.ColumnCommentTwoType])) != value)))
                {
                    this[this.myTable.ColumnCommentTwoType] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String GiftCommentTwo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftCommentTwo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftCommentTwo)
                            || (((String)(this[this.myTable.ColumnGiftCommentTwo])) != value)))
                {
                    this[this.myTable.ColumnGiftCommentTwo] = value;
                }
            }
        }

        /// Used to decide whose reports will see this comment
        public String CommentThreeType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCommentThreeType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCommentThreeType)
                            || (((String)(this[this.myTable.ColumnCommentThreeType])) != value)))
                {
                    this[this.myTable.ColumnCommentThreeType] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String GiftCommentThree
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftCommentThree.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftCommentThree)
                            || (((String)(this[this.myTable.ColumnGiftCommentThree])) != value)))
                {
                    this[this.myTable.ColumnGiftCommentThree] = value;
                }
            }
        }

        /// This is a number of currency units in the entered Currency
        public Decimal GiftTransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftTransactionAmount)
                            || (((Decimal)(this[this.myTable.ColumnGiftTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnGiftTransactionAmount] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean HomeAdminChargesFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHomeAdminChargesFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHomeAdminChargesFlag)
                            || (((Boolean)(this[this.myTable.ColumnHomeAdminChargesFlag])) != value)))
                {
                    this[this.myTable.ColumnHomeAdminChargesFlag] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean IltAdminChargesFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltAdminChargesFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltAdminChargesFlag)
                            || (((Boolean)(this[this.myTable.ColumnIltAdminChargesFlag])) != value)))
                {
                    this[this.myTable.ColumnIltAdminChargesFlag] = value;
                }
            }
        }

        ///
        public String ReceiptLetterCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReceiptLetterCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReceiptLetterCode)
                            || (((String)(this[this.myTable.ColumnReceiptLetterCode])) != value)))
                {
                    this[this.myTable.ColumnReceiptLetterCode] = value;
                }
            }
        }

        /// Defines how a gift is given.
        public String MethodOfGivingCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfGivingCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfGivingCode)
                            || (((String)(this[this.myTable.ColumnMethodOfGivingCode])) != value)))
                {
                    this[this.myTable.ColumnMethodOfGivingCode] = value;
                }
            }
        }

        /// This is how the partner paid. Eg cash, Cheque etc
        public String MethodOfPaymentCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfPaymentCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfPaymentCode)
                            || (((String)(this[this.myTable.ColumnMethodOfPaymentCode])) != value)))
                {
                    this[this.myTable.ColumnMethodOfPaymentCode] = value;
                }
            }
        }

        /// This is the partner key of the donor.
        public Int64 DonorKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorKey)
                            || (((Int64)(this[this.myTable.ColumnDonorKey])) != value)))
                {
                    this[this.myTable.ColumnDonorKey] = value;
                }
            }
        }

        /// NOT USED AT ALL
        public Boolean AdminCharge
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAdminCharge.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAdminCharge)
                            || (((Boolean)(this[this.myTable.ColumnAdminCharge])) != value)))
                {
                    this[this.myTable.ColumnAdminCharge] = value;
                }
            }
        }

        ///
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative)
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }

        /// Reference number/code for the transaction
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference)
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }

        /// short name of the donor; will be used for generating export files
        public String DonorShortName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorShortName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorShortName)
                            || (((String)(this[this.myTable.ColumnDonorShortName])) != value)))
                {
                    this[this.myTable.ColumnDonorShortName] = value;
                }
            }
        }

        /// short name of recipient
        public String RecipientShortName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientShortName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientShortName)
                            || (((String)(this[this.myTable.ColumnRecipientShortName])) != value)))
                {
                    this[this.myTable.ColumnRecipientShortName] = value;
                }
            }
        }

        /// Indicates whether or not the gift has restricted access. If it does then the access will be controlled by s_group_gift
        public Boolean Restricted
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRestricted.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRestricted)
                            || (((Boolean)(this[this.myTable.ColumnRestricted])) != value)))
                {
                    this[this.myTable.ColumnRestricted] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Key ministry to which this transaction applies (just for fund transfers)
        public Int64 KeyMinistryKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyMinistryKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyMinistryKey)
                            || (((Int64)(this[this.myTable.ColumnKeyMinistryKey])) != value)))
                {
                    this[this.myTable.ColumnKeyMinistryKey] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnEpMatchKey);
            this.SetNull(this.myTable.ColumnMatchText);
            this[this.myTable.ColumnDetail.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAction);
            this[this.myTable.ColumnRecentMatch.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnRecipientLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnMotivationGroupCode);
            this.SetNull(this.myTable.ColumnMotivationDetailCode);
            this.SetNull(this.myTable.ColumnCommentOneType);
            this.SetNull(this.myTable.ColumnGiftCommentOne);
            this[this.myTable.ColumnConfidentialGiftFlag.Ordinal] = false;
            this[this.myTable.ColumnTaxDeductable.Ordinal] = true;
            this[this.myTable.ColumnRecipientKey.Ordinal] = 0;
            this[this.myTable.ColumnChargeFlag.Ordinal] = true;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnMailingCode);
            this.SetNull(this.myTable.ColumnCommentTwoType);
            this.SetNull(this.myTable.ColumnGiftCommentTwo);
            this.SetNull(this.myTable.ColumnCommentThreeType);
            this.SetNull(this.myTable.ColumnGiftCommentThree);
            this[this.myTable.ColumnGiftTransactionAmount.Ordinal] = 0;
            this[this.myTable.ColumnHomeAdminChargesFlag.Ordinal] = true;
            this[this.myTable.ColumnIltAdminChargesFlag.Ordinal] = true;
            this.SetNull(this.myTable.ColumnReceiptLetterCode);
            this.SetNull(this.myTable.ColumnMethodOfGivingCode);
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
            this[this.myTable.ColumnDonorKey.Ordinal] = 0;
            this[this.myTable.ColumnAdminCharge.Ordinal] = false;
            this.SetNull(this.myTable.ColumnNarrative);
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnDonorShortName);
            this.SetNull(this.myTable.ColumnRecipientShortName);
            this[this.myTable.ColumnRestricted.Ordinal] = false;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnKeyMinistryKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsEpMatchKeyNull()
        {
            return this.IsNull(this.myTable.ColumnEpMatchKey);
        }

        /// assign NULL value
        public void SetEpMatchKeyNull()
        {
            this.SetNull(this.myTable.ColumnEpMatchKey);
        }

        /// test for NULL value
        public bool IsMatchTextNull()
        {
            return this.IsNull(this.myTable.ColumnMatchText);
        }

        /// assign NULL value
        public void SetMatchTextNull()
        {
            this.SetNull(this.myTable.ColumnMatchText);
        }

        /// test for NULL value
        public bool IsDetailNull()
        {
            return this.IsNull(this.myTable.ColumnDetail);
        }

        /// assign NULL value
        public void SetDetailNull()
        {
            this.SetNull(this.myTable.ColumnDetail);
        }

        /// test for NULL value
        public bool IsActionNull()
        {
            return this.IsNull(this.myTable.ColumnAction);
        }

        /// assign NULL value
        public void SetActionNull()
        {
            this.SetNull(this.myTable.ColumnAction);
        }

        /// test for NULL value
        public bool IsRecentMatchNull()
        {
            return this.IsNull(this.myTable.ColumnRecentMatch);
        }

        /// assign NULL value
        public void SetRecentMatchNull()
        {
            this.SetNull(this.myTable.ColumnRecentMatch);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsRecipientLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnRecipientLedgerNumber);
        }

        /// assign NULL value
        public void SetRecipientLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnRecipientLedgerNumber);
        }

        /// test for NULL value
        public bool IsMotivationGroupCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMotivationGroupCode);
        }

        /// assign NULL value
        public void SetMotivationGroupCodeNull()
        {
            this.SetNull(this.myTable.ColumnMotivationGroupCode);
        }

        /// test for NULL value
        public bool IsMotivationDetailCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMotivationDetailCode);
        }

        /// assign NULL value
        public void SetMotivationDetailCodeNull()
        {
            this.SetNull(this.myTable.ColumnMotivationDetailCode);
        }

        /// test for NULL value
        public bool IsCommentOneTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCommentOneType);
        }

        /// assign NULL value
        public void SetCommentOneTypeNull()
        {
            this.SetNull(this.myTable.ColumnCommentOneType);
        }

        /// test for NULL value
        public bool IsGiftCommentOneNull()
        {
            return this.IsNull(this.myTable.ColumnGiftCommentOne);
        }

        /// assign NULL value
        public void SetGiftCommentOneNull()
        {
            this.SetNull(this.myTable.ColumnGiftCommentOne);
        }

        /// test for NULL value
        public bool IsConfidentialGiftFlagNull()
        {
            return this.IsNull(this.myTable.ColumnConfidentialGiftFlag);
        }

        /// assign NULL value
        public void SetConfidentialGiftFlagNull()
        {
            this.SetNull(this.myTable.ColumnConfidentialGiftFlag);
        }

        /// test for NULL value
        public bool IsTaxDeductableNull()
        {
            return this.IsNull(this.myTable.ColumnTaxDeductable);
        }

        /// assign NULL value
        public void SetTaxDeductableNull()
        {
            this.SetNull(this.myTable.ColumnTaxDeductable);
        }

        /// test for NULL value
        public bool IsRecipientKeyNull()
        {
            return this.IsNull(this.myTable.ColumnRecipientKey);
        }

        /// assign NULL value
        public void SetRecipientKeyNull()
        {
            this.SetNull(this.myTable.ColumnRecipientKey);
        }

        /// test for NULL value
        public bool IsChargeFlagNull()
        {
            return this.IsNull(this.myTable.ColumnChargeFlag);
        }

        /// assign NULL value
        public void SetChargeFlagNull()
        {
            this.SetNull(this.myTable.ColumnChargeFlag);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsMailingCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMailingCode);
        }

        /// assign NULL value
        public void SetMailingCodeNull()
        {
            this.SetNull(this.myTable.ColumnMailingCode);
        }

        /// test for NULL value
        public bool IsCommentTwoTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCommentTwoType);
        }

        /// assign NULL value
        public void SetCommentTwoTypeNull()
        {
            this.SetNull(this.myTable.ColumnCommentTwoType);
        }

        /// test for NULL value
        public bool IsGiftCommentTwoNull()
        {
            return this.IsNull(this.myTable.ColumnGiftCommentTwo);
        }

        /// assign NULL value
        public void SetGiftCommentTwoNull()
        {
            this.SetNull(this.myTable.ColumnGiftCommentTwo);
        }

        /// test for NULL value
        public bool IsCommentThreeTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCommentThreeType);
        }

        /// assign NULL value
        public void SetCommentThreeTypeNull()
        {
            this.SetNull(this.myTable.ColumnCommentThreeType);
        }

        /// test for NULL value
        public bool IsGiftCommentThreeNull()
        {
            return this.IsNull(this.myTable.ColumnGiftCommentThree);
        }

        /// assign NULL value
        public void SetGiftCommentThreeNull()
        {
            this.SetNull(this.myTable.ColumnGiftCommentThree);
        }

        /// test for NULL value
        public bool IsGiftTransactionAmountNull()
        {
            return this.IsNull(this.myTable.ColumnGiftTransactionAmount);
        }

        /// assign NULL value
        public void SetGiftTransactionAmountNull()
        {
            this.SetNull(this.myTable.ColumnGiftTransactionAmount);
        }

        /// test for NULL value
        public bool IsHomeAdminChargesFlagNull()
        {
            return this.IsNull(this.myTable.ColumnHomeAdminChargesFlag);
        }

        /// assign NULL value
        public void SetHomeAdminChargesFlagNull()
        {
            this.SetNull(this.myTable.ColumnHomeAdminChargesFlag);
        }

        /// test for NULL value
        public bool IsIltAdminChargesFlagNull()
        {
            return this.IsNull(this.myTable.ColumnIltAdminChargesFlag);
        }

        /// assign NULL value
        public void SetIltAdminChargesFlagNull()
        {
            this.SetNull(this.myTable.ColumnIltAdminChargesFlag);
        }

        /// test for NULL value
        public bool IsReceiptLetterCodeNull()
        {
            return this.IsNull(this.myTable.ColumnReceiptLetterCode);
        }

        /// assign NULL value
        public void SetReceiptLetterCodeNull()
        {
            this.SetNull(this.myTable.ColumnReceiptLetterCode);
        }

        /// test for NULL value
        public bool IsMethodOfGivingCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMethodOfGivingCode);
        }

        /// assign NULL value
        public void SetMethodOfGivingCodeNull()
        {
            this.SetNull(this.myTable.ColumnMethodOfGivingCode);
        }

        /// test for NULL value
        public bool IsMethodOfPaymentCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMethodOfPaymentCode);
        }

        /// assign NULL value
        public void SetMethodOfPaymentCodeNull()
        {
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
        }

        /// test for NULL value
        public bool IsDonorKeyNull()
        {
            return this.IsNull(this.myTable.ColumnDonorKey);
        }

        /// assign NULL value
        public void SetDonorKeyNull()
        {
            this.SetNull(this.myTable.ColumnDonorKey);
        }

        /// test for NULL value
        public bool IsAdminChargeNull()
        {
            return this.IsNull(this.myTable.ColumnAdminCharge);
        }

        /// assign NULL value
        public void SetAdminChargeNull()
        {
            this.SetNull(this.myTable.ColumnAdminCharge);
        }

        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }

        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }

        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }

        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }

        /// test for NULL value
        public bool IsDonorShortNameNull()
        {
            return this.IsNull(this.myTable.ColumnDonorShortName);
        }

        /// assign NULL value
        public void SetDonorShortNameNull()
        {
            this.SetNull(this.myTable.ColumnDonorShortName);
        }

        /// test for NULL value
        public bool IsRecipientShortNameNull()
        {
            return this.IsNull(this.myTable.ColumnRecipientShortName);
        }

        /// assign NULL value
        public void SetRecipientShortNameNull()
        {
            this.SetNull(this.myTable.ColumnRecipientShortName);
        }

        /// test for NULL value
        public bool IsRestrictedNull()
        {
            return this.IsNull(this.myTable.ColumnRestricted);
        }

        /// assign NULL value
        public void SetRestrictedNull()
        {
            this.SetNull(this.myTable.ColumnRestricted);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsKeyMinistryKeyNull()
        {
            return this.IsNull(this.myTable.ColumnKeyMinistryKey);
        }

        /// assign NULL value
        public void SetKeyMinistryKeyNull()
        {
            this.SetNull(this.myTable.ColumnKeyMinistryKey);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// the transactions from the recently imported bank statements; they should help to identify the other party of the transaction (donor, etc) and the purpose of the transaction
    [Serializable()]
    public class AEpTransactionTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 66;
        /// used for generic TTypedDataTable functions
        public static short ColumnStatementKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnOrderId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDetailKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnNumberOnPaperStatementId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnMatchTextId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountNameId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnTitleId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnFirstNameId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnMiddleNameId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastNameId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnBranchCodeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnBicId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnBankAccountNumberId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnIbanId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeCodeId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionAmountId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnEpMatchKeyId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 23;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AEpTransaction", "a_ep_transaction",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "StatementKey", "a_statement_key_i", "Bank statement", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "Order", "a_order_i", "order", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "DetailKey", "a_detail_key_i", "a_detail_key_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "NumberOnPaperStatement", "a_number_on_paper_statement_i", "a_number_on_paper_statement_i", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(4, "MatchText", "a_match_text_c", "a_match_text_c", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(5, "AccountName", "a_account_name_c", "Account Name", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(6, "Title", "a_title_c", "Title", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(7, "FirstName", "a_first_name_c", "First Name", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(8, "MiddleName", "a_middle_name_c", "Middle Name", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(9, "LastName", "a_last_name_c", "Last Name", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(10, "BranchCode", "p_branch_code_c", "Bank/Branch Code", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "Bic", "p_bic_c", "BIC/SWIFT Code", OdbcType.VarChar, 22, false),
                    new TTypedColumnInfo(12, "BankAccountNumber", "a_bank_account_number_c", "Account Number", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(13, "Iban", "a_iban_c", "IBAN", OdbcType.VarChar, 128, false),
                    new TTypedColumnInfo(14, "TransactionTypeCode", "a_transaction_type_code_c", "transaction type", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(15, "TransactionAmount", "a_transaction_amount_n", "Transaction Amount", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(16, "Description", "a_description_c", "description", OdbcType.VarChar, 512, false),
                    new TTypedColumnInfo(17, "DateEffective", "a_date_effective_d", "Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(18, "EpMatchKey", "a_ep_match_key_i", "a_ep_match_key_i", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(19, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(20, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(21, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(22, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(23, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public AEpTransactionTable() :
                base("AEpTransaction")
        {
        }

        /// constructor
        public AEpTransactionTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AEpTransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// this transaction belongs to that statement
        public DataColumn ColumnStatementKey;
        /// to complete the primary key
        public DataColumn ColumnOrder;
        /// a transaction can be split in order to support mixed GL and Gift records
        public DataColumn ColumnDetailKey;
        /// can be different from order, since the paper statements can have different order than the electronic statement
        public DataColumn ColumnNumberOnPaperStatement;
        /// this is a calculated text that uniquely identifies this transaction so that it can be recognised next month. TODO: should have a link table a_ep_match between a_ep_transaction and a_ep_match_detail
        public DataColumn ColumnMatchText;
        /// This can be a summary of title, first name, last name etc. of the other party
        public DataColumn ColumnAccountName;
        ///
        public DataColumn ColumnTitle;
        ///
        public DataColumn ColumnFirstName;
        ///
        public DataColumn ColumnMiddleName;
        /// the name of the other party
        public DataColumn ColumnLastName;
        /// The bank code/branch code/sort code of the other party.
        public DataColumn ColumnBranchCode;
        /// BIC (Bank Identifier Code)/SWIFT code of the other party
        public DataColumn ColumnBic;
        /// The account number in the bank of the other party
        public DataColumn ColumnBankAccountNumber;
        /// The IBAN (International Bank Account Number) of the other party.
        public DataColumn ColumnIban;
        /// This can be recurring income, recurring payment, income, payment, direct debit, etc.
        public DataColumn ColumnTransactionTypeCode;
        /// The amount in the currency of the bank account
        public DataColumn ColumnTransactionAmount;
        /// This description was given when the transfer was initiated
        public DataColumn ColumnDescription;
        /// The date when this transaction became valid or available
        public DataColumn ColumnDateEffective;
        /// set this value to the match (either new match or set automatically)
        public DataColumn ColumnEpMatchKey;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_statement_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_order_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_number_on_paper_statement_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_match_text_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_title_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_first_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_middle_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_branch_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_bic_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_bank_account_number_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_iban_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_ep_match_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnStatementKey = this.Columns["a_statement_key_i"];
            this.ColumnOrder = this.Columns["a_order_i"];
            this.ColumnDetailKey = this.Columns["a_detail_key_i"];
            this.ColumnNumberOnPaperStatement = this.Columns["a_number_on_paper_statement_i"];
            this.ColumnMatchText = this.Columns["a_match_text_c"];
            this.ColumnAccountName = this.Columns["a_account_name_c"];
            this.ColumnTitle = this.Columns["a_title_c"];
            this.ColumnFirstName = this.Columns["a_first_name_c"];
            this.ColumnMiddleName = this.Columns["a_middle_name_c"];
            this.ColumnLastName = this.Columns["a_last_name_c"];
            this.ColumnBranchCode = this.Columns["p_branch_code_c"];
            this.ColumnBic = this.Columns["p_bic_c"];
            this.ColumnBankAccountNumber = this.Columns["a_bank_account_number_c"];
            this.ColumnIban = this.Columns["a_iban_c"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnDescription = this.Columns["a_description_c"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnEpMatchKey = this.Columns["a_ep_match_key_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnStatementKey,ColumnOrder,ColumnDetailKey};
        }

        /// Access a typed row by index
        public AEpTransactionRow this[int i]
        {
            get
            {
                return ((AEpTransactionRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AEpTransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            AEpTransactionRow ret = ((AEpTransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AEpTransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEpTransactionRow(builder);
        }

        /// get typed set of changes
        public AEpTransactionTable GetChangesTyped()
        {
            return ((AEpTransactionTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AEpTransaction";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_ep_transaction";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetStatementKeyDBName()
        {
            return "a_statement_key_i";
        }

        /// get character length for column
        public static short GetStatementKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetOrderDBName()
        {
            return "a_order_i";
        }

        /// get character length for column
        public static short GetOrderLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDetailKeyDBName()
        {
            return "a_detail_key_i";
        }

        /// get character length for column
        public static short GetDetailKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNumberOnPaperStatementDBName()
        {
            return "a_number_on_paper_statement_i";
        }

        /// get character length for column
        public static short GetNumberOnPaperStatementLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetMatchTextDBName()
        {
            return "a_match_text_c";
        }

        /// get character length for column
        public static short GetMatchTextLength()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountNameDBName()
        {
            return "a_account_name_c";
        }

        /// get character length for column
        public static short GetAccountNameLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetTitleDBName()
        {
            return "a_title_c";
        }

        /// get character length for column
        public static short GetTitleLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetFirstNameDBName()
        {
            return "a_first_name_c";
        }

        /// get character length for column
        public static short GetFirstNameLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetMiddleNameDBName()
        {
            return "a_middle_name_c";
        }

        /// get character length for column
        public static short GetMiddleNameLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetLastNameDBName()
        {
            return "a_last_name_c";
        }

        /// get character length for column
        public static short GetLastNameLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetBranchCodeDBName()
        {
            return "p_branch_code_c";
        }

        /// get character length for column
        public static short GetBranchCodeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetBicDBName()
        {
            return "p_bic_c";
        }

        /// get character length for column
        public static short GetBicLength()
        {
            return 22;
        }

        /// get the name of the field in the database for this column
        public static string GetBankAccountNumberDBName()
        {
            return "a_bank_account_number_c";
        }

        /// get character length for column
        public static short GetBankAccountNumberLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetIbanDBName()
        {
            return "a_iban_c";
        }

        /// get character length for column
        public static short GetIbanLength()
        {
            return 128;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }

        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }

        /// get character length for column
        public static short GetTransactionAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "a_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 512;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetEpMatchKeyDBName()
        {
            return "a_ep_match_key_i";
        }

        /// get character length for column
        public static short GetEpMatchKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// the transactions from the recently imported bank statements; they should help to identify the other party of the transaction (donor, etc) and the purpose of the transaction
    [Serializable()]
    public class AEpTransactionRow : System.Data.DataRow
    {
        private AEpTransactionTable myTable;

        /// Constructor
        public AEpTransactionRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AEpTransactionTable)(this.Table));
        }

        /// this transaction belongs to that statement
        public Int32 StatementKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStatementKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStatementKey)
                            || (((Int32)(this[this.myTable.ColumnStatementKey])) != value)))
                {
                    this[this.myTable.ColumnStatementKey] = value;
                }
            }
        }

        /// to complete the primary key
        public Int32 Order
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOrder.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOrder)
                            || (((Int32)(this[this.myTable.ColumnOrder])) != value)))
                {
                    this[this.myTable.ColumnOrder] = value;
                }
            }
        }

        /// a transaction can be split in order to support mixed GL and Gift records
        public Int32 DetailKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailKey)
                            || (((Int32)(this[this.myTable.ColumnDetailKey])) != value)))
                {
                    this[this.myTable.ColumnDetailKey] = value;
                }
            }
        }

        /// can be different from order, since the paper statements can have different order than the electronic statement
        public Int32 NumberOnPaperStatement
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOnPaperStatement.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOnPaperStatement)
                            || (((Int32)(this[this.myTable.ColumnNumberOnPaperStatement])) != value)))
                {
                    this[this.myTable.ColumnNumberOnPaperStatement] = value;
                }
            }
        }

        /// this is a calculated text that uniquely identifies this transaction so that it can be recognised next month. TODO: should have a link table a_ep_match between a_ep_transaction and a_ep_match_detail
        public String MatchText
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMatchText.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMatchText)
                            || (((String)(this[this.myTable.ColumnMatchText])) != value)))
                {
                    this[this.myTable.ColumnMatchText] = value;
                }
            }
        }

        /// This can be a summary of title, first name, last name etc. of the other party
        public String AccountName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountName)
                            || (((String)(this[this.myTable.ColumnAccountName])) != value)))
                {
                    this[this.myTable.ColumnAccountName] = value;
                }
            }
        }

        ///
        public String Title
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTitle.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTitle)
                            || (((String)(this[this.myTable.ColumnTitle])) != value)))
                {
                    this[this.myTable.ColumnTitle] = value;
                }
            }
        }

        ///
        public String FirstName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFirstName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFirstName)
                            || (((String)(this[this.myTable.ColumnFirstName])) != value)))
                {
                    this[this.myTable.ColumnFirstName] = value;
                }
            }
        }

        ///
        public String MiddleName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMiddleName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMiddleName)
                            || (((String)(this[this.myTable.ColumnMiddleName])) != value)))
                {
                    this[this.myTable.ColumnMiddleName] = value;
                }
            }
        }

        /// the name of the other party
        public String LastName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastName)
                            || (((String)(this[this.myTable.ColumnLastName])) != value)))
                {
                    this[this.myTable.ColumnLastName] = value;
                }
            }
        }

        /// The bank code/branch code/sort code of the other party.
        public String BranchCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBranchCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBranchCode)
                            || (((String)(this[this.myTable.ColumnBranchCode])) != value)))
                {
                    this[this.myTable.ColumnBranchCode] = value;
                }
            }
        }

        /// BIC (Bank Identifier Code)/SWIFT code of the other party
        public String Bic
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBic.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBic)
                            || (((String)(this[this.myTable.ColumnBic])) != value)))
                {
                    this[this.myTable.ColumnBic] = value;
                }
            }
        }

        /// The account number in the bank of the other party
        public String BankAccountNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankAccountNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankAccountNumber)
                            || (((String)(this[this.myTable.ColumnBankAccountNumber])) != value)))
                {
                    this[this.myTable.ColumnBankAccountNumber] = value;
                }
            }
        }

        /// The IBAN (International Bank Account Number) of the other party.
        public String Iban
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIban.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIban)
                            || (((String)(this[this.myTable.ColumnIban])) != value)))
                {
                    this[this.myTable.ColumnIban] = value;
                }
            }
        }

        /// This can be recurring income, recurring payment, income, payment, direct debit, etc.
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode)
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }

        /// The amount in the currency of the bank account
        public Decimal TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount)
                            || (((Decimal)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }

        /// This description was given when the transfer was initiated
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// The date when this transaction became valid or available
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        /// set this value to the match (either new match or set automatically)
        public Int32 EpMatchKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEpMatchKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEpMatchKey)
                            || (((Int32)(this[this.myTable.ColumnEpMatchKey])) != value)))
                {
                    this[this.myTable.ColumnEpMatchKey] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnStatementKey);
            this.SetNull(this.myTable.ColumnOrder);
            this[this.myTable.ColumnDetailKey.Ordinal] = -1;
            this[this.myTable.ColumnNumberOnPaperStatement.Ordinal] = -1;
            this.SetNull(this.myTable.ColumnMatchText);
            this.SetNull(this.myTable.ColumnAccountName);
            this.SetNull(this.myTable.ColumnTitle);
            this.SetNull(this.myTable.ColumnFirstName);
            this.SetNull(this.myTable.ColumnMiddleName);
            this.SetNull(this.myTable.ColumnLastName);
            this.SetNull(this.myTable.ColumnBranchCode);
            this.SetNull(this.myTable.ColumnBic);
            this.SetNull(this.myTable.ColumnBankAccountNumber);
            this.SetNull(this.myTable.ColumnIban);
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnEpMatchKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsStatementKeyNull()
        {
            return this.IsNull(this.myTable.ColumnStatementKey);
        }

        /// assign NULL value
        public void SetStatementKeyNull()
        {
            this.SetNull(this.myTable.ColumnStatementKey);
        }

        /// test for NULL value
        public bool IsOrderNull()
        {
            return this.IsNull(this.myTable.ColumnOrder);
        }

        /// assign NULL value
        public void SetOrderNull()
        {
            this.SetNull(this.myTable.ColumnOrder);
        }

        /// test for NULL value
        public bool IsDetailKeyNull()
        {
            return this.IsNull(this.myTable.ColumnDetailKey);
        }

        /// assign NULL value
        public void SetDetailKeyNull()
        {
            this.SetNull(this.myTable.ColumnDetailKey);
        }

        /// test for NULL value
        public bool IsNumberOnPaperStatementNull()
        {
            return this.IsNull(this.myTable.ColumnNumberOnPaperStatement);
        }

        /// assign NULL value
        public void SetNumberOnPaperStatementNull()
        {
            this.SetNull(this.myTable.ColumnNumberOnPaperStatement);
        }

        /// test for NULL value
        public bool IsMatchTextNull()
        {
            return this.IsNull(this.myTable.ColumnMatchText);
        }

        /// assign NULL value
        public void SetMatchTextNull()
        {
            this.SetNull(this.myTable.ColumnMatchText);
        }

        /// test for NULL value
        public bool IsAccountNameNull()
        {
            return this.IsNull(this.myTable.ColumnAccountName);
        }

        /// assign NULL value
        public void SetAccountNameNull()
        {
            this.SetNull(this.myTable.ColumnAccountName);
        }

        /// test for NULL value
        public bool IsTitleNull()
        {
            return this.IsNull(this.myTable.ColumnTitle);
        }

        /// assign NULL value
        public void SetTitleNull()
        {
            this.SetNull(this.myTable.ColumnTitle);
        }

        /// test for NULL value
        public bool IsFirstNameNull()
        {
            return this.IsNull(this.myTable.ColumnFirstName);
        }

        /// assign NULL value
        public void SetFirstNameNull()
        {
            this.SetNull(this.myTable.ColumnFirstName);
        }

        /// test for NULL value
        public bool IsMiddleNameNull()
        {
            return this.IsNull(this.myTable.ColumnMiddleName);
        }

        /// assign NULL value
        public void SetMiddleNameNull()
        {
            this.SetNull(this.myTable.ColumnMiddleName);
        }

        /// test for NULL value
        public bool IsLastNameNull()
        {
            return this.IsNull(this.myTable.ColumnLastName);
        }

        /// assign NULL value
        public void SetLastNameNull()
        {
            this.SetNull(this.myTable.ColumnLastName);
        }

        /// test for NULL value
        public bool IsBranchCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBranchCode);
        }

        /// assign NULL value
        public void SetBranchCodeNull()
        {
            this.SetNull(this.myTable.ColumnBranchCode);
        }

        /// test for NULL value
        public bool IsBicNull()
        {
            return this.IsNull(this.myTable.ColumnBic);
        }

        /// assign NULL value
        public void SetBicNull()
        {
            this.SetNull(this.myTable.ColumnBic);
        }

        /// test for NULL value
        public bool IsBankAccountNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBankAccountNumber);
        }

        /// assign NULL value
        public void SetBankAccountNumberNull()
        {
            this.SetNull(this.myTable.ColumnBankAccountNumber);
        }

        /// test for NULL value
        public bool IsIbanNull()
        {
            return this.IsNull(this.myTable.ColumnIban);
        }

        /// assign NULL value
        public void SetIbanNull()
        {
            this.SetNull(this.myTable.ColumnIban);
        }

        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// test for NULL value
        public bool IsTransactionAmountNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionAmount);
        }

        /// assign NULL value
        public void SetTransactionAmountNull()
        {
            this.SetNull(this.myTable.ColumnTransactionAmount);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsEpMatchKeyNull()
        {
            return this.IsNull(this.myTable.ColumnEpMatchKey);
        }

        /// assign NULL value
        public void SetEpMatchKeyNull()
        {
            this.SetNull(this.myTable.ColumnEpMatchKey);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Subsystems to the general ledger which can be added and removed independantly.  Eg GL, AP, AR, GR
    [Serializable()]
    public class ASubSystemTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 105;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnSetupSubSystemProcessId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemToCallId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ASubSystem", "a_sub_system",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "SubSystemCode", "a_sub_system_code_c", "Sub System Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(1, "SubSystemName", "a_sub_system_name_c", "Sub System Name", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(2, "SetupSubSystemProcess", "a_setup_sub_system_process_c", "Setup process to Call", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(3, "SubSystemToCall", "a_sub_system_to_call_c", "To run Sub-system", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public ASubSystemTable() :
                base("ASubSystem")
        {
        }

        /// constructor
        public ASubSystemTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ASubSystemTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        /// Name of a sub system
        public DataColumn ColumnSubSystemName;
        /// The filename of the process to call
        public DataColumn ColumnSetupSubSystemProcess;
        /// The filename of the process to call
        public DataColumn ColumnSubSystemToCall;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_setup_sub_system_process_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_to_call_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnSubSystemName = this.Columns["a_sub_system_name_c"];
            this.ColumnSetupSubSystemProcess = this.Columns["a_setup_sub_system_process_c"];
            this.ColumnSubSystemToCall = this.Columns["a_sub_system_to_call_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnSubSystemCode};
        }

        /// Access a typed row by index
        public ASubSystemRow this[int i]
        {
            get
            {
                return ((ASubSystemRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ASubSystemRow NewRowTyped(bool AWithDefaultValues)
        {
            ASubSystemRow ret = ((ASubSystemRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ASubSystemRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ASubSystemRow(builder);
        }

        /// get typed set of changes
        public ASubSystemTable GetChangesTyped()
        {
            return ((ASubSystemTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ASubSystem";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_sub_system";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemNameDBName()
        {
            return "a_sub_system_name_c";
        }

        /// get character length for column
        public static short GetSubSystemNameLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetSetupSubSystemProcessDBName()
        {
            return "a_setup_sub_system_process_c";
        }

        /// get character length for column
        public static short GetSetupSubSystemProcessLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemToCallDBName()
        {
            return "a_sub_system_to_call_c";
        }

        /// get character length for column
        public static short GetSubSystemToCallLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Subsystems to the general ledger which can be added and removed independantly.  Eg GL, AP, AR, GR
    [Serializable()]
    public class ASubSystemRow : System.Data.DataRow
    {
        private ASubSystemTable myTable;

        /// Constructor
        public ASubSystemRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ASubSystemTable)(this.Table));
        }

        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        /// Name of a sub system
        public String SubSystemName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemName)
                            || (((String)(this[this.myTable.ColumnSubSystemName])) != value)))
                {
                    this[this.myTable.ColumnSubSystemName] = value;
                }
            }
        }

        /// The filename of the process to call
        public String SetupSubSystemProcess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSetupSubSystemProcess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSetupSubSystemProcess)
                            || (((String)(this[this.myTable.ColumnSetupSubSystemProcess])) != value)))
                {
                    this[this.myTable.ColumnSetupSubSystemProcess] = value;
                }
            }
        }

        /// The filename of the process to call
        public String SubSystemToCall
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemToCall.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemToCall)
                            || (((String)(this[this.myTable.ColumnSubSystemToCall])) != value)))
                {
                    this[this.myTable.ColumnSubSystemToCall] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this.SetNull(this.myTable.ColumnSubSystemName);
            this.SetNull(this.myTable.ColumnSetupSubSystemProcess);
            this.SetNull(this.myTable.ColumnSubSystemToCall);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsSubSystemNameNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemName);
        }

        /// assign NULL value
        public void SetSubSystemNameNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemName);
        }

        /// test for NULL value
        public bool IsSetupSubSystemProcessNull()
        {
            return this.IsNull(this.myTable.ColumnSetupSubSystemProcess);
        }

        /// assign NULL value
        public void SetSetupSubSystemProcessNull()
        {
            this.SetNull(this.myTable.ColumnSetupSubSystemProcess);
        }

        /// test for NULL value
        public bool IsSubSystemToCallNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemToCall);
        }

        /// assign NULL value
        public void SetSubSystemToCallNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemToCall);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Basic information for each general ledger on the system. Also counters for ledger-specific variables (such as last receipt number).
    [Serializable()]
    public class ALedgerTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 107;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerStatusId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastBatchNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastRecurringBatchNumberId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastGiftNumberId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastApInvNumberId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastHeaderRNumberId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastPoNumberId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastSoNumberId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnMaxGiftAidAmountId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnMinGiftAidAmountId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnNumberOfGiftsToDisplayId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxTypeCodeId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnIltGlAccountCodeId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnProfitLossGlAccountCodeId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnCurrentAccountingPeriodId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnNumberOfAccountingPeriodsId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnCountryCodeId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnBaseCurrencyId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionAccountFlagId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearEndFlagId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnForexGainsLossesAccountId = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnSystemInterfaceFlagId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnSuspenseAccountFlagId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnBankAccountsFlagId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeleteLedgerFlagId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnNewFinancialYearFlagId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecalculateGlMasterFlagId = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnInstallationIdId = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetControlFlagId = 30;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetDataRetentionId = 31;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostOfSalesGlAccountId = 32;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreditorGlAccountCodeId = 33;
        /// used for generic TTypedDataTable functions
        public static short ColumnCurrentFinancialYearId = 34;
        /// used for generic TTypedDataTable functions
        public static short ColumnCurrentPeriodId = 35;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCrDrBalancesId = 36;
        /// used for generic TTypedDataTable functions
        public static short ColumnDebtorGlAccountCodeId = 37;
        /// used for generic TTypedDataTable functions
        public static short ColumnFaDepreciationGlAccountId = 38;
        /// used for generic TTypedDataTable functions
        public static short ColumnFaGlAccountCodeId = 39;
        /// used for generic TTypedDataTable functions
        public static short ColumnFaPlOnSaleGlAccountId = 40;
        /// used for generic TTypedDataTable functions
        public static short ColumnFaProvForDepnGlAccountId = 41;
        /// used for generic TTypedDataTable functions
        public static short ColumnIltAccountFlagId = 42;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastApDnNumberId = 43;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastPoRetNumberId = 44;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastSoDelNumberId = 45;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastSoRetNumberId = 46;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastSpecialGiftNumberId = 47;
        /// used for generic TTypedDataTable functions
        public static short ColumnNumberFwdPostingPeriodsId = 48;
        /// used for generic TTypedDataTable functions
        public static short ColumnPeriodsPerFinancialYearId = 49;
        /// used for generic TTypedDataTable functions
        public static short ColumnDiscountAllowedPctId = 50;
        /// used for generic TTypedDataTable functions
        public static short ColumnDiscountReceivedPctId = 51;
        /// used for generic TTypedDataTable functions
        public static short ColumnPoAccrualGlAccountCodeId = 52;
        /// used for generic TTypedDataTable functions
        public static short ColumnProvisionalYearEndFlagId = 53;
        /// used for generic TTypedDataTable functions
        public static short ColumnPurchaseGlAccountCodeId = 54;
        /// used for generic TTypedDataTable functions
        public static short ColumnRetEarningsGlAccountId = 55;
        /// used for generic TTypedDataTable functions
        public static short ColumnSalesGlAccountCodeId = 56;
        /// used for generic TTypedDataTable functions
        public static short ColumnSoAccrualGlAccountCodeId = 57;
        /// used for generic TTypedDataTable functions
        public static short ColumnStockAccrualGlAccountId = 58;
        /// used for generic TTypedDataTable functions
        public static short ColumnStockAdjGlAccountCodeId = 59;
        /// used for generic TTypedDataTable functions
        public static short ColumnStockGlAccountCodeId = 60;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxExclInclId = 61;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxExclInclIndicatorId = 62;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxInputGlAccountCodeId = 63;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxInputGlCcCodeId = 64;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxOutputGlAccountCodeId = 65;
        /// used for generic TTypedDataTable functions
        public static short ColumnTermsOfPaymentCodeId = 66;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastPoRecNumberId = 67;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxGlAccountNumberId = 68;
        /// used for generic TTypedDataTable functions
        public static short ColumnActualsDataRetentionId = 69;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 70;
        /// used for generic TTypedDataTable functions
        public static short ColumnCalendarModeId = 71;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearEndProcessStatusId = 72;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastHeaderPNumberId = 73;
        /// used for generic TTypedDataTable functions
        public static short ColumnIltProcessingCentreId = 74;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastGiftBatchNumberId = 75;
        /// used for generic TTypedDataTable functions
        public static short ColumnIntlCurrencyId = 76;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastRecGiftBatchNumberId = 77;
        /// used for generic TTypedDataTable functions
        public static short ColumnGiftDataRetentionId = 78;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecalculateAllPeriodsId = 79;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastIchNumberId = 80;
        /// used for generic TTypedDataTable functions
        public static short ColumnBranchProcessingId = 81;
        /// used for generic TTypedDataTable functions
        public static short ColumnConsolidationLedgerId = 82;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 83;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 84;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 85;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 86;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 87;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ALedger", "a_ledger",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "LedgerName", "a_ledger_name_c", "Ledger Name", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(2, "LedgerStatus", "a_ledger_status_l", "Ledger Status", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "LastBatchNumber", "a_last_batch_number_i", "Last Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "LastRecurringBatchNumber", "a_last_recurring_batch_number_i", "Last Recurring Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(5, "LastGiftNumber", "a_last_gift_number_i", "Last Gift Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(6, "LastApInvNumber", "a_last_ap_inv_number_i", "Last Invoice Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(7, "LastHeaderRNumber", "a_last_header_r_number_i", "Last Receipt Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(8, "LastPoNumber", "a_last_po_number_i", "Last PO Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(9, "LastSoNumber", "a_last_so_number_i", "Last SO Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(10, "MaxGiftAidAmount", "a_max_gift_aid_amount_n", "Max UK Gift Aid", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(11, "MinGiftAidAmount", "a_min_gift_aid_amount_n", "Min UK Gift Aid", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(12, "NumberOfGiftsToDisplay", "a_number_of_gifts_to_display_i", "Number of Gifts to Display", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(13, "TaxTypeCode", "a_tax_type_code_c", "Sales Tax System", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(14, "IltGlAccountCode", "a_ilt_gl_account_code_c", "ILT Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(15, "ProfitLossGlAccountCode", "a_profit_loss_gl_account_code_c", "Profit/Loss Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(16, "CurrentAccountingPeriod", "a_current_accounting_period_i", "Current Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(17, "NumberOfAccountingPeriods", "a_number_of_accounting_periods_i", "Number of Accounting Periods", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(18, "CountryCode", "a_country_code_c", "Country Code", OdbcType.VarChar, 8, false),
                    new TTypedColumnInfo(19, "BaseCurrency", "a_base_currency_c", "Base Currency", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(20, "TransactionAccountFlag", "a_transaction_account_flag_l", "Transaction Account Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(21, "YearEndFlag", "a_year_end_flag_l", "Year End Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(22, "ForexGainsLossesAccount", "a_forex_gains_losses_account_c", "Foreign Currency revaluation Account", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(23, "SystemInterfaceFlag", "a_system_interface_flag_l", "System Interface Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(24, "SuspenseAccountFlag", "a_suspense_account_flag_l", "Suspense Account Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(25, "BankAccountsFlag", "a_bank_accounts_flag_l", "Bank account Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(26, "DeleteLedgerFlag", "a_delete_ledger_flag_l", "Delete Ledger Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(27, "NewFinancialYearFlag", "a_new_financial_year_flag_l", "New Financial Year Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(28, "RecalculateGlMasterFlag", "a_recalculate_gl_master_flag_l", "Recalculate GL Master Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(29, "InstallationId", "a_installation_id_c", "Installation ID", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(30, "BudgetControlFlag", "a_budget_control_flag_l", "Budget Control", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(31, "BudgetDataRetention", "a_budget_data_retention_i", "Budget Data Retention Period", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(32, "CostOfSalesGlAccount", "a_cost_of_sales_gl_account_c", "Cost of Sales G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(33, "CreditorGlAccountCode", "a_creditor_gl_account_code_c", "Creditor G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(34, "CurrentFinancialYear", "a_current_financial_year_i", "Current Financial Year", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(35, "CurrentPeriod", "a_current_period_i", "Current Period", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(36, "DateCrDrBalances", "a_date_cr_dr_balances_d", "Date CR/DR Balances", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(37, "DebtorGlAccountCode", "a_debtor_gl_account_code_c", "Debtor G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(38, "FaDepreciationGlAccount", "a_fa_depreciation_gl_account_c", "FA Depreciation G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(39, "FaGlAccountCode", "a_fa_gl_account_code_c", "FA G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(40, "FaPlOnSaleGlAccount", "a_fa_pl_on_sale_gl_account_c", "FA Pft/Loss On Sale G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(41, "FaProvForDepnGlAccount", "a_fa_prov_for_depn_gl_account_c", "FA Provision For Depriciation G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(42, "IltAccountFlag", "a_ilt_account_flag_l", "ILT Account Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(43, "LastApDnNumber", "a_last_ap_dn_number_i", "Last AP DN Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(44, "LastPoRetNumber", "a_last_po_ret_number_i", "Last PO Return Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(45, "LastSoDelNumber", "a_last_so_del_number_i", "Last SO Delivery Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(46, "LastSoRetNumber", "a_last_so_ret_number_i", "Last SO Return Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(47, "LastSpecialGiftNumber", "a_last_special_gift_number_i", "Last Special Gift Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(48, "NumberFwdPostingPeriods", "a_number_fwd_posting_periods_i", "Number Fwd Posting Periods", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(49, "PeriodsPerFinancialYear", "a_periods_per_financial_year_i", "Periods Per  Financial Year", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(50, "DiscountAllowedPct", "a_discount_allowed_pct_n", "Default Discount Allowed %", OdbcType.Decimal, 5, false),
                    new TTypedColumnInfo(51, "DiscountReceivedPct", "a_discount_received_pct_n", "Default discount received %", OdbcType.Decimal, 5, false),
                    new TTypedColumnInfo(52, "PoAccrualGlAccountCode", "a_po_accrual_gl_account_code_c", "PO G/L Accrual Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(53, "ProvisionalYearEndFlag", "a_provisional_year_end_flag_l", "Provisional Year End Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(54, "PurchaseGlAccountCode", "a_purchase_gl_account_code_c", "Purchase G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(55, "RetEarningsGlAccount", "a_ret_earnings_gl_account_c", "Retained Earnings G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(56, "SalesGlAccountCode", "a_sales_gl_account_code_c", "Sales G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(57, "SoAccrualGlAccountCode", "a_so_accrual_gl_account_code_c", "SO G/L Accrual Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(58, "StockAccrualGlAccount", "a_stock_accrual_gl_account_c", "Stock Accrual G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(59, "StockAdjGlAccountCode", "a_stock_adj_gl_account_code_c", "Stock Adj. G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(60, "StockGlAccountCode", "a_stock_gl_account_code_c", "Stock G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(61, "TaxExclIncl", "a_tax_excl_incl_l", "Tax Exclusive/Inclusive", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(62, "TaxExclInclIndicator", "a_tax_excl_incl_indicator_l", "Tax Excl/Incl Indicator", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(63, "TaxInputGlAccountCode", "a_tax_input_gl_account_code_c", "Tax Input G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(64, "TaxInputGlCcCode", "a_tax_input_gl_cc_code_c", "Tax Input G/L Cost Centre Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(65, "TaxOutputGlAccountCode", "a_tax_output_gl_account_code_c", "Tax Output G/L Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(66, "TermsOfPaymentCode", "a_terms_of_payment_code_c", "Terms of Payment Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(67, "LastPoRecNumber", "a_last_po_rec_number_i", "Last PO Received Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(68, "TaxGlAccountNumber", "a_tax_gl_account_number_i", "Tax G/L Account Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(69, "ActualsDataRetention", "a_actuals_data_retention_i", "Actuals Data Retention Period", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(70, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(71, "CalendarMode", "a_calendar_mode_l", "Calendar Mode", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(72, "YearEndProcessStatus", "a_year_end_process_status_i", "a_year_end_process_status_i", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(73, "LastHeaderPNumber", "a_last_header_p_number_i", "Last Cashbook Payment Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(74, "IltProcessingCentre", "a_ilt_processing_centre_l", "ILT Processing Centre", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(75, "LastGiftBatchNumber", "a_last_gift_batch_number_i", "Last Gift Batch", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(76, "IntlCurrency", "a_intl_currency_c", "International Currency", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(77, "LastRecGiftBatchNumber", "a_last_rec_gift_batch_number_i", "Last Recurring Gift Batch", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(78, "GiftDataRetention", "a_gift_data_retention_i", "Gift Data Retention Period", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(79, "RecalculateAllPeriods", "a_recalculate_all_periods_l", "a_recalculate_all_periods_l", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(80, "LastIchNumber", "a_last_ich_number_i", "ICH Process Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(81, "BranchProcessing", "a_branch_processing_l", "Branch Processing", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(82, "ConsolidationLedger", "a_consolidation_ledger_l", "a_consolidation_ledger_l", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(83, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(84, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(85, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(86, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(87, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public ALedgerTable() :
                base("ALedger")
        {
        }

        /// constructor
        public ALedgerTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ALedgerTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files .It is created from the first 4 digits of a partner key of type ""ledger"".
        public DataColumn ColumnLedgerNumber;
        /// This is the ledger name
        public DataColumn ColumnLedgerName;
        /// Defines if the ledger is in use
        public DataColumn ColumnLedgerStatus;
        /// This is the last batch number used within a ledger
        public DataColumn ColumnLastBatchNumber;
        ///
        public DataColumn ColumnLastRecurringBatchNumber;
        ///
        public DataColumn ColumnLastGiftNumber;
        ///
        public DataColumn ColumnLastApInvNumber;
        ///
        public DataColumn ColumnLastHeaderRNumber;
        ///
        public DataColumn ColumnLastPoNumber;
        ///
        public DataColumn ColumnLastSoNumber;
        /// This is a number of currency units
        public DataColumn ColumnMaxGiftAidAmount;
        /// This is a number of currency units
        public DataColumn ColumnMinGiftAidAmount;
        ///
        public DataColumn ColumnNumberOfGiftsToDisplay;
        ///
        public DataColumn ColumnTaxTypeCode;
        /// The account for inter-ledger transfers.
        public DataColumn ColumnIltGlAccountCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnProfitLossGlAccountCode;
        /// deprecated; not used at the moment; please use a_current_period_i
        public DataColumn ColumnCurrentAccountingPeriod;
        /// This defines which accounting period is being used
        public DataColumn ColumnNumberOfAccountingPeriods;
        /// This identifies a country. It uses the ISO 3166-1-alpha-2 code elements.
        public DataColumn ColumnCountryCode;
        /// This defines which currency is being used
        public DataColumn ColumnBaseCurrency;
        /// Used to get a yes no response from the user
        public DataColumn ColumnTransactionAccountFlag;
        /// Used to get a yes no response from the user
        public DataColumn ColumnYearEndFlag;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnForexGainsLossesAccount;
        /// Used to get a yes no response from the user
        public DataColumn ColumnSystemInterfaceFlag;
        /// Used to get a yes no response from the user
        public DataColumn ColumnSuspenseAccountFlag;
        /// Used to get a yes no response from the user
        public DataColumn ColumnBankAccountsFlag;
        /// Used to get a yes no response from the user
        public DataColumn ColumnDeleteLedgerFlag;
        /// Used to get a yes no response from the user
        public DataColumn ColumnNewFinancialYearFlag;
        /// Used to get a yes no response from the user
        public DataColumn ColumnRecalculateGlMasterFlag;
        /// Defines which installation is running on this database
        public DataColumn ColumnInstallationId;
        ///
        public DataColumn ColumnBudgetControlFlag;
        ///
        public DataColumn ColumnBudgetDataRetention;
        ///
        public DataColumn ColumnCostOfSalesGlAccount;
        ///
        public DataColumn ColumnCreditorGlAccountCode;
        ///
        public DataColumn ColumnCurrentFinancialYear;
        ///
        public DataColumn ColumnCurrentPeriod;
        ///
        public DataColumn ColumnDateCrDrBalances;
        ///
        public DataColumn ColumnDebtorGlAccountCode;
        ///
        public DataColumn ColumnFaDepreciationGlAccount;
        ///
        public DataColumn ColumnFaGlAccountCode;
        ///
        public DataColumn ColumnFaPlOnSaleGlAccount;
        ///
        public DataColumn ColumnFaProvForDepnGlAccount;
        ///
        public DataColumn ColumnIltAccountFlag;
        ///
        public DataColumn ColumnLastApDnNumber;
        ///
        public DataColumn ColumnLastPoRetNumber;
        ///
        public DataColumn ColumnLastSoDelNumber;
        ///
        public DataColumn ColumnLastSoRetNumber;
        ///
        public DataColumn ColumnLastSpecialGiftNumber;
        ///
        public DataColumn ColumnNumberFwdPostingPeriods;
        /// deprecated; not used at the moment; please use a_number_of_accounting_periods_i
        public DataColumn ColumnPeriodsPerFinancialYear;
        ///
        public DataColumn ColumnDiscountAllowedPct;
        ///
        public DataColumn ColumnDiscountReceivedPct;
        ///
        public DataColumn ColumnPoAccrualGlAccountCode;
        ///
        public DataColumn ColumnProvisionalYearEndFlag;
        ///
        public DataColumn ColumnPurchaseGlAccountCode;
        ///
        public DataColumn ColumnRetEarningsGlAccount;
        ///
        public DataColumn ColumnSalesGlAccountCode;
        ///
        public DataColumn ColumnSoAccrualGlAccountCode;
        ///
        public DataColumn ColumnStockAccrualGlAccount;
        ///
        public DataColumn ColumnStockAdjGlAccountCode;
        ///
        public DataColumn ColumnStockGlAccountCode;
        ///
        public DataColumn ColumnTaxExclIncl;
        ///
        public DataColumn ColumnTaxExclInclIndicator;
        ///
        public DataColumn ColumnTaxInputGlAccountCode;
        ///
        public DataColumn ColumnTaxInputGlCcCode;
        ///
        public DataColumn ColumnTaxOutputGlAccountCode;
        ///
        public DataColumn ColumnTermsOfPaymentCode;
        ///
        public DataColumn ColumnLastPoRecNumber;
        ///
        public DataColumn ColumnTaxGlAccountNumber;
        ///
        public DataColumn ColumnActualsDataRetention;
        /// Partner key which links the ledger to the partner type record where the type is a ledger.
        public DataColumn ColumnPartnerKey;
        ///
        public DataColumn ColumnCalendarMode;
        /// How far along is the year end process.
        public DataColumn ColumnYearEndProcessStatus;
        /// last used cashbook payment header number
        public DataColumn ColumnLastHeaderPNumber;
        /// Is this ledger an ILT processing centre (ie, clearinghouse status)
        public DataColumn ColumnIltProcessingCentre;
        /// The number of the last gift batch to be created.
        public DataColumn ColumnLastGiftBatchNumber;
        /// This defines which currency to use as a second ('international') base currency.
        public DataColumn ColumnIntlCurrency;
        /// The number of the last gift batch to be created.
        public DataColumn ColumnLastRecGiftBatchNumber;
        /// How many years to retain gift data.
        public DataColumn ColumnGiftDataRetention;
        /// When recalculating the account report structure this indicates that all periods should be recalculated.
        public DataColumn ColumnRecalculateAllPeriods;
        /// identifes the Last used ICH process number
        public DataColumn ColumnLastIchNumber;
        /// THis defines whether or not the ledger ha made up of separate branches/departments that are self contained (should balance).
        public DataColumn ColumnBranchProcessing;
        /// Indicates whether the ledger is just for storing consolidated accounts (rather than a 'real' ledger).
        public DataColumn ColumnConsolidationLedger;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_last_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_recurring_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_gift_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_ap_inv_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_header_r_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_po_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_so_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_max_gift_aid_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_min_gift_aid_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_number_of_gifts_to_display_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_profit_loss_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_current_accounting_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_number_of_accounting_periods_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_country_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_base_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_year_end_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_forex_gains_losses_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_interface_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_suspense_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_bank_accounts_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_delete_ledger_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_new_financial_year_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_recalculate_gl_master_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_installation_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_control_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_of_sales_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_creditor_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_current_financial_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_current_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_cr_dr_balances_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_debtor_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fa_depreciation_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fa_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fa_pl_on_sale_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fa_prov_for_depn_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_last_ap_dn_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_po_ret_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_so_del_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_so_ret_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_special_gift_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_number_fwd_posting_periods_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_periods_per_financial_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_discount_allowed_pct_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_discount_received_pct_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_po_accrual_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_provisional_year_end_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_purchase_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ret_earnings_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_sales_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_so_accrual_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stock_accrual_gl_account_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stock_adj_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stock_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_excl_incl_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_excl_incl_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_input_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_input_gl_cc_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_output_gl_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_terms_of_payment_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_po_rec_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_gl_account_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_actuals_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_calendar_mode_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_year_end_process_status_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_header_p_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_processing_centre_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_last_gift_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_intl_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_rec_gift_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_recalculate_all_periods_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_last_ich_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_branch_processing_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_consolidation_ledger_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnLedgerName = this.Columns["a_ledger_name_c"];
            this.ColumnLedgerStatus = this.Columns["a_ledger_status_l"];
            this.ColumnLastBatchNumber = this.Columns["a_last_batch_number_i"];
            this.ColumnLastRecurringBatchNumber = this.Columns["a_last_recurring_batch_number_i"];
            this.ColumnLastGiftNumber = this.Columns["a_last_gift_number_i"];
            this.ColumnLastApInvNumber = this.Columns["a_last_ap_inv_number_i"];
            this.ColumnLastHeaderRNumber = this.Columns["a_last_header_r_number_i"];
            this.ColumnLastPoNumber = this.Columns["a_last_po_number_i"];
            this.ColumnLastSoNumber = this.Columns["a_last_so_number_i"];
            this.ColumnMaxGiftAidAmount = this.Columns["a_max_gift_aid_amount_n"];
            this.ColumnMinGiftAidAmount = this.Columns["a_min_gift_aid_amount_n"];
            this.ColumnNumberOfGiftsToDisplay = this.Columns["a_number_of_gifts_to_display_i"];
            this.ColumnTaxTypeCode = this.Columns["a_tax_type_code_c"];
            this.ColumnIltGlAccountCode = this.Columns["a_ilt_gl_account_code_c"];
            this.ColumnProfitLossGlAccountCode = this.Columns["a_profit_loss_gl_account_code_c"];
            this.ColumnCurrentAccountingPeriod = this.Columns["a_current_accounting_period_i"];
            this.ColumnNumberOfAccountingPeriods = this.Columns["a_number_of_accounting_periods_i"];
            this.ColumnCountryCode = this.Columns["a_country_code_c"];
            this.ColumnBaseCurrency = this.Columns["a_base_currency_c"];
            this.ColumnTransactionAccountFlag = this.Columns["a_transaction_account_flag_l"];
            this.ColumnYearEndFlag = this.Columns["a_year_end_flag_l"];
            this.ColumnForexGainsLossesAccount = this.Columns["a_forex_gains_losses_account_c"];
            this.ColumnSystemInterfaceFlag = this.Columns["a_system_interface_flag_l"];
            this.ColumnSuspenseAccountFlag = this.Columns["a_suspense_account_flag_l"];
            this.ColumnBankAccountsFlag = this.Columns["a_bank_accounts_flag_l"];
            this.ColumnDeleteLedgerFlag = this.Columns["a_delete_ledger_flag_l"];
            this.ColumnNewFinancialYearFlag = this.Columns["a_new_financial_year_flag_l"];
            this.ColumnRecalculateGlMasterFlag = this.Columns["a_recalculate_gl_master_flag_l"];
            this.ColumnInstallationId = this.Columns["a_installation_id_c"];
            this.ColumnBudgetControlFlag = this.Columns["a_budget_control_flag_l"];
            this.ColumnBudgetDataRetention = this.Columns["a_budget_data_retention_i"];
            this.ColumnCostOfSalesGlAccount = this.Columns["a_cost_of_sales_gl_account_c"];
            this.ColumnCreditorGlAccountCode = this.Columns["a_creditor_gl_account_code_c"];
            this.ColumnCurrentFinancialYear = this.Columns["a_current_financial_year_i"];
            this.ColumnCurrentPeriod = this.Columns["a_current_period_i"];
            this.ColumnDateCrDrBalances = this.Columns["a_date_cr_dr_balances_d"];
            this.ColumnDebtorGlAccountCode = this.Columns["a_debtor_gl_account_code_c"];
            this.ColumnFaDepreciationGlAccount = this.Columns["a_fa_depreciation_gl_account_c"];
            this.ColumnFaGlAccountCode = this.Columns["a_fa_gl_account_code_c"];
            this.ColumnFaPlOnSaleGlAccount = this.Columns["a_fa_pl_on_sale_gl_account_c"];
            this.ColumnFaProvForDepnGlAccount = this.Columns["a_fa_prov_for_depn_gl_account_c"];
            this.ColumnIltAccountFlag = this.Columns["a_ilt_account_flag_l"];
            this.ColumnLastApDnNumber = this.Columns["a_last_ap_dn_number_i"];
            this.ColumnLastPoRetNumber = this.Columns["a_last_po_ret_number_i"];
            this.ColumnLastSoDelNumber = this.Columns["a_last_so_del_number_i"];
            this.ColumnLastSoRetNumber = this.Columns["a_last_so_ret_number_i"];
            this.ColumnLastSpecialGiftNumber = this.Columns["a_last_special_gift_number_i"];
            this.ColumnNumberFwdPostingPeriods = this.Columns["a_number_fwd_posting_periods_i"];
            this.ColumnPeriodsPerFinancialYear = this.Columns["a_periods_per_financial_year_i"];
            this.ColumnDiscountAllowedPct = this.Columns["a_discount_allowed_pct_n"];
            this.ColumnDiscountReceivedPct = this.Columns["a_discount_received_pct_n"];
            this.ColumnPoAccrualGlAccountCode = this.Columns["a_po_accrual_gl_account_code_c"];
            this.ColumnProvisionalYearEndFlag = this.Columns["a_provisional_year_end_flag_l"];
            this.ColumnPurchaseGlAccountCode = this.Columns["a_purchase_gl_account_code_c"];
            this.ColumnRetEarningsGlAccount = this.Columns["a_ret_earnings_gl_account_c"];
            this.ColumnSalesGlAccountCode = this.Columns["a_sales_gl_account_code_c"];
            this.ColumnSoAccrualGlAccountCode = this.Columns["a_so_accrual_gl_account_code_c"];
            this.ColumnStockAccrualGlAccount = this.Columns["a_stock_accrual_gl_account_c"];
            this.ColumnStockAdjGlAccountCode = this.Columns["a_stock_adj_gl_account_code_c"];
            this.ColumnStockGlAccountCode = this.Columns["a_stock_gl_account_code_c"];
            this.ColumnTaxExclIncl = this.Columns["a_tax_excl_incl_l"];
            this.ColumnTaxExclInclIndicator = this.Columns["a_tax_excl_incl_indicator_l"];
            this.ColumnTaxInputGlAccountCode = this.Columns["a_tax_input_gl_account_code_c"];
            this.ColumnTaxInputGlCcCode = this.Columns["a_tax_input_gl_cc_code_c"];
            this.ColumnTaxOutputGlAccountCode = this.Columns["a_tax_output_gl_account_code_c"];
            this.ColumnTermsOfPaymentCode = this.Columns["a_terms_of_payment_code_c"];
            this.ColumnLastPoRecNumber = this.Columns["a_last_po_rec_number_i"];
            this.ColumnTaxGlAccountNumber = this.Columns["a_tax_gl_account_number_i"];
            this.ColumnActualsDataRetention = this.Columns["a_actuals_data_retention_i"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnCalendarMode = this.Columns["a_calendar_mode_l"];
            this.ColumnYearEndProcessStatus = this.Columns["a_year_end_process_status_i"];
            this.ColumnLastHeaderPNumber = this.Columns["a_last_header_p_number_i"];
            this.ColumnIltProcessingCentre = this.Columns["a_ilt_processing_centre_l"];
            this.ColumnLastGiftBatchNumber = this.Columns["a_last_gift_batch_number_i"];
            this.ColumnIntlCurrency = this.Columns["a_intl_currency_c"];
            this.ColumnLastRecGiftBatchNumber = this.Columns["a_last_rec_gift_batch_number_i"];
            this.ColumnGiftDataRetention = this.Columns["a_gift_data_retention_i"];
            this.ColumnRecalculateAllPeriods = this.Columns["a_recalculate_all_periods_l"];
            this.ColumnLastIchNumber = this.Columns["a_last_ich_number_i"];
            this.ColumnBranchProcessing = this.Columns["a_branch_processing_l"];
            this.ColumnConsolidationLedger = this.Columns["a_consolidation_ledger_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnLedgerNumber};
        }

        /// Access a typed row by index
        public ALedgerRow this[int i]
        {
            get
            {
                return ((ALedgerRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ALedgerRow NewRowTyped(bool AWithDefaultValues)
        {
            ALedgerRow ret = ((ALedgerRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ALedgerRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ALedgerRow(builder);
        }

        /// get typed set of changes
        public ALedgerTable GetChangesTyped()
        {
            return ((ALedgerTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ALedger";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_ledger";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNameDBName()
        {
            return "a_ledger_name_c";
        }

        /// get character length for column
        public static short GetLedgerNameLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerStatusDBName()
        {
            return "a_ledger_status_l";
        }

        /// get character length for column
        public static short GetLedgerStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastBatchNumberDBName()
        {
            return "a_last_batch_number_i";
        }

        /// get character length for column
        public static short GetLastBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastRecurringBatchNumberDBName()
        {
            return "a_last_recurring_batch_number_i";
        }

        /// get character length for column
        public static short GetLastRecurringBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastGiftNumberDBName()
        {
            return "a_last_gift_number_i";
        }

        /// get character length for column
        public static short GetLastGiftNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastApInvNumberDBName()
        {
            return "a_last_ap_inv_number_i";
        }

        /// get character length for column
        public static short GetLastApInvNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastHeaderRNumberDBName()
        {
            return "a_last_header_r_number_i";
        }

        /// get character length for column
        public static short GetLastHeaderRNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastPoNumberDBName()
        {
            return "a_last_po_number_i";
        }

        /// get character length for column
        public static short GetLastPoNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastSoNumberDBName()
        {
            return "a_last_so_number_i";
        }

        /// get character length for column
        public static short GetLastSoNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetMaxGiftAidAmountDBName()
        {
            return "a_max_gift_aid_amount_n";
        }

        /// get character length for column
        public static short GetMaxGiftAidAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetMinGiftAidAmountDBName()
        {
            return "a_min_gift_aid_amount_n";
        }

        /// get character length for column
        public static short GetMinGiftAidAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetNumberOfGiftsToDisplayDBName()
        {
            return "a_number_of_gifts_to_display_i";
        }

        /// get character length for column
        public static short GetNumberOfGiftsToDisplayLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxTypeCodeDBName()
        {
            return "a_tax_type_code_c";
        }

        /// get character length for column
        public static short GetTaxTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetIltGlAccountCodeDBName()
        {
            return "a_ilt_gl_account_code_c";
        }

        /// get character length for column
        public static short GetIltGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetProfitLossGlAccountCodeDBName()
        {
            return "a_profit_loss_gl_account_code_c";
        }

        /// get character length for column
        public static short GetProfitLossGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCurrentAccountingPeriodDBName()
        {
            return "a_current_accounting_period_i";
        }

        /// get character length for column
        public static short GetCurrentAccountingPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNumberOfAccountingPeriodsDBName()
        {
            return "a_number_of_accounting_periods_i";
        }

        /// get character length for column
        public static short GetNumberOfAccountingPeriodsLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCountryCodeDBName()
        {
            return "a_country_code_c";
        }

        /// get character length for column
        public static short GetCountryCodeLength()
        {
            return 8;
        }

        /// get the name of the field in the database for this column
        public static string GetBaseCurrencyDBName()
        {
            return "a_base_currency_c";
        }

        /// get character length for column
        public static short GetBaseCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionAccountFlagDBName()
        {
            return "a_transaction_account_flag_l";
        }

        /// get character length for column
        public static short GetTransactionAccountFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearEndFlagDBName()
        {
            return "a_year_end_flag_l";
        }

        /// get character length for column
        public static short GetYearEndFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetForexGainsLossesAccountDBName()
        {
            return "a_forex_gains_losses_account_c";
        }

        /// get character length for column
        public static short GetForexGainsLossesAccountLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetSystemInterfaceFlagDBName()
        {
            return "a_system_interface_flag_l";
        }

        /// get character length for column
        public static short GetSystemInterfaceFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSuspenseAccountFlagDBName()
        {
            return "a_suspense_account_flag_l";
        }

        /// get character length for column
        public static short GetSuspenseAccountFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBankAccountsFlagDBName()
        {
            return "a_bank_accounts_flag_l";
        }

        /// get character length for column
        public static short GetBankAccountsFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeleteLedgerFlagDBName()
        {
            return "a_delete_ledger_flag_l";
        }

        /// get character length for column
        public static short GetDeleteLedgerFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNewFinancialYearFlagDBName()
        {
            return "a_new_financial_year_flag_l";
        }

        /// get character length for column
        public static short GetNewFinancialYearFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRecalculateGlMasterFlagDBName()
        {
            return "a_recalculate_gl_master_flag_l";
        }

        /// get character length for column
        public static short GetRecalculateGlMasterFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetInstallationIdDBName()
        {
            return "a_installation_id_c";
        }

        /// get character length for column
        public static short GetInstallationIdLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetControlFlagDBName()
        {
            return "a_budget_control_flag_l";
        }

        /// get character length for column
        public static short GetBudgetControlFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetDataRetentionDBName()
        {
            return "a_budget_data_retention_i";
        }

        /// get character length for column
        public static short GetBudgetDataRetentionLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCostOfSalesGlAccountDBName()
        {
            return "a_cost_of_sales_gl_account_c";
        }

        /// get character length for column
        public static short GetCostOfSalesGlAccountLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCreditorGlAccountCodeDBName()
        {
            return "a_creditor_gl_account_code_c";
        }

        /// get character length for column
        public static short GetCreditorGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCurrentFinancialYearDBName()
        {
            return "a_current_financial_year_i";
        }

        /// get character length for column
        public static short GetCurrentFinancialYearLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCurrentPeriodDBName()
        {
            return "a_current_period_i";
        }

        /// get character length for column
        public static short GetCurrentPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCrDrBalancesDBName()
        {
            return "a_date_cr_dr_balances_d";
        }

        /// get character length for column
        public static short GetDateCrDrBalancesLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDebtorGlAccountCodeDBName()
        {
            return "a_debtor_gl_account_code_c";
        }

        /// get character length for column
        public static short GetDebtorGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetFaDepreciationGlAccountDBName()
        {
            return "a_fa_depreciation_gl_account_c";
        }

        /// get character length for column
        public static short GetFaDepreciationGlAccountLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetFaGlAccountCodeDBName()
        {
            return "a_fa_gl_account_code_c";
        }

        /// get character length for column
        public static short GetFaGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetFaPlOnSaleGlAccountDBName()
        {
            return "a_fa_pl_on_sale_gl_account_c";
        }

        /// get character length for column
        public static short GetFaPlOnSaleGlAccountLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetFaProvForDepnGlAccountDBName()
        {
            return "a_fa_prov_for_depn_gl_account_c";
        }

        /// get character length for column
        public static short GetFaProvForDepnGlAccountLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetIltAccountFlagDBName()
        {
            return "a_ilt_account_flag_l";
        }

        /// get character length for column
        public static short GetIltAccountFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastApDnNumberDBName()
        {
            return "a_last_ap_dn_number_i";
        }

        /// get character length for column
        public static short GetLastApDnNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastPoRetNumberDBName()
        {
            return "a_last_po_ret_number_i";
        }

        /// get character length for column
        public static short GetLastPoRetNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastSoDelNumberDBName()
        {
            return "a_last_so_del_number_i";
        }

        /// get character length for column
        public static short GetLastSoDelNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastSoRetNumberDBName()
        {
            return "a_last_so_ret_number_i";
        }

        /// get character length for column
        public static short GetLastSoRetNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastSpecialGiftNumberDBName()
        {
            return "a_last_special_gift_number_i";
        }

        /// get character length for column
        public static short GetLastSpecialGiftNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNumberFwdPostingPeriodsDBName()
        {
            return "a_number_fwd_posting_periods_i";
        }

        /// get character length for column
        public static short GetNumberFwdPostingPeriodsLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPeriodsPerFinancialYearDBName()
        {
            return "a_periods_per_financial_year_i";
        }

        /// get character length for column
        public static short GetPeriodsPerFinancialYearLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDiscountAllowedPctDBName()
        {
            return "a_discount_allowed_pct_n";
        }

        /// get character length for column
        public static short GetDiscountAllowedPctLength()
        {
            return 5;
        }

        /// get the name of the field in the database for this column
        public static string GetDiscountReceivedPctDBName()
        {
            return "a_discount_received_pct_n";
        }

        /// get character length for column
        public static short GetDiscountReceivedPctLength()
        {
            return 5;
        }

        /// get the name of the field in the database for this column
        public static string GetPoAccrualGlAccountCodeDBName()
        {
            return "a_po_accrual_gl_account_code_c";
        }

        /// get character length for column
        public static short GetPoAccrualGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetProvisionalYearEndFlagDBName()
        {
            return "a_provisional_year_end_flag_l";
        }

        /// get character length for column
        public static short GetProvisionalYearEndFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPurchaseGlAccountCodeDBName()
        {
            return "a_purchase_gl_account_code_c";
        }

        /// get character length for column
        public static short GetPurchaseGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetRetEarningsGlAccountDBName()
        {
            return "a_ret_earnings_gl_account_c";
        }

        /// get character length for column
        public static short GetRetEarningsGlAccountLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetSalesGlAccountCodeDBName()
        {
            return "a_sales_gl_account_code_c";
        }

        /// get character length for column
        public static short GetSalesGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetSoAccrualGlAccountCodeDBName()
        {
            return "a_so_accrual_gl_account_code_c";
        }

        /// get character length for column
        public static short GetSoAccrualGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetStockAccrualGlAccountDBName()
        {
            return "a_stock_accrual_gl_account_c";
        }

        /// get character length for column
        public static short GetStockAccrualGlAccountLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetStockAdjGlAccountCodeDBName()
        {
            return "a_stock_adj_gl_account_code_c";
        }

        /// get character length for column
        public static short GetStockAdjGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetStockGlAccountCodeDBName()
        {
            return "a_stock_gl_account_code_c";
        }

        /// get character length for column
        public static short GetStockGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxExclInclDBName()
        {
            return "a_tax_excl_incl_l";
        }

        /// get character length for column
        public static short GetTaxExclInclLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxExclInclIndicatorDBName()
        {
            return "a_tax_excl_incl_indicator_l";
        }

        /// get character length for column
        public static short GetTaxExclInclIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxInputGlAccountCodeDBName()
        {
            return "a_tax_input_gl_account_code_c";
        }

        /// get character length for column
        public static short GetTaxInputGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxInputGlCcCodeDBName()
        {
            return "a_tax_input_gl_cc_code_c";
        }

        /// get character length for column
        public static short GetTaxInputGlCcCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxOutputGlAccountCodeDBName()
        {
            return "a_tax_output_gl_account_code_c";
        }

        /// get character length for column
        public static short GetTaxOutputGlAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetTermsOfPaymentCodeDBName()
        {
            return "a_terms_of_payment_code_c";
        }

        /// get character length for column
        public static short GetTermsOfPaymentCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetLastPoRecNumberDBName()
        {
            return "a_last_po_rec_number_i";
        }

        /// get character length for column
        public static short GetLastPoRecNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxGlAccountNumberDBName()
        {
            return "a_tax_gl_account_number_i";
        }

        /// get character length for column
        public static short GetTaxGlAccountNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetActualsDataRetentionDBName()
        {
            return "a_actuals_data_retention_i";
        }

        /// get character length for column
        public static short GetActualsDataRetentionLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetCalendarModeDBName()
        {
            return "a_calendar_mode_l";
        }

        /// get character length for column
        public static short GetCalendarModeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearEndProcessStatusDBName()
        {
            return "a_year_end_process_status_i";
        }

        /// get character length for column
        public static short GetYearEndProcessStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastHeaderPNumberDBName()
        {
            return "a_last_header_p_number_i";
        }

        /// get character length for column
        public static short GetLastHeaderPNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIltProcessingCentreDBName()
        {
            return "a_ilt_processing_centre_l";
        }

        /// get character length for column
        public static short GetIltProcessingCentreLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastGiftBatchNumberDBName()
        {
            return "a_last_gift_batch_number_i";
        }

        /// get character length for column
        public static short GetLastGiftBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIntlCurrencyDBName()
        {
            return "a_intl_currency_c";
        }

        /// get character length for column
        public static short GetIntlCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetLastRecGiftBatchNumberDBName()
        {
            return "a_last_rec_gift_batch_number_i";
        }

        /// get character length for column
        public static short GetLastRecGiftBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetGiftDataRetentionDBName()
        {
            return "a_gift_data_retention_i";
        }

        /// get character length for column
        public static short GetGiftDataRetentionLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRecalculateAllPeriodsDBName()
        {
            return "a_recalculate_all_periods_l";
        }

        /// get character length for column
        public static short GetRecalculateAllPeriodsLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastIchNumberDBName()
        {
            return "a_last_ich_number_i";
        }

        /// get character length for column
        public static short GetLastIchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBranchProcessingDBName()
        {
            return "a_branch_processing_l";
        }

        /// get character length for column
        public static short GetBranchProcessingLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetConsolidationLedgerDBName()
        {
            return "a_consolidation_ledger_l";
        }

        /// get character length for column
        public static short GetConsolidationLedgerLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Basic information for each general ledger on the system. Also counters for ledger-specific variables (such as last receipt number).
    [Serializable()]
    public class ALedgerRow : System.Data.DataRow
    {
        private ALedgerTable myTable;

        /// Constructor
        public ALedgerRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ALedgerTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files .It is created from the first 4 digits of a partner key of type ""ledger"".
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// This is the ledger name
        public String LedgerName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerName)
                            || (((String)(this[this.myTable.ColumnLedgerName])) != value)))
                {
                    this[this.myTable.ColumnLedgerName] = value;
                }
            }
        }

        /// Defines if the ledger is in use
        public Boolean LedgerStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerStatus)
                            || (((Boolean)(this[this.myTable.ColumnLedgerStatus])) != value)))
                {
                    this[this.myTable.ColumnLedgerStatus] = value;
                }
            }
        }

        /// This is the last batch number used within a ledger
        public Int32 LastBatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnLastBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastBatchNumber] = value;
                }
            }
        }

        ///
        public Int32 LastRecurringBatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastRecurringBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastRecurringBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnLastRecurringBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastRecurringBatchNumber] = value;
                }
            }
        }

        ///
        public Int32 LastGiftNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastGiftNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastGiftNumber)
                            || (((Int32)(this[this.myTable.ColumnLastGiftNumber])) != value)))
                {
                    this[this.myTable.ColumnLastGiftNumber] = value;
                }
            }
        }

        ///
        public Int32 LastApInvNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastApInvNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastApInvNumber)
                            || (((Int32)(this[this.myTable.ColumnLastApInvNumber])) != value)))
                {
                    this[this.myTable.ColumnLastApInvNumber] = value;
                }
            }
        }

        ///
        public Int32 LastHeaderRNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastHeaderRNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastHeaderRNumber)
                            || (((Int32)(this[this.myTable.ColumnLastHeaderRNumber])) != value)))
                {
                    this[this.myTable.ColumnLastHeaderRNumber] = value;
                }
            }
        }

        ///
        public Int32 LastPoNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastPoNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastPoNumber)
                            || (((Int32)(this[this.myTable.ColumnLastPoNumber])) != value)))
                {
                    this[this.myTable.ColumnLastPoNumber] = value;
                }
            }
        }

        ///
        public Int32 LastSoNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastSoNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastSoNumber)
                            || (((Int32)(this[this.myTable.ColumnLastSoNumber])) != value)))
                {
                    this[this.myTable.ColumnLastSoNumber] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal MaxGiftAidAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMaxGiftAidAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMaxGiftAidAmount)
                            || (((Decimal)(this[this.myTable.ColumnMaxGiftAidAmount])) != value)))
                {
                    this[this.myTable.ColumnMaxGiftAidAmount] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal MinGiftAidAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMinGiftAidAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMinGiftAidAmount)
                            || (((Decimal)(this[this.myTable.ColumnMinGiftAidAmount])) != value)))
                {
                    this[this.myTable.ColumnMinGiftAidAmount] = value;
                }
            }
        }

        ///
        public Int32 NumberOfGiftsToDisplay
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfGiftsToDisplay.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfGiftsToDisplay)
                            || (((Int32)(this[this.myTable.ColumnNumberOfGiftsToDisplay])) != value)))
                {
                    this[this.myTable.ColumnNumberOfGiftsToDisplay] = value;
                }
            }
        }

        ///
        public String TaxTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxTypeCode)
                            || (((String)(this[this.myTable.ColumnTaxTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTaxTypeCode] = value;
                }
            }
        }

        /// The account for inter-ledger transfers.
        public String IltGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltGlAccountCode)
                            || (((String)(this[this.myTable.ColumnIltGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnIltGlAccountCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String ProfitLossGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProfitLossGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProfitLossGlAccountCode)
                            || (((String)(this[this.myTable.ColumnProfitLossGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnProfitLossGlAccountCode] = value;
                }
            }
        }

        /// deprecated; not used at the moment; please use a_current_period_i
        public Int32 CurrentAccountingPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrentAccountingPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrentAccountingPeriod)
                            || (((Int32)(this[this.myTable.ColumnCurrentAccountingPeriod])) != value)))
                {
                    this[this.myTable.ColumnCurrentAccountingPeriod] = value;
                }
            }
        }

        /// This defines which accounting period is being used
        public Int32 NumberOfAccountingPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfAccountingPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfAccountingPeriods)
                            || (((Int32)(this[this.myTable.ColumnNumberOfAccountingPeriods])) != value)))
                {
                    this[this.myTable.ColumnNumberOfAccountingPeriods] = value;
                }
            }
        }

        /// This identifies a country. It uses the ISO 3166-1-alpha-2 code elements.
        public String CountryCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCountryCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCountryCode)
                            || (((String)(this[this.myTable.ColumnCountryCode])) != value)))
                {
                    this[this.myTable.ColumnCountryCode] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String BaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBaseCurrency)
                            || (((String)(this[this.myTable.ColumnBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnBaseCurrency] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean TransactionAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAccountFlag)
                            || (((Boolean)(this[this.myTable.ColumnTransactionAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnTransactionAccountFlag] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean YearEndFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearEndFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearEndFlag)
                            || (((Boolean)(this[this.myTable.ColumnYearEndFlag])) != value)))
                {
                    this[this.myTable.ColumnYearEndFlag] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String ForexGainsLossesAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnForexGainsLossesAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnForexGainsLossesAccount)
                            || (((String)(this[this.myTable.ColumnForexGainsLossesAccount])) != value)))
                {
                    this[this.myTable.ColumnForexGainsLossesAccount] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean SystemInterfaceFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemInterfaceFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemInterfaceFlag)
                            || (((Boolean)(this[this.myTable.ColumnSystemInterfaceFlag])) != value)))
                {
                    this[this.myTable.ColumnSystemInterfaceFlag] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean SuspenseAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSuspenseAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSuspenseAccountFlag)
                            || (((Boolean)(this[this.myTable.ColumnSuspenseAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnSuspenseAccountFlag] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean BankAccountsFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankAccountsFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankAccountsFlag)
                            || (((Boolean)(this[this.myTable.ColumnBankAccountsFlag])) != value)))
                {
                    this[this.myTable.ColumnBankAccountsFlag] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean DeleteLedgerFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeleteLedgerFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeleteLedgerFlag)
                            || (((Boolean)(this[this.myTable.ColumnDeleteLedgerFlag])) != value)))
                {
                    this[this.myTable.ColumnDeleteLedgerFlag] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean NewFinancialYearFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNewFinancialYearFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNewFinancialYearFlag)
                            || (((Boolean)(this[this.myTable.ColumnNewFinancialYearFlag])) != value)))
                {
                    this[this.myTable.ColumnNewFinancialYearFlag] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean RecalculateGlMasterFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecalculateGlMasterFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecalculateGlMasterFlag)
                            || (((Boolean)(this[this.myTable.ColumnRecalculateGlMasterFlag])) != value)))
                {
                    this[this.myTable.ColumnRecalculateGlMasterFlag] = value;
                }
            }
        }

        /// Defines which installation is running on this database
        public String InstallationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInstallationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInstallationId)
                            || (((String)(this[this.myTable.ColumnInstallationId])) != value)))
                {
                    this[this.myTable.ColumnInstallationId] = value;
                }
            }
        }

        ///
        public Boolean BudgetControlFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetControlFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetControlFlag)
                            || (((Boolean)(this[this.myTable.ColumnBudgetControlFlag])) != value)))
                {
                    this[this.myTable.ColumnBudgetControlFlag] = value;
                }
            }
        }

        ///
        public Int32 BudgetDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetDataRetention)
                            || (((Int32)(this[this.myTable.ColumnBudgetDataRetention])) != value)))
                {
                    this[this.myTable.ColumnBudgetDataRetention] = value;
                }
            }
        }

        ///
        public String CostOfSalesGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostOfSalesGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostOfSalesGlAccount)
                            || (((String)(this[this.myTable.ColumnCostOfSalesGlAccount])) != value)))
                {
                    this[this.myTable.ColumnCostOfSalesGlAccount] = value;
                }
            }
        }

        ///
        public String CreditorGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreditorGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreditorGlAccountCode)
                            || (((String)(this[this.myTable.ColumnCreditorGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnCreditorGlAccountCode] = value;
                }
            }
        }

        ///
        public Int32 CurrentFinancialYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrentFinancialYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrentFinancialYear)
                            || (((Int32)(this[this.myTable.ColumnCurrentFinancialYear])) != value)))
                {
                    this[this.myTable.ColumnCurrentFinancialYear] = value;
                }
            }
        }

        ///
        public Int32 CurrentPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrentPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrentPeriod)
                            || (((Int32)(this[this.myTable.ColumnCurrentPeriod])) != value)))
                {
                    this[this.myTable.ColumnCurrentPeriod] = value;
                }
            }
        }

        ///
        public System.DateTime? DateCrDrBalances
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCrDrBalances.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCrDrBalances)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCrDrBalances])) != value)))
                {
                    this[this.myTable.ColumnDateCrDrBalances] = value;
                }
            }
        }

        ///
        public String DebtorGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebtorGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebtorGlAccountCode)
                            || (((String)(this[this.myTable.ColumnDebtorGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnDebtorGlAccountCode] = value;
                }
            }
        }

        ///
        public String FaDepreciationGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaDepreciationGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaDepreciationGlAccount)
                            || (((String)(this[this.myTable.ColumnFaDepreciationGlAccount])) != value)))
                {
                    this[this.myTable.ColumnFaDepreciationGlAccount] = value;
                }
            }
        }

        ///
        public String FaGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaGlAccountCode)
                            || (((String)(this[this.myTable.ColumnFaGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnFaGlAccountCode] = value;
                }
            }
        }

        ///
        public String FaPlOnSaleGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaPlOnSaleGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaPlOnSaleGlAccount)
                            || (((String)(this[this.myTable.ColumnFaPlOnSaleGlAccount])) != value)))
                {
                    this[this.myTable.ColumnFaPlOnSaleGlAccount] = value;
                }
            }
        }

        ///
        public String FaProvForDepnGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFaProvForDepnGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFaProvForDepnGlAccount)
                            || (((String)(this[this.myTable.ColumnFaProvForDepnGlAccount])) != value)))
                {
                    this[this.myTable.ColumnFaProvForDepnGlAccount] = value;
                }
            }
        }

        ///
        public Boolean IltAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltAccountFlag)
                            || (((Boolean)(this[this.myTable.ColumnIltAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnIltAccountFlag] = value;
                }
            }
        }

        ///
        public Int32 LastApDnNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastApDnNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastApDnNumber)
                            || (((Int32)(this[this.myTable.ColumnLastApDnNumber])) != value)))
                {
                    this[this.myTable.ColumnLastApDnNumber] = value;
                }
            }
        }

        ///
        public Int32 LastPoRetNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastPoRetNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastPoRetNumber)
                            || (((Int32)(this[this.myTable.ColumnLastPoRetNumber])) != value)))
                {
                    this[this.myTable.ColumnLastPoRetNumber] = value;
                }
            }
        }

        ///
        public Int32 LastSoDelNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastSoDelNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastSoDelNumber)
                            || (((Int32)(this[this.myTable.ColumnLastSoDelNumber])) != value)))
                {
                    this[this.myTable.ColumnLastSoDelNumber] = value;
                }
            }
        }

        ///
        public Int32 LastSoRetNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastSoRetNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastSoRetNumber)
                            || (((Int32)(this[this.myTable.ColumnLastSoRetNumber])) != value)))
                {
                    this[this.myTable.ColumnLastSoRetNumber] = value;
                }
            }
        }

        ///
        public Int32 LastSpecialGiftNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastSpecialGiftNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastSpecialGiftNumber)
                            || (((Int32)(this[this.myTable.ColumnLastSpecialGiftNumber])) != value)))
                {
                    this[this.myTable.ColumnLastSpecialGiftNumber] = value;
                }
            }
        }

        ///
        public Int32 NumberFwdPostingPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberFwdPostingPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberFwdPostingPeriods)
                            || (((Int32)(this[this.myTable.ColumnNumberFwdPostingPeriods])) != value)))
                {
                    this[this.myTable.ColumnNumberFwdPostingPeriods] = value;
                }
            }
        }

        /// deprecated; not used at the moment; please use a_number_of_accounting_periods_i
        public Int32 PeriodsPerFinancialYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodsPerFinancialYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodsPerFinancialYear)
                            || (((Int32)(this[this.myTable.ColumnPeriodsPerFinancialYear])) != value)))
                {
                    this[this.myTable.ColumnPeriodsPerFinancialYear] = value;
                }
            }
        }

        ///
        public Decimal DiscountAllowedPct
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDiscountAllowedPct.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDiscountAllowedPct)
                            || (((Decimal)(this[this.myTable.ColumnDiscountAllowedPct])) != value)))
                {
                    this[this.myTable.ColumnDiscountAllowedPct] = value;
                }
            }
        }

        ///
        public Decimal DiscountReceivedPct
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDiscountReceivedPct.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDiscountReceivedPct)
                            || (((Decimal)(this[this.myTable.ColumnDiscountReceivedPct])) != value)))
                {
                    this[this.myTable.ColumnDiscountReceivedPct] = value;
                }
            }
        }

        ///
        public String PoAccrualGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPoAccrualGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPoAccrualGlAccountCode)
                            || (((String)(this[this.myTable.ColumnPoAccrualGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPoAccrualGlAccountCode] = value;
                }
            }
        }

        ///
        public Boolean ProvisionalYearEndFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProvisionalYearEndFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProvisionalYearEndFlag)
                            || (((Boolean)(this[this.myTable.ColumnProvisionalYearEndFlag])) != value)))
                {
                    this[this.myTable.ColumnProvisionalYearEndFlag] = value;
                }
            }
        }

        ///
        public String PurchaseGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPurchaseGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPurchaseGlAccountCode)
                            || (((String)(this[this.myTable.ColumnPurchaseGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPurchaseGlAccountCode] = value;
                }
            }
        }

        ///
        public String RetEarningsGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRetEarningsGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRetEarningsGlAccount)
                            || (((String)(this[this.myTable.ColumnRetEarningsGlAccount])) != value)))
                {
                    this[this.myTable.ColumnRetEarningsGlAccount] = value;
                }
            }
        }

        ///
        public String SalesGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSalesGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSalesGlAccountCode)
                            || (((String)(this[this.myTable.ColumnSalesGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnSalesGlAccountCode] = value;
                }
            }
        }

        ///
        public String SoAccrualGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSoAccrualGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSoAccrualGlAccountCode)
                            || (((String)(this[this.myTable.ColumnSoAccrualGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnSoAccrualGlAccountCode] = value;
                }
            }
        }

        ///
        public String StockAccrualGlAccount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStockAccrualGlAccount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStockAccrualGlAccount)
                            || (((String)(this[this.myTable.ColumnStockAccrualGlAccount])) != value)))
                {
                    this[this.myTable.ColumnStockAccrualGlAccount] = value;
                }
            }
        }

        ///
        public String StockAdjGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStockAdjGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStockAdjGlAccountCode)
                            || (((String)(this[this.myTable.ColumnStockAdjGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnStockAdjGlAccountCode] = value;
                }
            }
        }

        ///
        public String StockGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStockGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStockGlAccountCode)
                            || (((String)(this[this.myTable.ColumnStockGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnStockGlAccountCode] = value;
                }
            }
        }

        ///
        public Boolean TaxExclIncl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxExclIncl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxExclIncl)
                            || (((Boolean)(this[this.myTable.ColumnTaxExclIncl])) != value)))
                {
                    this[this.myTable.ColumnTaxExclIncl] = value;
                }
            }
        }

        ///
        public Boolean TaxExclInclIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxExclInclIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxExclInclIndicator)
                            || (((Boolean)(this[this.myTable.ColumnTaxExclInclIndicator])) != value)))
                {
                    this[this.myTable.ColumnTaxExclInclIndicator] = value;
                }
            }
        }

        ///
        public String TaxInputGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxInputGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxInputGlAccountCode)
                            || (((String)(this[this.myTable.ColumnTaxInputGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnTaxInputGlAccountCode] = value;
                }
            }
        }

        ///
        public String TaxInputGlCcCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxInputGlCcCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxInputGlCcCode)
                            || (((String)(this[this.myTable.ColumnTaxInputGlCcCode])) != value)))
                {
                    this[this.myTable.ColumnTaxInputGlCcCode] = value;
                }
            }
        }

        ///
        public String TaxOutputGlAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxOutputGlAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxOutputGlAccountCode)
                            || (((String)(this[this.myTable.ColumnTaxOutputGlAccountCode])) != value)))
                {
                    this[this.myTable.ColumnTaxOutputGlAccountCode] = value;
                }
            }
        }

        ///
        public String TermsOfPaymentCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTermsOfPaymentCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTermsOfPaymentCode)
                            || (((String)(this[this.myTable.ColumnTermsOfPaymentCode])) != value)))
                {
                    this[this.myTable.ColumnTermsOfPaymentCode] = value;
                }
            }
        }

        ///
        public Int32 LastPoRecNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastPoRecNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastPoRecNumber)
                            || (((Int32)(this[this.myTable.ColumnLastPoRecNumber])) != value)))
                {
                    this[this.myTable.ColumnLastPoRecNumber] = value;
                }
            }
        }

        ///
        public Int32 TaxGlAccountNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxGlAccountNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxGlAccountNumber)
                            || (((Int32)(this[this.myTable.ColumnTaxGlAccountNumber])) != value)))
                {
                    this[this.myTable.ColumnTaxGlAccountNumber] = value;
                }
            }
        }

        ///
        public Int32 ActualsDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualsDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualsDataRetention)
                            || (((Int32)(this[this.myTable.ColumnActualsDataRetention])) != value)))
                {
                    this[this.myTable.ColumnActualsDataRetention] = value;
                }
            }
        }

        /// Partner key which links the ledger to the partner type record where the type is a ledger.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        ///
        public Boolean CalendarMode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCalendarMode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCalendarMode)
                            || (((Boolean)(this[this.myTable.ColumnCalendarMode])) != value)))
                {
                    this[this.myTable.ColumnCalendarMode] = value;
                }
            }
        }

        /// How far along is the year end process.
        public Int32 YearEndProcessStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYearEndProcessStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYearEndProcessStatus)
                            || (((Int32)(this[this.myTable.ColumnYearEndProcessStatus])) != value)))
                {
                    this[this.myTable.ColumnYearEndProcessStatus] = value;
                }
            }
        }

        /// last used cashbook payment header number
        public Int32 LastHeaderPNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastHeaderPNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastHeaderPNumber)
                            || (((Int32)(this[this.myTable.ColumnLastHeaderPNumber])) != value)))
                {
                    this[this.myTable.ColumnLastHeaderPNumber] = value;
                }
            }
        }

        /// Is this ledger an ILT processing centre (ie, clearinghouse status)
        public Boolean IltProcessingCentre
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltProcessingCentre.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltProcessingCentre)
                            || (((Boolean)(this[this.myTable.ColumnIltProcessingCentre])) != value)))
                {
                    this[this.myTable.ColumnIltProcessingCentre] = value;
                }
            }
        }

        /// The number of the last gift batch to be created.
        public Int32 LastGiftBatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastGiftBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastGiftBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnLastGiftBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastGiftBatchNumber] = value;
                }
            }
        }

        /// This defines which currency to use as a second ('international') base currency.
        public String IntlCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIntlCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIntlCurrency)
                            || (((String)(this[this.myTable.ColumnIntlCurrency])) != value)))
                {
                    this[this.myTable.ColumnIntlCurrency] = value;
                }
            }
        }

        /// The number of the last gift batch to be created.
        public Int32 LastRecGiftBatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastRecGiftBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastRecGiftBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnLastRecGiftBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastRecGiftBatchNumber] = value;
                }
            }
        }

        /// How many years to retain gift data.
        public Int32 GiftDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftDataRetention)
                            || (((Int32)(this[this.myTable.ColumnGiftDataRetention])) != value)))
                {
                    this[this.myTable.ColumnGiftDataRetention] = value;
                }
            }
        }

        /// When recalculating the account report structure this indicates that all periods should be recalculated.
        public Boolean RecalculateAllPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecalculateAllPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecalculateAllPeriods)
                            || (((Boolean)(this[this.myTable.ColumnRecalculateAllPeriods])) != value)))
                {
                    this[this.myTable.ColumnRecalculateAllPeriods] = value;
                }
            }
        }

        /// identifes the Last used ICH process number
        public Int32 LastIchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastIchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastIchNumber)
                            || (((Int32)(this[this.myTable.ColumnLastIchNumber])) != value)))
                {
                    this[this.myTable.ColumnLastIchNumber] = value;
                }
            }
        }

        /// THis defines whether or not the ledger ha made up of separate branches/departments that are self contained (should balance).
        public Boolean BranchProcessing
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBranchProcessing.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBranchProcessing)
                            || (((Boolean)(this[this.myTable.ColumnBranchProcessing])) != value)))
                {
                    this[this.myTable.ColumnBranchProcessing] = value;
                }
            }
        }

        /// Indicates whether the ledger is just for storing consolidated accounts (rather than a 'real' ledger).
        public Boolean ConsolidationLedger
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConsolidationLedger.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConsolidationLedger)
                            || (((Boolean)(this[this.myTable.ColumnConsolidationLedger])) != value)))
                {
                    this[this.myTable.ColumnConsolidationLedger] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnLedgerName);
            this[this.myTable.ColumnLedgerStatus.Ordinal] = true;
            this[this.myTable.ColumnLastBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastRecurringBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastGiftNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastApInvNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastHeaderRNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastPoNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastSoNumber.Ordinal] = 0;
            this[this.myTable.ColumnMaxGiftAidAmount.Ordinal] = 0;
            this[this.myTable.ColumnMinGiftAidAmount.Ordinal] = 0;
            this[this.myTable.ColumnNumberOfGiftsToDisplay.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTaxTypeCode);
            this.SetNull(this.myTable.ColumnIltGlAccountCode);
            this.SetNull(this.myTable.ColumnProfitLossGlAccountCode);
            this[this.myTable.ColumnCurrentAccountingPeriod.Ordinal] = 0;
            this[this.myTable.ColumnNumberOfAccountingPeriods.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCountryCode);
            this.SetNull(this.myTable.ColumnBaseCurrency);
            this[this.myTable.ColumnTransactionAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnYearEndFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnForexGainsLossesAccount);
            this[this.myTable.ColumnSystemInterfaceFlag.Ordinal] = false;
            this[this.myTable.ColumnSuspenseAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnBankAccountsFlag.Ordinal] = false;
            this[this.myTable.ColumnDeleteLedgerFlag.Ordinal] = false;
            this[this.myTable.ColumnNewFinancialYearFlag.Ordinal] = false;
            this[this.myTable.ColumnRecalculateGlMasterFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnInstallationId);
            this[this.myTable.ColumnBudgetControlFlag.Ordinal] = false;
            this[this.myTable.ColumnBudgetDataRetention.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostOfSalesGlAccount);
            this.SetNull(this.myTable.ColumnCreditorGlAccountCode);
            this[this.myTable.ColumnCurrentFinancialYear.Ordinal] = 0;
            this[this.myTable.ColumnCurrentPeriod.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDateCrDrBalances);
            this.SetNull(this.myTable.ColumnDebtorGlAccountCode);
            this.SetNull(this.myTable.ColumnFaDepreciationGlAccount);
            this.SetNull(this.myTable.ColumnFaGlAccountCode);
            this.SetNull(this.myTable.ColumnFaPlOnSaleGlAccount);
            this.SetNull(this.myTable.ColumnFaProvForDepnGlAccount);
            this[this.myTable.ColumnIltAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnLastApDnNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastPoRetNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastSoDelNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastSoRetNumber.Ordinal] = 0;
            this[this.myTable.ColumnLastSpecialGiftNumber.Ordinal] = 0;
            this[this.myTable.ColumnNumberFwdPostingPeriods.Ordinal] = 0;
            this[this.myTable.ColumnPeriodsPerFinancialYear.Ordinal] = 0;
            this[this.myTable.ColumnDiscountAllowedPct.Ordinal] = 0;
            this[this.myTable.ColumnDiscountReceivedPct.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnPoAccrualGlAccountCode);
            this[this.myTable.ColumnProvisionalYearEndFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnPurchaseGlAccountCode);
            this.SetNull(this.myTable.ColumnRetEarningsGlAccount);
            this.SetNull(this.myTable.ColumnSalesGlAccountCode);
            this.SetNull(this.myTable.ColumnSoAccrualGlAccountCode);
            this.SetNull(this.myTable.ColumnStockAccrualGlAccount);
            this.SetNull(this.myTable.ColumnStockAdjGlAccountCode);
            this.SetNull(this.myTable.ColumnStockGlAccountCode);
            this[this.myTable.ColumnTaxExclIncl.Ordinal] = true;
            this[this.myTable.ColumnTaxExclInclIndicator.Ordinal] = false;
            this.SetNull(this.myTable.ColumnTaxInputGlAccountCode);
            this.SetNull(this.myTable.ColumnTaxInputGlCcCode);
            this.SetNull(this.myTable.ColumnTaxOutputGlAccountCode);
            this.SetNull(this.myTable.ColumnTermsOfPaymentCode);
            this[this.myTable.ColumnLastPoRecNumber.Ordinal] = 0;
            this[this.myTable.ColumnTaxGlAccountNumber.Ordinal] = 0;
            this[this.myTable.ColumnActualsDataRetention.Ordinal] = 11;
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnCalendarMode.Ordinal] = true;
            this[this.myTable.ColumnYearEndProcessStatus.Ordinal] = 0;
            this[this.myTable.ColumnLastHeaderPNumber.Ordinal] = 0;
            this[this.myTable.ColumnIltProcessingCentre.Ordinal] = false;
            this[this.myTable.ColumnLastGiftBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnIntlCurrency);
            this[this.myTable.ColumnLastRecGiftBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnGiftDataRetention.Ordinal] = 2;
            this[this.myTable.ColumnRecalculateAllPeriods.Ordinal] = false;
            this[this.myTable.ColumnLastIchNumber.Ordinal] = 0;
            this[this.myTable.ColumnBranchProcessing.Ordinal] = false;
            this[this.myTable.ColumnConsolidationLedger.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsLedgerNameNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerName);
        }

        /// assign NULL value
        public void SetLedgerNameNull()
        {
            this.SetNull(this.myTable.ColumnLedgerName);
        }

        /// test for NULL value
        public bool IsLedgerStatusNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerStatus);
        }

        /// assign NULL value
        public void SetLedgerStatusNull()
        {
            this.SetNull(this.myTable.ColumnLedgerStatus);
        }

        /// test for NULL value
        public bool IsLastBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastBatchNumber);
        }

        /// assign NULL value
        public void SetLastBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastBatchNumber);
        }

        /// test for NULL value
        public bool IsLastRecurringBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastRecurringBatchNumber);
        }

        /// assign NULL value
        public void SetLastRecurringBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastRecurringBatchNumber);
        }

        /// test for NULL value
        public bool IsLastGiftNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastGiftNumber);
        }

        /// assign NULL value
        public void SetLastGiftNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastGiftNumber);
        }

        /// test for NULL value
        public bool IsLastApInvNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastApInvNumber);
        }

        /// assign NULL value
        public void SetLastApInvNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastApInvNumber);
        }

        /// test for NULL value
        public bool IsLastHeaderRNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastHeaderRNumber);
        }

        /// assign NULL value
        public void SetLastHeaderRNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastHeaderRNumber);
        }

        /// test for NULL value
        public bool IsLastPoNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastPoNumber);
        }

        /// assign NULL value
        public void SetLastPoNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastPoNumber);
        }

        /// test for NULL value
        public bool IsLastSoNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastSoNumber);
        }

        /// assign NULL value
        public void SetLastSoNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastSoNumber);
        }

        /// test for NULL value
        public bool IsMaxGiftAidAmountNull()
        {
            return this.IsNull(this.myTable.ColumnMaxGiftAidAmount);
        }

        /// assign NULL value
        public void SetMaxGiftAidAmountNull()
        {
            this.SetNull(this.myTable.ColumnMaxGiftAidAmount);
        }

        /// test for NULL value
        public bool IsMinGiftAidAmountNull()
        {
            return this.IsNull(this.myTable.ColumnMinGiftAidAmount);
        }

        /// assign NULL value
        public void SetMinGiftAidAmountNull()
        {
            this.SetNull(this.myTable.ColumnMinGiftAidAmount);
        }

        /// test for NULL value
        public bool IsNumberOfGiftsToDisplayNull()
        {
            return this.IsNull(this.myTable.ColumnNumberOfGiftsToDisplay);
        }

        /// assign NULL value
        public void SetNumberOfGiftsToDisplayNull()
        {
            this.SetNull(this.myTable.ColumnNumberOfGiftsToDisplay);
        }

        /// test for NULL value
        public bool IsTaxTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxTypeCode);
        }

        /// assign NULL value
        public void SetTaxTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTaxTypeCode);
        }

        /// test for NULL value
        public bool IsIltGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnIltGlAccountCode);
        }

        /// assign NULL value
        public void SetIltGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnIltGlAccountCode);
        }

        /// test for NULL value
        public bool IsProfitLossGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnProfitLossGlAccountCode);
        }

        /// assign NULL value
        public void SetProfitLossGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnProfitLossGlAccountCode);
        }

        /// test for NULL value
        public bool IsCurrentAccountingPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnCurrentAccountingPeriod);
        }

        /// assign NULL value
        public void SetCurrentAccountingPeriodNull()
        {
            this.SetNull(this.myTable.ColumnCurrentAccountingPeriod);
        }

        /// test for NULL value
        public bool IsNumberOfAccountingPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberOfAccountingPeriods);
        }

        /// assign NULL value
        public void SetNumberOfAccountingPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnNumberOfAccountingPeriods);
        }

        /// test for NULL value
        public bool IsCountryCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCountryCode);
        }

        /// assign NULL value
        public void SetCountryCodeNull()
        {
            this.SetNull(this.myTable.ColumnCountryCode);
        }

        /// test for NULL value
        public bool IsBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnBaseCurrency);
        }

        /// assign NULL value
        public void SetBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnBaseCurrency);
        }

        /// test for NULL value
        public bool IsTransactionAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionAccountFlag);
        }

        /// assign NULL value
        public void SetTransactionAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnTransactionAccountFlag);
        }

        /// test for NULL value
        public bool IsYearEndFlagNull()
        {
            return this.IsNull(this.myTable.ColumnYearEndFlag);
        }

        /// assign NULL value
        public void SetYearEndFlagNull()
        {
            this.SetNull(this.myTable.ColumnYearEndFlag);
        }

        /// test for NULL value
        public bool IsForexGainsLossesAccountNull()
        {
            return this.IsNull(this.myTable.ColumnForexGainsLossesAccount);
        }

        /// assign NULL value
        public void SetForexGainsLossesAccountNull()
        {
            this.SetNull(this.myTable.ColumnForexGainsLossesAccount);
        }

        /// test for NULL value
        public bool IsSystemInterfaceFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSystemInterfaceFlag);
        }

        /// assign NULL value
        public void SetSystemInterfaceFlagNull()
        {
            this.SetNull(this.myTable.ColumnSystemInterfaceFlag);
        }

        /// test for NULL value
        public bool IsSuspenseAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSuspenseAccountFlag);
        }

        /// assign NULL value
        public void SetSuspenseAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnSuspenseAccountFlag);
        }

        /// test for NULL value
        public bool IsBankAccountsFlagNull()
        {
            return this.IsNull(this.myTable.ColumnBankAccountsFlag);
        }

        /// assign NULL value
        public void SetBankAccountsFlagNull()
        {
            this.SetNull(this.myTable.ColumnBankAccountsFlag);
        }

        /// test for NULL value
        public bool IsDeleteLedgerFlagNull()
        {
            return this.IsNull(this.myTable.ColumnDeleteLedgerFlag);
        }

        /// assign NULL value
        public void SetDeleteLedgerFlagNull()
        {
            this.SetNull(this.myTable.ColumnDeleteLedgerFlag);
        }

        /// test for NULL value
        public bool IsNewFinancialYearFlagNull()
        {
            return this.IsNull(this.myTable.ColumnNewFinancialYearFlag);
        }

        /// assign NULL value
        public void SetNewFinancialYearFlagNull()
        {
            this.SetNull(this.myTable.ColumnNewFinancialYearFlag);
        }

        /// test for NULL value
        public bool IsRecalculateGlMasterFlagNull()
        {
            return this.IsNull(this.myTable.ColumnRecalculateGlMasterFlag);
        }

        /// assign NULL value
        public void SetRecalculateGlMasterFlagNull()
        {
            this.SetNull(this.myTable.ColumnRecalculateGlMasterFlag);
        }

        /// test for NULL value
        public bool IsInstallationIdNull()
        {
            return this.IsNull(this.myTable.ColumnInstallationId);
        }

        /// assign NULL value
        public void SetInstallationIdNull()
        {
            this.SetNull(this.myTable.ColumnInstallationId);
        }

        /// test for NULL value
        public bool IsBudgetControlFlagNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetControlFlag);
        }

        /// assign NULL value
        public void SetBudgetControlFlagNull()
        {
            this.SetNull(this.myTable.ColumnBudgetControlFlag);
        }

        /// test for NULL value
        public bool IsBudgetDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetDataRetention);
        }

        /// assign NULL value
        public void SetBudgetDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnBudgetDataRetention);
        }

        /// test for NULL value
        public bool IsCostOfSalesGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnCostOfSalesGlAccount);
        }

        /// assign NULL value
        public void SetCostOfSalesGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnCostOfSalesGlAccount);
        }

        /// test for NULL value
        public bool IsCreditorGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCreditorGlAccountCode);
        }

        /// assign NULL value
        public void SetCreditorGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnCreditorGlAccountCode);
        }

        /// test for NULL value
        public bool IsCurrentFinancialYearNull()
        {
            return this.IsNull(this.myTable.ColumnCurrentFinancialYear);
        }

        /// assign NULL value
        public void SetCurrentFinancialYearNull()
        {
            this.SetNull(this.myTable.ColumnCurrentFinancialYear);
        }

        /// test for NULL value
        public bool IsCurrentPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnCurrentPeriod);
        }

        /// assign NULL value
        public void SetCurrentPeriodNull()
        {
            this.SetNull(this.myTable.ColumnCurrentPeriod);
        }

        /// test for NULL value
        public bool IsDateCrDrBalancesNull()
        {
            return this.IsNull(this.myTable.ColumnDateCrDrBalances);
        }

        /// assign NULL value
        public void SetDateCrDrBalancesNull()
        {
            this.SetNull(this.myTable.ColumnDateCrDrBalances);
        }

        /// test for NULL value
        public bool IsDebtorGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDebtorGlAccountCode);
        }

        /// assign NULL value
        public void SetDebtorGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnDebtorGlAccountCode);
        }

        /// test for NULL value
        public bool IsFaDepreciationGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnFaDepreciationGlAccount);
        }

        /// assign NULL value
        public void SetFaDepreciationGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnFaDepreciationGlAccount);
        }

        /// test for NULL value
        public bool IsFaGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFaGlAccountCode);
        }

        /// assign NULL value
        public void SetFaGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnFaGlAccountCode);
        }

        /// test for NULL value
        public bool IsFaPlOnSaleGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnFaPlOnSaleGlAccount);
        }

        /// assign NULL value
        public void SetFaPlOnSaleGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnFaPlOnSaleGlAccount);
        }

        /// test for NULL value
        public bool IsFaProvForDepnGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnFaProvForDepnGlAccount);
        }

        /// assign NULL value
        public void SetFaProvForDepnGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnFaProvForDepnGlAccount);
        }

        /// test for NULL value
        public bool IsIltAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnIltAccountFlag);
        }

        /// assign NULL value
        public void SetIltAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnIltAccountFlag);
        }

        /// test for NULL value
        public bool IsLastApDnNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastApDnNumber);
        }

        /// assign NULL value
        public void SetLastApDnNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastApDnNumber);
        }

        /// test for NULL value
        public bool IsLastPoRetNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastPoRetNumber);
        }

        /// assign NULL value
        public void SetLastPoRetNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastPoRetNumber);
        }

        /// test for NULL value
        public bool IsLastSoDelNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastSoDelNumber);
        }

        /// assign NULL value
        public void SetLastSoDelNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastSoDelNumber);
        }

        /// test for NULL value
        public bool IsLastSoRetNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastSoRetNumber);
        }

        /// assign NULL value
        public void SetLastSoRetNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastSoRetNumber);
        }

        /// test for NULL value
        public bool IsLastSpecialGiftNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastSpecialGiftNumber);
        }

        /// assign NULL value
        public void SetLastSpecialGiftNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastSpecialGiftNumber);
        }

        /// test for NULL value
        public bool IsNumberFwdPostingPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberFwdPostingPeriods);
        }

        /// assign NULL value
        public void SetNumberFwdPostingPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnNumberFwdPostingPeriods);
        }

        /// test for NULL value
        public bool IsPeriodsPerFinancialYearNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodsPerFinancialYear);
        }

        /// assign NULL value
        public void SetPeriodsPerFinancialYearNull()
        {
            this.SetNull(this.myTable.ColumnPeriodsPerFinancialYear);
        }

        /// test for NULL value
        public bool IsDiscountAllowedPctNull()
        {
            return this.IsNull(this.myTable.ColumnDiscountAllowedPct);
        }

        /// assign NULL value
        public void SetDiscountAllowedPctNull()
        {
            this.SetNull(this.myTable.ColumnDiscountAllowedPct);
        }

        /// test for NULL value
        public bool IsDiscountReceivedPctNull()
        {
            return this.IsNull(this.myTable.ColumnDiscountReceivedPct);
        }

        /// assign NULL value
        public void SetDiscountReceivedPctNull()
        {
            this.SetNull(this.myTable.ColumnDiscountReceivedPct);
        }

        /// test for NULL value
        public bool IsPoAccrualGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPoAccrualGlAccountCode);
        }

        /// assign NULL value
        public void SetPoAccrualGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPoAccrualGlAccountCode);
        }

        /// test for NULL value
        public bool IsProvisionalYearEndFlagNull()
        {
            return this.IsNull(this.myTable.ColumnProvisionalYearEndFlag);
        }

        /// assign NULL value
        public void SetProvisionalYearEndFlagNull()
        {
            this.SetNull(this.myTable.ColumnProvisionalYearEndFlag);
        }

        /// test for NULL value
        public bool IsPurchaseGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPurchaseGlAccountCode);
        }

        /// assign NULL value
        public void SetPurchaseGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPurchaseGlAccountCode);
        }

        /// test for NULL value
        public bool IsRetEarningsGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnRetEarningsGlAccount);
        }

        /// assign NULL value
        public void SetRetEarningsGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnRetEarningsGlAccount);
        }

        /// test for NULL value
        public bool IsSalesGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSalesGlAccountCode);
        }

        /// assign NULL value
        public void SetSalesGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnSalesGlAccountCode);
        }

        /// test for NULL value
        public bool IsSoAccrualGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSoAccrualGlAccountCode);
        }

        /// assign NULL value
        public void SetSoAccrualGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnSoAccrualGlAccountCode);
        }

        /// test for NULL value
        public bool IsStockAccrualGlAccountNull()
        {
            return this.IsNull(this.myTable.ColumnStockAccrualGlAccount);
        }

        /// assign NULL value
        public void SetStockAccrualGlAccountNull()
        {
            this.SetNull(this.myTable.ColumnStockAccrualGlAccount);
        }

        /// test for NULL value
        public bool IsStockAdjGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStockAdjGlAccountCode);
        }

        /// assign NULL value
        public void SetStockAdjGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnStockAdjGlAccountCode);
        }

        /// test for NULL value
        public bool IsStockGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnStockGlAccountCode);
        }

        /// assign NULL value
        public void SetStockGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnStockGlAccountCode);
        }

        /// test for NULL value
        public bool IsTaxExclInclNull()
        {
            return this.IsNull(this.myTable.ColumnTaxExclIncl);
        }

        /// assign NULL value
        public void SetTaxExclInclNull()
        {
            this.SetNull(this.myTable.ColumnTaxExclIncl);
        }

        /// test for NULL value
        public bool IsTaxExclInclIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnTaxExclInclIndicator);
        }

        /// assign NULL value
        public void SetTaxExclInclIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnTaxExclInclIndicator);
        }

        /// test for NULL value
        public bool IsTaxInputGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxInputGlAccountCode);
        }

        /// assign NULL value
        public void SetTaxInputGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnTaxInputGlAccountCode);
        }

        /// test for NULL value
        public bool IsTaxInputGlCcCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxInputGlCcCode);
        }

        /// assign NULL value
        public void SetTaxInputGlCcCodeNull()
        {
            this.SetNull(this.myTable.ColumnTaxInputGlCcCode);
        }

        /// test for NULL value
        public bool IsTaxOutputGlAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTaxOutputGlAccountCode);
        }

        /// assign NULL value
        public void SetTaxOutputGlAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnTaxOutputGlAccountCode);
        }

        /// test for NULL value
        public bool IsTermsOfPaymentCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTermsOfPaymentCode);
        }

        /// assign NULL value
        public void SetTermsOfPaymentCodeNull()
        {
            this.SetNull(this.myTable.ColumnTermsOfPaymentCode);
        }

        /// test for NULL value
        public bool IsLastPoRecNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastPoRecNumber);
        }

        /// assign NULL value
        public void SetLastPoRecNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastPoRecNumber);
        }

        /// test for NULL value
        public bool IsTaxGlAccountNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTaxGlAccountNumber);
        }

        /// assign NULL value
        public void SetTaxGlAccountNumberNull()
        {
            this.SetNull(this.myTable.ColumnTaxGlAccountNumber);
        }

        /// test for NULL value
        public bool IsActualsDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnActualsDataRetention);
        }

        /// assign NULL value
        public void SetActualsDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnActualsDataRetention);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsCalendarModeNull()
        {
            return this.IsNull(this.myTable.ColumnCalendarMode);
        }

        /// assign NULL value
        public void SetCalendarModeNull()
        {
            this.SetNull(this.myTable.ColumnCalendarMode);
        }

        /// test for NULL value
        public bool IsYearEndProcessStatusNull()
        {
            return this.IsNull(this.myTable.ColumnYearEndProcessStatus);
        }

        /// assign NULL value
        public void SetYearEndProcessStatusNull()
        {
            this.SetNull(this.myTable.ColumnYearEndProcessStatus);
        }

        /// test for NULL value
        public bool IsLastHeaderPNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastHeaderPNumber);
        }

        /// assign NULL value
        public void SetLastHeaderPNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastHeaderPNumber);
        }

        /// test for NULL value
        public bool IsIltProcessingCentreNull()
        {
            return this.IsNull(this.myTable.ColumnIltProcessingCentre);
        }

        /// assign NULL value
        public void SetIltProcessingCentreNull()
        {
            this.SetNull(this.myTable.ColumnIltProcessingCentre);
        }

        /// test for NULL value
        public bool IsLastGiftBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastGiftBatchNumber);
        }

        /// assign NULL value
        public void SetLastGiftBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastGiftBatchNumber);
        }

        /// test for NULL value
        public bool IsIntlCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnIntlCurrency);
        }

        /// assign NULL value
        public void SetIntlCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnIntlCurrency);
        }

        /// test for NULL value
        public bool IsLastRecGiftBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastRecGiftBatchNumber);
        }

        /// assign NULL value
        public void SetLastRecGiftBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastRecGiftBatchNumber);
        }

        /// test for NULL value
        public bool IsGiftDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnGiftDataRetention);
        }

        /// assign NULL value
        public void SetGiftDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnGiftDataRetention);
        }

        /// test for NULL value
        public bool IsRecalculateAllPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnRecalculateAllPeriods);
        }

        /// assign NULL value
        public void SetRecalculateAllPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnRecalculateAllPeriods);
        }

        /// test for NULL value
        public bool IsLastIchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastIchNumber);
        }

        /// assign NULL value
        public void SetLastIchNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastIchNumber);
        }

        /// test for NULL value
        public bool IsBranchProcessingNull()
        {
            return this.IsNull(this.myTable.ColumnBranchProcessing);
        }

        /// assign NULL value
        public void SetBranchProcessingNull()
        {
            this.SetNull(this.myTable.ColumnBranchProcessing);
        }

        /// test for NULL value
        public bool IsConsolidationLedgerNull()
        {
            return this.IsNull(this.myTable.ColumnConsolidationLedger);
        }

        /// assign NULL value
        public void SetConsolidationLedgerNull()
        {
            this.SetNull(this.myTable.ColumnConsolidationLedger);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Ledger Init Flags
    [Serializable()]
    public class ALedgerInitFlagTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 109;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnInitOptionNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 6;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ALedgerInitFlag", "a_ledger_init_flag",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "a_ledger_number_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "InitOptionName", "a_init_option_name_c", "a_init_option_name_c", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(2, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(3, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(4, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ALedgerInitFlagTable() :
                base("ALedgerInitFlag")
        {
        }

        /// constructor
        public ALedgerInitFlagTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ALedgerInitFlagTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnLedgerNumber;
        ///
        public DataColumn ColumnInitOptionName;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_init_option_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnInitOptionName = this.Columns["a_init_option_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnInitOptionName};
        }

        /// Access a typed row by index
        public ALedgerInitFlagRow this[int i]
        {
            get
            {
                return ((ALedgerInitFlagRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ALedgerInitFlagRow NewRowTyped(bool AWithDefaultValues)
        {
            ALedgerInitFlagRow ret = ((ALedgerInitFlagRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ALedgerInitFlagRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ALedgerInitFlagRow(builder);
        }

        /// get typed set of changes
        public ALedgerInitFlagTable GetChangesTyped()
        {
            return ((ALedgerInitFlagTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ALedgerInitFlag";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_ledger_init_flag";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetInitOptionNameDBName()
        {
            return "a_init_option_name_c";
        }

        /// get character length for column
        public static short GetInitOptionNameLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Ledger Init Flags
    [Serializable()]
    public class ALedgerInitFlagRow : System.Data.DataRow
    {
        private ALedgerInitFlagTable myTable;

        /// Constructor
        public ALedgerInitFlagRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ALedgerInitFlagTable)(this.Table));
        }

        ///
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        ///
        public String InitOptionName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnInitOptionName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnInitOptionName)
                            || (((String)(this[this.myTable.ColumnInitOptionName])) != value)))
                {
                    this[this.myTable.ColumnInitOptionName] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
            this.SetNull(this.myTable.ColumnInitOptionName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsInitOptionNameNull()
        {
            return this.IsNull(this.myTable.ColumnInitOptionName);
        }

        /// assign NULL value
        public void SetInitOptionNameNull()
        {
            this.SetNull(this.myTable.ColumnInitOptionName);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Used for initial set up of budgets, for how to calculate amounts for each period.  Some possible types are adhoc,same,percentage of annual.
    [Serializable()]
    public class ABudgetTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 110;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetTypeCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetTypeDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetProcessToCallId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 7;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ABudgetType", "a_budget_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "BudgetTypeCode", "a_budget_type_code_c", "Budget Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(1, "BudgetTypeDescription", "a_budget_type_description_c", "Budget Type Description", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(2, "BudgetProcessToCall", "a_budget_process_to_call_c", "Budget Process to Call", OdbcType.VarChar, 80, true),
                    new TTypedColumnInfo(3, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(5, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public ABudgetTypeTable() :
                base("ABudgetType")
        {
        }

        /// constructor
        public ABudgetTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ABudgetTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The type. Adhoc, Split, Same, Inflate.
        public DataColumn ColumnBudgetTypeCode;
        ///
        public DataColumn ColumnBudgetTypeDescription;
        /// The Petra programme filename of the process to call
        public DataColumn ColumnBudgetProcessToCall;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_budget_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_process_to_call_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBudgetTypeCode = this.Columns["a_budget_type_code_c"];
            this.ColumnBudgetTypeDescription = this.Columns["a_budget_type_description_c"];
            this.ColumnBudgetProcessToCall = this.Columns["a_budget_process_to_call_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnBudgetTypeCode};
        }

        /// Access a typed row by index
        public ABudgetTypeRow this[int i]
        {
            get
            {
                return ((ABudgetTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ABudgetTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            ABudgetTypeRow ret = ((ABudgetTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ABudgetTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABudgetTypeRow(builder);
        }

        /// get typed set of changes
        public ABudgetTypeTable GetChangesTyped()
        {
            return ((ABudgetTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ABudgetType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_budget_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetTypeCodeDBName()
        {
            return "a_budget_type_code_c";
        }

        /// get character length for column
        public static short GetBudgetTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetTypeDescriptionDBName()
        {
            return "a_budget_type_description_c";
        }

        /// get character length for column
        public static short GetBudgetTypeDescriptionLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetProcessToCallDBName()
        {
            return "a_budget_process_to_call_c";
        }

        /// get character length for column
        public static short GetBudgetProcessToCallLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Used for initial set up of budgets, for how to calculate amounts for each period.  Some possible types are adhoc,same,percentage of annual.
    [Serializable()]
    public class ABudgetTypeRow : System.Data.DataRow
    {
        private ABudgetTypeTable myTable;

        /// Constructor
        public ABudgetTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ABudgetTypeTable)(this.Table));
        }

        /// The type. Adhoc, Split, Same, Inflate.
        public String BudgetTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetTypeCode)
                            || (((String)(this[this.myTable.ColumnBudgetTypeCode])) != value)))
                {
                    this[this.myTable.ColumnBudgetTypeCode] = value;
                }
            }
        }

        ///
        public String BudgetTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetTypeDescription)
                            || (((String)(this[this.myTable.ColumnBudgetTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnBudgetTypeDescription] = value;
                }
            }
        }

        /// The Petra programme filename of the process to call
        public String BudgetProcessToCall
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetProcessToCall.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetProcessToCall)
                            || (((String)(this[this.myTable.ColumnBudgetProcessToCall])) != value)))
                {
                    this[this.myTable.ColumnBudgetProcessToCall] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
            this.SetNull(this.myTable.ColumnBudgetTypeDescription);
            this.SetNull(this.myTable.ColumnBudgetProcessToCall);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsBudgetTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetTypeCode);
        }

        /// assign NULL value
        public void SetBudgetTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
        }

        /// test for NULL value
        public bool IsBudgetTypeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetTypeDescription);
        }

        /// assign NULL value
        public void SetBudgetTypeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBudgetTypeDescription);
        }

        /// test for NULL value
        public bool IsBudgetProcessToCallNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetProcessToCall);
        }

        /// assign NULL value
        public void SetBudgetProcessToCallNull()
        {
            this.SetNull(this.myTable.ColumnBudgetProcessToCall);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Details about each account code within a ledger. Also holds information on the summary account structure for reporting.
    [Serializable()]
    public class AAccountTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 111;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountTypeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeLongDescId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeShortDescId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnEngAccountCodeShortDescId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnEngAccountCodeLongDescId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDebitCreditIndicatorId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountActiveFlagId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisAttributeFlagId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnStandardAccountFlagId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnConsolidationAccountFlagId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnIntercompanyAccountFlagId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetTypeCodeId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnPostingStatusId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnSystemAccountFlagId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetControlFlagId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnValidCcComboId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnForeignCurrencyFlagId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnForeignCurrencyCodeId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnBankingDetailsKeyId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 25;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAccount", "a_account",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "AccountType", "a_account_type_c", "Account Type", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(3, "AccountCodeLongDesc", "a_account_code_long_desc_c", "Long", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(4, "AccountCodeShortDesc", "a_account_code_short_desc_c", "Short", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(5, "EngAccountCodeShortDesc", "a_eng_account_code_short_desc_c", "Short", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(6, "EngAccountCodeLongDesc", "a_eng_account_code_long_desc_c", "Long", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(7, "DebitCreditIndicator", "a_debit_credit_indicator_l", "Debit/Credit Indicator", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(8, "AccountActiveFlag", "a_account_active_flag_l", "Active Account", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(9, "AnalysisAttributeFlag", "a_analysis_attribute_flag_l", "Analysis Attribute Flag", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(10, "StandardAccountFlag", "a_standard_account_flag_l", "Standard Account", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(11, "ConsolidationAccountFlag", "a_consolidation_account_flag_l", "Consolidation Account", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(12, "IntercompanyAccountFlag", "a_intercompany_account_flag_l", "Intercompany Account", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(13, "BudgetTypeCode", "a_budget_type_code_c", "Budget Type Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(14, "PostingStatus", "a_posting_status_l", "Posting Status", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(15, "SystemAccountFlag", "a_system_account_flag_l", "System Account", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(16, "BudgetControlFlag", "a_budget_control_flag_l", "Budget Control", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(17, "ValidCcCombo", "a_valid_cc_combo_c", "Valid Cost Centre Combinations", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(18, "ForeignCurrencyFlag", "a_foreign_currency_flag_l", "a_foreign_currency_flag_l", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(19, "ForeignCurrencyCode", "a_foreign_currency_code_c", "Currency Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(20, "BankingDetailsKey", "p_banking_details_key_i", "Banking Details for this account", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(21, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(22, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(23, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(24, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(25, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AAccountTable() :
                base("AAccount")
        {
        }

        /// constructor
        public AAccountTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAccountTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// Income, Expense, Asset, Liability, Equity.  Suspense accounts are in a_suspense_account.
        public DataColumn ColumnAccountType;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnAccountCodeLongDesc;
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnAccountCodeShortDesc;
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnEngAccountCodeShortDesc;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnEngAccountCodeLongDesc;
        /// Defines if the the transcation is a debit or credit transaction
        public DataColumn ColumnDebitCreditIndicator;
        /// Defines whether the acount is active or not
        public DataColumn ColumnAccountActiveFlag;
        /// Yes if the account has any analysis attributes.
        public DataColumn ColumnAnalysisAttributeFlag;
        ///
        public DataColumn ColumnStandardAccountFlag;
        ///
        public DataColumn ColumnConsolidationAccountFlag;
        ///
        public DataColumn ColumnIntercompanyAccountFlag;
        /// The type of budget.  See the a_budget_type table.
        public DataColumn ColumnBudgetTypeCode;
        ///
        public DataColumn ColumnPostingStatus;
        ///
        public DataColumn ColumnSystemAccountFlag;
        ///
        public DataColumn ColumnBudgetControlFlag;
        /// Which type of cost centres may be combined with this account.
        public DataColumn ColumnValidCcCombo;
        ///
        public DataColumn ColumnForeignCurrencyFlag;
        /// This defines which currency is being used
        public DataColumn ColumnForeignCurrencyCode;
        /// Link to banking details to use for this account - only really used if this account is a bank account
        public DataColumn ColumnBankingDetailsKey;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_long_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_short_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_eng_account_code_short_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_eng_account_code_long_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_account_active_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_standard_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_consolidation_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_intercompany_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_posting_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_system_account_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_control_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_valid_cc_combo_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_foreign_currency_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_foreign_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_banking_details_key_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnAccountType = this.Columns["a_account_type_c"];
            this.ColumnAccountCodeLongDesc = this.Columns["a_account_code_long_desc_c"];
            this.ColumnAccountCodeShortDesc = this.Columns["a_account_code_short_desc_c"];
            this.ColumnEngAccountCodeShortDesc = this.Columns["a_eng_account_code_short_desc_c"];
            this.ColumnEngAccountCodeLongDesc = this.Columns["a_eng_account_code_long_desc_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnAccountActiveFlag = this.Columns["a_account_active_flag_l"];
            this.ColumnAnalysisAttributeFlag = this.Columns["a_analysis_attribute_flag_l"];
            this.ColumnStandardAccountFlag = this.Columns["a_standard_account_flag_l"];
            this.ColumnConsolidationAccountFlag = this.Columns["a_consolidation_account_flag_l"];
            this.ColumnIntercompanyAccountFlag = this.Columns["a_intercompany_account_flag_l"];
            this.ColumnBudgetTypeCode = this.Columns["a_budget_type_code_c"];
            this.ColumnPostingStatus = this.Columns["a_posting_status_l"];
            this.ColumnSystemAccountFlag = this.Columns["a_system_account_flag_l"];
            this.ColumnBudgetControlFlag = this.Columns["a_budget_control_flag_l"];
            this.ColumnValidCcCombo = this.Columns["a_valid_cc_combo_c"];
            this.ColumnForeignCurrencyFlag = this.Columns["a_foreign_currency_flag_l"];
            this.ColumnForeignCurrencyCode = this.Columns["a_foreign_currency_code_c"];
            this.ColumnBankingDetailsKey = this.Columns["p_banking_details_key_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnAccountCode};
        }

        /// Access a typed row by index
        public AAccountRow this[int i]
        {
            get
            {
                return ((AAccountRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAccountRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountRow ret = ((AAccountRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAccountRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountRow(builder);
        }

        /// get typed set of changes
        public AAccountTable GetChangesTyped()
        {
            return ((AAccountTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAccount";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_account";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountTypeDBName()
        {
            return "a_account_type_c";
        }

        /// get character length for column
        public static short GetAccountTypeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeLongDescDBName()
        {
            return "a_account_code_long_desc_c";
        }

        /// get character length for column
        public static short GetAccountCodeLongDescLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeShortDescDBName()
        {
            return "a_account_code_short_desc_c";
        }

        /// get character length for column
        public static short GetAccountCodeShortDescLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetEngAccountCodeShortDescDBName()
        {
            return "a_eng_account_code_short_desc_c";
        }

        /// get character length for column
        public static short GetEngAccountCodeShortDescLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetEngAccountCodeLongDescDBName()
        {
            return "a_eng_account_code_long_desc_c";
        }

        /// get character length for column
        public static short GetEngAccountCodeLongDescLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }

        /// get character length for column
        public static short GetDebitCreditIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountActiveFlagDBName()
        {
            return "a_account_active_flag_l";
        }

        /// get character length for column
        public static short GetAccountActiveFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeFlagDBName()
        {
            return "a_analysis_attribute_flag_l";
        }

        /// get character length for column
        public static short GetAnalysisAttributeFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetStandardAccountFlagDBName()
        {
            return "a_standard_account_flag_l";
        }

        /// get character length for column
        public static short GetStandardAccountFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetConsolidationAccountFlagDBName()
        {
            return "a_consolidation_account_flag_l";
        }

        /// get character length for column
        public static short GetConsolidationAccountFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIntercompanyAccountFlagDBName()
        {
            return "a_intercompany_account_flag_l";
        }

        /// get character length for column
        public static short GetIntercompanyAccountFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetTypeCodeDBName()
        {
            return "a_budget_type_code_c";
        }

        /// get character length for column
        public static short GetBudgetTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetPostingStatusDBName()
        {
            return "a_posting_status_l";
        }

        /// get character length for column
        public static short GetPostingStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSystemAccountFlagDBName()
        {
            return "a_system_account_flag_l";
        }

        /// get character length for column
        public static short GetSystemAccountFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetControlFlagDBName()
        {
            return "a_budget_control_flag_l";
        }

        /// get character length for column
        public static short GetBudgetControlFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetValidCcComboDBName()
        {
            return "a_valid_cc_combo_c";
        }

        /// get character length for column
        public static short GetValidCcComboLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetForeignCurrencyFlagDBName()
        {
            return "a_foreign_currency_flag_l";
        }

        /// get character length for column
        public static short GetForeignCurrencyFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetForeignCurrencyCodeDBName()
        {
            return "a_foreign_currency_code_c";
        }

        /// get character length for column
        public static short GetForeignCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetBankingDetailsKeyDBName()
        {
            return "p_banking_details_key_i";
        }

        /// get character length for column
        public static short GetBankingDetailsKeyLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Details about each account code within a ledger. Also holds information on the summary account structure for reporting.
    [Serializable()]
    public class AAccountRow : System.Data.DataRow
    {
        private AAccountTable myTable;

        /// Constructor
        public AAccountRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAccountTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Income, Expense, Asset, Liability, Equity.  Suspense accounts are in a_suspense_account.
        public String AccountType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountType)
                            || (((String)(this[this.myTable.ColumnAccountType])) != value)))
                {
                    this[this.myTable.ColumnAccountType] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String AccountCodeLongDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCodeLongDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCodeLongDesc)
                            || (((String)(this[this.myTable.ColumnAccountCodeLongDesc])) != value)))
                {
                    this[this.myTable.ColumnAccountCodeLongDesc] = value;
                }
            }
        }

        /// This is a short description which is 32 charcters long
        public String AccountCodeShortDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCodeShortDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCodeShortDesc)
                            || (((String)(this[this.myTable.ColumnAccountCodeShortDesc])) != value)))
                {
                    this[this.myTable.ColumnAccountCodeShortDesc] = value;
                }
            }
        }

        /// This is a short description which is 32 charcters long
        public String EngAccountCodeShortDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEngAccountCodeShortDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEngAccountCodeShortDesc)
                            || (((String)(this[this.myTable.ColumnEngAccountCodeShortDesc])) != value)))
                {
                    this[this.myTable.ColumnEngAccountCodeShortDesc] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String EngAccountCodeLongDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEngAccountCodeLongDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEngAccountCodeLongDesc)
                            || (((String)(this[this.myTable.ColumnEngAccountCodeLongDesc])) != value)))
                {
                    this[this.myTable.ColumnEngAccountCodeLongDesc] = value;
                }
            }
        }

        /// Defines if the the transcation is a debit or credit transaction
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator)
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }

        /// Defines whether the acount is active or not
        public Boolean AccountActiveFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountActiveFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountActiveFlag)
                            || (((Boolean)(this[this.myTable.ColumnAccountActiveFlag])) != value)))
                {
                    this[this.myTable.ColumnAccountActiveFlag] = value;
                }
            }
        }

        /// Yes if the account has any analysis attributes.
        public Boolean AnalysisAttributeFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeFlag)
                            || (((Boolean)(this[this.myTable.ColumnAnalysisAttributeFlag])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeFlag] = value;
                }
            }
        }

        ///
        public Boolean StandardAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStandardAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStandardAccountFlag)
                            || (((Boolean)(this[this.myTable.ColumnStandardAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnStandardAccountFlag] = value;
                }
            }
        }

        ///
        public Boolean ConsolidationAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConsolidationAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConsolidationAccountFlag)
                            || (((Boolean)(this[this.myTable.ColumnConsolidationAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnConsolidationAccountFlag] = value;
                }
            }
        }

        ///
        public Boolean IntercompanyAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIntercompanyAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIntercompanyAccountFlag)
                            || (((Boolean)(this[this.myTable.ColumnIntercompanyAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnIntercompanyAccountFlag] = value;
                }
            }
        }

        /// The type of budget.  See the a_budget_type table.
        public String BudgetTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetTypeCode)
                            || (((String)(this[this.myTable.ColumnBudgetTypeCode])) != value)))
                {
                    this[this.myTable.ColumnBudgetTypeCode] = value;
                }
            }
        }

        ///
        public Boolean PostingStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPostingStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPostingStatus)
                            || (((Boolean)(this[this.myTable.ColumnPostingStatus])) != value)))
                {
                    this[this.myTable.ColumnPostingStatus] = value;
                }
            }
        }

        ///
        public Boolean SystemAccountFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemAccountFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemAccountFlag)
                            || (((Boolean)(this[this.myTable.ColumnSystemAccountFlag])) != value)))
                {
                    this[this.myTable.ColumnSystemAccountFlag] = value;
                }
            }
        }

        ///
        public Boolean BudgetControlFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetControlFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetControlFlag)
                            || (((Boolean)(this[this.myTable.ColumnBudgetControlFlag])) != value)))
                {
                    this[this.myTable.ColumnBudgetControlFlag] = value;
                }
            }
        }

        /// Which type of cost centres may be combined with this account.
        public String ValidCcCombo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValidCcCombo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValidCcCombo)
                            || (((String)(this[this.myTable.ColumnValidCcCombo])) != value)))
                {
                    this[this.myTable.ColumnValidCcCombo] = value;
                }
            }
        }

        ///
        public Boolean ForeignCurrencyFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnForeignCurrencyFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnForeignCurrencyFlag)
                            || (((Boolean)(this[this.myTable.ColumnForeignCurrencyFlag])) != value)))
                {
                    this[this.myTable.ColumnForeignCurrencyFlag] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String ForeignCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnForeignCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnForeignCurrencyCode)
                            || (((String)(this[this.myTable.ColumnForeignCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnForeignCurrencyCode] = value;
                }
            }
        }

        /// Link to banking details to use for this account - only really used if this account is a bank account
        public Int32 BankingDetailsKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBankingDetailsKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBankingDetailsKey)
                            || (((Int32)(this[this.myTable.ColumnBankingDetailsKey])) != value)))
                {
                    this[this.myTable.ColumnBankingDetailsKey] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnAccountType);
            this.SetNull(this.myTable.ColumnAccountCodeLongDesc);
            this.SetNull(this.myTable.ColumnAccountCodeShortDesc);
            this.SetNull(this.myTable.ColumnEngAccountCodeShortDesc);
            this.SetNull(this.myTable.ColumnEngAccountCodeLongDesc);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnAccountActiveFlag.Ordinal] = true;
            this[this.myTable.ColumnAnalysisAttributeFlag.Ordinal] = false;
            this[this.myTable.ColumnStandardAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnConsolidationAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnIntercompanyAccountFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
            this[this.myTable.ColumnPostingStatus.Ordinal] = true;
            this[this.myTable.ColumnSystemAccountFlag.Ordinal] = false;
            this[this.myTable.ColumnBudgetControlFlag.Ordinal] = false;
            this[this.myTable.ColumnValidCcCombo.Ordinal] = "All";
            this[this.myTable.ColumnForeignCurrencyFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnForeignCurrencyCode);
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsAccountTypeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountType);
        }

        /// assign NULL value
        public void SetAccountTypeNull()
        {
            this.SetNull(this.myTable.ColumnAccountType);
        }

        /// test for NULL value
        public bool IsAccountCodeLongDescNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCodeLongDesc);
        }

        /// assign NULL value
        public void SetAccountCodeLongDescNull()
        {
            this.SetNull(this.myTable.ColumnAccountCodeLongDesc);
        }

        /// test for NULL value
        public bool IsAccountCodeShortDescNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCodeShortDesc);
        }

        /// assign NULL value
        public void SetAccountCodeShortDescNull()
        {
            this.SetNull(this.myTable.ColumnAccountCodeShortDesc);
        }

        /// test for NULL value
        public bool IsEngAccountCodeShortDescNull()
        {
            return this.IsNull(this.myTable.ColumnEngAccountCodeShortDesc);
        }

        /// assign NULL value
        public void SetEngAccountCodeShortDescNull()
        {
            this.SetNull(this.myTable.ColumnEngAccountCodeShortDesc);
        }

        /// test for NULL value
        public bool IsEngAccountCodeLongDescNull()
        {
            return this.IsNull(this.myTable.ColumnEngAccountCodeLongDesc);
        }

        /// assign NULL value
        public void SetEngAccountCodeLongDescNull()
        {
            this.SetNull(this.myTable.ColumnEngAccountCodeLongDesc);
        }

        /// test for NULL value
        public bool IsDebitCreditIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// assign NULL value
        public void SetDebitCreditIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// test for NULL value
        public bool IsAccountActiveFlagNull()
        {
            return this.IsNull(this.myTable.ColumnAccountActiveFlag);
        }

        /// assign NULL value
        public void SetAccountActiveFlagNull()
        {
            this.SetNull(this.myTable.ColumnAccountActiveFlag);
        }

        /// test for NULL value
        public bool IsAnalysisAttributeFlagNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeFlag);
        }

        /// assign NULL value
        public void SetAnalysisAttributeFlagNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeFlag);
        }

        /// test for NULL value
        public bool IsStandardAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnStandardAccountFlag);
        }

        /// assign NULL value
        public void SetStandardAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnStandardAccountFlag);
        }

        /// test for NULL value
        public bool IsConsolidationAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnConsolidationAccountFlag);
        }

        /// assign NULL value
        public void SetConsolidationAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnConsolidationAccountFlag);
        }

        /// test for NULL value
        public bool IsIntercompanyAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnIntercompanyAccountFlag);
        }

        /// assign NULL value
        public void SetIntercompanyAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnIntercompanyAccountFlag);
        }

        /// test for NULL value
        public bool IsBudgetTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetTypeCode);
        }

        /// assign NULL value
        public void SetBudgetTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
        }

        /// test for NULL value
        public bool IsPostingStatusNull()
        {
            return this.IsNull(this.myTable.ColumnPostingStatus);
        }

        /// assign NULL value
        public void SetPostingStatusNull()
        {
            this.SetNull(this.myTable.ColumnPostingStatus);
        }

        /// test for NULL value
        public bool IsSystemAccountFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSystemAccountFlag);
        }

        /// assign NULL value
        public void SetSystemAccountFlagNull()
        {
            this.SetNull(this.myTable.ColumnSystemAccountFlag);
        }

        /// test for NULL value
        public bool IsBudgetControlFlagNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetControlFlag);
        }

        /// assign NULL value
        public void SetBudgetControlFlagNull()
        {
            this.SetNull(this.myTable.ColumnBudgetControlFlag);
        }

        /// test for NULL value
        public bool IsValidCcComboNull()
        {
            return this.IsNull(this.myTable.ColumnValidCcCombo);
        }

        /// assign NULL value
        public void SetValidCcComboNull()
        {
            this.SetNull(this.myTable.ColumnValidCcCombo);
        }

        /// test for NULL value
        public bool IsForeignCurrencyFlagNull()
        {
            return this.IsNull(this.myTable.ColumnForeignCurrencyFlag);
        }

        /// assign NULL value
        public void SetForeignCurrencyFlagNull()
        {
            this.SetNull(this.myTable.ColumnForeignCurrencyFlag);
        }

        /// test for NULL value
        public bool IsForeignCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnForeignCurrencyCode);
        }

        /// assign NULL value
        public void SetForeignCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnForeignCurrencyCode);
        }

        /// test for NULL value
        public bool IsBankingDetailsKeyNull()
        {
            return this.IsNull(this.myTable.ColumnBankingDetailsKey);
        }

        /// assign NULL value
        public void SetBankingDetailsKeyNull()
        {
            this.SetNull(this.myTable.ColumnBankingDetailsKey);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Extra properties that might want to be saved with an account can be defined in this table.
    [Serializable()]
    public class AAccountPropertyCodeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 112;
        /// used for generic TTypedDataTable functions
        public static short ColumnPropertyCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 6;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAccountPropertyCode", "a_account_property_code",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PropertyCode", "a_property_code_c", "a_property_code_c", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(1, "Description", "a_description_c", "a_description_c", OdbcType.VarChar, 400, false),
                    new TTypedColumnInfo(2, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(3, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(4, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public AAccountPropertyCodeTable() :
                base("AAccountPropertyCode")
        {
        }

        /// constructor
        public AAccountPropertyCodeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAccountPropertyCodeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Code for the property
        public DataColumn ColumnPropertyCode;
        /// Description of this property
        public DataColumn ColumnDescription;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_property_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPropertyCode = this.Columns["a_property_code_c"];
            this.ColumnDescription = this.Columns["a_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnPropertyCode};
        }

        /// Access a typed row by index
        public AAccountPropertyCodeRow this[int i]
        {
            get
            {
                return ((AAccountPropertyCodeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAccountPropertyCodeRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountPropertyCodeRow ret = ((AAccountPropertyCodeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAccountPropertyCodeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountPropertyCodeRow(builder);
        }

        /// get typed set of changes
        public AAccountPropertyCodeTable GetChangesTyped()
        {
            return ((AAccountPropertyCodeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAccountPropertyCode";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_account_property_code";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPropertyCodeDBName()
        {
            return "a_property_code_c";
        }

        /// get character length for column
        public static short GetPropertyCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "a_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 400;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Extra properties that might want to be saved with an account can be defined in this table.
    [Serializable()]
    public class AAccountPropertyCodeRow : System.Data.DataRow
    {
        private AAccountPropertyCodeTable myTable;

        /// Constructor
        public AAccountPropertyCodeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAccountPropertyCodeTable)(this.Table));
        }

        /// Code for the property
        public String PropertyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPropertyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPropertyCode)
                            || (((String)(this[this.myTable.ColumnPropertyCode])) != value)))
                {
                    this[this.myTable.ColumnPropertyCode] = value;
                }
            }
        }

        /// Description of this property
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnPropertyCode);
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPropertyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPropertyCode);
        }

        /// assign NULL value
        public void SetPropertyCodeNull()
        {
            this.SetNull(this.myTable.ColumnPropertyCode);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Properties and optional values for an account can be saved in this table.
    [Serializable()]
    public class AAccountPropertyTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 113;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPropertyCodeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnPropertyValueId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAccountProperty", "a_account_property",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "a_ledger_number_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "PropertyCode", "a_property_code_c", "a_property_code_c", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(3, "PropertyValue", "a_property_value_c", "a_property_value_c", OdbcType.VarChar, 200, true),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3
                }));
            return true;
        }

        /// constructor
        public AAccountPropertyTable() :
                base("AAccountProperty")
        {
        }

        /// constructor
        public AAccountPropertyTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAccountPropertyTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnLedgerNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// Code for the property
        public DataColumn ColumnPropertyCode;
        /// value of this property
        public DataColumn ColumnPropertyValue;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_property_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_property_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnPropertyCode = this.Columns["a_property_code_c"];
            this.ColumnPropertyValue = this.Columns["a_property_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnLedgerNumber,ColumnAccountCode,ColumnPropertyCode,ColumnPropertyValue};
        }

        /// Access a typed row by index
        public AAccountPropertyRow this[int i]
        {
            get
            {
                return ((AAccountPropertyRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAccountPropertyRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountPropertyRow ret = ((AAccountPropertyRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAccountPropertyRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountPropertyRow(builder);
        }

        /// get typed set of changes
        public AAccountPropertyTable GetChangesTyped()
        {
            return ((AAccountPropertyTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAccountProperty";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_account_property";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetPropertyCodeDBName()
        {
            return "a_property_code_c";
        }

        /// get character length for column
        public static short GetPropertyCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetPropertyValueDBName()
        {
            return "a_property_value_c";
        }

        /// get character length for column
        public static short GetPropertyValueLength()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Properties and optional values for an account can be saved in this table.
    [Serializable()]
    public class AAccountPropertyRow : System.Data.DataRow
    {
        private AAccountPropertyTable myTable;

        /// Constructor
        public AAccountPropertyRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAccountPropertyTable)(this.Table));
        }

        ///
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Code for the property
        public String PropertyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPropertyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPropertyCode)
                            || (((String)(this[this.myTable.ColumnPropertyCode])) != value)))
                {
                    this[this.myTable.ColumnPropertyCode] = value;
                }
            }
        }

        /// value of this property
        public String PropertyValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPropertyValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPropertyValue)
                            || (((String)(this[this.myTable.ColumnPropertyValue])) != value)))
                {
                    this[this.myTable.ColumnPropertyValue] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnPropertyCode);
            this.SetNull(this.myTable.ColumnPropertyValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsPropertyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPropertyCode);
        }

        /// assign NULL value
        public void SetPropertyCodeNull()
        {
            this.SetNull(this.myTable.ColumnPropertyCode);
        }

        /// test for NULL value
        public bool IsPropertyValueNull()
        {
            return this.IsNull(this.myTable.ColumnPropertyValue);
        }

        /// assign NULL value
        public void SetPropertyValueNull()
        {
            this.SetNull(this.myTable.ColumnPropertyValue);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// hierarchy of accounts; what is the root account of the hierarchy
    [Serializable()]
    public class AAccountHierarchyTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 114;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountHierarchyCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRootAccountCodeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 7;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAccountHierarchy", "a_account_hierarchy",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "AccountHierarchyCode", "a_account_hierarchy_code_c", "Hierarchy", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "RootAccountCode", "a_root_account_code_c", "Root Account", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(3, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(5, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AAccountHierarchyTable() :
                base("AAccountHierarchy")
        {
        }

        /// constructor
        public AAccountHierarchyTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAccountHierarchyTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnLedgerNumber;
        /// The code for the hierarchy
        public DataColumn ColumnAccountHierarchyCode;
        /// The root account of the hierarchy, which is at the top of the hierarchy
        public DataColumn ColumnRootAccountCode;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_hierarchy_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_root_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountHierarchyCode = this.Columns["a_account_hierarchy_code_c"];
            this.ColumnRootAccountCode = this.Columns["a_root_account_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnAccountHierarchyCode};
        }

        /// Access a typed row by index
        public AAccountHierarchyRow this[int i]
        {
            get
            {
                return ((AAccountHierarchyRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAccountHierarchyRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountHierarchyRow ret = ((AAccountHierarchyRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAccountHierarchyRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountHierarchyRow(builder);
        }

        /// get typed set of changes
        public AAccountHierarchyTable GetChangesTyped()
        {
            return ((AAccountHierarchyTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAccountHierarchy";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_account_hierarchy";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountHierarchyCodeDBName()
        {
            return "a_account_hierarchy_code_c";
        }

        /// get character length for column
        public static short GetAccountHierarchyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetRootAccountCodeDBName()
        {
            return "a_root_account_code_c";
        }

        /// get character length for column
        public static short GetRootAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// hierarchy of accounts; what is the root account of the hierarchy
    [Serializable()]
    public class AAccountHierarchyRow : System.Data.DataRow
    {
        private AAccountHierarchyTable myTable;

        /// Constructor
        public AAccountHierarchyRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAccountHierarchyTable)(this.Table));
        }

        ///
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The code for the hierarchy
        public String AccountHierarchyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountHierarchyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountHierarchyCode)
                            || (((String)(this[this.myTable.ColumnAccountHierarchyCode])) != value)))
                {
                    this[this.myTable.ColumnAccountHierarchyCode] = value;
                }
            }
        }

        /// The root account of the hierarchy, which is at the top of the hierarchy
        public String RootAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRootAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRootAccountCode)
                            || (((String)(this[this.myTable.ColumnRootAccountCode])) != value)))
                {
                    this[this.myTable.ColumnRootAccountCode] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
            this.SetNull(this.myTable.ColumnAccountHierarchyCode);
            this.SetNull(this.myTable.ColumnRootAccountCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsAccountHierarchyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountHierarchyCode);
        }

        /// assign NULL value
        public void SetAccountHierarchyCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountHierarchyCode);
        }

        /// test for NULL value
        public bool IsRootAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnRootAccountCode);
        }

        /// assign NULL value
        public void SetRootAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnRootAccountCode);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// the elements of the hierarchy of accounts; which account is reporting to which other account
    [Serializable()]
    public class AAccountHierarchyDetailTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 115;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountHierarchyCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnReportingAccountCodeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeToReportToId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnReportOrderId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAccountHierarchyDetail", "a_account_hierarchy_detail",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "AccountHierarchyCode", "a_account_hierarchy_code_c", "Hierarchy", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "ReportingAccountCode", "a_reporting_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(3, "AccountCodeToReportTo", "a_account_code_to_report_to_c", "Account Code to Report to", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(4, "ReportOrder", "a_report_order_i", "Report Order", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public AAccountHierarchyDetailTable() :
                base("AAccountHierarchyDetail")
        {
        }

        /// constructor
        public AAccountHierarchyDetailTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAccountHierarchyDetailTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnLedgerNumber;
        /// The code for the hierarchy
        public DataColumn ColumnAccountHierarchyCode;
        /// The reporting account
        public DataColumn ColumnReportingAccountCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCodeToReportTo;
        /// Order to display the account or heading on the Balance Sheet &amp; Income Statement report.
        public DataColumn ColumnReportOrder;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_hierarchy_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_reporting_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_to_report_to_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_report_order_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountHierarchyCode = this.Columns["a_account_hierarchy_code_c"];
            this.ColumnReportingAccountCode = this.Columns["a_reporting_account_code_c"];
            this.ColumnAccountCodeToReportTo = this.Columns["a_account_code_to_report_to_c"];
            this.ColumnReportOrder = this.Columns["a_report_order_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnAccountHierarchyCode,ColumnReportingAccountCode};
        }

        /// Access a typed row by index
        public AAccountHierarchyDetailRow this[int i]
        {
            get
            {
                return ((AAccountHierarchyDetailRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAccountHierarchyDetailRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountHierarchyDetailRow ret = ((AAccountHierarchyDetailRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAccountHierarchyDetailRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountHierarchyDetailRow(builder);
        }

        /// get typed set of changes
        public AAccountHierarchyDetailTable GetChangesTyped()
        {
            return ((AAccountHierarchyDetailTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAccountHierarchyDetail";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_account_hierarchy_detail";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountHierarchyCodeDBName()
        {
            return "a_account_hierarchy_code_c";
        }

        /// get character length for column
        public static short GetAccountHierarchyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetReportingAccountCodeDBName()
        {
            return "a_reporting_account_code_c";
        }

        /// get character length for column
        public static short GetReportingAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeToReportToDBName()
        {
            return "a_account_code_to_report_to_c";
        }

        /// get character length for column
        public static short GetAccountCodeToReportToLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetReportOrderDBName()
        {
            return "a_report_order_i";
        }

        /// get character length for column
        public static short GetReportOrderLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// the elements of the hierarchy of accounts; which account is reporting to which other account
    [Serializable()]
    public class AAccountHierarchyDetailRow : System.Data.DataRow
    {
        private AAccountHierarchyDetailTable myTable;

        /// Constructor
        public AAccountHierarchyDetailRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAccountHierarchyDetailTable)(this.Table));
        }

        ///
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The code for the hierarchy
        public String AccountHierarchyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountHierarchyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountHierarchyCode)
                            || (((String)(this[this.myTable.ColumnAccountHierarchyCode])) != value)))
                {
                    this[this.myTable.ColumnAccountHierarchyCode] = value;
                }
            }
        }

        /// The reporting account
        public String ReportingAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportingAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportingAccountCode)
                            || (((String)(this[this.myTable.ColumnReportingAccountCode])) != value)))
                {
                    this[this.myTable.ColumnReportingAccountCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCodeToReportTo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCodeToReportTo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCodeToReportTo)
                            || (((String)(this[this.myTable.ColumnAccountCodeToReportTo])) != value)))
                {
                    this[this.myTable.ColumnAccountCodeToReportTo] = value;
                }
            }
        }

        /// Order to display the account or heading on the Balance Sheet &amp; Income Statement report.
        public Int32 ReportOrder
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReportOrder.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReportOrder)
                            || (((Int32)(this[this.myTable.ColumnReportOrder])) != value)))
                {
                    this[this.myTable.ColumnReportOrder] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
            this.SetNull(this.myTable.ColumnAccountHierarchyCode);
            this.SetNull(this.myTable.ColumnReportingAccountCode);
            this.SetNull(this.myTable.ColumnAccountCodeToReportTo);
            this.SetNull(this.myTable.ColumnReportOrder);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsAccountHierarchyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountHierarchyCode);
        }

        /// assign NULL value
        public void SetAccountHierarchyCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountHierarchyCode);
        }

        /// test for NULL value
        public bool IsReportingAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnReportingAccountCode);
        }

        /// assign NULL value
        public void SetReportingAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnReportingAccountCode);
        }

        /// test for NULL value
        public bool IsAccountCodeToReportToNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCodeToReportTo);
        }

        /// assign NULL value
        public void SetAccountCodeToReportToNull()
        {
            this.SetNull(this.myTable.ColumnAccountCodeToReportTo);
        }

        /// test for NULL value
        public bool IsReportOrderNull()
        {
            return this.IsNull(this.myTable.ColumnReportOrder);
        }

        /// assign NULL value
        public void SetReportOrderNull()
        {
            this.SetNull(this.myTable.ColumnReportOrder);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Stores standard and user-defined cost centre types.  For example: Foreign, Local.
    [Serializable()]
    public class ACostCentreTypesTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 116;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreTypeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnCcDescriptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ACostCentreTypes", "a_cost_centre_types",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "CostCentreType", "a_cost_centre_type_c", "Type", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "CcDescription", "a_cc_description_c", "Description", OdbcType.VarChar, 60, false),
                    new TTypedColumnInfo(3, "Deletable", "a_deletable_l", "Deletable", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ACostCentreTypesTable() :
                base("ACostCentreTypes")
        {
        }

        /// constructor
        public ACostCentreTypesTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ACostCentreTypesTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// Type of cost centre (Defaults: Foreign or Local)
        public DataColumn ColumnCostCentreType;
        /// The description of the cost centre type
        public DataColumn ColumnCcDescription;
        /// Can this cost centre type be deleted by the user?
        public DataColumn ColumnDeletable;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cc_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnCostCentreType = this.Columns["a_cost_centre_type_c"];
            this.ColumnCcDescription = this.Columns["a_cc_description_c"];
            this.ColumnDeletable = this.Columns["a_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnCostCentreType};
        }

        /// Access a typed row by index
        public ACostCentreTypesRow this[int i]
        {
            get
            {
                return ((ACostCentreTypesRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ACostCentreTypesRow NewRowTyped(bool AWithDefaultValues)
        {
            ACostCentreTypesRow ret = ((ACostCentreTypesRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ACostCentreTypesRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ACostCentreTypesRow(builder);
        }

        /// get typed set of changes
        public ACostCentreTypesTable GetChangesTyped()
        {
            return ((ACostCentreTypesTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ACostCentreTypes";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_cost_centre_types";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreTypeDBName()
        {
            return "a_cost_centre_type_c";
        }

        /// get character length for column
        public static short GetCostCentreTypeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCcDescriptionDBName()
        {
            return "a_cc_description_c";
        }

        /// get character length for column
        public static short GetCcDescriptionLength()
        {
            return 60;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "a_deletable_l";
        }

        /// get character length for column
        public static short GetDeletableLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Stores standard and user-defined cost centre types.  For example: Foreign, Local.
    [Serializable()]
    public class ACostCentreTypesRow : System.Data.DataRow
    {
        private ACostCentreTypesTable myTable;

        /// Constructor
        public ACostCentreTypesRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ACostCentreTypesTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// Type of cost centre (Defaults: Foreign or Local)
        public String CostCentreType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreType)
                            || (((String)(this[this.myTable.ColumnCostCentreType])) != value)))
                {
                    this[this.myTable.ColumnCostCentreType] = value;
                }
            }
        }

        /// The description of the cost centre type
        public String CcDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCcDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCcDescription)
                            || (((String)(this[this.myTable.ColumnCcDescription])) != value)))
                {
                    this[this.myTable.ColumnCcDescription] = value;
                }
            }
        }

        /// Can this cost centre type be deleted by the user?
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable)
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnCostCentreType.Ordinal] = "Local";
            this.SetNull(this.myTable.ColumnCcDescription);
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsCostCentreTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreType);
        }

        /// assign NULL value
        public void SetCostCentreTypeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreType);
        }

        /// test for NULL value
        public bool IsCcDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnCcDescription);
        }

        /// assign NULL value
        public void SetCcDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnCcDescription);
        }

        /// test for NULL value
        public bool IsDeletableNull()
        {
            return this.IsNull(this.myTable.ColumnDeletable);
        }

        /// assign NULL value
        public void SetDeletableNull()
        {
            this.SetNull(this.myTable.ColumnDeletable);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Master cost centre records which contain details of each cost centre and their relationship to each other; determines the cost centre structure.
    [Serializable()]
    public class ACostCentreTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 117;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreToReportToId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreNameId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnPostingCostCentreFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreActiveFlagId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnProjectStatusId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnProjectConstraintDateId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnProjectConstraintAmountId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnSystemCostCentreFlagId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreTypeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnKeyFocusAreaId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 16;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ACostCentre", "a_cost_centre",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(2, "CostCentreToReportTo", "a_cost_centre_to_report_to_c", "Cost Centre to Report To", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(3, "CostCentreName", "a_cost_centre_name_c", "Cost Centre Name", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(4, "PostingCostCentreFlag", "a_posting_cost_centre_flag_l", "Posting/Summary", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(5, "CostCentreActiveFlag", "a_cost_centre_active_flag_l", "Active Cost Centre", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "ProjectStatus", "a_project_status_l", "Project Status", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(7, "ProjectConstraintDate", "a_project_constraint_date_d", "Project Constraint Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ProjectConstraintAmount", "a_project_constraint_amount_n", "Project Constraint Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(9, "SystemCostCentreFlag", "a_system_cost_centre_flag_l", "System Cost Centre", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(10, "CostCentreType", "a_cost_centre_type_c", "Type", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(11, "KeyFocusArea", "a_key_focus_area_c", "Key Focus Area", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(12, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ACostCentreTable() :
                base("ACostCentre")
        {
        }

        /// constructor
        public ACostCentreTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ACostCentreTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The ledger in which the cost centre is used.
        public DataColumn ColumnLedgerNumber;
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        /// This identifies which cost centre the cost centre summarises to.
        public DataColumn ColumnCostCentreToReportTo;
        ///
        public DataColumn ColumnCostCentreName;
        ///
        public DataColumn ColumnPostingCostCentreFlag;
        ///
        public DataColumn ColumnCostCentreActiveFlag;
        ///
        public DataColumn ColumnProjectStatus;
        ///
        public DataColumn ColumnProjectConstraintDate;
        ///
        public DataColumn ColumnProjectConstraintAmount;
        ///
        public DataColumn ColumnSystemCostCentreFlag;
        /// Type of cost centre (Foreign or Local)
        public DataColumn ColumnCostCentreType;
        /// Key Focus Area that this cost centre relates to
        public DataColumn ColumnKeyFocusArea;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_to_report_to_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_posting_cost_centre_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_active_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_project_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_project_constraint_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_project_constraint_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_system_cost_centre_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_key_focus_area_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnCostCentreToReportTo = this.Columns["a_cost_centre_to_report_to_c"];
            this.ColumnCostCentreName = this.Columns["a_cost_centre_name_c"];
            this.ColumnPostingCostCentreFlag = this.Columns["a_posting_cost_centre_flag_l"];
            this.ColumnCostCentreActiveFlag = this.Columns["a_cost_centre_active_flag_l"];
            this.ColumnProjectStatus = this.Columns["a_project_status_l"];
            this.ColumnProjectConstraintDate = this.Columns["a_project_constraint_date_d"];
            this.ColumnProjectConstraintAmount = this.Columns["a_project_constraint_amount_n"];
            this.ColumnSystemCostCentreFlag = this.Columns["a_system_cost_centre_flag_l"];
            this.ColumnCostCentreType = this.Columns["a_cost_centre_type_c"];
            this.ColumnKeyFocusArea = this.Columns["a_key_focus_area_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnCostCentreCode};
        }

        /// Access a typed row by index
        public ACostCentreRow this[int i]
        {
            get
            {
                return ((ACostCentreRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ACostCentreRow NewRowTyped(bool AWithDefaultValues)
        {
            ACostCentreRow ret = ((ACostCentreRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ACostCentreRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ACostCentreRow(builder);
        }

        /// get typed set of changes
        public ACostCentreTable GetChangesTyped()
        {
            return ((ACostCentreTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ACostCentre";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_cost_centre";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreToReportToDBName()
        {
            return "a_cost_centre_to_report_to_c";
        }

        /// get character length for column
        public static short GetCostCentreToReportToLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreNameDBName()
        {
            return "a_cost_centre_name_c";
        }

        /// get character length for column
        public static short GetCostCentreNameLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetPostingCostCentreFlagDBName()
        {
            return "a_posting_cost_centre_flag_l";
        }

        /// get character length for column
        public static short GetPostingCostCentreFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreActiveFlagDBName()
        {
            return "a_cost_centre_active_flag_l";
        }

        /// get character length for column
        public static short GetCostCentreActiveFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetProjectStatusDBName()
        {
            return "a_project_status_l";
        }

        /// get character length for column
        public static short GetProjectStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetProjectConstraintDateDBName()
        {
            return "a_project_constraint_date_d";
        }

        /// get character length for column
        public static short GetProjectConstraintDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetProjectConstraintAmountDBName()
        {
            return "a_project_constraint_amount_n";
        }

        /// get character length for column
        public static short GetProjectConstraintAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetSystemCostCentreFlagDBName()
        {
            return "a_system_cost_centre_flag_l";
        }

        /// get character length for column
        public static short GetSystemCostCentreFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreTypeDBName()
        {
            return "a_cost_centre_type_c";
        }

        /// get character length for column
        public static short GetCostCentreTypeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetKeyFocusAreaDBName()
        {
            return "a_key_focus_area_c";
        }

        /// get character length for column
        public static short GetKeyFocusAreaLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Master cost centre records which contain details of each cost centre and their relationship to each other; determines the cost centre structure.
    [Serializable()]
    public class ACostCentreRow : System.Data.DataRow
    {
        private ACostCentreTable myTable;

        /// Constructor
        public ACostCentreRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ACostCentreTable)(this.Table));
        }

        /// The ledger in which the cost centre is used.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// This identifies which cost centre the cost centre summarises to.
        public String CostCentreToReportTo
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreToReportTo.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreToReportTo)
                            || (((String)(this[this.myTable.ColumnCostCentreToReportTo])) != value)))
                {
                    this[this.myTable.ColumnCostCentreToReportTo] = value;
                }
            }
        }

        ///
        public String CostCentreName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreName)
                            || (((String)(this[this.myTable.ColumnCostCentreName])) != value)))
                {
                    this[this.myTable.ColumnCostCentreName] = value;
                }
            }
        }

        ///
        public Boolean PostingCostCentreFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPostingCostCentreFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPostingCostCentreFlag)
                            || (((Boolean)(this[this.myTable.ColumnPostingCostCentreFlag])) != value)))
                {
                    this[this.myTable.ColumnPostingCostCentreFlag] = value;
                }
            }
        }

        ///
        public Boolean CostCentreActiveFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreActiveFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreActiveFlag)
                            || (((Boolean)(this[this.myTable.ColumnCostCentreActiveFlag])) != value)))
                {
                    this[this.myTable.ColumnCostCentreActiveFlag] = value;
                }
            }
        }

        ///
        public Boolean ProjectStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectStatus)
                            || (((Boolean)(this[this.myTable.ColumnProjectStatus])) != value)))
                {
                    this[this.myTable.ColumnProjectStatus] = value;
                }
            }
        }

        ///
        public System.DateTime? ProjectConstraintDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectConstraintDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectConstraintDate)
                            || (((System.DateTime?)(this[this.myTable.ColumnProjectConstraintDate])) != value)))
                {
                    this[this.myTable.ColumnProjectConstraintDate] = value;
                }
            }
        }

        ///
        public Decimal ProjectConstraintAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnProjectConstraintAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnProjectConstraintAmount)
                            || (((Decimal)(this[this.myTable.ColumnProjectConstraintAmount])) != value)))
                {
                    this[this.myTable.ColumnProjectConstraintAmount] = value;
                }
            }
        }

        ///
        public Boolean SystemCostCentreFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemCostCentreFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemCostCentreFlag)
                            || (((Boolean)(this[this.myTable.ColumnSystemCostCentreFlag])) != value)))
                {
                    this[this.myTable.ColumnSystemCostCentreFlag] = value;
                }
            }
        }

        /// Type of cost centre (Foreign or Local)
        public String CostCentreType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreType)
                            || (((String)(this[this.myTable.ColumnCostCentreType])) != value)))
                {
                    this[this.myTable.ColumnCostCentreType] = value;
                }
            }
        }

        /// Key Focus Area that this cost centre relates to
        public String KeyFocusArea
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyFocusArea.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyFocusArea)
                            || (((String)(this[this.myTable.ColumnKeyFocusArea])) != value)))
                {
                    this[this.myTable.ColumnKeyFocusArea] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnCostCentreToReportTo);
            this.SetNull(this.myTable.ColumnCostCentreName);
            this[this.myTable.ColumnPostingCostCentreFlag.Ordinal] = true;
            this[this.myTable.ColumnCostCentreActiveFlag.Ordinal] = true;
            this[this.myTable.ColumnProjectStatus.Ordinal] = false;
            this.SetNull(this.myTable.ColumnProjectConstraintDate);
            this[this.myTable.ColumnProjectConstraintAmount.Ordinal] = 0;
            this[this.myTable.ColumnSystemCostCentreFlag.Ordinal] = false;
            this[this.myTable.ColumnCostCentreType.Ordinal] = "Local";
            this.SetNull(this.myTable.ColumnKeyFocusArea);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsCostCentreToReportToNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreToReportTo);
        }

        /// assign NULL value
        public void SetCostCentreToReportToNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreToReportTo);
        }

        /// test for NULL value
        public bool IsCostCentreNameNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreName);
        }

        /// assign NULL value
        public void SetCostCentreNameNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreName);
        }

        /// test for NULL value
        public bool IsPostingCostCentreFlagNull()
        {
            return this.IsNull(this.myTable.ColumnPostingCostCentreFlag);
        }

        /// assign NULL value
        public void SetPostingCostCentreFlagNull()
        {
            this.SetNull(this.myTable.ColumnPostingCostCentreFlag);
        }

        /// test for NULL value
        public bool IsCostCentreActiveFlagNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreActiveFlag);
        }

        /// assign NULL value
        public void SetCostCentreActiveFlagNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreActiveFlag);
        }

        /// test for NULL value
        public bool IsProjectStatusNull()
        {
            return this.IsNull(this.myTable.ColumnProjectStatus);
        }

        /// assign NULL value
        public void SetProjectStatusNull()
        {
            this.SetNull(this.myTable.ColumnProjectStatus);
        }

        /// test for NULL value
        public bool IsProjectConstraintDateNull()
        {
            return this.IsNull(this.myTable.ColumnProjectConstraintDate);
        }

        /// assign NULL value
        public void SetProjectConstraintDateNull()
        {
            this.SetNull(this.myTable.ColumnProjectConstraintDate);
        }

        /// test for NULL value
        public bool IsProjectConstraintAmountNull()
        {
            return this.IsNull(this.myTable.ColumnProjectConstraintAmount);
        }

        /// assign NULL value
        public void SetProjectConstraintAmountNull()
        {
            this.SetNull(this.myTable.ColumnProjectConstraintAmount);
        }

        /// test for NULL value
        public bool IsSystemCostCentreFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSystemCostCentreFlag);
        }

        /// assign NULL value
        public void SetSystemCostCentreFlagNull()
        {
            this.SetNull(this.myTable.ColumnSystemCostCentreFlag);
        }

        /// test for NULL value
        public bool IsCostCentreTypeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreType);
        }

        /// assign NULL value
        public void SetCostCentreTypeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreType);
        }

        /// test for NULL value
        public bool IsKeyFocusAreaNull()
        {
            return this.IsNull(this.myTable.ColumnKeyFocusArea);
        }

        /// assign NULL value
        public void SetKeyFocusAreaNull()
        {
            this.SetNull(this.myTable.ColumnKeyFocusArea);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// List of foreign ledgers (eg, other fields) which the local ledger may send transctions to.
    [Serializable()]
    public class AValidLedgerNumberTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 118;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnIltProcessingCentreId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AValidLedgerNumber", "a_valid_ledger_number",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "PartnerKey", "p_partner_key_n", "Partner Key", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(1, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "IltProcessingCentre", "a_ilt_processing_centre_n", "ILT processing Centre", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(3, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    1, 0
                }));
            return true;
        }

        /// constructor
        public AValidLedgerNumberTable() :
                base("AValidLedgerNumber")
        {
        }

        /// constructor
        public AValidLedgerNumberTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AValidLedgerNumberTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        /// This is used as a key field in most of the accounting system files .It is created from the first 4 digits of a partner key of type ""ledger"".
        public DataColumn ColumnLedgerNumber;
        /// The ledger through which inter ledger transactions are routed for processing.
        public DataColumn ColumnIltProcessingCentre;
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ilt_processing_centre_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnIltProcessingCentre = this.Columns["a_ilt_processing_centre_n"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnPartnerKey};
        }

        /// Access a typed row by index
        public AValidLedgerNumberRow this[int i]
        {
            get
            {
                return ((AValidLedgerNumberRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AValidLedgerNumberRow NewRowTyped(bool AWithDefaultValues)
        {
            AValidLedgerNumberRow ret = ((AValidLedgerNumberRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AValidLedgerNumberRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AValidLedgerNumberRow(builder);
        }

        /// get typed set of changes
        public AValidLedgerNumberTable GetChangesTyped()
        {
            return ((AValidLedgerNumberTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AValidLedgerNumber";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_valid_ledger_number";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIltProcessingCentreDBName()
        {
            return "a_ilt_processing_centre_n";
        }

        /// get character length for column
        public static short GetIltProcessingCentreLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// List of foreign ledgers (eg, other fields) which the local ledger may send transctions to.
    [Serializable()]
    public class AValidLedgerNumberRow : System.Data.DataRow
    {
        private AValidLedgerNumberTable myTable;

        /// Constructor
        public AValidLedgerNumberRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AValidLedgerNumberTable)(this.Table));
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        /// This is used as a key field in most of the accounting system files .It is created from the first 4 digits of a partner key of type ""ledger"".
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The ledger through which inter ledger transactions are routed for processing.
        public Int64 IltProcessingCentre
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIltProcessingCentre.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIltProcessingCentre)
                            || (((Int64)(this[this.myTable.ColumnIltProcessingCentre])) != value)))
                {
                    this[this.myTable.ColumnIltProcessingCentre] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnIltProcessingCentre.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsIltProcessingCentreNull()
        {
            return this.IsNull(this.myTable.ColumnIltProcessingCentre);
        }

        /// assign NULL value
        public void SetIltProcessingCentreNull()
        {
            this.SetNull(this.myTable.ColumnIltProcessingCentre);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This defines a certain revision of a budget in a ledger in a year.
    [Serializable()]
    public class ABudgetRevisionTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 119;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRevisionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ABudgetRevision", "a_budget_revision",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "Year", "a_year_i", "a_year_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "Revision", "a_revision_i", "a_revision_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "Description", "a_description_c", "Comment", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public ABudgetRevisionTable() :
                base("ABudgetRevision")
        {
        }

        /// constructor
        public ABudgetRevisionTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ABudgetRevisionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// The year that this budget applies to
        public DataColumn ColumnYear;
        /// A budget can have several revisions per year
        public DataColumn ColumnRevision;
        /// A description of this revision of the budget
        public DataColumn ColumnDescription;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_revision_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnYear = this.Columns["a_year_i"];
            this.ColumnRevision = this.Columns["a_revision_i"];
            this.ColumnDescription = this.Columns["a_description_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnYear,ColumnRevision};
        }

        /// Access a typed row by index
        public ABudgetRevisionRow this[int i]
        {
            get
            {
                return ((ABudgetRevisionRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ABudgetRevisionRow NewRowTyped(bool AWithDefaultValues)
        {
            ABudgetRevisionRow ret = ((ABudgetRevisionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ABudgetRevisionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABudgetRevisionRow(builder);
        }

        /// get typed set of changes
        public ABudgetRevisionTable GetChangesTyped()
        {
            return ((ABudgetRevisionTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ABudgetRevision";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_budget_revision";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearDBName()
        {
            return "a_year_i";
        }

        /// get character length for column
        public static short GetYearLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRevisionDBName()
        {
            return "a_revision_i";
        }

        /// get character length for column
        public static short GetRevisionLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "a_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This defines a certain revision of a budget in a ledger in a year.
    [Serializable()]
    public class ABudgetRevisionRow : System.Data.DataRow
    {
        private ABudgetRevisionTable myTable;

        /// Constructor
        public ABudgetRevisionRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ABudgetRevisionTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The year that this budget applies to
        public Int32 Year
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYear)
                            || (((Int32)(this[this.myTable.ColumnYear])) != value)))
                {
                    this[this.myTable.ColumnYear] = value;
                }
            }
        }

        /// A budget can have several revisions per year
        public Int32 Revision
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRevision.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRevision)
                            || (((Int32)(this[this.myTable.ColumnRevision])) != value)))
                {
                    this[this.myTable.ColumnRevision] = value;
                }
            }
        }

        /// A description of this revision of the budget
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnYear);
            this[this.myTable.ColumnRevision.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsYearNull()
        {
            return this.IsNull(this.myTable.ColumnYear);
        }

        /// assign NULL value
        public void SetYearNull()
        {
            this.SetNull(this.myTable.ColumnYear);
        }

        /// test for NULL value
        public bool IsRevisionNull()
        {
            return this.IsNull(this.myTable.ColumnRevision);
        }

        /// assign NULL value
        public void SetRevisionNull()
        {
            this.SetNull(this.myTable.ColumnRevision);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Budget information for cost centre-account combinations.
    [Serializable()]
    public class ABudgetTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 120;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetSequenceId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnRevisionId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetTypeCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetStatusId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCommentId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 13;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ABudget", "a_budget",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "BudgetSequence", "a_budget_sequence_i", "a_budget_sequence_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "Year", "a_year_i", "a_year_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "Revision", "a_revision_i", "a_revision_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(5, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(6, "BudgetTypeCode", "a_budget_type_code_c", "Budget Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(7, "BudgetStatus", "a_budget_status_l", "Budget Posted Status", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(8, "Comment", "a_comment_c", "Comment", OdbcType.VarChar, 200, false),
                    new TTypedColumnInfo(9, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }, new int[] {
                    1, 2, 3, 4, 5
                }));
            return true;
        }

        /// constructor
        public ABudgetTable() :
                base("ABudget")
        {
        }

        /// constructor
        public ABudgetTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ABudgetTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnBudgetSequence;
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// The year that this budget applies to
        public DataColumn ColumnYear;
        /// A budget can have several revisions per year
        public DataColumn ColumnRevision;
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// See a_budget_type table.  Indicates the method used for creating the budget.
        public DataColumn ColumnBudgetTypeCode;
        /// Has the budget been ""posted"" to the general ledger master
        /// and account files.
        public DataColumn ColumnBudgetStatus;
        /// A comment for this specific budget item and revision
        public DataColumn ColumnComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_budget_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_revision_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBudgetSequence = this.Columns["a_budget_sequence_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnYear = this.Columns["a_year_i"];
            this.ColumnRevision = this.Columns["a_revision_i"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnBudgetTypeCode = this.Columns["a_budget_type_code_c"];
            this.ColumnBudgetStatus = this.Columns["a_budget_status_l"];
            this.ColumnComment = this.Columns["a_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnBudgetSequence};
        }

        /// Access a typed row by index
        public ABudgetRow this[int i]
        {
            get
            {
                return ((ABudgetRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ABudgetRow NewRowTyped(bool AWithDefaultValues)
        {
            ABudgetRow ret = ((ABudgetRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ABudgetRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABudgetRow(builder);
        }

        /// get typed set of changes
        public ABudgetTable GetChangesTyped()
        {
            return ((ABudgetTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ABudget";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_budget";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetSequenceDBName()
        {
            return "a_budget_sequence_i";
        }

        /// get character length for column
        public static short GetBudgetSequenceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearDBName()
        {
            return "a_year_i";
        }

        /// get character length for column
        public static short GetYearLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRevisionDBName()
        {
            return "a_revision_i";
        }

        /// get character length for column
        public static short GetRevisionLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetTypeCodeDBName()
        {
            return "a_budget_type_code_c";
        }

        /// get character length for column
        public static short GetBudgetTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetStatusDBName()
        {
            return "a_budget_status_l";
        }

        /// get character length for column
        public static short GetBudgetStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCommentDBName()
        {
            return "a_comment_c";
        }

        /// get character length for column
        public static short GetCommentLength()
        {
            return 200;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Budget information for cost centre-account combinations.
    [Serializable()]
    public class ABudgetRow : System.Data.DataRow
    {
        private ABudgetTable myTable;

        /// Constructor
        public ABudgetRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ABudgetTable)(this.Table));
        }

        ///
        public Int32 BudgetSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetSequence)
                            || (((Int32)(this[this.myTable.ColumnBudgetSequence])) != value)))
                {
                    this[this.myTable.ColumnBudgetSequence] = value;
                }
            }
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The year that this budget applies to
        public Int32 Year
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYear)
                            || (((Int32)(this[this.myTable.ColumnYear])) != value)))
                {
                    this[this.myTable.ColumnYear] = value;
                }
            }
        }

        /// A budget can have several revisions per year
        public Int32 Revision
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRevision.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRevision)
                            || (((Int32)(this[this.myTable.ColumnRevision])) != value)))
                {
                    this[this.myTable.ColumnRevision] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// See a_budget_type table.  Indicates the method used for creating the budget.
        public String BudgetTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetTypeCode)
                            || (((String)(this[this.myTable.ColumnBudgetTypeCode])) != value)))
                {
                    this[this.myTable.ColumnBudgetTypeCode] = value;
                }
            }
        }

        /// Has the budget been ""posted"" to the general ledger master
        /// and account files.
        public Boolean BudgetStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetStatus)
                            || (((Boolean)(this[this.myTable.ColumnBudgetStatus])) != value)))
                {
                    this[this.myTable.ColumnBudgetStatus] = value;
                }
            }
        }

        /// A comment for this specific budget item and revision
        public String Comment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnComment)
                            || (((String)(this[this.myTable.ColumnComment])) != value)))
                {
                    this[this.myTable.ColumnComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBudgetSequence);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnYear.Ordinal] = 0;
            this[this.myTable.ColumnRevision.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
            this[this.myTable.ColumnBudgetStatus.Ordinal] = true;
            this.SetNull(this.myTable.ColumnComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsBudgetSequenceNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetSequence);
        }

        /// assign NULL value
        public void SetBudgetSequenceNull()
        {
            this.SetNull(this.myTable.ColumnBudgetSequence);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsYearNull()
        {
            return this.IsNull(this.myTable.ColumnYear);
        }

        /// assign NULL value
        public void SetYearNull()
        {
            this.SetNull(this.myTable.ColumnYear);
        }

        /// test for NULL value
        public bool IsRevisionNull()
        {
            return this.IsNull(this.myTable.ColumnRevision);
        }

        /// assign NULL value
        public void SetRevisionNull()
        {
            this.SetNull(this.myTable.ColumnRevision);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsBudgetTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetTypeCode);
        }

        /// assign NULL value
        public void SetBudgetTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnBudgetTypeCode);
        }

        /// test for NULL value
        public bool IsBudgetStatusNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetStatus);
        }

        /// assign NULL value
        public void SetBudgetStatusNull()
        {
            this.SetNull(this.myTable.ColumnBudgetStatus);
        }

        /// test for NULL value
        public bool IsCommentNull()
        {
            return this.IsNull(this.myTable.ColumnComment);
        }

        /// assign NULL value
        public void SetCommentNull()
        {
            this.SetNull(this.myTable.ColumnComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// This is the budget data for one period (e.g. a month)
    [Serializable()]
    public class ABudgetPeriodTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 121;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetSequenceId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPeriodNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetBaseId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetLastYearId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetThisYearId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetNextYearId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ABudgetPeriod", "a_budget_period",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "BudgetSequence", "a_budget_sequence_i", "a_budget_sequence_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "PeriodNumber", "a_period_number_i", "a_period_number_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "BudgetBase", "a_budget_base_n", "Budget in Base Currency", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(3, "BudgetLastYear", "a_budget_last_year_n", "Budget last Year", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(4, "BudgetThisYear", "a_budget_this_year_n", "Budget This Year", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(5, "BudgetNextYear", "a_budget_next_year_n", "Budget Next Year", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ABudgetPeriodTable() :
                base("ABudgetPeriod")
        {
        }

        /// constructor
        public ABudgetPeriodTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ABudgetPeriodTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnBudgetSequence;
        ///
        public DataColumn ColumnPeriodNumber;
        /// Budget amount in base currency
        public DataColumn ColumnBudgetBase;
        /// Will cease to be used once a_budget_base_n is used
        public DataColumn ColumnBudgetLastYear;
        /// Will cease to be used once a_budget_base_n is used
        public DataColumn ColumnBudgetThisYear;
        /// Will cease to be used once a_budget_base_n is used
        public DataColumn ColumnBudgetNextYear;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_budget_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_last_year_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_this_year_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_next_year_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnBudgetSequence = this.Columns["a_budget_sequence_i"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnBudgetBase = this.Columns["a_budget_base_n"];
            this.ColumnBudgetLastYear = this.Columns["a_budget_last_year_n"];
            this.ColumnBudgetThisYear = this.Columns["a_budget_this_year_n"];
            this.ColumnBudgetNextYear = this.Columns["a_budget_next_year_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnBudgetSequence,ColumnPeriodNumber};
        }

        /// Access a typed row by index
        public ABudgetPeriodRow this[int i]
        {
            get
            {
                return ((ABudgetPeriodRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ABudgetPeriodRow NewRowTyped(bool AWithDefaultValues)
        {
            ABudgetPeriodRow ret = ((ABudgetPeriodRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ABudgetPeriodRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABudgetPeriodRow(builder);
        }

        /// get typed set of changes
        public ABudgetPeriodTable GetChangesTyped()
        {
            return ((ABudgetPeriodTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ABudgetPeriod";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_budget_period";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetSequenceDBName()
        {
            return "a_budget_sequence_i";
        }

        /// get character length for column
        public static short GetBudgetSequenceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }

        /// get character length for column
        public static short GetPeriodNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetBaseDBName()
        {
            return "a_budget_base_n";
        }

        /// get character length for column
        public static short GetBudgetBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetLastYearDBName()
        {
            return "a_budget_last_year_n";
        }

        /// get character length for column
        public static short GetBudgetLastYearLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetThisYearDBName()
        {
            return "a_budget_this_year_n";
        }

        /// get character length for column
        public static short GetBudgetThisYearLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetNextYearDBName()
        {
            return "a_budget_next_year_n";
        }

        /// get character length for column
        public static short GetBudgetNextYearLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// This is the budget data for one period (e.g. a month)
    [Serializable()]
    public class ABudgetPeriodRow : System.Data.DataRow
    {
        private ABudgetPeriodTable myTable;

        /// Constructor
        public ABudgetPeriodRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ABudgetPeriodTable)(this.Table));
        }

        ///
        public Int32 BudgetSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetSequence)
                            || (((Int32)(this[this.myTable.ColumnBudgetSequence])) != value)))
                {
                    this[this.myTable.ColumnBudgetSequence] = value;
                }
            }
        }

        ///
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber)
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }

        /// Budget amount in base currency
        public Decimal BudgetBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetBase)
                            || (((Decimal)(this[this.myTable.ColumnBudgetBase])) != value)))
                {
                    this[this.myTable.ColumnBudgetBase] = value;
                }
            }
        }

        /// Will cease to be used once a_budget_base_n is used
        public Decimal BudgetLastYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetLastYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetLastYear)
                            || (((Decimal)(this[this.myTable.ColumnBudgetLastYear])) != value)))
                {
                    this[this.myTable.ColumnBudgetLastYear] = value;
                }
            }
        }

        /// Will cease to be used once a_budget_base_n is used
        public Decimal BudgetThisYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetThisYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetThisYear)
                            || (((Decimal)(this[this.myTable.ColumnBudgetThisYear])) != value)))
                {
                    this[this.myTable.ColumnBudgetThisYear] = value;
                }
            }
        }

        /// Will cease to be used once a_budget_base_n is used
        public Decimal BudgetNextYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetNextYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetNextYear)
                            || (((Decimal)(this[this.myTable.ColumnBudgetNextYear])) != value)))
                {
                    this[this.myTable.ColumnBudgetNextYear] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnBudgetSequence);
            this[this.myTable.ColumnPeriodNumber.Ordinal] = 0;
            this[this.myTable.ColumnBudgetBase.Ordinal] = 0;
            this[this.myTable.ColumnBudgetLastYear.Ordinal] = 0;
            this[this.myTable.ColumnBudgetThisYear.Ordinal] = 0;
            this[this.myTable.ColumnBudgetNextYear.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsBudgetSequenceNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetSequence);
        }

        /// assign NULL value
        public void SetBudgetSequenceNull()
        {
            this.SetNull(this.myTable.ColumnBudgetSequence);
        }

        /// test for NULL value
        public bool IsPeriodNumberNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodNumber);
        }

        /// assign NULL value
        public void SetPeriodNumberNull()
        {
            this.SetNull(this.myTable.ColumnPeriodNumber);
        }

        /// test for NULL value
        public bool IsBudgetBaseNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetBase);
        }

        /// assign NULL value
        public void SetBudgetBaseNull()
        {
            this.SetNull(this.myTable.ColumnBudgetBase);
        }

        /// test for NULL value
        public bool IsBudgetLastYearNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetLastYear);
        }

        /// assign NULL value
        public void SetBudgetLastYearNull()
        {
            this.SetNull(this.myTable.ColumnBudgetLastYear);
        }

        /// test for NULL value
        public bool IsBudgetThisYearNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetThisYear);
        }

        /// assign NULL value
        public void SetBudgetThisYearNull()
        {
            this.SetNull(this.myTable.ColumnBudgetThisYear);
        }

        /// test for NULL value
        public bool IsBudgetNextYearNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetNextYear);
        }

        /// assign NULL value
        public void SetBudgetNextYearNull()
        {
            this.SetNull(this.myTable.ColumnBudgetNextYear);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Information about each financial period in a ledger.
    [Serializable()]
    public class AAccountingPeriodTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 122;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountingPeriodNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountingPeriodDescId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnPeriodStartDateId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnPeriodEndDateId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnEffectiveDateId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAccountingPeriod", "a_accounting_period",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "AccountingPeriodNumber", "a_accounting_period_number_i", "Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "AccountingPeriodDesc", "a_accounting_period_desc_c", "Description", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(3, "PeriodStartDate", "a_period_start_date_d", "Period Start Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(4, "PeriodEndDate", "a_period_end_date_d", "Period End Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(5, "EffectiveDate", "a_effective_date_d", "Effective Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AAccountingPeriodTable() :
                base("AAccountingPeriod")
        {
        }

        /// constructor
        public AAccountingPeriodTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAccountingPeriodTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The ledger that the period applies to.
        public DataColumn ColumnLedgerNumber;
        /// The accounting period number.  Must be &lt;= 20
        public DataColumn ColumnAccountingPeriodNumber;
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnAccountingPeriodDesc;
        ///
        public DataColumn ColumnPeriodStartDate;
        ///
        public DataColumn ColumnPeriodEndDate;
        ///
        public DataColumn ColumnEffectiveDate;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_accounting_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_accounting_period_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_period_start_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_period_end_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_effective_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAccountingPeriodNumber = this.Columns["a_accounting_period_number_i"];
            this.ColumnAccountingPeriodDesc = this.Columns["a_accounting_period_desc_c"];
            this.ColumnPeriodStartDate = this.Columns["a_period_start_date_d"];
            this.ColumnPeriodEndDate = this.Columns["a_period_end_date_d"];
            this.ColumnEffectiveDate = this.Columns["a_effective_date_d"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnAccountingPeriodNumber};
        }

        /// Access a typed row by index
        public AAccountingPeriodRow this[int i]
        {
            get
            {
                return ((AAccountingPeriodRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAccountingPeriodRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountingPeriodRow ret = ((AAccountingPeriodRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAccountingPeriodRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountingPeriodRow(builder);
        }

        /// get typed set of changes
        public AAccountingPeriodTable GetChangesTyped()
        {
            return ((AAccountingPeriodTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAccountingPeriod";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_accounting_period";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountingPeriodNumberDBName()
        {
            return "a_accounting_period_number_i";
        }

        /// get character length for column
        public static short GetAccountingPeriodNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountingPeriodDescDBName()
        {
            return "a_accounting_period_desc_c";
        }

        /// get character length for column
        public static short GetAccountingPeriodDescLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetPeriodStartDateDBName()
        {
            return "a_period_start_date_d";
        }

        /// get character length for column
        public static short GetPeriodStartDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPeriodEndDateDBName()
        {
            return "a_period_end_date_d";
        }

        /// get character length for column
        public static short GetPeriodEndDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetEffectiveDateDBName()
        {
            return "a_effective_date_d";
        }

        /// get character length for column
        public static short GetEffectiveDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Information about each financial period in a ledger.
    [Serializable()]
    public class AAccountingPeriodRow : System.Data.DataRow
    {
        private AAccountingPeriodTable myTable;

        /// Constructor
        public AAccountingPeriodRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAccountingPeriodTable)(this.Table));
        }

        /// The ledger that the period applies to.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// The accounting period number.  Must be &lt;= 20
        public Int32 AccountingPeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountingPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountingPeriodNumber)
                            || (((Int32)(this[this.myTable.ColumnAccountingPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnAccountingPeriodNumber] = value;
                }
            }
        }

        /// This is a short description which is 32 charcters long
        public String AccountingPeriodDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountingPeriodDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountingPeriodDesc)
                            || (((String)(this[this.myTable.ColumnAccountingPeriodDesc])) != value)))
                {
                    this[this.myTable.ColumnAccountingPeriodDesc] = value;
                }
            }
        }

        ///
        public System.DateTime PeriodStartDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodStartDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodStartDate)
                            || (((System.DateTime)(this[this.myTable.ColumnPeriodStartDate])) != value)))
                {
                    this[this.myTable.ColumnPeriodStartDate] = value;
                }
            }
        }

        ///
        public System.DateTime PeriodEndDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodEndDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodEndDate)
                            || (((System.DateTime)(this[this.myTable.ColumnPeriodEndDate])) != value)))
                {
                    this[this.myTable.ColumnPeriodEndDate] = value;
                }
            }
        }

        ///
        public System.DateTime EffectiveDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEffectiveDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEffectiveDate)
                            || (((System.DateTime)(this[this.myTable.ColumnEffectiveDate])) != value)))
                {
                    this[this.myTable.ColumnEffectiveDate] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnAccountingPeriodNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountingPeriodDesc);
            this.SetNull(this.myTable.ColumnPeriodStartDate);
            this.SetNull(this.myTable.ColumnPeriodEndDate);
            this[this.myTable.ColumnEffectiveDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsAccountingPeriodNumberNull()
        {
            return this.IsNull(this.myTable.ColumnAccountingPeriodNumber);
        }

        /// assign NULL value
        public void SetAccountingPeriodNumberNull()
        {
            this.SetNull(this.myTable.ColumnAccountingPeriodNumber);
        }

        /// test for NULL value
        public bool IsAccountingPeriodDescNull()
        {
            return this.IsNull(this.myTable.ColumnAccountingPeriodDesc);
        }

        /// assign NULL value
        public void SetAccountingPeriodDescNull()
        {
            this.SetNull(this.myTable.ColumnAccountingPeriodDesc);
        }

        /// test for NULL value
        public bool IsPeriodStartDateNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodStartDate);
        }

        /// assign NULL value
        public void SetPeriodStartDateNull()
        {
            this.SetNull(this.myTable.ColumnPeriodStartDate);
        }

        /// test for NULL value
        public bool IsPeriodEndDateNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodEndDate);
        }

        /// assign NULL value
        public void SetPeriodEndDateNull()
        {
            this.SetNull(this.myTable.ColumnPeriodEndDate);
        }

        /// test for NULL value
        public bool IsEffectiveDateNull()
        {
            return this.IsNull(this.myTable.ColumnEffectiveDate);
        }

        /// assign NULL value
        public void SetEffectiveDateNull()
        {
            this.SetNull(this.myTable.ColumnEffectiveDate);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// One record describing the limitations imposed on the accounting system.
    [Serializable()]
    public class AAccountingSystemParameterTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 123;
        /// used for generic TTypedDataTable functions
        public static short ColumnNumberOfAccountingPeriodsId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnActualsDataRetentionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetDataRetentionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnNumberFwdPostingPeriodsId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecipientGiftStatementTxtId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecipientGiftStatementTx2Id = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDonorGiftStatementTxtId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDonorGiftStatementTx2Id = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnHosaStatementTxtId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnHosaStatementTx2Id = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnHosaStatementTx3Id = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnHosaStatementTx4Id = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDonorReceiptTxtId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnStewardshipReportTxtId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnStewardshipReportTx2Id = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnDonorYearlyReceiptTxtId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnGiftDataRetentionId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeceasedAddressTextId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 23;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAccountingSystemParameter", "a_accounting_system_parameter",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "NumberOfAccountingPeriods", "a_number_of_accounting_periods_i", "Number of Accounting Periods", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(1, "ActualsDataRetention", "a_actuals_data_retention_i", "Actuals Data Retention Period", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(2, "BudgetDataRetention", "a_budget_data_retention_i", "Budget Data Retention Period", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(3, "NumberFwdPostingPeriods", "a_number_fwd_posting_periods_i", "Number Fwd Posting Periods", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(4, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(5, "RecipientGiftStatementTxt", "a_recipient_gift_statement_txt_c", "Recipient gift statement text", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(6, "RecipientGiftStatementTx2", "a_recipient_gift_statement_tx2_c", "Recipient gift statement text 2", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(7, "DonorGiftStatementTxt", "a_donor_gift_statement_txt_c", "Donor gift statement text", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(8, "DonorGiftStatementTx2", "a_donor_gift_statement_tx2_c", "Donor gift statement text 2", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(9, "HosaStatementTxt", "a_hosa_statement_txt_c", "Hosa statement text", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(10, "HosaStatementTx2", "a_hosa_statement_tx2_c", "Hosa statement text 2", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(11, "HosaStatementTx3", "a_hosa_statement_tx3_c", "Hosa statement text 3", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(12, "HosaStatementTx4", "a_hosa_statement_tx4_c", "Hosa statement text 4", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(13, "DonorReceiptTxt", "a_donor_receipt_txt_c", "Text for the donor receipt heading.", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(14, "StewardshipReportTxt", "a_stewardship_report_txt_c", "Stewardship Report text", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(15, "StewardshipReportTx2", "a_stewardship_report_tx2_c", "Stewardship Report text, line 2", OdbcType.VarChar, 264, false),
                    new TTypedColumnInfo(16, "DonorYearlyReceiptTxt", "a_donor_yearly_receipt_txt_c", "Text for the yearly donor receipt heading.", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(17, "GiftDataRetention", "a_gift_data_retention_i", "Gift Data Retention", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(18, "DeceasedAddressText", "a_deceased_address_text_c", "a_deceased_address_text_c", OdbcType.VarChar, 400, false),
                    new TTypedColumnInfo(19, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(20, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(21, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(22, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(23, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    4
                }));
            return true;
        }

        /// constructor
        public AAccountingSystemParameterTable() :
                base("AAccountingSystemParameter")
        {
        }

        /// constructor
        public AAccountingSystemParameterTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAccountingSystemParameterTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnNumberOfAccountingPeriods;
        ///
        public DataColumn ColumnActualsDataRetention;
        ///
        public DataColumn ColumnBudgetDataRetention;
        ///
        public DataColumn ColumnNumberFwdPostingPeriods;
        ///
        public DataColumn ColumnLedgerNumber;
        /// Recipient gift statement text
        public DataColumn ColumnRecipientGiftStatementTxt;
        /// Recipient gift statement text 2
        public DataColumn ColumnRecipientGiftStatementTx2;
        /// Donor gift statement text
        public DataColumn ColumnDonorGiftStatementTxt;
        /// Donor gift statement text 2
        public DataColumn ColumnDonorGiftStatementTx2;
        /// Hosa statement text
        public DataColumn ColumnHosaStatementTxt;
        /// Hosa (Home Office Statement of Accounts) statement text 2
        public DataColumn ColumnHosaStatementTx2;
        /// Hosa statement text 3
        public DataColumn ColumnHosaStatementTx3;
        /// Hosa statement text 4
        public DataColumn ColumnHosaStatementTx4;
        /// Text for the donor receipt heading.
        public DataColumn ColumnDonorReceiptTxt;
        /// Stewardship Report  text
        public DataColumn ColumnStewardshipReportTxt;
        /// Stewardship Report  text
        public DataColumn ColumnStewardshipReportTx2;
        /// Text for the yearly donor receipt heading.
        public DataColumn ColumnDonorYearlyReceiptTxt;
        /// How many years to retain gift data.
        public DataColumn ColumnGiftDataRetention;
        /// Text to put on receipt when addressing a deceased donor
        public DataColumn ColumnDeceasedAddressText;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_number_of_accounting_periods_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_actuals_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_number_fwd_posting_periods_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_recipient_gift_statement_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_recipient_gift_statement_tx2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_donor_gift_statement_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_donor_gift_statement_tx2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_hosa_statement_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_hosa_statement_tx2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_hosa_statement_tx3_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_hosa_statement_tx4_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_donor_receipt_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stewardship_report_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_stewardship_report_tx2_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_donor_yearly_receipt_txt_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_gift_data_retention_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_deceased_address_text_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnNumberOfAccountingPeriods = this.Columns["a_number_of_accounting_periods_i"];
            this.ColumnActualsDataRetention = this.Columns["a_actuals_data_retention_i"];
            this.ColumnBudgetDataRetention = this.Columns["a_budget_data_retention_i"];
            this.ColumnNumberFwdPostingPeriods = this.Columns["a_number_fwd_posting_periods_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnRecipientGiftStatementTxt = this.Columns["a_recipient_gift_statement_txt_c"];
            this.ColumnRecipientGiftStatementTx2 = this.Columns["a_recipient_gift_statement_tx2_c"];
            this.ColumnDonorGiftStatementTxt = this.Columns["a_donor_gift_statement_txt_c"];
            this.ColumnDonorGiftStatementTx2 = this.Columns["a_donor_gift_statement_tx2_c"];
            this.ColumnHosaStatementTxt = this.Columns["a_hosa_statement_txt_c"];
            this.ColumnHosaStatementTx2 = this.Columns["a_hosa_statement_tx2_c"];
            this.ColumnHosaStatementTx3 = this.Columns["a_hosa_statement_tx3_c"];
            this.ColumnHosaStatementTx4 = this.Columns["a_hosa_statement_tx4_c"];
            this.ColumnDonorReceiptTxt = this.Columns["a_donor_receipt_txt_c"];
            this.ColumnStewardshipReportTxt = this.Columns["a_stewardship_report_txt_c"];
            this.ColumnStewardshipReportTx2 = this.Columns["a_stewardship_report_tx2_c"];
            this.ColumnDonorYearlyReceiptTxt = this.Columns["a_donor_yearly_receipt_txt_c"];
            this.ColumnGiftDataRetention = this.Columns["a_gift_data_retention_i"];
            this.ColumnDeceasedAddressText = this.Columns["a_deceased_address_text_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnLedgerNumber};
        }

        /// Access a typed row by index
        public AAccountingSystemParameterRow this[int i]
        {
            get
            {
                return ((AAccountingSystemParameterRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAccountingSystemParameterRow NewRowTyped(bool AWithDefaultValues)
        {
            AAccountingSystemParameterRow ret = ((AAccountingSystemParameterRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAccountingSystemParameterRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAccountingSystemParameterRow(builder);
        }

        /// get typed set of changes
        public AAccountingSystemParameterTable GetChangesTyped()
        {
            return ((AAccountingSystemParameterTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAccountingSystemParameter";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_accounting_system_parameter";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetNumberOfAccountingPeriodsDBName()
        {
            return "a_number_of_accounting_periods_i";
        }

        /// get character length for column
        public static short GetNumberOfAccountingPeriodsLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetActualsDataRetentionDBName()
        {
            return "a_actuals_data_retention_i";
        }

        /// get character length for column
        public static short GetActualsDataRetentionLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetDataRetentionDBName()
        {
            return "a_budget_data_retention_i";
        }

        /// get character length for column
        public static short GetBudgetDataRetentionLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNumberFwdPostingPeriodsDBName()
        {
            return "a_number_fwd_posting_periods_i";
        }

        /// get character length for column
        public static short GetNumberFwdPostingPeriodsLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRecipientGiftStatementTxtDBName()
        {
            return "a_recipient_gift_statement_txt_c";
        }

        /// get character length for column
        public static short GetRecipientGiftStatementTxtLength()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetRecipientGiftStatementTx2DBName()
        {
            return "a_recipient_gift_statement_tx2_c";
        }

        /// get character length for column
        public static short GetRecipientGiftStatementTx2Length()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetDonorGiftStatementTxtDBName()
        {
            return "a_donor_gift_statement_txt_c";
        }

        /// get character length for column
        public static short GetDonorGiftStatementTxtLength()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetDonorGiftStatementTx2DBName()
        {
            return "a_donor_gift_statement_tx2_c";
        }

        /// get character length for column
        public static short GetDonorGiftStatementTx2Length()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetHosaStatementTxtDBName()
        {
            return "a_hosa_statement_txt_c";
        }

        /// get character length for column
        public static short GetHosaStatementTxtLength()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetHosaStatementTx2DBName()
        {
            return "a_hosa_statement_tx2_c";
        }

        /// get character length for column
        public static short GetHosaStatementTx2Length()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetHosaStatementTx3DBName()
        {
            return "a_hosa_statement_tx3_c";
        }

        /// get character length for column
        public static short GetHosaStatementTx3Length()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetHosaStatementTx4DBName()
        {
            return "a_hosa_statement_tx4_c";
        }

        /// get character length for column
        public static short GetHosaStatementTx4Length()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetDonorReceiptTxtDBName()
        {
            return "a_donor_receipt_txt_c";
        }

        /// get character length for column
        public static short GetDonorReceiptTxtLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetStewardshipReportTxtDBName()
        {
            return "a_stewardship_report_txt_c";
        }

        /// get character length for column
        public static short GetStewardshipReportTxtLength()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetStewardshipReportTx2DBName()
        {
            return "a_stewardship_report_tx2_c";
        }

        /// get character length for column
        public static short GetStewardshipReportTx2Length()
        {
            return 264;
        }

        /// get the name of the field in the database for this column
        public static string GetDonorYearlyReceiptTxtDBName()
        {
            return "a_donor_yearly_receipt_txt_c";
        }

        /// get character length for column
        public static short GetDonorYearlyReceiptTxtLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetGiftDataRetentionDBName()
        {
            return "a_gift_data_retention_i";
        }

        /// get character length for column
        public static short GetGiftDataRetentionLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeceasedAddressTextDBName()
        {
            return "a_deceased_address_text_c";
        }

        /// get character length for column
        public static short GetDeceasedAddressTextLength()
        {
            return 400;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// One record describing the limitations imposed on the accounting system.
    [Serializable()]
    public class AAccountingSystemParameterRow : System.Data.DataRow
    {
        private AAccountingSystemParameterTable myTable;

        /// Constructor
        public AAccountingSystemParameterRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAccountingSystemParameterTable)(this.Table));
        }

        ///
        public Int32 NumberOfAccountingPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfAccountingPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfAccountingPeriods)
                            || (((Int32)(this[this.myTable.ColumnNumberOfAccountingPeriods])) != value)))
                {
                    this[this.myTable.ColumnNumberOfAccountingPeriods] = value;
                }
            }
        }

        ///
        public Int32 ActualsDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualsDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualsDataRetention)
                            || (((Int32)(this[this.myTable.ColumnActualsDataRetention])) != value)))
                {
                    this[this.myTable.ColumnActualsDataRetention] = value;
                }
            }
        }

        ///
        public Int32 BudgetDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetDataRetention)
                            || (((Int32)(this[this.myTable.ColumnBudgetDataRetention])) != value)))
                {
                    this[this.myTable.ColumnBudgetDataRetention] = value;
                }
            }
        }

        ///
        public Int32 NumberFwdPostingPeriods
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberFwdPostingPeriods.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberFwdPostingPeriods)
                            || (((Int32)(this[this.myTable.ColumnNumberFwdPostingPeriods])) != value)))
                {
                    this[this.myTable.ColumnNumberFwdPostingPeriods] = value;
                }
            }
        }

        ///
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// Recipient gift statement text
        public String RecipientGiftStatementTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientGiftStatementTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientGiftStatementTxt)
                            || (((String)(this[this.myTable.ColumnRecipientGiftStatementTxt])) != value)))
                {
                    this[this.myTable.ColumnRecipientGiftStatementTxt] = value;
                }
            }
        }

        /// Recipient gift statement text 2
        public String RecipientGiftStatementTx2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecipientGiftStatementTx2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecipientGiftStatementTx2)
                            || (((String)(this[this.myTable.ColumnRecipientGiftStatementTx2])) != value)))
                {
                    this[this.myTable.ColumnRecipientGiftStatementTx2] = value;
                }
            }
        }

        /// Donor gift statement text
        public String DonorGiftStatementTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorGiftStatementTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorGiftStatementTxt)
                            || (((String)(this[this.myTable.ColumnDonorGiftStatementTxt])) != value)))
                {
                    this[this.myTable.ColumnDonorGiftStatementTxt] = value;
                }
            }
        }

        /// Donor gift statement text 2
        public String DonorGiftStatementTx2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorGiftStatementTx2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorGiftStatementTx2)
                            || (((String)(this[this.myTable.ColumnDonorGiftStatementTx2])) != value)))
                {
                    this[this.myTable.ColumnDonorGiftStatementTx2] = value;
                }
            }
        }

        /// Hosa statement text
        public String HosaStatementTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHosaStatementTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHosaStatementTxt)
                            || (((String)(this[this.myTable.ColumnHosaStatementTxt])) != value)))
                {
                    this[this.myTable.ColumnHosaStatementTxt] = value;
                }
            }
        }

        /// Hosa (Home Office Statement of Accounts) statement text 2
        public String HosaStatementTx2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHosaStatementTx2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHosaStatementTx2)
                            || (((String)(this[this.myTable.ColumnHosaStatementTx2])) != value)))
                {
                    this[this.myTable.ColumnHosaStatementTx2] = value;
                }
            }
        }

        /// Hosa statement text 3
        public String HosaStatementTx3
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHosaStatementTx3.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHosaStatementTx3)
                            || (((String)(this[this.myTable.ColumnHosaStatementTx3])) != value)))
                {
                    this[this.myTable.ColumnHosaStatementTx3] = value;
                }
            }
        }

        /// Hosa statement text 4
        public String HosaStatementTx4
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHosaStatementTx4.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHosaStatementTx4)
                            || (((String)(this[this.myTable.ColumnHosaStatementTx4])) != value)))
                {
                    this[this.myTable.ColumnHosaStatementTx4] = value;
                }
            }
        }

        /// Text for the donor receipt heading.
        public String DonorReceiptTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorReceiptTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorReceiptTxt)
                            || (((String)(this[this.myTable.ColumnDonorReceiptTxt])) != value)))
                {
                    this[this.myTable.ColumnDonorReceiptTxt] = value;
                }
            }
        }

        /// Stewardship Report  text
        public String StewardshipReportTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStewardshipReportTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStewardshipReportTxt)
                            || (((String)(this[this.myTable.ColumnStewardshipReportTxt])) != value)))
                {
                    this[this.myTable.ColumnStewardshipReportTxt] = value;
                }
            }
        }

        /// Stewardship Report  text
        public String StewardshipReportTx2
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStewardshipReportTx2.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStewardshipReportTx2)
                            || (((String)(this[this.myTable.ColumnStewardshipReportTx2])) != value)))
                {
                    this[this.myTable.ColumnStewardshipReportTx2] = value;
                }
            }
        }

        /// Text for the yearly donor receipt heading.
        public String DonorYearlyReceiptTxt
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDonorYearlyReceiptTxt.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDonorYearlyReceiptTxt)
                            || (((String)(this[this.myTable.ColumnDonorYearlyReceiptTxt])) != value)))
                {
                    this[this.myTable.ColumnDonorYearlyReceiptTxt] = value;
                }
            }
        }

        /// How many years to retain gift data.
        public Int32 GiftDataRetention
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGiftDataRetention.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGiftDataRetention)
                            || (((Int32)(this[this.myTable.ColumnGiftDataRetention])) != value)))
                {
                    this[this.myTable.ColumnGiftDataRetention] = value;
                }
            }
        }

        /// Text to put on receipt when addressing a deceased donor
        public String DeceasedAddressText
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeceasedAddressText.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeceasedAddressText)
                            || (((String)(this[this.myTable.ColumnDeceasedAddressText])) != value)))
                {
                    this[this.myTable.ColumnDeceasedAddressText] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnNumberOfAccountingPeriods.Ordinal] = 0;
            this[this.myTable.ColumnActualsDataRetention.Ordinal] = 0;
            this[this.myTable.ColumnBudgetDataRetention.Ordinal] = 0;
            this[this.myTable.ColumnNumberFwdPostingPeriods.Ordinal] = 0;
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnRecipientGiftStatementTxt);
            this.SetNull(this.myTable.ColumnRecipientGiftStatementTx2);
            this.SetNull(this.myTable.ColumnDonorGiftStatementTxt);
            this.SetNull(this.myTable.ColumnDonorGiftStatementTx2);
            this.SetNull(this.myTable.ColumnHosaStatementTxt);
            this.SetNull(this.myTable.ColumnHosaStatementTx2);
            this.SetNull(this.myTable.ColumnHosaStatementTx3);
            this.SetNull(this.myTable.ColumnHosaStatementTx4);
            this.SetNull(this.myTable.ColumnDonorReceiptTxt);
            this.SetNull(this.myTable.ColumnStewardshipReportTxt);
            this.SetNull(this.myTable.ColumnStewardshipReportTx2);
            this.SetNull(this.myTable.ColumnDonorYearlyReceiptTxt);
            this[this.myTable.ColumnGiftDataRetention.Ordinal] = 2;
            this.SetNull(this.myTable.ColumnDeceasedAddressText);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsNumberOfAccountingPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberOfAccountingPeriods);
        }

        /// assign NULL value
        public void SetNumberOfAccountingPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnNumberOfAccountingPeriods);
        }

        /// test for NULL value
        public bool IsActualsDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnActualsDataRetention);
        }

        /// assign NULL value
        public void SetActualsDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnActualsDataRetention);
        }

        /// test for NULL value
        public bool IsBudgetDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetDataRetention);
        }

        /// assign NULL value
        public void SetBudgetDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnBudgetDataRetention);
        }

        /// test for NULL value
        public bool IsNumberFwdPostingPeriodsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberFwdPostingPeriods);
        }

        /// assign NULL value
        public void SetNumberFwdPostingPeriodsNull()
        {
            this.SetNull(this.myTable.ColumnNumberFwdPostingPeriods);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsRecipientGiftStatementTxtNull()
        {
            return this.IsNull(this.myTable.ColumnRecipientGiftStatementTxt);
        }

        /// assign NULL value
        public void SetRecipientGiftStatementTxtNull()
        {
            this.SetNull(this.myTable.ColumnRecipientGiftStatementTxt);
        }

        /// test for NULL value
        public bool IsRecipientGiftStatementTx2Null()
        {
            return this.IsNull(this.myTable.ColumnRecipientGiftStatementTx2);
        }

        /// assign NULL value
        public void SetRecipientGiftStatementTx2Null()
        {
            this.SetNull(this.myTable.ColumnRecipientGiftStatementTx2);
        }

        /// test for NULL value
        public bool IsDonorGiftStatementTxtNull()
        {
            return this.IsNull(this.myTable.ColumnDonorGiftStatementTxt);
        }

        /// assign NULL value
        public void SetDonorGiftStatementTxtNull()
        {
            this.SetNull(this.myTable.ColumnDonorGiftStatementTxt);
        }

        /// test for NULL value
        public bool IsDonorGiftStatementTx2Null()
        {
            return this.IsNull(this.myTable.ColumnDonorGiftStatementTx2);
        }

        /// assign NULL value
        public void SetDonorGiftStatementTx2Null()
        {
            this.SetNull(this.myTable.ColumnDonorGiftStatementTx2);
        }

        /// test for NULL value
        public bool IsHosaStatementTxtNull()
        {
            return this.IsNull(this.myTable.ColumnHosaStatementTxt);
        }

        /// assign NULL value
        public void SetHosaStatementTxtNull()
        {
            this.SetNull(this.myTable.ColumnHosaStatementTxt);
        }

        /// test for NULL value
        public bool IsHosaStatementTx2Null()
        {
            return this.IsNull(this.myTable.ColumnHosaStatementTx2);
        }

        /// assign NULL value
        public void SetHosaStatementTx2Null()
        {
            this.SetNull(this.myTable.ColumnHosaStatementTx2);
        }

        /// test for NULL value
        public bool IsHosaStatementTx3Null()
        {
            return this.IsNull(this.myTable.ColumnHosaStatementTx3);
        }

        /// assign NULL value
        public void SetHosaStatementTx3Null()
        {
            this.SetNull(this.myTable.ColumnHosaStatementTx3);
        }

        /// test for NULL value
        public bool IsHosaStatementTx4Null()
        {
            return this.IsNull(this.myTable.ColumnHosaStatementTx4);
        }

        /// assign NULL value
        public void SetHosaStatementTx4Null()
        {
            this.SetNull(this.myTable.ColumnHosaStatementTx4);
        }

        /// test for NULL value
        public bool IsDonorReceiptTxtNull()
        {
            return this.IsNull(this.myTable.ColumnDonorReceiptTxt);
        }

        /// assign NULL value
        public void SetDonorReceiptTxtNull()
        {
            this.SetNull(this.myTable.ColumnDonorReceiptTxt);
        }

        /// test for NULL value
        public bool IsStewardshipReportTxtNull()
        {
            return this.IsNull(this.myTable.ColumnStewardshipReportTxt);
        }

        /// assign NULL value
        public void SetStewardshipReportTxtNull()
        {
            this.SetNull(this.myTable.ColumnStewardshipReportTxt);
        }

        /// test for NULL value
        public bool IsStewardshipReportTx2Null()
        {
            return this.IsNull(this.myTable.ColumnStewardshipReportTx2);
        }

        /// assign NULL value
        public void SetStewardshipReportTx2Null()
        {
            this.SetNull(this.myTable.ColumnStewardshipReportTx2);
        }

        /// test for NULL value
        public bool IsDonorYearlyReceiptTxtNull()
        {
            return this.IsNull(this.myTable.ColumnDonorYearlyReceiptTxt);
        }

        /// assign NULL value
        public void SetDonorYearlyReceiptTxtNull()
        {
            this.SetNull(this.myTable.ColumnDonorYearlyReceiptTxt);
        }

        /// test for NULL value
        public bool IsGiftDataRetentionNull()
        {
            return this.IsNull(this.myTable.ColumnGiftDataRetention);
        }

        /// assign NULL value
        public void SetGiftDataRetentionNull()
        {
            this.SetNull(this.myTable.ColumnGiftDataRetention);
        }

        /// test for NULL value
        public bool IsDeceasedAddressTextNull()
        {
            return this.IsNull(this.myTable.ColumnDeceasedAddressText);
        }

        /// assign NULL value
        public void SetDeceasedAddressTextNull()
        {
            this.SetNull(this.myTable.ColumnDeceasedAddressText);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// List of tables in the financial system, meant to be used with analysis attributes. Not available.
    [Serializable()]
    public class AAnalysisStoreTableTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 124;
        /// used for generic TTypedDataTable functions
        public static short ColumnStoreNameId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 5;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAnalysisStoreTable", "a_analysis_store_table",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "StoreName", "a_store_name_c", "Store Name", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(1, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(2, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(3, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(5, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public AAnalysisStoreTableTable() :
                base("AAnalysisStoreTable")
        {
        }

        /// constructor
        public AAnalysisStoreTableTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAnalysisStoreTableTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnStoreName;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_store_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnStoreName = this.Columns["a_store_name_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnStoreName};
        }

        /// Access a typed row by index
        public AAnalysisStoreTableRow this[int i]
        {
            get
            {
                return ((AAnalysisStoreTableRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAnalysisStoreTableRow NewRowTyped(bool AWithDefaultValues)
        {
            AAnalysisStoreTableRow ret = ((AAnalysisStoreTableRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAnalysisStoreTableRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAnalysisStoreTableRow(builder);
        }

        /// get typed set of changes
        public AAnalysisStoreTableTable GetChangesTyped()
        {
            return ((AAnalysisStoreTableTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAnalysisStoreTable";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_analysis_store_table";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetStoreNameDBName()
        {
            return "a_store_name_c";
        }

        /// get character length for column
        public static short GetStoreNameLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// List of tables in the financial system, meant to be used with analysis attributes. Not available.
    [Serializable()]
    public class AAnalysisStoreTableRow : System.Data.DataRow
    {
        private AAnalysisStoreTableTable myTable;

        /// Constructor
        public AAnalysisStoreTableRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAnalysisStoreTableTable)(this.Table));
        }

        ///
        public String StoreName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStoreName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStoreName)
                            || (((String)(this[this.myTable.ColumnStoreName])) != value)))
                {
                    this[this.myTable.ColumnStoreName] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnStoreName);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsStoreNameNull()
        {
            return this.IsNull(this.myTable.ColumnStoreName);
        }

        /// assign NULL value
        public void SetStoreNameNull()
        {
            this.SetNull(this.myTable.ColumnStoreName);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Types of analysis attributes.
    [Serializable()]
    public class AAnalysisTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 125;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisTypeCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisTypeDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisModeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisStoreId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisElementId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnSystemAnalysisTypeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAnalysisType", "a_analysis_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "AnalysisTypeCode", "a_analysis_type_code_c", "Analysis Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(1, "AnalysisTypeDescription", "a_analysis_type_description_c", "Description", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(2, "AnalysisMode", "a_analysis_mode_l", "Mode", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "AnalysisStore", "a_analysis_store_c", "Analysis Store", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(4, "AnalysisElement", "a_analysis_element_c", "Analysis Element", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(5, "SystemAnalysisType", "a_system_analysis_type_l", "System Analysis Type", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public AAnalysisTypeTable() :
                base("AAnalysisType")
        {
        }

        /// constructor
        public AAnalysisTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAnalysisTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnAnalysisTypeCode;
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnAnalysisTypeDescription;
        /// Shows what type of analysis attribute it is
        public DataColumn ColumnAnalysisMode;
        ///
        public DataColumn ColumnAnalysisStore;
        /// The name of the field within a table which will be used as the analysis attribute
        public DataColumn ColumnAnalysisElement;
        /// To indicate whether the user or system has set up the analysis type.
        public DataColumn ColumnSystemAnalysisType;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_mode_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_store_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_element_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_analysis_type_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisTypeDescription = this.Columns["a_analysis_type_description_c"];
            this.ColumnAnalysisMode = this.Columns["a_analysis_mode_l"];
            this.ColumnAnalysisStore = this.Columns["a_analysis_store_c"];
            this.ColumnAnalysisElement = this.Columns["a_analysis_element_c"];
            this.ColumnSystemAnalysisType = this.Columns["a_system_analysis_type_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnAnalysisTypeCode};
        }

        /// Access a typed row by index
        public AAnalysisTypeRow this[int i]
        {
            get
            {
                return ((AAnalysisTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAnalysisTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            AAnalysisTypeRow ret = ((AAnalysisTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAnalysisTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAnalysisTypeRow(builder);
        }

        /// get typed set of changes
        public AAnalysisTypeTable GetChangesTyped()
        {
            return ((AAnalysisTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAnalysisType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_analysis_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }

        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeDescriptionDBName()
        {
            return "a_analysis_type_description_c";
        }

        /// get character length for column
        public static short GetAnalysisTypeDescriptionLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisModeDBName()
        {
            return "a_analysis_mode_l";
        }

        /// get character length for column
        public static short GetAnalysisModeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisStoreDBName()
        {
            return "a_analysis_store_c";
        }

        /// get character length for column
        public static short GetAnalysisStoreLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisElementDBName()
        {
            return "a_analysis_element_c";
        }

        /// get character length for column
        public static short GetAnalysisElementLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetSystemAnalysisTypeDBName()
        {
            return "a_system_analysis_type_l";
        }

        /// get character length for column
        public static short GetSystemAnalysisTypeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Types of analysis attributes.
    [Serializable()]
    public class AAnalysisTypeRow : System.Data.DataRow
    {
        private AAnalysisTypeTable myTable;

        /// Constructor
        public AAnalysisTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAnalysisTypeTable)(this.Table));
        }

        ///
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode)
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }

        /// This is a short description which is 32 charcters long
        public String AnalysisTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeDescription)
                            || (((String)(this[this.myTable.ColumnAnalysisTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeDescription] = value;
                }
            }
        }

        /// Shows what type of analysis attribute it is
        public Boolean AnalysisMode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisMode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisMode)
                            || (((Boolean)(this[this.myTable.ColumnAnalysisMode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisMode] = value;
                }
            }
        }

        ///
        public String AnalysisStore
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisStore.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisStore)
                            || (((String)(this[this.myTable.ColumnAnalysisStore])) != value)))
                {
                    this[this.myTable.ColumnAnalysisStore] = value;
                }
            }
        }

        /// The name of the field within a table which will be used as the analysis attribute
        public String AnalysisElement
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisElement.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisElement)
                            || (((String)(this[this.myTable.ColumnAnalysisElement])) != value)))
                {
                    this[this.myTable.ColumnAnalysisElement] = value;
                }
            }
        }

        /// To indicate whether the user or system has set up the analysis type.
        public Boolean SystemAnalysisType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemAnalysisType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemAnalysisType)
                            || (((Boolean)(this[this.myTable.ColumnSystemAnalysisType])) != value)))
                {
                    this[this.myTable.ColumnSystemAnalysisType] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeDescription);
            this[this.myTable.ColumnAnalysisMode.Ordinal] = true;
            this.SetNull(this.myTable.ColumnAnalysisStore);
            this.SetNull(this.myTable.ColumnAnalysisElement);
            this[this.myTable.ColumnSystemAnalysisType.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsAnalysisTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// assign NULL value
        public void SetAnalysisTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// test for NULL value
        public bool IsAnalysisTypeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisTypeDescription);
        }

        /// assign NULL value
        public void SetAnalysisTypeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeDescription);
        }

        /// test for NULL value
        public bool IsAnalysisModeNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisMode);
        }

        /// assign NULL value
        public void SetAnalysisModeNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisMode);
        }

        /// test for NULL value
        public bool IsAnalysisStoreNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisStore);
        }

        /// assign NULL value
        public void SetAnalysisStoreNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisStore);
        }

        /// test for NULL value
        public bool IsAnalysisElementNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisElement);
        }

        /// assign NULL value
        public void SetAnalysisElementNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisElement);
        }

        /// test for NULL value
        public bool IsSystemAnalysisTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSystemAnalysisType);
        }

        /// assign NULL value
        public void SetSystemAnalysisTypeNull()
        {
            this.SetNull(this.myTable.ColumnSystemAnalysisType);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Indicates which accounts use analysis attributes and what attribute types may be used with the account.   Analysis attributes are user-definable extra information to be stored against an account.
    [Serializable()]
    public class AAnalysisAttributeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 126;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisTypeCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnActiveId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AAnalysisAttribute", "a_analysis_attribute",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "AnalysisTypeCode", "a_analysis_type_code_c", "Analysis Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(3, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(4, "Active", "a_active_l", "Active", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 2, 1
                }));
            return true;
        }

        /// constructor
        public AAnalysisAttributeTable() :
                base("AAnalysisAttribute")
        {
        }

        /// constructor
        public AAnalysisAttributeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AAnalysisAttributeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The number of the ledger in which the analysis attribute is used.
        public DataColumn ColumnLedgerNumber;
        /// A code indicating the type of analysis.  Valid analysis types are stored in the a_analysis_type table.
        public DataColumn ColumnAnalysisTypeCode;
        /// This identifies the account the financial transaction analysis information must be stored against.
        public DataColumn ColumnAccountCode;
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        /// Analysis attributes cannot be deleted, because they are needed for existing transaction analysis attributes. But they can be deactivated.
        public DataColumn ColumnActive;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnActive = this.Columns["a_active_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnAccountCode,ColumnAnalysisTypeCode};
        }

        /// Access a typed row by index
        public AAnalysisAttributeRow this[int i]
        {
            get
            {
                return ((AAnalysisAttributeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AAnalysisAttributeRow NewRowTyped(bool AWithDefaultValues)
        {
            AAnalysisAttributeRow ret = ((AAnalysisAttributeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AAnalysisAttributeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AAnalysisAttributeRow(builder);
        }

        /// get typed set of changes
        public AAnalysisAttributeTable GetChangesTyped()
        {
            return ((AAnalysisAttributeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AAnalysisAttribute";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_analysis_attribute";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }

        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "a_active_l";
        }

        /// get character length for column
        public static short GetActiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Indicates which accounts use analysis attributes and what attribute types may be used with the account.   Analysis attributes are user-definable extra information to be stored against an account.
    [Serializable()]
    public class AAnalysisAttributeRow : System.Data.DataRow
    {
        private AAnalysisAttributeTable myTable;

        /// Constructor
        public AAnalysisAttributeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AAnalysisAttributeTable)(this.Table));
        }

        /// The number of the ledger in which the analysis attribute is used.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// A code indicating the type of analysis.  Valid analysis types are stored in the a_analysis_type table.
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode)
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction analysis information must be stored against.
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// Analysis attributes cannot be deleted, because they are needed for existing transaction analysis attributes. But they can be deactivated.
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive)
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnActive.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsAnalysisTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// assign NULL value
        public void SetAnalysisTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }

        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Hold (monthly) corporate rates.
    [Serializable()]
    public class ACorporateExchangeRateTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 127;
        /// used for generic TTypedDataTable functions
        public static short ColumnFromCurrencyCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnToCurrencyCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRateOfExchangeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveFromId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnTimeEffectiveFromId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ACorporateExchangeRate", "a_corporate_exchange_rate",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FromCurrencyCode", "a_from_currency_code_c", "From Currency Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(1, "ToCurrencyCode", "a_to_currency_code_c", "To Currency Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "RateOfExchange", "a_rate_of_exchange_n", "Rate of exchange", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(3, "DateEffectiveFrom", "a_date_effective_from_d", "Date Effective From", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(4, "TimeEffectiveFrom", "a_time_effective_from_i", "Time", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 3
                }));
            return true;
        }

        /// constructor
        public ACorporateExchangeRateTable() :
                base("ACorporateExchangeRate")
        {
        }

        /// constructor
        public ACorporateExchangeRateTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ACorporateExchangeRateTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Defines the currency being exchanged
        public DataColumn ColumnFromCurrencyCode;
        /// Defines which currency is being changed to
        public DataColumn ColumnToCurrencyCode;
        /// The rate of exchange
        public DataColumn ColumnRateOfExchange;
        /// Date the exchange rate becomes effective
        public DataColumn ColumnDateEffectiveFrom;
        /// System generated time stamp.
        public DataColumn ColumnTimeEffectiveFrom;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_from_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_rate_of_exchange_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_time_effective_from_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFromCurrencyCode = this.Columns["a_from_currency_code_c"];
            this.ColumnToCurrencyCode = this.Columns["a_to_currency_code_c"];
            this.ColumnRateOfExchange = this.Columns["a_rate_of_exchange_n"];
            this.ColumnDateEffectiveFrom = this.Columns["a_date_effective_from_d"];
            this.ColumnTimeEffectiveFrom = this.Columns["a_time_effective_from_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnFromCurrencyCode,ColumnToCurrencyCode,ColumnDateEffectiveFrom};
        }

        /// Access a typed row by index
        public ACorporateExchangeRateRow this[int i]
        {
            get
            {
                return ((ACorporateExchangeRateRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ACorporateExchangeRateRow NewRowTyped(bool AWithDefaultValues)
        {
            ACorporateExchangeRateRow ret = ((ACorporateExchangeRateRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ACorporateExchangeRateRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ACorporateExchangeRateRow(builder);
        }

        /// get typed set of changes
        public ACorporateExchangeRateTable GetChangesTyped()
        {
            return ((ACorporateExchangeRateTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ACorporateExchangeRate";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_corporate_exchange_rate";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFromCurrencyCodeDBName()
        {
            return "a_from_currency_code_c";
        }

        /// get character length for column
        public static short GetFromCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetToCurrencyCodeDBName()
        {
            return "a_to_currency_code_c";
        }

        /// get character length for column
        public static short GetToCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetRateOfExchangeDBName()
        {
            return "a_rate_of_exchange_n";
        }

        /// get character length for column
        public static short GetRateOfExchangeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveFromDBName()
        {
            return "a_date_effective_from_d";
        }

        /// get character length for column
        public static short GetDateEffectiveFromLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTimeEffectiveFromDBName()
        {
            return "a_time_effective_from_i";
        }

        /// get character length for column
        public static short GetTimeEffectiveFromLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Hold (monthly) corporate rates.
    [Serializable()]
    public class ACorporateExchangeRateRow : System.Data.DataRow
    {
        private ACorporateExchangeRateTable myTable;

        /// Constructor
        public ACorporateExchangeRateRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ACorporateExchangeRateTable)(this.Table));
        }

        /// Defines the currency being exchanged
        public String FromCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromCurrencyCode)
                            || (((String)(this[this.myTable.ColumnFromCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnFromCurrencyCode] = value;
                }
            }
        }

        /// Defines which currency is being changed to
        public String ToCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToCurrencyCode)
                            || (((String)(this[this.myTable.ColumnToCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnToCurrencyCode] = value;
                }
            }
        }

        /// The rate of exchange
        public Decimal RateOfExchange
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRateOfExchange.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRateOfExchange)
                            || (((Decimal)(this[this.myTable.ColumnRateOfExchange])) != value)))
                {
                    this[this.myTable.ColumnRateOfExchange] = value;
                }
            }
        }

        /// Date the exchange rate becomes effective
        public System.DateTime DateEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffectiveFrom)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnDateEffectiveFrom] = value;
                }
            }
        }

        /// System generated time stamp.
        public Int32 TimeEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimeEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimeEffectiveFrom)
                            || (((Int32)(this[this.myTable.ColumnTimeEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnTimeEffectiveFrom] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
            this.SetNull(this.myTable.ColumnToCurrencyCode);
            this[this.myTable.ColumnRateOfExchange.Ordinal] = 0;
            this[this.myTable.ColumnDateEffectiveFrom.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTimeEffectiveFrom.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFromCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFromCurrencyCode);
        }

        /// assign NULL value
        public void SetFromCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
        }

        /// test for NULL value
        public bool IsToCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnToCurrencyCode);
        }

        /// assign NULL value
        public void SetToCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnToCurrencyCode);
        }

        /// test for NULL value
        public bool IsRateOfExchangeNull()
        {
            return this.IsNull(this.myTable.ColumnRateOfExchange);
        }

        /// assign NULL value
        public void SetRateOfExchangeNull()
        {
            this.SetNull(this.myTable.ColumnRateOfExchange);
        }

        /// test for NULL value
        public bool IsDateEffectiveFromNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffectiveFrom);
        }

        /// assign NULL value
        public void SetDateEffectiveFromNull()
        {
            this.SetNull(this.myTable.ColumnDateEffectiveFrom);
        }

        /// test for NULL value
        public bool IsTimeEffectiveFromNull()
        {
            return this.IsNull(this.myTable.ColumnTimeEffectiveFrom);
        }

        /// assign NULL value
        public void SetTimeEffectiveFromNull()
        {
            this.SetNull(this.myTable.ColumnTimeEffectiveFrom);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Ad hoc exchange rates.
    [Serializable()]
    public class ADailyExchangeRateTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 128;
        /// used for generic TTypedDataTable functions
        public static short ColumnFromCurrencyCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnToCurrencyCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRateOfExchangeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveFromId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnTimeEffectiveFromId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ADailyExchangeRate", "a_daily_exchange_rate",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FromCurrencyCode", "a_from_currency_code_c", "From Currency Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(1, "ToCurrencyCode", "a_to_currency_code_c", "To Currency Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "RateOfExchange", "a_rate_of_exchange_n", "Rate of exchange", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(3, "DateEffectiveFrom", "a_date_effective_from_d", "Date Effective From", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(4, "TimeEffectiveFrom", "a_time_effective_from_i", "Time", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 3, 4
                }));
            return true;
        }

        /// constructor
        public ADailyExchangeRateTable() :
                base("ADailyExchangeRate")
        {
        }

        /// constructor
        public ADailyExchangeRateTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ADailyExchangeRateTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Defines the currency being exchanged
        public DataColumn ColumnFromCurrencyCode;
        /// Defines which currency is being changed to
        public DataColumn ColumnToCurrencyCode;
        /// The rate of exchange
        public DataColumn ColumnRateOfExchange;
        /// Date the exchange rate becomes effective
        public DataColumn ColumnDateEffectiveFrom;
        /// The date and time
        public DataColumn ColumnTimeEffectiveFrom;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_from_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_rate_of_exchange_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_time_effective_from_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFromCurrencyCode = this.Columns["a_from_currency_code_c"];
            this.ColumnToCurrencyCode = this.Columns["a_to_currency_code_c"];
            this.ColumnRateOfExchange = this.Columns["a_rate_of_exchange_n"];
            this.ColumnDateEffectiveFrom = this.Columns["a_date_effective_from_d"];
            this.ColumnTimeEffectiveFrom = this.Columns["a_time_effective_from_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnFromCurrencyCode,ColumnToCurrencyCode,ColumnDateEffectiveFrom,ColumnTimeEffectiveFrom};
        }

        /// Access a typed row by index
        public ADailyExchangeRateRow this[int i]
        {
            get
            {
                return ((ADailyExchangeRateRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ADailyExchangeRateRow NewRowTyped(bool AWithDefaultValues)
        {
            ADailyExchangeRateRow ret = ((ADailyExchangeRateRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ADailyExchangeRateRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ADailyExchangeRateRow(builder);
        }

        /// get typed set of changes
        public ADailyExchangeRateTable GetChangesTyped()
        {
            return ((ADailyExchangeRateTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ADailyExchangeRate";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_daily_exchange_rate";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFromCurrencyCodeDBName()
        {
            return "a_from_currency_code_c";
        }

        /// get character length for column
        public static short GetFromCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetToCurrencyCodeDBName()
        {
            return "a_to_currency_code_c";
        }

        /// get character length for column
        public static short GetToCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetRateOfExchangeDBName()
        {
            return "a_rate_of_exchange_n";
        }

        /// get character length for column
        public static short GetRateOfExchangeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveFromDBName()
        {
            return "a_date_effective_from_d";
        }

        /// get character length for column
        public static short GetDateEffectiveFromLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTimeEffectiveFromDBName()
        {
            return "a_time_effective_from_i";
        }

        /// get character length for column
        public static short GetTimeEffectiveFromLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Ad hoc exchange rates.
    [Serializable()]
    public class ADailyExchangeRateRow : System.Data.DataRow
    {
        private ADailyExchangeRateTable myTable;

        /// Constructor
        public ADailyExchangeRateRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ADailyExchangeRateTable)(this.Table));
        }

        /// Defines the currency being exchanged
        public String FromCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromCurrencyCode)
                            || (((String)(this[this.myTable.ColumnFromCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnFromCurrencyCode] = value;
                }
            }
        }

        /// Defines which currency is being changed to
        public String ToCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToCurrencyCode)
                            || (((String)(this[this.myTable.ColumnToCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnToCurrencyCode] = value;
                }
            }
        }

        /// The rate of exchange
        public Decimal RateOfExchange
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRateOfExchange.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRateOfExchange)
                            || (((Decimal)(this[this.myTable.ColumnRateOfExchange])) != value)))
                {
                    this[this.myTable.ColumnRateOfExchange] = value;
                }
            }
        }

        /// Date the exchange rate becomes effective
        public System.DateTime DateEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffectiveFrom)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnDateEffectiveFrom] = value;
                }
            }
        }

        /// The date and time
        public Int32 TimeEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimeEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimeEffectiveFrom)
                            || (((Int32)(this[this.myTable.ColumnTimeEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnTimeEffectiveFrom] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
            this.SetNull(this.myTable.ColumnToCurrencyCode);
            this[this.myTable.ColumnRateOfExchange.Ordinal] = 0;
            this[this.myTable.ColumnDateEffectiveFrom.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTimeEffectiveFrom.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFromCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFromCurrencyCode);
        }

        /// assign NULL value
        public void SetFromCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
        }

        /// test for NULL value
        public bool IsToCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnToCurrencyCode);
        }

        /// assign NULL value
        public void SetToCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnToCurrencyCode);
        }

        /// test for NULL value
        public bool IsRateOfExchangeNull()
        {
            return this.IsNull(this.myTable.ColumnRateOfExchange);
        }

        /// assign NULL value
        public void SetRateOfExchangeNull()
        {
            this.SetNull(this.myTable.ColumnRateOfExchange);
        }

        /// test for NULL value
        public bool IsDateEffectiveFromNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffectiveFrom);
        }

        /// assign NULL value
        public void SetDateEffectiveFromNull()
        {
            this.SetNull(this.myTable.ColumnDateEffectiveFrom);
        }

        /// test for NULL value
        public bool IsTimeEffectiveFromNull()
        {
            return this.IsNull(this.myTable.ColumnTimeEffectiveFrom);
        }

        /// assign NULL value
        public void SetTimeEffectiveFromNull()
        {
            this.SetNull(this.myTable.ColumnTimeEffectiveFrom);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// email addresses of our organisation
    [Serializable()]
    public class PEmailTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 129;
        /// used for generic TTypedDataTable functions
        public static short ColumnEmailAddressId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnDescriptionId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnValidId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDeletableId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "PEmail", "p_email",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "EmailAddress", "p_email_address_c", "Email Address", OdbcType.VarChar, 80, true),
                    new TTypedColumnInfo(1, "Description", "p_description_c", "Email Address Description", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(2, "Valid", "p_valid_l", "Valid", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "Deletable", "p_deletable_l", "Deletable", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public PEmailTable() :
                base("PEmail")
        {
        }

        /// constructor
        public PEmailTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public PEmailTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnEmailAddress;
        ///
        public DataColumn ColumnDescription;
        ///
        public DataColumn ColumnValid;
        /// This defines if the email code can be deleted.
        /// This can only be updated by the system manager.
        /// At the risk of serious operational integrity.
        /// Default to Yes
        public DataColumn ColumnDeletable;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("p_email_address_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_valid_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("p_deletable_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnEmailAddress = this.Columns["p_email_address_c"];
            this.ColumnDescription = this.Columns["p_description_c"];
            this.ColumnValid = this.Columns["p_valid_l"];
            this.ColumnDeletable = this.Columns["p_deletable_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnEmailAddress};
        }

        /// Access a typed row by index
        public PEmailRow this[int i]
        {
            get
            {
                return ((PEmailRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public PEmailRow NewRowTyped(bool AWithDefaultValues)
        {
            PEmailRow ret = ((PEmailRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public PEmailRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new PEmailRow(builder);
        }

        /// get typed set of changes
        public PEmailTable GetChangesTyped()
        {
            return ((PEmailTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "PEmail";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "p_email";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetEmailAddressDBName()
        {
            return "p_email_address_c";
        }

        /// get character length for column
        public static short GetEmailAddressLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDescriptionDBName()
        {
            return "p_description_c";
        }

        /// get character length for column
        public static short GetDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetValidDBName()
        {
            return "p_valid_l";
        }

        /// get character length for column
        public static short GetValidLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDeletableDBName()
        {
            return "p_deletable_l";
        }

        /// get character length for column
        public static short GetDeletableLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// email addresses of our organisation
    [Serializable()]
    public class PEmailRow : System.Data.DataRow
    {
        private PEmailTable myTable;

        /// Constructor
        public PEmailRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((PEmailTable)(this.Table));
        }

        ///
        public String EmailAddress
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEmailAddress.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEmailAddress)
                            || (((String)(this[this.myTable.ColumnEmailAddress])) != value)))
                {
                    this[this.myTable.ColumnEmailAddress] = value;
                }
            }
        }

        ///
        public String Description
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDescription)
                            || (((String)(this[this.myTable.ColumnDescription])) != value)))
                {
                    this[this.myTable.ColumnDescription] = value;
                }
            }
        }

        ///
        public Boolean Valid
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnValid.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnValid)
                            || (((Boolean)(this[this.myTable.ColumnValid])) != value)))
                {
                    this[this.myTable.ColumnValid] = value;
                }
            }
        }

        /// This defines if the email code can be deleted.
        /// This can only be updated by the system manager.
        /// At the risk of serious operational integrity.
        /// Default to Yes
        public Boolean Deletable
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDeletable.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDeletable)
                            || (((Boolean)(this[this.myTable.ColumnDeletable])) != value)))
                {
                    this[this.myTable.ColumnDeletable] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnEmailAddress.Ordinal] = "first.last@field.om.org";
            this.SetNull(this.myTable.ColumnDescription);
            this[this.myTable.ColumnValid.Ordinal] = true;
            this[this.myTable.ColumnDeletable.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsEmailAddressNull()
        {
            return this.IsNull(this.myTable.ColumnEmailAddress);
        }

        /// assign NULL value
        public void SetEmailAddressNull()
        {
            this.SetNull(this.myTable.ColumnEmailAddress);
        }

        /// test for NULL value
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnDescription);
        }

        /// assign NULL value
        public void SetDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnDescription);
        }

        /// test for NULL value
        public bool IsValidNull()
        {
            return this.IsNull(this.myTable.ColumnValid);
        }

        /// assign NULL value
        public void SetValidNull()
        {
            this.SetNull(this.myTable.ColumnValid);
        }

        /// test for NULL value
        public bool IsDeletableNull()
        {
            return this.IsNull(this.myTable.ColumnDeletable);
        }

        /// assign NULL value
        public void SetDeletableNull()
        {
            this.SetNull(this.myTable.ColumnDeletable);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Where Petra supports it a cross reference between a file and destination can be established for automatic distribution.
    [Serializable()]
    public class AEmailDestinationTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 130;
        /// used for generic TTypedDataTable functions
        public static short ColumnFileCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnConditionalValueId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnPartnerKeyId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnEmailAddressId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AEmailDestination", "a_email_destination",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FileCode", "a_file_code_c", "File Code", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(1, "ConditionalValue", "a_conditional_value_c", "Condition Value", OdbcType.VarChar, 40, false),
                    new TTypedColumnInfo(2, "PartnerKey", "p_partner_key_n", "Partner", OdbcType.Decimal, 10, true),
                    new TTypedColumnInfo(3, "EmailAddress", "p_email_address_c", "Email Address", OdbcType.VarChar, 500, false),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public AEmailDestinationTable() :
                base("AEmailDestination")
        {
        }

        /// constructor
        public AEmailDestinationTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AEmailDestinationTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// A code to describe the file which is to be distributed via email.
        public DataColumn ColumnFileCode;
        /// If this value matches that in the email program then use the partner kay associated with this value.
        public DataColumn ColumnConditionalValue;
        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public DataColumn ColumnPartnerKey;
        ///
        public DataColumn ColumnEmailAddress;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_file_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_conditional_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_partner_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("p_email_address_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFileCode = this.Columns["a_file_code_c"];
            this.ColumnConditionalValue = this.Columns["a_conditional_value_c"];
            this.ColumnPartnerKey = this.Columns["p_partner_key_n"];
            this.ColumnEmailAddress = this.Columns["p_email_address_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnFileCode,ColumnConditionalValue,ColumnPartnerKey};
        }

        /// Access a typed row by index
        public AEmailDestinationRow this[int i]
        {
            get
            {
                return ((AEmailDestinationRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AEmailDestinationRow NewRowTyped(bool AWithDefaultValues)
        {
            AEmailDestinationRow ret = ((AEmailDestinationRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AEmailDestinationRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AEmailDestinationRow(builder);
        }

        /// get typed set of changes
        public AEmailDestinationTable GetChangesTyped()
        {
            return ((AEmailDestinationTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AEmailDestination";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_email_destination";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFileCodeDBName()
        {
            return "a_file_code_c";
        }

        /// get character length for column
        public static short GetFileCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetConditionalValueDBName()
        {
            return "a_conditional_value_c";
        }

        /// get character length for column
        public static short GetConditionalValueLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetPartnerKeyDBName()
        {
            return "p_partner_key_n";
        }

        /// get character length for column
        public static short GetPartnerKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetEmailAddressDBName()
        {
            return "p_email_address_c";
        }

        /// get character length for column
        public static short GetEmailAddressLength()
        {
            return 500;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Where Petra supports it a cross reference between a file and destination can be established for automatic distribution.
    [Serializable()]
    public class AEmailDestinationRow : System.Data.DataRow
    {
        private AEmailDestinationTable myTable;

        /// Constructor
        public AEmailDestinationRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AEmailDestinationTable)(this.Table));
        }

        /// A code to describe the file which is to be distributed via email.
        public String FileCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFileCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFileCode)
                            || (((String)(this[this.myTable.ColumnFileCode])) != value)))
                {
                    this[this.myTable.ColumnFileCode] = value;
                }
            }
        }

        /// If this value matches that in the email program then use the partner kay associated with this value.
        public String ConditionalValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnConditionalValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnConditionalValue)
                            || (((String)(this[this.myTable.ColumnConditionalValue])) != value)))
                {
                    this[this.myTable.ColumnConditionalValue] = value;
                }
            }
        }

        /// This is the partner key assigned to each partner. It consists of the fund id followed by a computer generated six digit number.
        public Int64 PartnerKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPartnerKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPartnerKey)
                            || (((Int64)(this[this.myTable.ColumnPartnerKey])) != value)))
                {
                    this[this.myTable.ColumnPartnerKey] = value;
                }
            }
        }

        ///
        public String EmailAddress
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnEmailAddress.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnEmailAddress)
                            || (((String)(this[this.myTable.ColumnEmailAddress])) != value)))
                {
                    this[this.myTable.ColumnEmailAddress] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFileCode);
            this.SetNull(this.myTable.ColumnConditionalValue);
            this[this.myTable.ColumnPartnerKey.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnEmailAddress);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFileCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFileCode);
        }

        /// assign NULL value
        public void SetFileCodeNull()
        {
            this.SetNull(this.myTable.ColumnFileCode);
        }

        /// test for NULL value
        public bool IsConditionalValueNull()
        {
            return this.IsNull(this.myTable.ColumnConditionalValue);
        }

        /// assign NULL value
        public void SetConditionalValueNull()
        {
            this.SetNull(this.myTable.ColumnConditionalValue);
        }

        /// test for NULL value
        public bool IsPartnerKeyNull()
        {
            return this.IsNull(this.myTable.ColumnPartnerKey);
        }

        /// assign NULL value
        public void SetPartnerKeyNull()
        {
            this.SetNull(this.myTable.ColumnPartnerKey);
        }

        /// test for NULL value
        public bool IsEmailAddressNull()
        {
            return this.IsNull(this.myTable.ColumnEmailAddress);
        }

        /// assign NULL value
        public void SetEmailAddressNull()
        {
            this.SetNull(this.myTable.ColumnEmailAddress);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Fees owed to another ledger. (e.g. admin grant)
    [Serializable()]
    public class AFeesPayableTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 131;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnFeeCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnChargeOptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnChargePercentageId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnChargeAmountId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnFeeDescriptionId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDrAccountCodeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 13;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AFeesPayable", "a_fees_payable",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "FeeCode", "a_fee_code_c", "Fee Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "ChargeOption", "a_charge_option_c", "Charge Option", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(3, "ChargePercentage", "a_charge_percentage_n", "Charge Percentage", OdbcType.Decimal, 5, false),
                    new TTypedColumnInfo(4, "ChargeAmount", "a_charge_amount_n", "Charge Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(5, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(6, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(7, "FeeDescription", "a_fee_description_c", "Fee Description", OdbcType.VarChar, 48, false),
                    new TTypedColumnInfo(8, "DrAccountCode", "a_dr_account_code_c", "DR Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(9, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AFeesPayableTable() :
                base("AFeesPayable")
        {
        }

        /// constructor
        public AFeesPayableTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AFeesPayableTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// Identifies a specific fee.
        public DataColumn ColumnFeeCode;
        ///
        public DataColumn ColumnChargeOption;
        ///
        public DataColumn ColumnChargePercentage;
        /// This is a the max or min amount charged dependent on the charge option.  The value is the number of currency units.
        public DataColumn ColumnChargeAmount;
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// explain what this fee is for.
        public DataColumn ColumnFeeDescription;
        /// This identifies the account for the DR side of the financial transaction.
        public DataColumn ColumnDrAccountCode;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_option_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_percentage_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_dr_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnFeeCode = this.Columns["a_fee_code_c"];
            this.ColumnChargeOption = this.Columns["a_charge_option_c"];
            this.ColumnChargePercentage = this.Columns["a_charge_percentage_n"];
            this.ColumnChargeAmount = this.Columns["a_charge_amount_n"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnFeeDescription = this.Columns["a_fee_description_c"];
            this.ColumnDrAccountCode = this.Columns["a_dr_account_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnFeeCode};
        }

        /// Access a typed row by index
        public AFeesPayableRow this[int i]
        {
            get
            {
                return ((AFeesPayableRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AFeesPayableRow NewRowTyped(bool AWithDefaultValues)
        {
            AFeesPayableRow ret = ((AFeesPayableRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AFeesPayableRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFeesPayableRow(builder);
        }

        /// get typed set of changes
        public AFeesPayableTable GetChangesTyped()
        {
            return ((AFeesPayableTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AFeesPayable";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_fees_payable";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFeeCodeDBName()
        {
            return "a_fee_code_c";
        }

        /// get character length for column
        public static short GetFeeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetChargeOptionDBName()
        {
            return "a_charge_option_c";
        }

        /// get character length for column
        public static short GetChargeOptionLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetChargePercentageDBName()
        {
            return "a_charge_percentage_n";
        }

        /// get character length for column
        public static short GetChargePercentageLength()
        {
            return 5;
        }

        /// get the name of the field in the database for this column
        public static string GetChargeAmountDBName()
        {
            return "a_charge_amount_n";
        }

        /// get character length for column
        public static short GetChargeAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetFeeDescriptionDBName()
        {
            return "a_fee_description_c";
        }

        /// get character length for column
        public static short GetFeeDescriptionLength()
        {
            return 48;
        }

        /// get the name of the field in the database for this column
        public static string GetDrAccountCodeDBName()
        {
            return "a_dr_account_code_c";
        }

        /// get character length for column
        public static short GetDrAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Fees owed to another ledger. (e.g. admin grant)
    [Serializable()]
    public class AFeesPayableRow : System.Data.DataRow
    {
        private AFeesPayableTable myTable;

        /// Constructor
        public AFeesPayableRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AFeesPayableTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// Identifies a specific fee.
        public String FeeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeCode)
                            || (((String)(this[this.myTable.ColumnFeeCode])) != value)))
                {
                    this[this.myTable.ColumnFeeCode] = value;
                }
            }
        }

        ///
        public String ChargeOption
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeOption.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeOption)
                            || (((String)(this[this.myTable.ColumnChargeOption])) != value)))
                {
                    this[this.myTable.ColumnChargeOption] = value;
                }
            }
        }

        ///
        public Decimal ChargePercentage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargePercentage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargePercentage)
                            || (((Decimal)(this[this.myTable.ColumnChargePercentage])) != value)))
                {
                    this[this.myTable.ColumnChargePercentage] = value;
                }
            }
        }

        /// This is a the max or min amount charged dependent on the charge option.  The value is the number of currency units.
        public Decimal ChargeAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeAmount)
                            || (((Decimal)(this[this.myTable.ColumnChargeAmount])) != value)))
                {
                    this[this.myTable.ColumnChargeAmount] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// explain what this fee is for.
        public String FeeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeDescription)
                            || (((String)(this[this.myTable.ColumnFeeDescription])) != value)))
                {
                    this[this.myTable.ColumnFeeDescription] = value;
                }
            }
        }

        /// This identifies the account for the DR side of the financial transaction.
        public String DrAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDrAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDrAccountCode)
                            || (((String)(this[this.myTable.ColumnDrAccountCode])) != value)))
                {
                    this[this.myTable.ColumnDrAccountCode] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFeeCode);
            this.SetNull(this.myTable.ColumnChargeOption);
            this[this.myTable.ColumnChargePercentage.Ordinal] = 0;
            this[this.myTable.ColumnChargeAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnFeeDescription);
            this.SetNull(this.myTable.ColumnDrAccountCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsFeeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFeeCode);
        }

        /// assign NULL value
        public void SetFeeCodeNull()
        {
            this.SetNull(this.myTable.ColumnFeeCode);
        }

        /// test for NULL value
        public bool IsChargeOptionNull()
        {
            return this.IsNull(this.myTable.ColumnChargeOption);
        }

        /// assign NULL value
        public void SetChargeOptionNull()
        {
            this.SetNull(this.myTable.ColumnChargeOption);
        }

        /// test for NULL value
        public bool IsChargePercentageNull()
        {
            return this.IsNull(this.myTable.ColumnChargePercentage);
        }

        /// assign NULL value
        public void SetChargePercentageNull()
        {
            this.SetNull(this.myTable.ColumnChargePercentage);
        }

        /// test for NULL value
        public bool IsChargeAmountNull()
        {
            return this.IsNull(this.myTable.ColumnChargeAmount);
        }

        /// assign NULL value
        public void SetChargeAmountNull()
        {
            this.SetNull(this.myTable.ColumnChargeAmount);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsFeeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnFeeDescription);
        }

        /// assign NULL value
        public void SetFeeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnFeeDescription);
        }

        /// test for NULL value
        public bool IsDrAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDrAccountCode);
        }

        /// assign NULL value
        public void SetDrAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnDrAccountCode);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Charges to collect from other ledgers. (e.g. office admin fee)
    [Serializable()]
    public class AFeesReceivableTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 132;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnFeeCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnChargeOptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnChargePercentageId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnChargeAmountId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnFeeDescriptionId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDrAccountCodeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 13;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AFeesReceivable", "a_fees_receivable",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "FeeCode", "a_fee_code_c", "Fee Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "ChargeOption", "a_charge_option_c", "Charge Option", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(3, "ChargePercentage", "a_charge_percentage_n", "Charge Percentage", OdbcType.Decimal, 5, false),
                    new TTypedColumnInfo(4, "ChargeAmount", "a_charge_amount_n", "Charge Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(5, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(6, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(7, "FeeDescription", "a_fee_description_c", "Fee Description", OdbcType.VarChar, 48, false),
                    new TTypedColumnInfo(8, "DrAccountCode", "a_dr_account_code_c", "DR Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(9, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AFeesReceivableTable() :
                base("AFeesReceivable")
        {
        }

        /// constructor
        public AFeesReceivableTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AFeesReceivableTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// Identifies a specific fee.
        public DataColumn ColumnFeeCode;
        ///
        public DataColumn ColumnChargeOption;
        ///
        public DataColumn ColumnChargePercentage;
        /// This is a the max or min amount charged dependent on the charge option in number of currency units
        public DataColumn ColumnChargeAmount;
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// Description of what this admin charge is for.
        public DataColumn ColumnFeeDescription;
        /// This identifies the account for the DR side of the financial transaction.
        public DataColumn ColumnDrAccountCode;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_option_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_percentage_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_charge_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_fee_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_dr_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnFeeCode = this.Columns["a_fee_code_c"];
            this.ColumnChargeOption = this.Columns["a_charge_option_c"];
            this.ColumnChargePercentage = this.Columns["a_charge_percentage_n"];
            this.ColumnChargeAmount = this.Columns["a_charge_amount_n"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnFeeDescription = this.Columns["a_fee_description_c"];
            this.ColumnDrAccountCode = this.Columns["a_dr_account_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnFeeCode};
        }

        /// Access a typed row by index
        public AFeesReceivableRow this[int i]
        {
            get
            {
                return ((AFeesReceivableRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AFeesReceivableRow NewRowTyped(bool AWithDefaultValues)
        {
            AFeesReceivableRow ret = ((AFeesReceivableRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AFeesReceivableRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFeesReceivableRow(builder);
        }

        /// get typed set of changes
        public AFeesReceivableTable GetChangesTyped()
        {
            return ((AFeesReceivableTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AFeesReceivable";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_fees_receivable";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFeeCodeDBName()
        {
            return "a_fee_code_c";
        }

        /// get character length for column
        public static short GetFeeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetChargeOptionDBName()
        {
            return "a_charge_option_c";
        }

        /// get character length for column
        public static short GetChargeOptionLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetChargePercentageDBName()
        {
            return "a_charge_percentage_n";
        }

        /// get character length for column
        public static short GetChargePercentageLength()
        {
            return 5;
        }

        /// get the name of the field in the database for this column
        public static string GetChargeAmountDBName()
        {
            return "a_charge_amount_n";
        }

        /// get character length for column
        public static short GetChargeAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetFeeDescriptionDBName()
        {
            return "a_fee_description_c";
        }

        /// get character length for column
        public static short GetFeeDescriptionLength()
        {
            return 48;
        }

        /// get the name of the field in the database for this column
        public static string GetDrAccountCodeDBName()
        {
            return "a_dr_account_code_c";
        }

        /// get character length for column
        public static short GetDrAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Charges to collect from other ledgers. (e.g. office admin fee)
    [Serializable()]
    public class AFeesReceivableRow : System.Data.DataRow
    {
        private AFeesReceivableTable myTable;

        /// Constructor
        public AFeesReceivableRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AFeesReceivableTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// Identifies a specific fee.
        public String FeeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeCode)
                            || (((String)(this[this.myTable.ColumnFeeCode])) != value)))
                {
                    this[this.myTable.ColumnFeeCode] = value;
                }
            }
        }

        ///
        public String ChargeOption
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeOption.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeOption)
                            || (((String)(this[this.myTable.ColumnChargeOption])) != value)))
                {
                    this[this.myTable.ColumnChargeOption] = value;
                }
            }
        }

        ///
        public Decimal ChargePercentage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargePercentage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargePercentage)
                            || (((Decimal)(this[this.myTable.ColumnChargePercentage])) != value)))
                {
                    this[this.myTable.ColumnChargePercentage] = value;
                }
            }
        }

        /// This is a the max or min amount charged dependent on the charge option in number of currency units
        public Decimal ChargeAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnChargeAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnChargeAmount)
                            || (((Decimal)(this[this.myTable.ColumnChargeAmount])) != value)))
                {
                    this[this.myTable.ColumnChargeAmount] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Description of what this admin charge is for.
        public String FeeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFeeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFeeDescription)
                            || (((String)(this[this.myTable.ColumnFeeDescription])) != value)))
                {
                    this[this.myTable.ColumnFeeDescription] = value;
                }
            }
        }

        /// This identifies the account for the DR side of the financial transaction.
        public String DrAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDrAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDrAccountCode)
                            || (((String)(this[this.myTable.ColumnDrAccountCode])) != value)))
                {
                    this[this.myTable.ColumnDrAccountCode] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFeeCode);
            this.SetNull(this.myTable.ColumnChargeOption);
            this[this.myTable.ColumnChargePercentage.Ordinal] = 0;
            this[this.myTable.ColumnChargeAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnFeeDescription);
            this.SetNull(this.myTable.ColumnDrAccountCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsFeeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFeeCode);
        }

        /// assign NULL value
        public void SetFeeCodeNull()
        {
            this.SetNull(this.myTable.ColumnFeeCode);
        }

        /// test for NULL value
        public bool IsChargeOptionNull()
        {
            return this.IsNull(this.myTable.ColumnChargeOption);
        }

        /// assign NULL value
        public void SetChargeOptionNull()
        {
            this.SetNull(this.myTable.ColumnChargeOption);
        }

        /// test for NULL value
        public bool IsChargePercentageNull()
        {
            return this.IsNull(this.myTable.ColumnChargePercentage);
        }

        /// assign NULL value
        public void SetChargePercentageNull()
        {
            this.SetNull(this.myTable.ColumnChargePercentage);
        }

        /// test for NULL value
        public bool IsChargeAmountNull()
        {
            return this.IsNull(this.myTable.ColumnChargeAmount);
        }

        /// assign NULL value
        public void SetChargeAmountNull()
        {
            this.SetNull(this.myTable.ColumnChargeAmount);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsFeeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnFeeDescription);
        }

        /// assign NULL value
        public void SetFeeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnFeeDescription);
        }

        /// test for NULL value
        public bool IsDrAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDrAccountCode);
        }

        /// assign NULL value
        public void SetDrAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnDrAccountCode);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// The form description for user definable forms such as receipts
    [Serializable()]
    public class AFormTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 133;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormDescriptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormTypeCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnNumberOfDetailsId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrintInBoldId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnLinesOnPageId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnMinimumAmountId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnOptionsId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 13;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AForm", "a_form",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FormCode", "a_form_code_c", "Form Code", OdbcType.VarChar, 20, true),
                    new TTypedColumnInfo(1, "FormName", "a_form_name_c", "Form Name", OdbcType.VarChar, 20, true),
                    new TTypedColumnInfo(2, "FormDescription", "a_form_description_c", "Form Description", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(3, "FormTypeCode", "a_form_type_code_c", "Form Type", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(4, "NumberOfDetails", "a_number_of_details_i", "Number of Detail Lines", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(5, "PrintInBold", "a_print_in_bold_l", "Print in Bold", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(6, "LinesOnPage", "a_lines_on_page_i", "Number of Lines on Page", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(7, "MinimumAmount", "a_minimum_amount_n", "Minimum Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(8, "Options", "a_options_c", "Options", OdbcType.VarChar, 64, false),
                    new TTypedColumnInfo(9, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AFormTable() :
                base("AForm")
        {
        }

        /// constructor
        public AFormTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AFormTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The code which defines the type of form described in the table
        public DataColumn ColumnFormCode;
        /// The name of the form being created for the form code.
        public DataColumn ColumnFormName;
        /// Description of the form
        public DataColumn ColumnFormDescription;
        /// If there are several types of form then it can be specified here.  Eg an annual receipt and an individual receipt.
        public DataColumn ColumnFormTypeCode;
        /// The number of repeating lines that will be displayed on each page of a form.
        public DataColumn ColumnNumberOfDetails;
        /// Is the report to be formatted to print in bold or not.
        public DataColumn ColumnPrintInBold;
        /// The total number of lines that can be displayed on the page
        public DataColumn ColumnLinesOnPage;
        /// The minimum amount that is acceptable on a receipt
        public DataColumn ColumnMinimumAmount;
        /// Allows the exclusion of certain records from a report
        public DataColumn ColumnOptions;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_form_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_number_of_details_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_print_in_bold_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_lines_on_page_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_minimum_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_options_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormCode = this.Columns["a_form_code_c"];
            this.ColumnFormName = this.Columns["a_form_name_c"];
            this.ColumnFormDescription = this.Columns["a_form_description_c"];
            this.ColumnFormTypeCode = this.Columns["a_form_type_code_c"];
            this.ColumnNumberOfDetails = this.Columns["a_number_of_details_i"];
            this.ColumnPrintInBold = this.Columns["a_print_in_bold_l"];
            this.ColumnLinesOnPage = this.Columns["a_lines_on_page_i"];
            this.ColumnMinimumAmount = this.Columns["a_minimum_amount_n"];
            this.ColumnOptions = this.Columns["a_options_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnFormCode,ColumnFormName};
        }

        /// Access a typed row by index
        public AFormRow this[int i]
        {
            get
            {
                return ((AFormRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AFormRow NewRowTyped(bool AWithDefaultValues)
        {
            AFormRow ret = ((AFormRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AFormRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFormRow(builder);
        }

        /// get typed set of changes
        public AFormTable GetChangesTyped()
        {
            return ((AFormTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AForm";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_form";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFormCodeDBName()
        {
            return "a_form_code_c";
        }

        /// get character length for column
        public static short GetFormCodeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "a_form_name_c";
        }

        /// get character length for column
        public static short GetFormNameLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetFormDescriptionDBName()
        {
            return "a_form_description_c";
        }

        /// get character length for column
        public static short GetFormDescriptionLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetFormTypeCodeDBName()
        {
            return "a_form_type_code_c";
        }

        /// get character length for column
        public static short GetFormTypeCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetNumberOfDetailsDBName()
        {
            return "a_number_of_details_i";
        }

        /// get character length for column
        public static short GetNumberOfDetailsLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPrintInBoldDBName()
        {
            return "a_print_in_bold_l";
        }

        /// get character length for column
        public static short GetPrintInBoldLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLinesOnPageDBName()
        {
            return "a_lines_on_page_i";
        }

        /// get character length for column
        public static short GetLinesOnPageLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetMinimumAmountDBName()
        {
            return "a_minimum_amount_n";
        }

        /// get character length for column
        public static short GetMinimumAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetOptionsDBName()
        {
            return "a_options_c";
        }

        /// get character length for column
        public static short GetOptionsLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// The form description for user definable forms such as receipts
    [Serializable()]
    public class AFormRow : System.Data.DataRow
    {
        private AFormTable myTable;

        /// Constructor
        public AFormRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AFormTable)(this.Table));
        }

        /// The code which defines the type of form described in the table
        public String FormCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormCode)
                            || (((String)(this[this.myTable.ColumnFormCode])) != value)))
                {
                    this[this.myTable.ColumnFormCode] = value;
                }
            }
        }

        /// The name of the form being created for the form code.
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName)
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }

        /// Description of the form
        public String FormDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormDescription)
                            || (((String)(this[this.myTable.ColumnFormDescription])) != value)))
                {
                    this[this.myTable.ColumnFormDescription] = value;
                }
            }
        }

        /// If there are several types of form then it can be specified here.  Eg an annual receipt and an individual receipt.
        public String FormTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormTypeCode)
                            || (((String)(this[this.myTable.ColumnFormTypeCode])) != value)))
                {
                    this[this.myTable.ColumnFormTypeCode] = value;
                }
            }
        }

        /// The number of repeating lines that will be displayed on each page of a form.
        public Int32 NumberOfDetails
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNumberOfDetails.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNumberOfDetails)
                            || (((Int32)(this[this.myTable.ColumnNumberOfDetails])) != value)))
                {
                    this[this.myTable.ColumnNumberOfDetails] = value;
                }
            }
        }

        /// Is the report to be formatted to print in bold or not.
        public Boolean PrintInBold
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrintInBold.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrintInBold)
                            || (((Boolean)(this[this.myTable.ColumnPrintInBold])) != value)))
                {
                    this[this.myTable.ColumnPrintInBold] = value;
                }
            }
        }

        /// The total number of lines that can be displayed on the page
        public Int32 LinesOnPage
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLinesOnPage.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLinesOnPage)
                            || (((Int32)(this[this.myTable.ColumnLinesOnPage])) != value)))
                {
                    this[this.myTable.ColumnLinesOnPage] = value;
                }
            }
        }

        /// The minimum amount that is acceptable on a receipt
        public Decimal MinimumAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMinimumAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMinimumAmount)
                            || (((Decimal)(this[this.myTable.ColumnMinimumAmount])) != value)))
                {
                    this[this.myTable.ColumnMinimumAmount] = value;
                }
            }
        }

        /// Allows the exclusion of certain records from a report
        public String Options
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnOptions.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnOptions)
                            || (((String)(this[this.myTable.ColumnOptions])) != value)))
                {
                    this[this.myTable.ColumnOptions] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormCode);
            this.SetNull(this.myTable.ColumnFormName);
            this.SetNull(this.myTable.ColumnFormDescription);
            this.SetNull(this.myTable.ColumnFormTypeCode);
            this[this.myTable.ColumnNumberOfDetails.Ordinal] = 0;
            this[this.myTable.ColumnPrintInBold.Ordinal] = false;
            this[this.myTable.ColumnLinesOnPage.Ordinal] = 66;
            this[this.myTable.ColumnMinimumAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnOptions);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFormCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFormCode);
        }

        /// assign NULL value
        public void SetFormCodeNull()
        {
            this.SetNull(this.myTable.ColumnFormCode);
        }

        /// test for NULL value
        public bool IsFormNameNull()
        {
            return this.IsNull(this.myTable.ColumnFormName);
        }

        /// assign NULL value
        public void SetFormNameNull()
        {
            this.SetNull(this.myTable.ColumnFormName);
        }

        /// test for NULL value
        public bool IsFormDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnFormDescription);
        }

        /// assign NULL value
        public void SetFormDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnFormDescription);
        }

        /// test for NULL value
        public bool IsFormTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFormTypeCode);
        }

        /// assign NULL value
        public void SetFormTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnFormTypeCode);
        }

        /// test for NULL value
        public bool IsNumberOfDetailsNull()
        {
            return this.IsNull(this.myTable.ColumnNumberOfDetails);
        }

        /// assign NULL value
        public void SetNumberOfDetailsNull()
        {
            this.SetNull(this.myTable.ColumnNumberOfDetails);
        }

        /// test for NULL value
        public bool IsPrintInBoldNull()
        {
            return this.IsNull(this.myTable.ColumnPrintInBold);
        }

        /// assign NULL value
        public void SetPrintInBoldNull()
        {
            this.SetNull(this.myTable.ColumnPrintInBold);
        }

        /// test for NULL value
        public bool IsLinesOnPageNull()
        {
            return this.IsNull(this.myTable.ColumnLinesOnPage);
        }

        /// assign NULL value
        public void SetLinesOnPageNull()
        {
            this.SetNull(this.myTable.ColumnLinesOnPage);
        }

        /// test for NULL value
        public bool IsMinimumAmountNull()
        {
            return this.IsNull(this.myTable.ColumnMinimumAmount);
        }

        /// assign NULL value
        public void SetMinimumAmountNull()
        {
            this.SetNull(this.myTable.ColumnMinimumAmount);
        }

        /// test for NULL value
        public bool IsOptionsNull()
        {
            return this.IsNull(this.myTable.ColumnOptions);
        }

        /// assign NULL value
        public void SetOptionsNull()
        {
            this.SetNull(this.myTable.ColumnOptions);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// The element types that are available for placing in forms.
    [Serializable()]
    public class AFormElementTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 134;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormElementTypeCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormElementTypeDescId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDefaultLengthId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AFormElementType", "a_form_element_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FormCode", "a_form_code_c", "Form Code", OdbcType.VarChar, 20, true),
                    new TTypedColumnInfo(1, "FormElementTypeCode", "a_form_element_type_code_c", "Form Element Type Code", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(2, "FormElementTypeDesc", "a_form_element_type_desc_c", "Element Type Description", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(3, "DefaultLength", "a_default_length_i", "Default Length", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AFormElementTypeTable() :
                base("AFormElementType")
        {
        }

        /// constructor
        public AFormElementTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AFormElementTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The code which defines the type of form described in the table
        public DataColumn ColumnFormCode;
        /// The code of an element type that can be positioned for use on a form.
        public DataColumn ColumnFormElementTypeCode;
        /// Description of Element Type
        public DataColumn ColumnFormElementTypeDesc;
        ///
        public DataColumn ColumnDefaultLength;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_form_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_element_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_element_type_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_default_length_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormCode = this.Columns["a_form_code_c"];
            this.ColumnFormElementTypeCode = this.Columns["a_form_element_type_code_c"];
            this.ColumnFormElementTypeDesc = this.Columns["a_form_element_type_desc_c"];
            this.ColumnDefaultLength = this.Columns["a_default_length_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnFormCode,ColumnFormElementTypeCode};
        }

        /// Access a typed row by index
        public AFormElementTypeRow this[int i]
        {
            get
            {
                return ((AFormElementTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AFormElementTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            AFormElementTypeRow ret = ((AFormElementTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AFormElementTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFormElementTypeRow(builder);
        }

        /// get typed set of changes
        public AFormElementTypeTable GetChangesTyped()
        {
            return ((AFormElementTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AFormElementType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_form_element_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFormCodeDBName()
        {
            return "a_form_code_c";
        }

        /// get character length for column
        public static short GetFormCodeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetFormElementTypeCodeDBName()
        {
            return "a_form_element_type_code_c";
        }

        /// get character length for column
        public static short GetFormElementTypeCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetFormElementTypeDescDBName()
        {
            return "a_form_element_type_desc_c";
        }

        /// get character length for column
        public static short GetFormElementTypeDescLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetDefaultLengthDBName()
        {
            return "a_default_length_i";
        }

        /// get character length for column
        public static short GetDefaultLengthLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// The element types that are available for placing in forms.
    [Serializable()]
    public class AFormElementTypeRow : System.Data.DataRow
    {
        private AFormElementTypeTable myTable;

        /// Constructor
        public AFormElementTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AFormElementTypeTable)(this.Table));
        }

        /// The code which defines the type of form described in the table
        public String FormCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormCode)
                            || (((String)(this[this.myTable.ColumnFormCode])) != value)))
                {
                    this[this.myTable.ColumnFormCode] = value;
                }
            }
        }

        /// The code of an element type that can be positioned for use on a form.
        public String FormElementTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormElementTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormElementTypeCode)
                            || (((String)(this[this.myTable.ColumnFormElementTypeCode])) != value)))
                {
                    this[this.myTable.ColumnFormElementTypeCode] = value;
                }
            }
        }

        /// Description of Element Type
        public String FormElementTypeDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormElementTypeDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormElementTypeDesc)
                            || (((String)(this[this.myTable.ColumnFormElementTypeDesc])) != value)))
                {
                    this[this.myTable.ColumnFormElementTypeDesc] = value;
                }
            }
        }

        ///
        public Int32 DefaultLength
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDefaultLength.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDefaultLength)
                            || (((Int32)(this[this.myTable.ColumnDefaultLength])) != value)))
                {
                    this[this.myTable.ColumnDefaultLength] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormCode);
            this.SetNull(this.myTable.ColumnFormElementTypeCode);
            this.SetNull(this.myTable.ColumnFormElementTypeDesc);
            this[this.myTable.ColumnDefaultLength.Ordinal] = 1;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFormCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFormCode);
        }

        /// assign NULL value
        public void SetFormCodeNull()
        {
            this.SetNull(this.myTable.ColumnFormCode);
        }

        /// test for NULL value
        public bool IsFormElementTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFormElementTypeCode);
        }

        /// assign NULL value
        public void SetFormElementTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnFormElementTypeCode);
        }

        /// test for NULL value
        public bool IsFormElementTypeDescNull()
        {
            return this.IsNull(this.myTable.ColumnFormElementTypeDesc);
        }

        /// assign NULL value
        public void SetFormElementTypeDescNull()
        {
            this.SetNull(this.myTable.ColumnFormElementTypeDesc);
        }

        /// test for NULL value
        public bool IsDefaultLengthNull()
        {
            return this.IsNull(this.myTable.ColumnDefaultLength);
        }

        /// assign NULL value
        public void SetDefaultLengthNull()
        {
            this.SetNull(this.myTable.ColumnDefaultLength);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Each element that can be displayed on a form is defined on this table.
    [Serializable()]
    public class AFormElementTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 135;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormNameId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormSequenceId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnFormElementTypeCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnColumnId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnRowId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnLengthId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnSkipId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnWhenPrintId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnLiteralTextId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 14;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AFormElement", "a_form_element",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FormCode", "a_form_code_c", "Form Code", OdbcType.VarChar, 20, true),
                    new TTypedColumnInfo(1, "FormName", "a_form_name_c", "Form Name", OdbcType.VarChar, 20, true),
                    new TTypedColumnInfo(2, "FormSequence", "a_form_sequence_i", "Form element sequence", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "FormElementTypeCode", "a_form_element_type_code_c", "Form Element Type Code", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(4, "Column", "a_column_i", "Column", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(5, "Row", "a_row_i", "Row", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(6, "Length", "a_length_i", "Length to display", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(7, "Skip", "a_skip_i", "Characters to skip", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(8, "WhenPrint", "a_when_print_c", "When Print?", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(9, "LiteralText", "a_literal_text_c", "Literal Text", OdbcType.VarChar, 2000, false),
                    new TTypedColumnInfo(10, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public AFormElementTable() :
                base("AFormElement")
        {
        }

        /// constructor
        public AFormElementTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AFormElementTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The code which defines the type of form described in the table
        public DataColumn ColumnFormCode;
        /// The name of the form being created for the form code.
        public DataColumn ColumnFormName;
        /// Unique identifier of each form element within a form
        public DataColumn ColumnFormSequence;
        /// The code of an element type that can be possitioned for use on a form.
        public DataColumn ColumnFormElementTypeCode;
        /// The column that the element is to be displayed at on the form.
        public DataColumn ColumnColumn;
        /// The row on the page that the element is to be displayed at.
        public DataColumn ColumnRow;
        /// The display length for the element.  e.g. it may be necessary to truncate fields.
        public DataColumn ColumnLength;
        /// This stores the number of characters to skip prior to printing.  It can be used to spread a description over two lines.
        public DataColumn ColumnSkip;
        /// Indicates when the element is printed.  This would indicate detail lines, first, last page etc.
        public DataColumn ColumnWhenPrint;
        /// Text to be displayed if the element is defined as a literal.
        public DataColumn ColumnLiteralText;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_form_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_name_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_form_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_form_element_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_column_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_row_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_length_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_skip_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_when_print_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_literal_text_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFormCode = this.Columns["a_form_code_c"];
            this.ColumnFormName = this.Columns["a_form_name_c"];
            this.ColumnFormSequence = this.Columns["a_form_sequence_i"];
            this.ColumnFormElementTypeCode = this.Columns["a_form_element_type_code_c"];
            this.ColumnColumn = this.Columns["a_column_i"];
            this.ColumnRow = this.Columns["a_row_i"];
            this.ColumnLength = this.Columns["a_length_i"];
            this.ColumnSkip = this.Columns["a_skip_i"];
            this.ColumnWhenPrint = this.Columns["a_when_print_c"];
            this.ColumnLiteralText = this.Columns["a_literal_text_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnFormCode,ColumnFormName,ColumnFormSequence};
        }

        /// Access a typed row by index
        public AFormElementRow this[int i]
        {
            get
            {
                return ((AFormElementRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AFormElementRow NewRowTyped(bool AWithDefaultValues)
        {
            AFormElementRow ret = ((AFormElementRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AFormElementRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFormElementRow(builder);
        }

        /// get typed set of changes
        public AFormElementTable GetChangesTyped()
        {
            return ((AFormElementTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AFormElement";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_form_element";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFormCodeDBName()
        {
            return "a_form_code_c";
        }

        /// get character length for column
        public static short GetFormCodeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetFormNameDBName()
        {
            return "a_form_name_c";
        }

        /// get character length for column
        public static short GetFormNameLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetFormSequenceDBName()
        {
            return "a_form_sequence_i";
        }

        /// get character length for column
        public static short GetFormSequenceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFormElementTypeCodeDBName()
        {
            return "a_form_element_type_code_c";
        }

        /// get character length for column
        public static short GetFormElementTypeCodeLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetColumnDBName()
        {
            return "a_column_i";
        }

        /// get character length for column
        public static short GetColumnLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRowDBName()
        {
            return "a_row_i";
        }

        /// get character length for column
        public static short GetRowLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLengthDBName()
        {
            return "a_length_i";
        }

        /// get character length for column
        public static short GetLengthLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSkipDBName()
        {
            return "a_skip_i";
        }

        /// get character length for column
        public static short GetSkipLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetWhenPrintDBName()
        {
            return "a_when_print_c";
        }

        /// get character length for column
        public static short GetWhenPrintLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetLiteralTextDBName()
        {
            return "a_literal_text_c";
        }

        /// get character length for column
        public static short GetLiteralTextLength()
        {
            return 2000;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Each element that can be displayed on a form is defined on this table.
    [Serializable()]
    public class AFormElementRow : System.Data.DataRow
    {
        private AFormElementTable myTable;

        /// Constructor
        public AFormElementRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AFormElementTable)(this.Table));
        }

        /// The code which defines the type of form described in the table
        public String FormCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormCode)
                            || (((String)(this[this.myTable.ColumnFormCode])) != value)))
                {
                    this[this.myTable.ColumnFormCode] = value;
                }
            }
        }

        /// The name of the form being created for the form code.
        public String FormName
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormName.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormName)
                            || (((String)(this[this.myTable.ColumnFormName])) != value)))
                {
                    this[this.myTable.ColumnFormName] = value;
                }
            }
        }

        /// Unique identifier of each form element within a form
        public Int32 FormSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormSequence)
                            || (((Int32)(this[this.myTable.ColumnFormSequence])) != value)))
                {
                    this[this.myTable.ColumnFormSequence] = value;
                }
            }
        }

        /// The code of an element type that can be possitioned for use on a form.
        public String FormElementTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFormElementTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFormElementTypeCode)
                            || (((String)(this[this.myTable.ColumnFormElementTypeCode])) != value)))
                {
                    this[this.myTable.ColumnFormElementTypeCode] = value;
                }
            }
        }

        /// The column that the element is to be displayed at on the form.
        public Int32 Column
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnColumn.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnColumn)
                            || (((Int32)(this[this.myTable.ColumnColumn])) != value)))
                {
                    this[this.myTable.ColumnColumn] = value;
                }
            }
        }

        /// The row on the page that the element is to be displayed at.
        public Int32 Row
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRow.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRow)
                            || (((Int32)(this[this.myTable.ColumnRow])) != value)))
                {
                    this[this.myTable.ColumnRow] = value;
                }
            }
        }

        /// The display length for the element.  e.g. it may be necessary to truncate fields.
        public Int32 Length
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLength.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLength)
                            || (((Int32)(this[this.myTable.ColumnLength])) != value)))
                {
                    this[this.myTable.ColumnLength] = value;
                }
            }
        }

        /// This stores the number of characters to skip prior to printing.  It can be used to spread a description over two lines.
        public Int32 Skip
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSkip.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSkip)
                            || (((Int32)(this[this.myTable.ColumnSkip])) != value)))
                {
                    this[this.myTable.ColumnSkip] = value;
                }
            }
        }

        /// Indicates when the element is printed.  This would indicate detail lines, first, last page etc.
        public String WhenPrint
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnWhenPrint.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnWhenPrint)
                            || (((String)(this[this.myTable.ColumnWhenPrint])) != value)))
                {
                    this[this.myTable.ColumnWhenPrint] = value;
                }
            }
        }

        /// Text to be displayed if the element is defined as a literal.
        public String LiteralText
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLiteralText.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLiteralText)
                            || (((String)(this[this.myTable.ColumnLiteralText])) != value)))
                {
                    this[this.myTable.ColumnLiteralText] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFormCode);
            this.SetNull(this.myTable.ColumnFormName);
            this[this.myTable.ColumnFormSequence.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnFormElementTypeCode);
            this[this.myTable.ColumnColumn.Ordinal] = 1;
            this[this.myTable.ColumnRow.Ordinal] = 1;
            this[this.myTable.ColumnLength.Ordinal] = 1;
            this[this.myTable.ColumnSkip.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnWhenPrint);
            this.SetNull(this.myTable.ColumnLiteralText);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFormCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFormCode);
        }

        /// assign NULL value
        public void SetFormCodeNull()
        {
            this.SetNull(this.myTable.ColumnFormCode);
        }

        /// test for NULL value
        public bool IsFormNameNull()
        {
            return this.IsNull(this.myTable.ColumnFormName);
        }

        /// assign NULL value
        public void SetFormNameNull()
        {
            this.SetNull(this.myTable.ColumnFormName);
        }

        /// test for NULL value
        public bool IsFormSequenceNull()
        {
            return this.IsNull(this.myTable.ColumnFormSequence);
        }

        /// assign NULL value
        public void SetFormSequenceNull()
        {
            this.SetNull(this.myTable.ColumnFormSequence);
        }

        /// test for NULL value
        public bool IsFormElementTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFormElementTypeCode);
        }

        /// assign NULL value
        public void SetFormElementTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnFormElementTypeCode);
        }

        /// test for NULL value
        public bool IsColumnNull()
        {
            return this.IsNull(this.myTable.ColumnColumn);
        }

        /// assign NULL value
        public void SetColumnNull()
        {
            this.SetNull(this.myTable.ColumnColumn);
        }

        /// test for NULL value
        public bool IsRowNull()
        {
            return this.IsNull(this.myTable.ColumnRow);
        }

        /// assign NULL value
        public void SetRowNull()
        {
            this.SetNull(this.myTable.ColumnRow);
        }

        /// test for NULL value
        public bool IsLengthNull()
        {
            return this.IsNull(this.myTable.ColumnLength);
        }

        /// assign NULL value
        public void SetLengthNull()
        {
            this.SetNull(this.myTable.ColumnLength);
        }

        /// test for NULL value
        public bool IsSkipNull()
        {
            return this.IsNull(this.myTable.ColumnSkip);
        }

        /// assign NULL value
        public void SetSkipNull()
        {
            this.SetNull(this.myTable.ColumnSkip);
        }

        /// test for NULL value
        public bool IsWhenPrintNull()
        {
            return this.IsNull(this.myTable.ColumnWhenPrint);
        }

        /// assign NULL value
        public void SetWhenPrintNull()
        {
            this.SetNull(this.myTable.ColumnWhenPrint);
        }

        /// test for NULL value
        public bool IsLiteralTextNull()
        {
            return this.IsNull(this.myTable.ColumnLiteralText);
        }

        /// assign NULL value
        public void SetLiteralTextNull()
        {
            this.SetNull(this.myTable.ColumnLiteralText);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Available analysis values that may be given to a transaction for each analysis type.
    [Serializable()]
    public class AFreeformAnalysisTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 136;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisTypeCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisValueId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnActiveId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 8;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AFreeformAnalysis", "a_freeform_analysis",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "AnalysisTypeCode", "a_analysis_type_code_c", "Analysis Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(1, "AnalysisValue", "a_analysis_value_c", "Value", OdbcType.VarChar, 80, true),
                    new TTypedColumnInfo(2, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "Active", "a_active_l", "Active", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(4, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    2, 0, 1
                }));
            return true;
        }

        /// constructor
        public AFreeformAnalysisTable() :
                base("AFreeformAnalysis")
        {
        }

        /// constructor
        public AFreeformAnalysisTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AFreeformAnalysisTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnAnalysisTypeCode;
        /// Value of analysis code
        public DataColumn ColumnAnalysisValue;
        /// Ledger Number
        public DataColumn ColumnLedgerNumber;
        /// Analysis attribute values cannot be deleted, because they are needed for existing transaction analysis attributes. But they can be deactivated.
        public DataColumn ColumnActive;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisValue = this.Columns["a_analysis_value_c"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnActive = this.Columns["a_active_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnAnalysisTypeCode,ColumnAnalysisValue};
        }

        /// Access a typed row by index
        public AFreeformAnalysisRow this[int i]
        {
            get
            {
                return ((AFreeformAnalysisRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AFreeformAnalysisRow NewRowTyped(bool AWithDefaultValues)
        {
            AFreeformAnalysisRow ret = ((AFreeformAnalysisRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AFreeformAnalysisRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AFreeformAnalysisRow(builder);
        }

        /// get typed set of changes
        public AFreeformAnalysisTable GetChangesTyped()
        {
            return ((AFreeformAnalysisTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AFreeformAnalysis";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_freeform_analysis";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }

        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisValueDBName()
        {
            return "a_analysis_value_c";
        }

        /// get character length for column
        public static short GetAnalysisValueLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "a_active_l";
        }

        /// get character length for column
        public static short GetActiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Available analysis values that may be given to a transaction for each analysis type.
    [Serializable()]
    public class AFreeformAnalysisRow : System.Data.DataRow
    {
        private AFreeformAnalysisTable myTable;

        /// Constructor
        public AFreeformAnalysisRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AFreeformAnalysisTable)(this.Table));
        }

        ///
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode)
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }

        /// Value of analysis code
        public String AnalysisValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisValue)
                            || (((String)(this[this.myTable.ColumnAnalysisValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisValue] = value;
                }
            }
        }

        /// Ledger Number
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// Analysis attribute values cannot be deleted, because they are needed for existing transaction analysis attributes. But they can be deactivated.
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive)
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisValue);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnActive.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsAnalysisTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// assign NULL value
        public void SetAnalysisTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// test for NULL value
        public bool IsAnalysisValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisValue);
        }

        /// assign NULL value
        public void SetAnalysisValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisValue);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }

        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// All balances on accounts, including summary information is stored here.
    [Serializable()]
    public class AGeneralLedgerMasterTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 137;
        /// used for generic TTypedDataTable functions
        public static short ColumnGlmSequenceId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnYearId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnYtdActualBaseId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnClosingPeriodActualBaseId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnStartBalanceBaseId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnYtdActualIntlId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnClosingPeriodActualIntlId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnStartBalanceIntlId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnYtdActualForeignId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnStartBalanceForeignId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 17;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AGeneralLedgerMaster", "a_general_ledger_master",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "GlmSequence", "a_glm_sequence_i", "a_glm_sequence_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "Year", "a_year_i", "a_year_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(4, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(5, "YtdActualBase", "a_ytd_actual_base_n", "a_ytd_actual_base_n", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(6, "ClosingPeriodActualBase", "a_closing_period_actual_base_n", "Year End Closing Period Actual", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(7, "StartBalanceBase", "a_start_balance_base_n", "Starting Balance", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(8, "YtdActualIntl", "a_ytd_actual_intl_n", "YTD Total (Int'l)", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(9, "ClosingPeriodActualIntl", "a_closing_period_actual_intl_n", "Year End Closing Period Actual (Int'l)", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(10, "StartBalanceIntl", "a_start_balance_intl_n", "Starting Balance (Int'l)", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(11, "YtdActualForeign", "a_ytd_actual_foreign_n", "a_ytd_actual_foreign_n", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(12, "StartBalanceForeign", "a_start_balance_foreign_n", "a_start_balance_foreign_n", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(13, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(15, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(16, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(17, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }, new int[] {
                    1, 2, 3, 4
                }));
            return true;
        }

        /// constructor
        public AGeneralLedgerMasterTable() :
                base("AGeneralLedgerMaster")
        {
        }

        /// constructor
        public AGeneralLedgerMasterTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AGeneralLedgerMasterTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnGlmSequence;
        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        ///
        public DataColumn ColumnYear;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        ///
        public DataColumn ColumnYtdActualBase;
        /// Special period for the year end close journal.
        public DataColumn ColumnClosingPeriodActualBase;
        /// Starting Balance in the ledger currency
        public DataColumn ColumnStartBalanceBase;
        /// Total for the current year, 2nd (int'l) base currency.
        public DataColumn ColumnYtdActualIntl;
        /// Special period for the year end close journal.
        public DataColumn ColumnClosingPeriodActualIntl;
        /// Starting Balance (Int'l)
        public DataColumn ColumnStartBalanceIntl;
        ///
        public DataColumn ColumnYtdActualForeign;
        ///
        public DataColumn ColumnStartBalanceForeign;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_glm_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_ytd_actual_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_closing_period_actual_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_start_balance_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_ytd_actual_intl_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_closing_period_actual_intl_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_start_balance_intl_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_ytd_actual_foreign_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_start_balance_foreign_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGlmSequence = this.Columns["a_glm_sequence_i"];
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnYear = this.Columns["a_year_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnYtdActualBase = this.Columns["a_ytd_actual_base_n"];
            this.ColumnClosingPeriodActualBase = this.Columns["a_closing_period_actual_base_n"];
            this.ColumnStartBalanceBase = this.Columns["a_start_balance_base_n"];
            this.ColumnYtdActualIntl = this.Columns["a_ytd_actual_intl_n"];
            this.ColumnClosingPeriodActualIntl = this.Columns["a_closing_period_actual_intl_n"];
            this.ColumnStartBalanceIntl = this.Columns["a_start_balance_intl_n"];
            this.ColumnYtdActualForeign = this.Columns["a_ytd_actual_foreign_n"];
            this.ColumnStartBalanceForeign = this.Columns["a_start_balance_foreign_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnGlmSequence};
        }

        /// Access a typed row by index
        public AGeneralLedgerMasterRow this[int i]
        {
            get
            {
                return ((AGeneralLedgerMasterRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AGeneralLedgerMasterRow NewRowTyped(bool AWithDefaultValues)
        {
            AGeneralLedgerMasterRow ret = ((AGeneralLedgerMasterRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AGeneralLedgerMasterRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AGeneralLedgerMasterRow(builder);
        }

        /// get typed set of changes
        public AGeneralLedgerMasterTable GetChangesTyped()
        {
            return ((AGeneralLedgerMasterTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AGeneralLedgerMaster";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_general_ledger_master";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetGlmSequenceDBName()
        {
            return "a_glm_sequence_i";
        }

        /// get character length for column
        public static short GetGlmSequenceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetYearDBName()
        {
            return "a_year_i";
        }

        /// get character length for column
        public static short GetYearLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetYtdActualBaseDBName()
        {
            return "a_ytd_actual_base_n";
        }

        /// get character length for column
        public static short GetYtdActualBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetClosingPeriodActualBaseDBName()
        {
            return "a_closing_period_actual_base_n";
        }

        /// get character length for column
        public static short GetClosingPeriodActualBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetStartBalanceBaseDBName()
        {
            return "a_start_balance_base_n";
        }

        /// get character length for column
        public static short GetStartBalanceBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetYtdActualIntlDBName()
        {
            return "a_ytd_actual_intl_n";
        }

        /// get character length for column
        public static short GetYtdActualIntlLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetClosingPeriodActualIntlDBName()
        {
            return "a_closing_period_actual_intl_n";
        }

        /// get character length for column
        public static short GetClosingPeriodActualIntlLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetStartBalanceIntlDBName()
        {
            return "a_start_balance_intl_n";
        }

        /// get character length for column
        public static short GetStartBalanceIntlLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetYtdActualForeignDBName()
        {
            return "a_ytd_actual_foreign_n";
        }

        /// get character length for column
        public static short GetYtdActualForeignLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetStartBalanceForeignDBName()
        {
            return "a_start_balance_foreign_n";
        }

        /// get character length for column
        public static short GetStartBalanceForeignLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// All balances on accounts, including summary information is stored here.
    [Serializable()]
    public class AGeneralLedgerMasterRow : System.Data.DataRow
    {
        private AGeneralLedgerMasterTable myTable;

        /// Constructor
        public AGeneralLedgerMasterRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AGeneralLedgerMasterTable)(this.Table));
        }

        ///
        public Int32 GlmSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGlmSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGlmSequence)
                            || (((Int32)(this[this.myTable.ColumnGlmSequence])) != value)))
                {
                    this[this.myTable.ColumnGlmSequence] = value;
                }
            }
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        ///
        public Int32 Year
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYear)
                            || (((Int32)(this[this.myTable.ColumnYear])) != value)))
                {
                    this[this.myTable.ColumnYear] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        ///
        public Decimal YtdActualBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYtdActualBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYtdActualBase)
                            || (((Decimal)(this[this.myTable.ColumnYtdActualBase])) != value)))
                {
                    this[this.myTable.ColumnYtdActualBase] = value;
                }
            }
        }

        /// Special period for the year end close journal.
        public Decimal ClosingPeriodActualBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnClosingPeriodActualBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnClosingPeriodActualBase)
                            || (((Decimal)(this[this.myTable.ColumnClosingPeriodActualBase])) != value)))
                {
                    this[this.myTable.ColumnClosingPeriodActualBase] = value;
                }
            }
        }

        /// Starting Balance in the ledger currency
        public Decimal StartBalanceBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartBalanceBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartBalanceBase)
                            || (((Decimal)(this[this.myTable.ColumnStartBalanceBase])) != value)))
                {
                    this[this.myTable.ColumnStartBalanceBase] = value;
                }
            }
        }

        /// Total for the current year, 2nd (int'l) base currency.
        public Decimal YtdActualIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYtdActualIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYtdActualIntl)
                            || (((Decimal)(this[this.myTable.ColumnYtdActualIntl])) != value)))
                {
                    this[this.myTable.ColumnYtdActualIntl] = value;
                }
            }
        }

        /// Special period for the year end close journal.
        public Decimal ClosingPeriodActualIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnClosingPeriodActualIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnClosingPeriodActualIntl)
                            || (((Decimal)(this[this.myTable.ColumnClosingPeriodActualIntl])) != value)))
                {
                    this[this.myTable.ColumnClosingPeriodActualIntl] = value;
                }
            }
        }

        /// Starting Balance (Int'l)
        public Decimal StartBalanceIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartBalanceIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartBalanceIntl)
                            || (((Decimal)(this[this.myTable.ColumnStartBalanceIntl])) != value)))
                {
                    this[this.myTable.ColumnStartBalanceIntl] = value;
                }
            }
        }

        ///
        public Decimal YtdActualForeign
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnYtdActualForeign.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnYtdActualForeign)
                            || (((Decimal)(this[this.myTable.ColumnYtdActualForeign])) != value)))
                {
                    this[this.myTable.ColumnYtdActualForeign] = value;
                }
            }
        }

        ///
        public Decimal StartBalanceForeign
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnStartBalanceForeign.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnStartBalanceForeign)
                            || (((Decimal)(this[this.myTable.ColumnStartBalanceForeign])) != value)))
                {
                    this[this.myTable.ColumnStartBalanceForeign] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGlmSequence);
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnYear);
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnYtdActualBase.Ordinal] = 0;
            this[this.myTable.ColumnClosingPeriodActualBase.Ordinal] = 0;
            this[this.myTable.ColumnStartBalanceBase.Ordinal] = 0;
            this[this.myTable.ColumnYtdActualIntl.Ordinal] = 0;
            this[this.myTable.ColumnClosingPeriodActualIntl.Ordinal] = 0;
            this[this.myTable.ColumnStartBalanceIntl.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnYtdActualForeign);
            this.SetNull(this.myTable.ColumnStartBalanceForeign);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsGlmSequenceNull()
        {
            return this.IsNull(this.myTable.ColumnGlmSequence);
        }

        /// assign NULL value
        public void SetGlmSequenceNull()
        {
            this.SetNull(this.myTable.ColumnGlmSequence);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsYearNull()
        {
            return this.IsNull(this.myTable.ColumnYear);
        }

        /// assign NULL value
        public void SetYearNull()
        {
            this.SetNull(this.myTable.ColumnYear);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsYtdActualBaseNull()
        {
            return this.IsNull(this.myTable.ColumnYtdActualBase);
        }

        /// assign NULL value
        public void SetYtdActualBaseNull()
        {
            this.SetNull(this.myTable.ColumnYtdActualBase);
        }

        /// test for NULL value
        public bool IsClosingPeriodActualBaseNull()
        {
            return this.IsNull(this.myTable.ColumnClosingPeriodActualBase);
        }

        /// assign NULL value
        public void SetClosingPeriodActualBaseNull()
        {
            this.SetNull(this.myTable.ColumnClosingPeriodActualBase);
        }

        /// test for NULL value
        public bool IsStartBalanceBaseNull()
        {
            return this.IsNull(this.myTable.ColumnStartBalanceBase);
        }

        /// assign NULL value
        public void SetStartBalanceBaseNull()
        {
            this.SetNull(this.myTable.ColumnStartBalanceBase);
        }

        /// test for NULL value
        public bool IsYtdActualIntlNull()
        {
            return this.IsNull(this.myTable.ColumnYtdActualIntl);
        }

        /// assign NULL value
        public void SetYtdActualIntlNull()
        {
            this.SetNull(this.myTable.ColumnYtdActualIntl);
        }

        /// test for NULL value
        public bool IsClosingPeriodActualIntlNull()
        {
            return this.IsNull(this.myTable.ColumnClosingPeriodActualIntl);
        }

        /// assign NULL value
        public void SetClosingPeriodActualIntlNull()
        {
            this.SetNull(this.myTable.ColumnClosingPeriodActualIntl);
        }

        /// test for NULL value
        public bool IsStartBalanceIntlNull()
        {
            return this.IsNull(this.myTable.ColumnStartBalanceIntl);
        }

        /// assign NULL value
        public void SetStartBalanceIntlNull()
        {
            this.SetNull(this.myTable.ColumnStartBalanceIntl);
        }

        /// test for NULL value
        public bool IsYtdActualForeignNull()
        {
            return this.IsNull(this.myTable.ColumnYtdActualForeign);
        }

        /// assign NULL value
        public void SetYtdActualForeignNull()
        {
            this.SetNull(this.myTable.ColumnYtdActualForeign);
        }

        /// test for NULL value
        public bool IsStartBalanceForeignNull()
        {
            return this.IsNull(this.myTable.ColumnStartBalanceForeign);
        }

        /// assign NULL value
        public void SetStartBalanceForeignNull()
        {
            this.SetNull(this.myTable.ColumnStartBalanceForeign);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// The General Ledger Master data for one period (e.g. a month)
    [Serializable()]
    public class AGeneralLedgerMasterPeriodTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 138;
        /// used for generic TTypedDataTable functions
        public static short ColumnGlmSequenceId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPeriodNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnActualBaseId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetBaseId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnActualIntlId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnBudgetIntlId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnActualForeignId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 11;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AGeneralLedgerMasterPeriod", "a_general_ledger_master_period",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "GlmSequence", "a_glm_sequence_i", "a_glm_sequence_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "PeriodNumber", "a_period_number_i", "a_period_number_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "ActualBase", "a_actual_base_n", "Actual This Year", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(3, "BudgetBase", "a_budget_base_n", "Budget This Year", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(4, "ActualIntl", "a_actual_intl_n", "Actual This Year (Int'l)", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(5, "BudgetIntl", "a_budget_intl_n", "Budget This Year (int'l)", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(6, "ActualForeign", "a_actual_foreign_n", "a_actual_foreign_n", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(7, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(10, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AGeneralLedgerMasterPeriodTable() :
                base("AGeneralLedgerMasterPeriod")
        {
        }

        /// constructor
        public AGeneralLedgerMasterPeriodTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AGeneralLedgerMasterPeriodTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        ///
        public DataColumn ColumnGlmSequence;
        ///
        public DataColumn ColumnPeriodNumber;
        /// This is a number of ledger currency units
        public DataColumn ColumnActualBase;
        /// This is a number of ledger currency units
        public DataColumn ColumnBudgetBase;
        /// Total for the specified period, 2nd (int'l) base currency.
        public DataColumn ColumnActualIntl;
        /// Total for the specified period, 2nd (int'l) base currency.
        public DataColumn ColumnBudgetIntl;
        ///
        public DataColumn ColumnActualForeign;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_glm_sequence_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_actual_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_actual_intl_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_budget_intl_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_actual_foreign_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnGlmSequence = this.Columns["a_glm_sequence_i"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnActualBase = this.Columns["a_actual_base_n"];
            this.ColumnBudgetBase = this.Columns["a_budget_base_n"];
            this.ColumnActualIntl = this.Columns["a_actual_intl_n"];
            this.ColumnBudgetIntl = this.Columns["a_budget_intl_n"];
            this.ColumnActualForeign = this.Columns["a_actual_foreign_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnGlmSequence,ColumnPeriodNumber};
        }

        /// Access a typed row by index
        public AGeneralLedgerMasterPeriodRow this[int i]
        {
            get
            {
                return ((AGeneralLedgerMasterPeriodRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AGeneralLedgerMasterPeriodRow NewRowTyped(bool AWithDefaultValues)
        {
            AGeneralLedgerMasterPeriodRow ret = ((AGeneralLedgerMasterPeriodRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AGeneralLedgerMasterPeriodRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AGeneralLedgerMasterPeriodRow(builder);
        }

        /// get typed set of changes
        public AGeneralLedgerMasterPeriodTable GetChangesTyped()
        {
            return ((AGeneralLedgerMasterPeriodTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AGeneralLedgerMasterPeriod";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_general_ledger_master_period";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetGlmSequenceDBName()
        {
            return "a_glm_sequence_i";
        }

        /// get character length for column
        public static short GetGlmSequenceLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }

        /// get character length for column
        public static short GetPeriodNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetActualBaseDBName()
        {
            return "a_actual_base_n";
        }

        /// get character length for column
        public static short GetActualBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetBaseDBName()
        {
            return "a_budget_base_n";
        }

        /// get character length for column
        public static short GetBudgetBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetActualIntlDBName()
        {
            return "a_actual_intl_n";
        }

        /// get character length for column
        public static short GetActualIntlLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBudgetIntlDBName()
        {
            return "a_budget_intl_n";
        }

        /// get character length for column
        public static short GetBudgetIntlLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetActualForeignDBName()
        {
            return "a_actual_foreign_n";
        }

        /// get character length for column
        public static short GetActualForeignLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// The General Ledger Master data for one period (e.g. a month)
    [Serializable()]
    public class AGeneralLedgerMasterPeriodRow : System.Data.DataRow
    {
        private AGeneralLedgerMasterPeriodTable myTable;

        /// Constructor
        public AGeneralLedgerMasterPeriodRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AGeneralLedgerMasterPeriodTable)(this.Table));
        }

        ///
        public Int32 GlmSequence
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnGlmSequence.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnGlmSequence)
                            || (((Int32)(this[this.myTable.ColumnGlmSequence])) != value)))
                {
                    this[this.myTable.ColumnGlmSequence] = value;
                }
            }
        }

        ///
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber)
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }

        /// This is a number of ledger currency units
        public Decimal ActualBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualBase)
                            || (((Decimal)(this[this.myTable.ColumnActualBase])) != value)))
                {
                    this[this.myTable.ColumnActualBase] = value;
                }
            }
        }

        /// This is a number of ledger currency units
        public Decimal BudgetBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetBase)
                            || (((Decimal)(this[this.myTable.ColumnBudgetBase])) != value)))
                {
                    this[this.myTable.ColumnBudgetBase] = value;
                }
            }
        }

        /// Total for the specified period, 2nd (int'l) base currency.
        public Decimal ActualIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualIntl)
                            || (((Decimal)(this[this.myTable.ColumnActualIntl])) != value)))
                {
                    this[this.myTable.ColumnActualIntl] = value;
                }
            }
        }

        /// Total for the specified period, 2nd (int'l) base currency.
        public Decimal BudgetIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBudgetIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBudgetIntl)
                            || (((Decimal)(this[this.myTable.ColumnBudgetIntl])) != value)))
                {
                    this[this.myTable.ColumnBudgetIntl] = value;
                }
            }
        }

        ///
        public Decimal ActualForeign
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActualForeign.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActualForeign)
                            || (((Decimal)(this[this.myTable.ColumnActualForeign])) != value)))
                {
                    this[this.myTable.ColumnActualForeign] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnGlmSequence);
            this.SetNull(this.myTable.ColumnPeriodNumber);
            this[this.myTable.ColumnActualBase.Ordinal] = 0;
            this[this.myTable.ColumnBudgetBase.Ordinal] = 0;
            this[this.myTable.ColumnActualIntl.Ordinal] = 0;
            this[this.myTable.ColumnBudgetIntl.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnActualForeign);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsGlmSequenceNull()
        {
            return this.IsNull(this.myTable.ColumnGlmSequence);
        }

        /// assign NULL value
        public void SetGlmSequenceNull()
        {
            this.SetNull(this.myTable.ColumnGlmSequence);
        }

        /// test for NULL value
        public bool IsPeriodNumberNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodNumber);
        }

        /// assign NULL value
        public void SetPeriodNumberNull()
        {
            this.SetNull(this.myTable.ColumnPeriodNumber);
        }

        /// test for NULL value
        public bool IsActualBaseNull()
        {
            return this.IsNull(this.myTable.ColumnActualBase);
        }

        /// assign NULL value
        public void SetActualBaseNull()
        {
            this.SetNull(this.myTable.ColumnActualBase);
        }

        /// test for NULL value
        public bool IsBudgetBaseNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetBase);
        }

        /// assign NULL value
        public void SetBudgetBaseNull()
        {
            this.SetNull(this.myTable.ColumnBudgetBase);
        }

        /// test for NULL value
        public bool IsActualIntlNull()
        {
            return this.IsNull(this.myTable.ColumnActualIntl);
        }

        /// assign NULL value
        public void SetActualIntlNull()
        {
            this.SetNull(this.myTable.ColumnActualIntl);
        }

        /// test for NULL value
        public bool IsBudgetIntlNull()
        {
            return this.IsNull(this.myTable.ColumnBudgetIntl);
        }

        /// assign NULL value
        public void SetBudgetIntlNull()
        {
            this.SetNull(this.myTable.ColumnBudgetIntl);
        }

        /// test for NULL value
        public bool IsActualForeignNull()
        {
            return this.IsNull(this.myTable.ColumnActualForeign);
        }

        /// assign NULL value
        public void SetActualForeignNull()
        {
            this.SetNull(this.myTable.ColumnActualForeign);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Contains the calculation for the stewardship for a particular run.  Files and reports can be recreated from this.  ICH = International Clearing House (Handles transfering of funds and admin grant fees among offices.)
    [Serializable()]
    public class AIchStewardshipTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 139;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnPeriodNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnIchNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateProcessedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnIncomeAmountId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnExpenseAmountId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDirectXferAmountId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnIncomeAmountIntlId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnExpenseAmountIntlId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDirectXferAmountIntlId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 15;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AIchStewardship", "a_ich_stewardship",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "PeriodNumber", "a_period_number_i", "Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "IchNumber", "a_ich_number_i", "ICH Process Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(4, "DateProcessed", "a_date_processed_d", "Date Processed", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(5, "IncomeAmount", "a_income_amount_n", "Income Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(6, "ExpenseAmount", "a_expense_amount_n", "Expense Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(7, "DirectXferAmount", "a_direct_xfer_amount_n", "Direct Transfer Amount", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(8, "IncomeAmountIntl", "a_income_amount_intl_n", "Income Amount(Intl)", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(9, "ExpenseAmountIntl", "a_expense_amount_intl_n", "Expense Amount(Intl)", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(10, "DirectXferAmountIntl", "a_direct_xfer_amount_intl_n", "Direct Transfer Amount(Intl)", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(11, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(13, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(15, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3
                }));
            return true;
        }

        /// constructor
        public AIchStewardshipTable() :
                base("AIchStewardship")
        {
        }

        /// constructor
        public AIchStewardshipTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AIchStewardshipTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// This defines which accounting period is being used
        public DataColumn ColumnPeriodNumber;
        /// identifes the ICH process number
        public DataColumn ColumnIchNumber;
        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public DataColumn ColumnCostCentreCode;
        /// This is the date the stewardship was processed.
        public DataColumn ColumnDateProcessed;
        /// Income amount for foreign cost centre's stewardship
        public DataColumn ColumnIncomeAmount;
        /// Expense amount for foreign cost centre's stewardship
        public DataColumn ColumnExpenseAmount;
        /// Direct Transfer amount for foreign cost centre's stewardship
        public DataColumn ColumnDirectXferAmount;
        /// Income amount for foreign cost centre's stewardship in International Currency
        public DataColumn ColumnIncomeAmountIntl;
        /// Expense amount for foreign cost centre's stewardship in international currency
        public DataColumn ColumnExpenseAmountIntl;
        /// Direct Transfer amount for foreign cost centre's stewardship in international currency.
        public DataColumn ColumnDirectXferAmountIntl;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_ich_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_processed_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_income_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_expense_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_direct_xfer_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_income_amount_intl_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_expense_amount_intl_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_direct_xfer_amount_intl_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnIchNumber = this.Columns["a_ich_number_i"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnDateProcessed = this.Columns["a_date_processed_d"];
            this.ColumnIncomeAmount = this.Columns["a_income_amount_n"];
            this.ColumnExpenseAmount = this.Columns["a_expense_amount_n"];
            this.ColumnDirectXferAmount = this.Columns["a_direct_xfer_amount_n"];
            this.ColumnIncomeAmountIntl = this.Columns["a_income_amount_intl_n"];
            this.ColumnExpenseAmountIntl = this.Columns["a_expense_amount_intl_n"];
            this.ColumnDirectXferAmountIntl = this.Columns["a_direct_xfer_amount_intl_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnLedgerNumber,ColumnPeriodNumber,ColumnIchNumber,ColumnCostCentreCode};
        }

        /// Access a typed row by index
        public AIchStewardshipRow this[int i]
        {
            get
            {
                return ((AIchStewardshipRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AIchStewardshipRow NewRowTyped(bool AWithDefaultValues)
        {
            AIchStewardshipRow ret = ((AIchStewardshipRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AIchStewardshipRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AIchStewardshipRow(builder);
        }

        /// get typed set of changes
        public AIchStewardshipTable GetChangesTyped()
        {
            return ((AIchStewardshipTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AIchStewardship";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_ich_stewardship";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }

        /// get character length for column
        public static short GetPeriodNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIchNumberDBName()
        {
            return "a_ich_number_i";
        }

        /// get character length for column
        public static short GetIchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateProcessedDBName()
        {
            return "a_date_processed_d";
        }

        /// get character length for column
        public static short GetDateProcessedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetIncomeAmountDBName()
        {
            return "a_income_amount_n";
        }

        /// get character length for column
        public static short GetIncomeAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExpenseAmountDBName()
        {
            return "a_expense_amount_n";
        }

        /// get character length for column
        public static short GetExpenseAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDirectXferAmountDBName()
        {
            return "a_direct_xfer_amount_n";
        }

        /// get character length for column
        public static short GetDirectXferAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetIncomeAmountIntlDBName()
        {
            return "a_income_amount_intl_n";
        }

        /// get character length for column
        public static short GetIncomeAmountIntlLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExpenseAmountIntlDBName()
        {
            return "a_expense_amount_intl_n";
        }

        /// get character length for column
        public static short GetExpenseAmountIntlLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDirectXferAmountIntlDBName()
        {
            return "a_direct_xfer_amount_intl_n";
        }

        /// get character length for column
        public static short GetDirectXferAmountIntlLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Contains the calculation for the stewardship for a particular run.  Files and reports can be recreated from this.  ICH = International Clearing House (Handles transfering of funds and admin grant fees among offices.)
    [Serializable()]
    public class AIchStewardshipRow : System.Data.DataRow
    {
        private AIchStewardshipTable myTable;

        /// Constructor
        public AIchStewardshipRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AIchStewardshipTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// This defines which accounting period is being used
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber)
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }

        /// identifes the ICH process number
        public Int32 IchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIchNumber)
                            || (((Int32)(this[this.myTable.ColumnIchNumber])) != value)))
                {
                    this[this.myTable.ColumnIchNumber] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to. A cost centre can be a partner but reflected as a character rather than a numeric
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// This is the date the stewardship was processed.
        public System.DateTime DateProcessed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateProcessed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateProcessed)
                            || (((System.DateTime)(this[this.myTable.ColumnDateProcessed])) != value)))
                {
                    this[this.myTable.ColumnDateProcessed] = value;
                }
            }
        }

        /// Income amount for foreign cost centre's stewardship
        public Decimal IncomeAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIncomeAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIncomeAmount)
                            || (((Decimal)(this[this.myTable.ColumnIncomeAmount])) != value)))
                {
                    this[this.myTable.ColumnIncomeAmount] = value;
                }
            }
        }

        /// Expense amount for foreign cost centre's stewardship
        public Decimal ExpenseAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExpenseAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExpenseAmount)
                            || (((Decimal)(this[this.myTable.ColumnExpenseAmount])) != value)))
                {
                    this[this.myTable.ColumnExpenseAmount] = value;
                }
            }
        }

        /// Direct Transfer amount for foreign cost centre's stewardship
        public Decimal DirectXferAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDirectXferAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDirectXferAmount)
                            || (((Decimal)(this[this.myTable.ColumnDirectXferAmount])) != value)))
                {
                    this[this.myTable.ColumnDirectXferAmount] = value;
                }
            }
        }

        /// Income amount for foreign cost centre's stewardship in International Currency
        public Decimal IncomeAmountIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIncomeAmountIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIncomeAmountIntl)
                            || (((Decimal)(this[this.myTable.ColumnIncomeAmountIntl])) != value)))
                {
                    this[this.myTable.ColumnIncomeAmountIntl] = value;
                }
            }
        }

        /// Expense amount for foreign cost centre's stewardship in international currency
        public Decimal ExpenseAmountIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExpenseAmountIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExpenseAmountIntl)
                            || (((Decimal)(this[this.myTable.ColumnExpenseAmountIntl])) != value)))
                {
                    this[this.myTable.ColumnExpenseAmountIntl] = value;
                }
            }
        }

        /// Direct Transfer amount for foreign cost centre's stewardship in international currency.
        public Decimal DirectXferAmountIntl
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDirectXferAmountIntl.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDirectXferAmountIntl)
                            || (((Decimal)(this[this.myTable.ColumnDirectXferAmountIntl])) != value)))
                {
                    this[this.myTable.ColumnDirectXferAmountIntl] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnPeriodNumber.Ordinal] = 0;
            this[this.myTable.ColumnIchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnDateProcessed);
            this[this.myTable.ColumnIncomeAmount.Ordinal] = 0;
            this[this.myTable.ColumnExpenseAmount.Ordinal] = 0;
            this[this.myTable.ColumnDirectXferAmount.Ordinal] = 0;
            this[this.myTable.ColumnIncomeAmountIntl.Ordinal] = 0;
            this[this.myTable.ColumnExpenseAmountIntl.Ordinal] = 0;
            this[this.myTable.ColumnDirectXferAmountIntl.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsPeriodNumberNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodNumber);
        }

        /// assign NULL value
        public void SetPeriodNumberNull()
        {
            this.SetNull(this.myTable.ColumnPeriodNumber);
        }

        /// test for NULL value
        public bool IsIchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnIchNumber);
        }

        /// assign NULL value
        public void SetIchNumberNull()
        {
            this.SetNull(this.myTable.ColumnIchNumber);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsDateProcessedNull()
        {
            return this.IsNull(this.myTable.ColumnDateProcessed);
        }

        /// assign NULL value
        public void SetDateProcessedNull()
        {
            this.SetNull(this.myTable.ColumnDateProcessed);
        }

        /// test for NULL value
        public bool IsIncomeAmountNull()
        {
            return this.IsNull(this.myTable.ColumnIncomeAmount);
        }

        /// assign NULL value
        public void SetIncomeAmountNull()
        {
            this.SetNull(this.myTable.ColumnIncomeAmount);
        }

        /// test for NULL value
        public bool IsExpenseAmountNull()
        {
            return this.IsNull(this.myTable.ColumnExpenseAmount);
        }

        /// assign NULL value
        public void SetExpenseAmountNull()
        {
            this.SetNull(this.myTable.ColumnExpenseAmount);
        }

        /// test for NULL value
        public bool IsDirectXferAmountNull()
        {
            return this.IsNull(this.myTable.ColumnDirectXferAmount);
        }

        /// assign NULL value
        public void SetDirectXferAmountNull()
        {
            this.SetNull(this.myTable.ColumnDirectXferAmount);
        }

        /// test for NULL value
        public bool IsIncomeAmountIntlNull()
        {
            return this.IsNull(this.myTable.ColumnIncomeAmountIntl);
        }

        /// assign NULL value
        public void SetIncomeAmountIntlNull()
        {
            this.SetNull(this.myTable.ColumnIncomeAmountIntl);
        }

        /// test for NULL value
        public bool IsExpenseAmountIntlNull()
        {
            return this.IsNull(this.myTable.ColumnExpenseAmountIntl);
        }

        /// assign NULL value
        public void SetExpenseAmountIntlNull()
        {
            this.SetNull(this.myTable.ColumnExpenseAmountIntl);
        }

        /// test for NULL value
        public bool IsDirectXferAmountIntlNull()
        {
            return this.IsNull(this.myTable.ColumnDirectXferAmountIntl);
        }

        /// assign NULL value
        public void SetDirectXferAmountIntlNull()
        {
            this.SetNull(this.myTable.ColumnDirectXferAmountIntl);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Special payment programs the donor may give money through. (ie, Gift Aid in the UK). Currently not used in Petra release 1.
    [Serializable()]
    public class AMethodOfGivingTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 140;
        /// used for generic TTypedDataTable functions
        public static short ColumnMethodOfGivingCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnMethodOfGivingDescId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnTrustFlagId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTaxRebateFlagId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnRecurringMethodFlagId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnActiveId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 10;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AMethodOfGiving", "a_method_of_giving",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "MethodOfGivingCode", "a_method_of_giving_code_c", "Method Of Giving", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(1, "MethodOfGivingDesc", "a_method_of_giving_desc_c", "Method of Giving Description", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(2, "TrustFlag", "a_trust_flag_l", "Trust Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(3, "TaxRebateFlag", "a_tax_rebate_flag_l", "Tax Rebate Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(4, "RecurringMethodFlag", "a_recurring_method_flag_l", "Recurring Method Flag", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(5, "Active", "a_active_l", "Active", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(6, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(7, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(8, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public AMethodOfGivingTable() :
                base("AMethodOfGiving")
        {
        }

        /// constructor
        public AMethodOfGivingTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AMethodOfGivingTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Defines how a gift is given
        public DataColumn ColumnMethodOfGivingCode;
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnMethodOfGivingDesc;
        /// Shows if the method of giving involves a trust
        public DataColumn ColumnTrustFlag;
        /// Shows if this method of giving involves a tax rebate
        public DataColumn ColumnTaxRebateFlag;
        /// Shows if this method of giving is used by recurring gifts
        public DataColumn ColumnRecurringMethodFlag;
        /// Shows whether this code is active
        public DataColumn ColumnActive;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_method_of_giving_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_method_of_giving_desc_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_trust_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_tax_rebate_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_recurring_method_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_active_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnMethodOfGivingCode = this.Columns["a_method_of_giving_code_c"];
            this.ColumnMethodOfGivingDesc = this.Columns["a_method_of_giving_desc_c"];
            this.ColumnTrustFlag = this.Columns["a_trust_flag_l"];
            this.ColumnTaxRebateFlag = this.Columns["a_tax_rebate_flag_l"];
            this.ColumnRecurringMethodFlag = this.Columns["a_recurring_method_flag_l"];
            this.ColumnActive = this.Columns["a_active_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnMethodOfGivingCode};
        }

        /// Access a typed row by index
        public AMethodOfGivingRow this[int i]
        {
            get
            {
                return ((AMethodOfGivingRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AMethodOfGivingRow NewRowTyped(bool AWithDefaultValues)
        {
            AMethodOfGivingRow ret = ((AMethodOfGivingRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AMethodOfGivingRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AMethodOfGivingRow(builder);
        }

        /// get typed set of changes
        public AMethodOfGivingTable GetChangesTyped()
        {
            return ((AMethodOfGivingTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AMethodOfGiving";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_method_of_giving";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetMethodOfGivingCodeDBName()
        {
            return "a_method_of_giving_code_c";
        }

        /// get character length for column
        public static short GetMethodOfGivingCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetMethodOfGivingDescDBName()
        {
            return "a_method_of_giving_desc_c";
        }

        /// get character length for column
        public static short GetMethodOfGivingDescLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetTrustFlagDBName()
        {
            return "a_trust_flag_l";
        }

        /// get character length for column
        public static short GetTrustFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTaxRebateFlagDBName()
        {
            return "a_tax_rebate_flag_l";
        }

        /// get character length for column
        public static short GetTaxRebateFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetRecurringMethodFlagDBName()
        {
            return "a_recurring_method_flag_l";
        }

        /// get character length for column
        public static short GetRecurringMethodFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetActiveDBName()
        {
            return "a_active_l";
        }

        /// get character length for column
        public static short GetActiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Special payment programs the donor may give money through. (ie, Gift Aid in the UK). Currently not used in Petra release 1.
    [Serializable()]
    public class AMethodOfGivingRow : System.Data.DataRow
    {
        private AMethodOfGivingTable myTable;

        /// Constructor
        public AMethodOfGivingRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AMethodOfGivingTable)(this.Table));
        }

        /// Defines how a gift is given
        public String MethodOfGivingCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfGivingCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfGivingCode)
                            || (((String)(this[this.myTable.ColumnMethodOfGivingCode])) != value)))
                {
                    this[this.myTable.ColumnMethodOfGivingCode] = value;
                }
            }
        }

        /// This is a short description which is 32 charcters long
        public String MethodOfGivingDesc
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfGivingDesc.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfGivingDesc)
                            || (((String)(this[this.myTable.ColumnMethodOfGivingDesc])) != value)))
                {
                    this[this.myTable.ColumnMethodOfGivingDesc] = value;
                }
            }
        }

        /// Shows if the method of giving involves a trust
        public Boolean TrustFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTrustFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTrustFlag)
                            || (((Boolean)(this[this.myTable.ColumnTrustFlag])) != value)))
                {
                    this[this.myTable.ColumnTrustFlag] = value;
                }
            }
        }

        /// Shows if this method of giving involves a tax rebate
        public Boolean TaxRebateFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTaxRebateFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTaxRebateFlag)
                            || (((Boolean)(this[this.myTable.ColumnTaxRebateFlag])) != value)))
                {
                    this[this.myTable.ColumnTaxRebateFlag] = value;
                }
            }
        }

        /// Shows if this method of giving is used by recurring gifts
        public Boolean RecurringMethodFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRecurringMethodFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRecurringMethodFlag)
                            || (((Boolean)(this[this.myTable.ColumnRecurringMethodFlag])) != value)))
                {
                    this[this.myTable.ColumnRecurringMethodFlag] = value;
                }
            }
        }

        /// Shows whether this code is active
        public Boolean Active
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnActive.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnActive)
                            || (((Boolean)(this[this.myTable.ColumnActive])) != value)))
                {
                    this[this.myTable.ColumnActive] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnMethodOfGivingCode);
            this.SetNull(this.myTable.ColumnMethodOfGivingDesc);
            this[this.myTable.ColumnTrustFlag.Ordinal] = false;
            this[this.myTable.ColumnTaxRebateFlag.Ordinal] = false;
            this[this.myTable.ColumnRecurringMethodFlag.Ordinal] = false;
            this[this.myTable.ColumnActive.Ordinal] = true;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsMethodOfGivingCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMethodOfGivingCode);
        }

        /// assign NULL value
        public void SetMethodOfGivingCodeNull()
        {
            this.SetNull(this.myTable.ColumnMethodOfGivingCode);
        }

        /// test for NULL value
        public bool IsMethodOfGivingDescNull()
        {
            return this.IsNull(this.myTable.ColumnMethodOfGivingDesc);
        }

        /// assign NULL value
        public void SetMethodOfGivingDescNull()
        {
            this.SetNull(this.myTable.ColumnMethodOfGivingDesc);
        }

        /// test for NULL value
        public bool IsTrustFlagNull()
        {
            return this.IsNull(this.myTable.ColumnTrustFlag);
        }

        /// assign NULL value
        public void SetTrustFlagNull()
        {
            this.SetNull(this.myTable.ColumnTrustFlag);
        }

        /// test for NULL value
        public bool IsTaxRebateFlagNull()
        {
            return this.IsNull(this.myTable.ColumnTaxRebateFlag);
        }

        /// assign NULL value
        public void SetTaxRebateFlagNull()
        {
            this.SetNull(this.myTable.ColumnTaxRebateFlag);
        }

        /// test for NULL value
        public bool IsRecurringMethodFlagNull()
        {
            return this.IsNull(this.myTable.ColumnRecurringMethodFlag);
        }

        /// assign NULL value
        public void SetRecurringMethodFlagNull()
        {
            this.SetNull(this.myTable.ColumnRecurringMethodFlag);
        }

        /// test for NULL value
        public bool IsActiveNull()
        {
            return this.IsNull(this.myTable.ColumnActive);
        }

        /// assign NULL value
        public void SetActiveNull()
        {
            this.SetNull(this.myTable.ColumnActive);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Various ways a transaction may originate, depending on the subsystem.
    [Serializable()]
    public class ATransactionTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 146;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeCodeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDebitAccountCodeId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreditAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastJournalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastRecurringJournalId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeDescriptionId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnBalancingAccountCodeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnSpecialTransactionTypeId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 14;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ATransactionType", "a_transaction_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "SubSystemCode", "a_sub_system_code_c", "Sub System Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(2, "TransactionTypeCode", "a_transaction_type_code_c", "Transaction Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(3, "DebitAccountCode", "a_debit_account_code_c", "Debit Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(4, "CreditAccountCode", "a_credit_account_code_c", "Credit Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "LastJournal", "a_last_journal_i", "Last Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(6, "LastRecurringJournal", "a_last_recurring_journal_i", "Last Recurring Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(7, "TransactionTypeDescription", "a_transaction_type_description_c", "Description", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(8, "BalancingAccountCode", "a_balancing_account_code_c", "Balancing Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(9, "SpecialTransactionType", "a_special_transaction_type_l", "Special Transaction Type", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(10, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public ATransactionTypeTable() :
                base("ATransactionType")
        {
        }

        /// constructor
        public ATransactionTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ATransactionTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        ///
        public DataColumn ColumnTransactionTypeCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnDebitAccountCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnCreditAccountCode;
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        /// Identifies a journal within a batch
        public DataColumn ColumnLastRecurringJournal;
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnTransactionTypeDescription;
        ///
        public DataColumn ColumnBalancingAccountCode;
        /// Is this transaction type a special transaction type or not?
        public DataColumn ColumnSpecialTransactionType;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_credit_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_last_recurring_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_balancing_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_special_transaction_type_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnDebitAccountCode = this.Columns["a_debit_account_code_c"];
            this.ColumnCreditAccountCode = this.Columns["a_credit_account_code_c"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnLastRecurringJournal = this.Columns["a_last_recurring_journal_i"];
            this.ColumnTransactionTypeDescription = this.Columns["a_transaction_type_description_c"];
            this.ColumnBalancingAccountCode = this.Columns["a_balancing_account_code_c"];
            this.ColumnSpecialTransactionType = this.Columns["a_special_transaction_type_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnSubSystemCode,ColumnTransactionTypeCode};
        }

        /// Access a typed row by index
        public ATransactionTypeRow this[int i]
        {
            get
            {
                return ((ATransactionTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ATransactionTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            ATransactionTypeRow ret = ((ATransactionTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ATransactionTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ATransactionTypeRow(builder);
        }

        /// get typed set of changes
        public ATransactionTypeTable GetChangesTyped()
        {
            return ((ATransactionTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ATransactionType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_transaction_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }

        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDebitAccountCodeDBName()
        {
            return "a_debit_account_code_c";
        }

        /// get character length for column
        public static short GetDebitAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCreditAccountCodeDBName()
        {
            return "a_credit_account_code_c";
        }

        /// get character length for column
        public static short GetCreditAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }

        /// get character length for column
        public static short GetLastJournalLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastRecurringJournalDBName()
        {
            return "a_last_recurring_journal_i";
        }

        /// get character length for column
        public static short GetLastRecurringJournalLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeDescriptionDBName()
        {
            return "a_transaction_type_description_c";
        }

        /// get character length for column
        public static short GetTransactionTypeDescriptionLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetBalancingAccountCodeDBName()
        {
            return "a_balancing_account_code_c";
        }

        /// get character length for column
        public static short GetBalancingAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetSpecialTransactionTypeDBName()
        {
            return "a_special_transaction_type_l";
        }

        /// get character length for column
        public static short GetSpecialTransactionTypeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Various ways a transaction may originate, depending on the subsystem.
    [Serializable()]
    public class ATransactionTypeRow : System.Data.DataRow
    {
        private ATransactionTypeTable myTable;

        /// Constructor
        public ATransactionTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ATransactionTypeTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        ///
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode)
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String DebitAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitAccountCode)
                            || (((String)(this[this.myTable.ColumnDebitAccountCode])) != value)))
                {
                    this[this.myTable.ColumnDebitAccountCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String CreditAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreditAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreditAccountCode)
                            || (((String)(this[this.myTable.ColumnCreditAccountCode])) != value)))
                {
                    this[this.myTable.ColumnCreditAccountCode] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal)
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 LastRecurringJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastRecurringJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastRecurringJournal)
                            || (((Int32)(this[this.myTable.ColumnLastRecurringJournal])) != value)))
                {
                    this[this.myTable.ColumnLastRecurringJournal] = value;
                }
            }
        }

        /// This is a short description which is 32 charcters long
        public String TransactionTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeDescription)
                            || (((String)(this[this.myTable.ColumnTransactionTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeDescription] = value;
                }
            }
        }

        ///
        public String BalancingAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBalancingAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBalancingAccountCode)
                            || (((String)(this[this.myTable.ColumnBalancingAccountCode])) != value)))
                {
                    this[this.myTable.ColumnBalancingAccountCode] = value;
                }
            }
        }

        /// Is this transaction type a special transaction type or not?
        public Boolean SpecialTransactionType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecialTransactionType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecialTransactionType)
                            || (((Boolean)(this[this.myTable.ColumnSpecialTransactionType])) != value)))
                {
                    this[this.myTable.ColumnSpecialTransactionType] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this.SetNull(this.myTable.ColumnDebitAccountCode);
            this.SetNull(this.myTable.ColumnCreditAccountCode);
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnLastRecurringJournal.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTransactionTypeDescription);
            this.SetNull(this.myTable.ColumnBalancingAccountCode);
            this[this.myTable.ColumnSpecialTransactionType.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// test for NULL value
        public bool IsDebitAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnDebitAccountCode);
        }

        /// assign NULL value
        public void SetDebitAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnDebitAccountCode);
        }

        /// test for NULL value
        public bool IsCreditAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCreditAccountCode);
        }

        /// assign NULL value
        public void SetCreditAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnCreditAccountCode);
        }

        /// test for NULL value
        public bool IsLastJournalNull()
        {
            return this.IsNull(this.myTable.ColumnLastJournal);
        }

        /// assign NULL value
        public void SetLastJournalNull()
        {
            this.SetNull(this.myTable.ColumnLastJournal);
        }

        /// test for NULL value
        public bool IsLastRecurringJournalNull()
        {
            return this.IsNull(this.myTable.ColumnLastRecurringJournal);
        }

        /// assign NULL value
        public void SetLastRecurringJournalNull()
        {
            this.SetNull(this.myTable.ColumnLastRecurringJournal);
        }

        /// test for NULL value
        public bool IsTransactionTypeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeDescription);
        }

        /// assign NULL value
        public void SetTransactionTypeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeDescription);
        }

        /// test for NULL value
        public bool IsBalancingAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnBalancingAccountCode);
        }

        /// assign NULL value
        public void SetBalancingAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnBalancingAccountCode);
        }

        /// test for NULL value
        public bool IsSpecialTransactionTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSpecialTransactionType);
        }

        /// assign NULL value
        public void SetSpecialTransactionTypeNull()
        {
            this.SetNull(this.myTable.ColumnSpecialTransactionType);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// GL batches from the previous financial year.
    [Serializable()]
    public class APreviousYearBatchTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 147;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchDescriptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchControlTotalId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchRunningTotalId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchDebitTotalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchCreditTotalId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchPeriodId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchYearId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfEntryId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchStatusId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastJournalId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 17;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "APreviousYearBatch", "a_previous_year_batch",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "BatchDescription", "a_batch_description_c", "Batch Description", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(3, "BatchControlTotal", "a_batch_control_total_n", "Batch Control Total", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(4, "BatchRunningTotal", "a_batch_running_total_n", "Batch Running Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(5, "BatchDebitTotal", "a_batch_debit_total_n", "Batch Debit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(6, "BatchCreditTotal", "a_batch_credit_total_n", "Batch Credit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(7, "BatchPeriod", "a_batch_period_i", "Batch Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(8, "BatchYear", "a_batch_year_i", "a_batch_year_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(9, "DateEffective", "a_date_effective_d", "Effective Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(10, "DateOfEntry", "a_date_of_entry_d", "Entry Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(11, "BatchStatus", "a_batch_status_c", "Batch status", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(12, "LastJournal", "a_last_journal_i", "Last Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(13, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(15, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(16, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(17, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public APreviousYearBatchTable() :
                base("APreviousYearBatch")
        {
        }

        /// constructor
        public APreviousYearBatchTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public APreviousYearBatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The ledger that the batch belongs to.
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnBatchDescription;
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public DataColumn ColumnBatchControlTotal;
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchRunningTotal;
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchDebitTotal;
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchCreditTotal;
        /// The accounting period that the batch belongs to.  Must be &lt;= 20.
        public DataColumn ColumnBatchPeriod;
        /// The financial year that the batch belongs to.
        public DataColumn ColumnBatchYear;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateOfEntry;
        /// Has this batch been posted yet?
        public DataColumn ColumnBatchStatus;
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_control_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_running_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_debit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_credit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_year_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnBatchDescription = this.Columns["a_batch_description_c"];
            this.ColumnBatchControlTotal = this.Columns["a_batch_control_total_n"];
            this.ColumnBatchRunningTotal = this.Columns["a_batch_running_total_n"];
            this.ColumnBatchDebitTotal = this.Columns["a_batch_debit_total_n"];
            this.ColumnBatchCreditTotal = this.Columns["a_batch_credit_total_n"];
            this.ColumnBatchPeriod = this.Columns["a_batch_period_i"];
            this.ColumnBatchYear = this.Columns["a_batch_year_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnBatchStatus = this.Columns["a_batch_status_c"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnBatchNumber};
        }

        /// Access a typed row by index
        public APreviousYearBatchRow this[int i]
        {
            get
            {
                return ((APreviousYearBatchRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public APreviousYearBatchRow NewRowTyped(bool AWithDefaultValues)
        {
            APreviousYearBatchRow ret = ((APreviousYearBatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public APreviousYearBatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APreviousYearBatchRow(builder);
        }

        /// get typed set of changes
        public APreviousYearBatchTable GetChangesTyped()
        {
            return ((APreviousYearBatchTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "APreviousYearBatch";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_previous_year_batch";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchDescriptionDBName()
        {
            return "a_batch_description_c";
        }

        /// get character length for column
        public static short GetBatchDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchControlTotalDBName()
        {
            return "a_batch_control_total_n";
        }

        /// get character length for column
        public static short GetBatchControlTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchRunningTotalDBName()
        {
            return "a_batch_running_total_n";
        }

        /// get character length for column
        public static short GetBatchRunningTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchDebitTotalDBName()
        {
            return "a_batch_debit_total_n";
        }

        /// get character length for column
        public static short GetBatchDebitTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchCreditTotalDBName()
        {
            return "a_batch_credit_total_n";
        }

        /// get character length for column
        public static short GetBatchCreditTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchPeriodDBName()
        {
            return "a_batch_period_i";
        }

        /// get character length for column
        public static short GetBatchPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchYearDBName()
        {
            return "a_batch_year_i";
        }

        /// get character length for column
        public static short GetBatchYearLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }

        /// get character length for column
        public static short GetDateOfEntryLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchStatusDBName()
        {
            return "a_batch_status_c";
        }

        /// get character length for column
        public static short GetBatchStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }

        /// get character length for column
        public static short GetLastJournalLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// GL batches from the previous financial year.
    [Serializable()]
    public class APreviousYearBatchRow : System.Data.DataRow
    {
        private APreviousYearBatchTable myTable;

        /// Constructor
        public APreviousYearBatchRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((APreviousYearBatchTable)(this.Table));
        }

        /// The ledger that the batch belongs to.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String BatchDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDescription)
                            || (((String)(this[this.myTable.ColumnBatchDescription])) != value)))
                {
                    this[this.myTable.ColumnBatchDescription] = value;
                }
            }
        }

        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public Decimal BatchControlTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchControlTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchControlTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchControlTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchControlTotal] = value;
                }
            }
        }

        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchRunningTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchRunningTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchRunningTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchRunningTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchRunningTotal] = value;
                }
            }
        }

        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDebitTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchDebitTotal] = value;
                }
            }
        }

        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchCreditTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchCreditTotal] = value;
                }
            }
        }

        /// The accounting period that the batch belongs to.  Must be &lt;= 20.
        public Int32 BatchPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchPeriod)
                            || (((Int32)(this[this.myTable.ColumnBatchPeriod])) != value)))
                {
                    this[this.myTable.ColumnBatchPeriod] = value;
                }
            }
        }

        /// The financial year that the batch belongs to.
        public Int32 BatchYear
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchYear.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchYear)
                            || (((Int32)(this[this.myTable.ColumnBatchYear])) != value)))
                {
                    this[this.myTable.ColumnBatchYear] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry)
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }

        /// Has this batch been posted yet?
        public String BatchStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchStatus)
                            || (((String)(this[this.myTable.ColumnBatchStatus])) != value)))
                {
                    this[this.myTable.ColumnBatchStatus] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal)
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchDescription);
            this[this.myTable.ColumnBatchControlTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchRunningTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchPeriod.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchYear);
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnBatchStatus.Ordinal] = "Posted";
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsBatchDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDescription);
        }

        /// assign NULL value
        public void SetBatchDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBatchDescription);
        }

        /// test for NULL value
        public bool IsBatchControlTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchControlTotal);
        }

        /// assign NULL value
        public void SetBatchControlTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchControlTotal);
        }

        /// test for NULL value
        public bool IsBatchRunningTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchRunningTotal);
        }

        /// assign NULL value
        public void SetBatchRunningTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchRunningTotal);
        }

        /// test for NULL value
        public bool IsBatchDebitTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDebitTotal);
        }

        /// assign NULL value
        public void SetBatchDebitTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchDebitTotal);
        }

        /// test for NULL value
        public bool IsBatchCreditTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchCreditTotal);
        }

        /// assign NULL value
        public void SetBatchCreditTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchCreditTotal);
        }

        /// test for NULL value
        public bool IsBatchPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnBatchPeriod);
        }

        /// assign NULL value
        public void SetBatchPeriodNull()
        {
            this.SetNull(this.myTable.ColumnBatchPeriod);
        }

        /// test for NULL value
        public bool IsBatchYearNull()
        {
            return this.IsNull(this.myTable.ColumnBatchYear);
        }

        /// assign NULL value
        public void SetBatchYearNull()
        {
            this.SetNull(this.myTable.ColumnBatchYear);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsDateOfEntryNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfEntry);
        }

        /// assign NULL value
        public void SetDateOfEntryNull()
        {
            this.SetNull(this.myTable.ColumnDateOfEntry);
        }

        /// test for NULL value
        public bool IsBatchStatusNull()
        {
            return this.IsNull(this.myTable.ColumnBatchStatus);
        }

        /// assign NULL value
        public void SetBatchStatusNull()
        {
            this.SetNull(this.myTable.ColumnBatchStatus);
        }

        /// test for NULL value
        public bool IsLastJournalNull()
        {
            return this.IsNull(this.myTable.ColumnLastJournal);
        }

        /// assign NULL value
        public void SetLastJournalNull()
        {
            this.SetNull(this.myTable.ColumnLastJournal);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// GL journals from the previous financial year.
    [Serializable()]
    public class APreviousYearJournalTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 148;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalDescriptionId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalDebitTotalId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalCreditTotalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalPeriodId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeCodeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastTransactionNumberId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalStatusId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionCurrencyId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnBaseCurrencyId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnExchangeRateToBaseId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnExchangeRateTimeId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnReversedId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 21;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "APreviousYearJournal", "a_previous_year_journal",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "JournalDescription", "a_journal_description_c", "Journal Description", OdbcType.VarChar, 160, true),
                    new TTypedColumnInfo(4, "JournalDebitTotal", "a_journal_debit_total_n", "Journal Debit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(5, "JournalCreditTotal", "a_journal_credit_total_n", "Journal Credit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(6, "JournalPeriod", "a_journal_period_i", "Journal Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(7, "DateEffective", "a_date_effective_d", "Date Effective", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(8, "TransactionTypeCode", "a_transaction_type_code_c", "Transaction Type", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(9, "LastTransactionNumber", "a_last_transaction_number_i", "Last Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(10, "SubSystemCode", "a_sub_system_code_c", "Sub System", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(11, "JournalStatus", "a_journal_status_c", "Journal Status", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(12, "TransactionCurrency", "a_transaction_currency_c", "Transaction Currency", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(13, "BaseCurrency", "a_base_currency_c", "a_base_currency_c", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(14, "ExchangeRateToBase", "a_exchange_rate_to_base_n", "Exchange Rate to Base", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(15, "ExchangeRateTime", "a_exchange_rate_time_i", "Time", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(16, "Reversed", "a_reversed_l", "Journal Reversed?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(17, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(18, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(19, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(20, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(21, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public APreviousYearJournalTable() :
                base("APreviousYearJournal")
        {
        }

        /// constructor
        public APreviousYearJournalTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public APreviousYearJournalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnJournalDescription;
        /// This is a number of currency units
        public DataColumn ColumnJournalDebitTotal;
        /// This is a number of currency units
        public DataColumn ColumnJournalCreditTotal;
        /// This defines which accounting period is being used
        public DataColumn ColumnJournalPeriod;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        ///
        public DataColumn ColumnTransactionTypeCode;
        ///
        public DataColumn ColumnLastTransactionNumber;
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        /// Has a journal been posted yet
        public DataColumn ColumnJournalStatus;
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        ///
        public DataColumn ColumnBaseCurrency;
        /// The rate of exchange from the journal currency (in a_transaction_currency_c) to the ledger base currency.
        public DataColumn ColumnExchangeRateToBase;
        /// The date and time
        public DataColumn ColumnExchangeRateTime;
        /// Indicates whether or not a journal has been reversed.
        public DataColumn ColumnReversed;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_debit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_credit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_base_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_reversed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnJournalDescription = this.Columns["a_journal_description_c"];
            this.ColumnJournalDebitTotal = this.Columns["a_journal_debit_total_n"];
            this.ColumnJournalCreditTotal = this.Columns["a_journal_credit_total_n"];
            this.ColumnJournalPeriod = this.Columns["a_journal_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnLastTransactionNumber = this.Columns["a_last_transaction_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnJournalStatus = this.Columns["a_journal_status_c"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnBaseCurrency = this.Columns["a_base_currency_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnExchangeRateTime = this.Columns["a_exchange_rate_time_i"];
            this.ColumnReversed = this.Columns["a_reversed_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber};
        }

        /// Access a typed row by index
        public APreviousYearJournalRow this[int i]
        {
            get
            {
                return ((APreviousYearJournalRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public APreviousYearJournalRow NewRowTyped(bool AWithDefaultValues)
        {
            APreviousYearJournalRow ret = ((APreviousYearJournalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public APreviousYearJournalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APreviousYearJournalRow(builder);
        }

        /// get typed set of changes
        public APreviousYearJournalTable GetChangesTyped()
        {
            return ((APreviousYearJournalTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "APreviousYearJournal";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_previous_year_journal";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalDescriptionDBName()
        {
            return "a_journal_description_c";
        }

        /// get character length for column
        public static short GetJournalDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalDebitTotalDBName()
        {
            return "a_journal_debit_total_n";
        }

        /// get character length for column
        public static short GetJournalDebitTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalCreditTotalDBName()
        {
            return "a_journal_credit_total_n";
        }

        /// get character length for column
        public static short GetJournalCreditTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalPeriodDBName()
        {
            return "a_journal_period_i";
        }

        /// get character length for column
        public static short GetJournalPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }

        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetLastTransactionNumberDBName()
        {
            return "a_last_transaction_number_i";
        }

        /// get character length for column
        public static short GetLastTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalStatusDBName()
        {
            return "a_journal_status_c";
        }

        /// get character length for column
        public static short GetJournalStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }

        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetBaseCurrencyDBName()
        {
            return "a_base_currency_c";
        }

        /// get character length for column
        public static short GetBaseCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }

        /// get character length for column
        public static short GetExchangeRateToBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExchangeRateTimeDBName()
        {
            return "a_exchange_rate_time_i";
        }

        /// get character length for column
        public static short GetExchangeRateTimeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReversedDBName()
        {
            return "a_reversed_l";
        }

        /// get character length for column
        public static short GetReversedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// GL journals from the previous financial year.
    [Serializable()]
    public class APreviousYearJournalRow : System.Data.DataRow
    {
        private APreviousYearJournalTable myTable;

        /// Constructor
        public APreviousYearJournalRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((APreviousYearJournalTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String JournalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDescription)
                            || (((String)(this[this.myTable.ColumnJournalDescription])) != value)))
                {
                    this[this.myTable.ColumnJournalDescription] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal JournalDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDebitTotal)
                            || (((Decimal)(this[this.myTable.ColumnJournalDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalDebitTotal] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal JournalCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalCreditTotal)
                            || (((Decimal)(this[this.myTable.ColumnJournalCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalCreditTotal] = value;
                }
            }
        }

        /// This defines which accounting period is being used
        public Int32 JournalPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalPeriod)
                            || (((Int32)(this[this.myTable.ColumnJournalPeriod])) != value)))
                {
                    this[this.myTable.ColumnJournalPeriod] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        ///
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode)
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }

        ///
        public Int32 LastTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnLastTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnLastTransactionNumber] = value;
                }
            }
        }

        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        /// Has a journal been posted yet
        public String JournalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalStatus)
                            || (((String)(this[this.myTable.ColumnJournalStatus])) != value)))
                {
                    this[this.myTable.ColumnJournalStatus] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency)
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }

        ///
        public String BaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBaseCurrency)
                            || (((String)(this[this.myTable.ColumnBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnBaseCurrency] = value;
                }
            }
        }

        /// The rate of exchange from the journal currency (in a_transaction_currency_c) to the ledger base currency.
        public Decimal ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase)
                            || (((Decimal)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }

        /// The date and time
        public Int32 ExchangeRateTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateTime)
                            || (((Int32)(this[this.myTable.ColumnExchangeRateTime])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateTime] = value;
                }
            }
        }

        /// Indicates whether or not a journal has been reversed.
        public Boolean Reversed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReversed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReversed)
                            || (((Boolean)(this[this.myTable.ColumnReversed])) != value)))
                {
                    this[this.myTable.ColumnReversed] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnJournalNumber);
            this.SetNull(this.myTable.ColumnJournalDescription);
            this[this.myTable.ColumnJournalDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this[this.myTable.ColumnLastTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnJournalStatus.Ordinal] = "Unposted";
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this.SetNull(this.myTable.ColumnBaseCurrency);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this[this.myTable.ColumnExchangeRateTime.Ordinal] = 0;
            this[this.myTable.ColumnReversed.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsJournalDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnJournalDescription);
        }

        /// assign NULL value
        public void SetJournalDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnJournalDescription);
        }

        /// test for NULL value
        public bool IsJournalDebitTotalNull()
        {
            return this.IsNull(this.myTable.ColumnJournalDebitTotal);
        }

        /// assign NULL value
        public void SetJournalDebitTotalNull()
        {
            this.SetNull(this.myTable.ColumnJournalDebitTotal);
        }

        /// test for NULL value
        public bool IsJournalCreditTotalNull()
        {
            return this.IsNull(this.myTable.ColumnJournalCreditTotal);
        }

        /// assign NULL value
        public void SetJournalCreditTotalNull()
        {
            this.SetNull(this.myTable.ColumnJournalCreditTotal);
        }

        /// test for NULL value
        public bool IsJournalPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnJournalPeriod);
        }

        /// assign NULL value
        public void SetJournalPeriodNull()
        {
            this.SetNull(this.myTable.ColumnJournalPeriod);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// test for NULL value
        public bool IsLastTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastTransactionNumber);
        }

        /// assign NULL value
        public void SetLastTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastTransactionNumber);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsJournalStatusNull()
        {
            return this.IsNull(this.myTable.ColumnJournalStatus);
        }

        /// assign NULL value
        public void SetJournalStatusNull()
        {
            this.SetNull(this.myTable.ColumnJournalStatus);
        }

        /// test for NULL value
        public bool IsTransactionCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionCurrency);
        }

        /// assign NULL value
        public void SetTransactionCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnTransactionCurrency);
        }

        /// test for NULL value
        public bool IsBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnBaseCurrency);
        }

        /// assign NULL value
        public void SetBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnBaseCurrency);
        }

        /// test for NULL value
        public bool IsExchangeRateToBaseNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// assign NULL value
        public void SetExchangeRateToBaseNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// test for NULL value
        public bool IsExchangeRateTimeNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateTime);
        }

        /// assign NULL value
        public void SetExchangeRateTimeNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateTime);
        }

        /// test for NULL value
        public bool IsReversedNull()
        {
            return this.IsNull(this.myTable.ColumnReversed);
        }

        /// assign NULL value
        public void SetReversedNull()
        {
            this.SetNull(this.myTable.ColumnReversed);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// GL transactions from the previous financial year.
    [Serializable()]
    public class APreviousYearTransactionTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 149;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrimaryAccountCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrimaryCostCentreCodeId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionDateId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionAmountId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnAmountInBaseCurrencyId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisIndicatorId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnReconciledStatusId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnNarrativeId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDebitCreditIndicatorId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionStatusId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnHeaderNumberId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDetailNumberId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubTypeId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnToIltFlagId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnSourceFlagId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnReferenceId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnSourceReferenceId = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnSystemGeneratedId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnAmountInIntlCurrencyId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 29;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "APreviousYearTransaction", "a_previous_year_transaction",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "a_journal_number_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "TransactionNumber", "a_transaction_number_i", "Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "PrimaryAccountCode", "a_primary_account_code_c", "Primary Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(6, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(7, "PrimaryCostCentreCode", "a_primary_cost_centre_code_c", "Primary Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(8, "TransactionDate", "a_transaction_date_d", "Transaction Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(9, "TransactionAmount", "a_transaction_amount_n", "Transaction Amount", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(10, "AmountInBaseCurrency", "a_amount_in_base_currency_n", "Amount in Base Currency", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(11, "AnalysisIndicator", "a_analysis_indicator_l", "Analysis Indicator", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(12, "ReconciledStatus", "a_reconciled_status_l", "a_reconciled_status_l", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(13, "Narrative", "a_narrative_c", "Narrative", OdbcType.VarChar, 240, false),
                    new TTypedColumnInfo(14, "DebitCreditIndicator", "a_debit_credit_indicator_l", "Debit/Credit Indicator", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(15, "TransactionStatus", "a_transaction_status_l", "Transaction Posted Status", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(16, "HeaderNumber", "a_header_number_i", "Header Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(17, "DetailNumber", "a_detail_number_i", "Detail Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(18, "SubType", "a_sub_type_c", "a_sub_type_c", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(19, "ToIltFlag", "a_to_ilt_flag_l", "Transferred to ILT Ledger", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(20, "SourceFlag", "a_source_flag_l", "Source Transaction", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(21, "Reference", "a_reference_c", "Reference", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(22, "SourceReference", "a_source_reference_c", "Source Reference", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(23, "SystemGenerated", "a_system_generated_l", "System Generated", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(24, "AmountInIntlCurrency", "a_amount_in_intl_currency_n", "Amount in International Currency", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(25, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(26, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(27, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(28, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(29, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3
                }));
            return true;
        }

        /// constructor
        public APreviousYearTransactionTable() :
                base("APreviousYearTransaction")
        {
        }

        /// constructor
        public APreviousYearTransactionTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public APreviousYearTransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        ///
        public DataColumn ColumnJournalNumber;
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnPrimaryAccountCode;
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnPrimaryCostCentreCode;
        /// Date the transaction took place
        public DataColumn ColumnTransactionDate;
        /// This is a number of currency units
        public DataColumn ColumnTransactionAmount;
        /// This is a number of currency units
        public DataColumn ColumnAmountInBaseCurrency;
        ///
        public DataColumn ColumnAnalysisIndicator;
        /// Shows if the transaction has been reconciled or not
        public DataColumn ColumnReconciledStatus;
        ///
        public DataColumn ColumnNarrative;
        ///
        public DataColumn ColumnDebitCreditIndicator;
        /// Has a transaction been posted yet
        public DataColumn ColumnTransactionStatus;
        /// The header (eg, cashbook #) that the transaction is associated with.
        public DataColumn ColumnHeaderNumber;
        /// The detail (within the header) that the transaction is associated with.
        public DataColumn ColumnDetailNumber;
        ///
        public DataColumn ColumnSubType;
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public DataColumn ColumnToIltFlag;
        /// To flag a transaction as having come from a source ledger and been processed in an ilt processing centre
        public DataColumn ColumnSourceFlag;
        /// Reference number/code for the transaction
        public DataColumn ColumnReference;
        /// Transaction key which initiated an ILT transaction
        public DataColumn ColumnSourceReference;
        /// Was this transaction generated automatically by the system?
        public DataColumn ColumnSystemGenerated;
        /// The transaction amount in the second base currency.
        public DataColumn ColumnAmountInIntlCurrency;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_base_currency_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reconciled_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_header_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_ilt_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_source_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_source_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_generated_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_intl_currency_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnPrimaryAccountCode = this.Columns["a_primary_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnPrimaryCostCentreCode = this.Columns["a_primary_cost_centre_code_c"];
            this.ColumnTransactionDate = this.Columns["a_transaction_date_d"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnAmountInBaseCurrency = this.Columns["a_amount_in_base_currency_n"];
            this.ColumnAnalysisIndicator = this.Columns["a_analysis_indicator_l"];
            this.ColumnReconciledStatus = this.Columns["a_reconciled_status_l"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnTransactionStatus = this.Columns["a_transaction_status_l"];
            this.ColumnHeaderNumber = this.Columns["a_header_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnSubType = this.Columns["a_sub_type_c"];
            this.ColumnToIltFlag = this.Columns["a_to_ilt_flag_l"];
            this.ColumnSourceFlag = this.Columns["a_source_flag_l"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnSourceReference = this.Columns["a_source_reference_c"];
            this.ColumnSystemGenerated = this.Columns["a_system_generated_l"];
            this.ColumnAmountInIntlCurrency = this.Columns["a_amount_in_intl_currency_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber,ColumnTransactionNumber};
        }

        /// Access a typed row by index
        public APreviousYearTransactionRow this[int i]
        {
            get
            {
                return ((APreviousYearTransactionRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public APreviousYearTransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            APreviousYearTransactionRow ret = ((APreviousYearTransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public APreviousYearTransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APreviousYearTransactionRow(builder);
        }

        /// get typed set of changes
        public APreviousYearTransactionTable GetChangesTyped()
        {
            return ((APreviousYearTransactionTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "APreviousYearTransaction";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_previous_year_transaction";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }

        /// get character length for column
        public static short GetTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetPrimaryAccountCodeDBName()
        {
            return "a_primary_account_code_c";
        }

        /// get character length for column
        public static short GetPrimaryAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetPrimaryCostCentreCodeDBName()
        {
            return "a_primary_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetPrimaryCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionDateDBName()
        {
            return "a_transaction_date_d";
        }

        /// get character length for column
        public static short GetTransactionDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }

        /// get character length for column
        public static short GetTransactionAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAmountInBaseCurrencyDBName()
        {
            return "a_amount_in_base_currency_n";
        }

        /// get character length for column
        public static short GetAmountInBaseCurrencyLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisIndicatorDBName()
        {
            return "a_analysis_indicator_l";
        }

        /// get character length for column
        public static short GetAnalysisIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReconciledStatusDBName()
        {
            return "a_reconciled_status_l";
        }

        /// get character length for column
        public static short GetReconciledStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }

        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 240;
        }

        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }

        /// get character length for column
        public static short GetDebitCreditIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionStatusDBName()
        {
            return "a_transaction_status_l";
        }

        /// get character length for column
        public static short GetTransactionStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetHeaderNumberDBName()
        {
            return "a_header_number_i";
        }

        /// get character length for column
        public static short GetHeaderNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }

        /// get character length for column
        public static short GetDetailNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubTypeDBName()
        {
            return "a_sub_type_c";
        }

        /// get character length for column
        public static short GetSubTypeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetToIltFlagDBName()
        {
            return "a_to_ilt_flag_l";
        }

        /// get character length for column
        public static short GetToIltFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSourceFlagDBName()
        {
            return "a_source_flag_l";
        }

        /// get character length for column
        public static short GetSourceFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }

        /// get character length for column
        public static short GetReferenceLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetSourceReferenceDBName()
        {
            return "a_source_reference_c";
        }

        /// get character length for column
        public static short GetSourceReferenceLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetSystemGeneratedDBName()
        {
            return "a_system_generated_l";
        }

        /// get character length for column
        public static short GetSystemGeneratedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAmountInIntlCurrencyDBName()
        {
            return "a_amount_in_intl_currency_n";
        }

        /// get character length for column
        public static short GetAmountInIntlCurrencyLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// GL transactions from the previous financial year.
    [Serializable()]
    public class APreviousYearTransactionRow : System.Data.DataRow
    {
        private APreviousYearTransactionTable myTable;

        /// Constructor
        public APreviousYearTransactionRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((APreviousYearTransactionTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        ///
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String PrimaryAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryAccountCode)
                            || (((String)(this[this.myTable.ColumnPrimaryAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryAccountCode] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to
        public String PrimaryCostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryCostCentreCode)
                            || (((String)(this[this.myTable.ColumnPrimaryCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryCostCentreCode] = value;
                }
            }
        }

        /// Date the transaction took place
        public System.DateTime TransactionDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionDate)
                            || (((System.DateTime)(this[this.myTable.ColumnTransactionDate])) != value)))
                {
                    this[this.myTable.ColumnTransactionDate] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount)
                            || (((Decimal)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal AmountInBaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInBaseCurrency)
                            || (((Decimal)(this[this.myTable.ColumnAmountInBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInBaseCurrency] = value;
                }
            }
        }

        ///
        public Boolean AnalysisIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisIndicator)
                            || (((Boolean)(this[this.myTable.ColumnAnalysisIndicator])) != value)))
                {
                    this[this.myTable.ColumnAnalysisIndicator] = value;
                }
            }
        }

        /// Shows if the transaction has been reconciled or not
        public Boolean ReconciledStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReconciledStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReconciledStatus)
                            || (((Boolean)(this[this.myTable.ColumnReconciledStatus])) != value)))
                {
                    this[this.myTable.ColumnReconciledStatus] = value;
                }
            }
        }

        ///
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative)
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }

        ///
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator)
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }

        /// Has a transaction been posted yet
        public Boolean TransactionStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionStatus)
                            || (((Boolean)(this[this.myTable.ColumnTransactionStatus])) != value)))
                {
                    this[this.myTable.ColumnTransactionStatus] = value;
                }
            }
        }

        /// The header (eg, cashbook #) that the transaction is associated with.
        public Int32 HeaderNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeaderNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeaderNumber)
                            || (((Int32)(this[this.myTable.ColumnHeaderNumber])) != value)))
                {
                    this[this.myTable.ColumnHeaderNumber] = value;
                }
            }
        }

        /// The detail (within the header) that the transaction is associated with.
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber)
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }

        ///
        public String SubType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubType)
                            || (((String)(this[this.myTable.ColumnSubType])) != value)))
                {
                    this[this.myTable.ColumnSubType] = value;
                }
            }
        }

        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public Boolean ToIltFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToIltFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToIltFlag)
                            || (((Boolean)(this[this.myTable.ColumnToIltFlag])) != value)))
                {
                    this[this.myTable.ColumnToIltFlag] = value;
                }
            }
        }

        /// To flag a transaction as having come from a source ledger and been processed in an ilt processing centre
        public Boolean SourceFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceFlag)
                            || (((Boolean)(this[this.myTable.ColumnSourceFlag])) != value)))
                {
                    this[this.myTable.ColumnSourceFlag] = value;
                }
            }
        }

        /// Reference number/code for the transaction
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference)
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }

        /// Transaction key which initiated an ILT transaction
        public String SourceReference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceReference)
                            || (((String)(this[this.myTable.ColumnSourceReference])) != value)))
                {
                    this[this.myTable.ColumnSourceReference] = value;
                }
            }
        }

        /// Was this transaction generated automatically by the system?
        public Boolean SystemGenerated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemGenerated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemGenerated)
                            || (((Boolean)(this[this.myTable.ColumnSystemGenerated])) != value)))
                {
                    this[this.myTable.ColumnSystemGenerated] = value;
                }
            }
        }

        /// The transaction amount in the second base currency.
        public Decimal AmountInIntlCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInIntlCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInIntlCurrency)
                            || (((Decimal)(this[this.myTable.ColumnAmountInIntlCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInIntlCurrency] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
            this[this.myTable.ColumnTransactionDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this[this.myTable.ColumnAmountInBaseCurrency.Ordinal] = 0;
            this[this.myTable.ColumnAnalysisIndicator.Ordinal] = false;
            this[this.myTable.ColumnReconciledStatus.Ordinal] = false;
            this.SetNull(this.myTable.ColumnNarrative);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnTransactionStatus.Ordinal] = false;
            this[this.myTable.ColumnHeaderNumber.Ordinal] = 0;
            this[this.myTable.ColumnDetailNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubType);
            this[this.myTable.ColumnToIltFlag.Ordinal] = false;
            this[this.myTable.ColumnSourceFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnSourceReference);
            this[this.myTable.ColumnSystemGenerated.Ordinal] = false;
            this[this.myTable.ColumnAmountInIntlCurrency.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionNumber);
        }

        /// assign NULL value
        public void SetTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnTransactionNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsPrimaryAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryAccountCode);
        }

        /// assign NULL value
        public void SetPrimaryAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsPrimaryCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryCostCentreCode);
        }

        /// assign NULL value
        public void SetPrimaryCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
        }

        /// test for NULL value
        public bool IsTransactionDateNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionDate);
        }

        /// assign NULL value
        public void SetTransactionDateNull()
        {
            this.SetNull(this.myTable.ColumnTransactionDate);
        }

        /// test for NULL value
        public bool IsTransactionAmountNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionAmount);
        }

        /// assign NULL value
        public void SetTransactionAmountNull()
        {
            this.SetNull(this.myTable.ColumnTransactionAmount);
        }

        /// test for NULL value
        public bool IsAmountInBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInBaseCurrency);
        }

        /// assign NULL value
        public void SetAmountInBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInBaseCurrency);
        }

        /// test for NULL value
        public bool IsAnalysisIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisIndicator);
        }

        /// assign NULL value
        public void SetAnalysisIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisIndicator);
        }

        /// test for NULL value
        public bool IsReconciledStatusNull()
        {
            return this.IsNull(this.myTable.ColumnReconciledStatus);
        }

        /// assign NULL value
        public void SetReconciledStatusNull()
        {
            this.SetNull(this.myTable.ColumnReconciledStatus);
        }

        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }

        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }

        /// test for NULL value
        public bool IsDebitCreditIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// assign NULL value
        public void SetDebitCreditIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// test for NULL value
        public bool IsTransactionStatusNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionStatus);
        }

        /// assign NULL value
        public void SetTransactionStatusNull()
        {
            this.SetNull(this.myTable.ColumnTransactionStatus);
        }

        /// test for NULL value
        public bool IsHeaderNumberNull()
        {
            return this.IsNull(this.myTable.ColumnHeaderNumber);
        }

        /// assign NULL value
        public void SetHeaderNumberNull()
        {
            this.SetNull(this.myTable.ColumnHeaderNumber);
        }

        /// test for NULL value
        public bool IsDetailNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDetailNumber);
        }

        /// assign NULL value
        public void SetDetailNumberNull()
        {
            this.SetNull(this.myTable.ColumnDetailNumber);
        }

        /// test for NULL value
        public bool IsSubTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSubType);
        }

        /// assign NULL value
        public void SetSubTypeNull()
        {
            this.SetNull(this.myTable.ColumnSubType);
        }

        /// test for NULL value
        public bool IsToIltFlagNull()
        {
            return this.IsNull(this.myTable.ColumnToIltFlag);
        }

        /// assign NULL value
        public void SetToIltFlagNull()
        {
            this.SetNull(this.myTable.ColumnToIltFlag);
        }

        /// test for NULL value
        public bool IsSourceFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSourceFlag);
        }

        /// assign NULL value
        public void SetSourceFlagNull()
        {
            this.SetNull(this.myTable.ColumnSourceFlag);
        }

        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }

        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }

        /// test for NULL value
        public bool IsSourceReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnSourceReference);
        }

        /// assign NULL value
        public void SetSourceReferenceNull()
        {
            this.SetNull(this.myTable.ColumnSourceReference);
        }

        /// test for NULL value
        public bool IsSystemGeneratedNull()
        {
            return this.IsNull(this.myTable.ColumnSystemGenerated);
        }

        /// assign NULL value
        public void SetSystemGeneratedNull()
        {
            this.SetNull(this.myTable.ColumnSystemGenerated);
        }

        /// test for NULL value
        public bool IsAmountInIntlCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInIntlCurrency);
        }

        /// assign NULL value
        public void SetAmountInIntlCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInIntlCurrency);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// GL transaction Analysis Attributes from the previous financial year.
    [Serializable()]
    public class APrevYearTransAnalAttribTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 150;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisTypeCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisAttributeValueId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 12;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "APrevYearTransAnalAttrib", "a_prev_year_trans_anal_attrib",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "TransactionNumber", "a_transaction_number_i", "Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(6, "AnalysisTypeCode", "a_analysis_type_code_c", "Analysis Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(7, "AnalysisAttributeValue", "a_analysis_attribute_value_c", "Analysis Attribute Value", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(8, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3, 6
                }));
            return true;
        }

        /// constructor
        public APrevYearTransAnalAttribTable() :
                base("APrevYearTransAnalAttrib")
        {
        }

        /// constructor
        public APrevYearTransAnalAttribTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public APrevYearTransAnalAttribTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        ///
        public DataColumn ColumnAnalysisTypeCode;
        ///
        public DataColumn ColumnAnalysisAttributeValue;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisAttributeValue = this.Columns["a_analysis_attribute_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[5] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber,ColumnTransactionNumber,ColumnAnalysisTypeCode};
        }

        /// Access a typed row by index
        public APrevYearTransAnalAttribRow this[int i]
        {
            get
            {
                return ((APrevYearTransAnalAttribRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public APrevYearTransAnalAttribRow NewRowTyped(bool AWithDefaultValues)
        {
            APrevYearTransAnalAttribRow ret = ((APrevYearTransAnalAttribRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public APrevYearTransAnalAttribRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APrevYearTransAnalAttribRow(builder);
        }

        /// get typed set of changes
        public APrevYearTransAnalAttribTable GetChangesTyped()
        {
            return ((APrevYearTransAnalAttribTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "APrevYearTransAnalAttrib";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_prev_year_trans_anal_attrib";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }

        /// get character length for column
        public static short GetTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }

        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeValueDBName()
        {
            return "a_analysis_attribute_value_c";
        }

        /// get character length for column
        public static short GetAnalysisAttributeValueLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// GL transaction Analysis Attributes from the previous financial year.
    [Serializable()]
    public class APrevYearTransAnalAttribRow : System.Data.DataRow
    {
        private APrevYearTransAnalAttribTable myTable;

        /// Constructor
        public APrevYearTransAnalAttribRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((APrevYearTransAnalAttribTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        ///
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode)
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }

        ///
        public String AnalysisAttributeValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeValue)
                            || (((String)(this[this.myTable.ColumnAnalysisAttributeValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeValue] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionNumber);
        }

        /// assign NULL value
        public void SetTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnTransactionNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsAnalysisTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// assign NULL value
        public void SetAnalysisTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// test for NULL value
        public bool IsAnalysisAttributeValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeValue);
        }

        /// assign NULL value
        public void SetAnalysisAttributeValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Old rates no longer in use.
    [Serializable()]
    public class APrevYearCorpExRateTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 151;
        /// used for generic TTypedDataTable functions
        public static short ColumnFromCurrencyCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnToCurrencyCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnRateOfExchangeId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveFromId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnTimeEffectiveFromId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "APrevYearCorpExRate", "a_prev_year_corp_ex_rate",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "FromCurrencyCode", "a_from_currency_code_c", "From Currency Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(1, "ToCurrencyCode", "a_to_currency_code_c", "To Currency Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "RateOfExchange", "a_rate_of_exchange_n", "Rate of exchange", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(3, "DateEffectiveFrom", "a_date_effective_from_d", "Date Effective From", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(4, "TimeEffectiveFrom", "a_time_effective_from_i", "Time", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 3
                }));
            return true;
        }

        /// constructor
        public APrevYearCorpExRateTable() :
                base("APrevYearCorpExRate")
        {
        }

        /// constructor
        public APrevYearCorpExRateTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public APrevYearCorpExRateTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Defines the currency being exchanged
        public DataColumn ColumnFromCurrencyCode;
        /// Defines which currency is being changed to
        public DataColumn ColumnToCurrencyCode;
        /// The rate of exchange
        public DataColumn ColumnRateOfExchange;
        /// Date the exchange rate becomes effective
        public DataColumn ColumnDateEffectiveFrom;
        /// System generated date/time stamp.
        public DataColumn ColumnTimeEffectiveFrom;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_from_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_rate_of_exchange_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_from_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_time_effective_from_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnFromCurrencyCode = this.Columns["a_from_currency_code_c"];
            this.ColumnToCurrencyCode = this.Columns["a_to_currency_code_c"];
            this.ColumnRateOfExchange = this.Columns["a_rate_of_exchange_n"];
            this.ColumnDateEffectiveFrom = this.Columns["a_date_effective_from_d"];
            this.ColumnTimeEffectiveFrom = this.Columns["a_time_effective_from_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnFromCurrencyCode,ColumnToCurrencyCode,ColumnDateEffectiveFrom};
        }

        /// Access a typed row by index
        public APrevYearCorpExRateRow this[int i]
        {
            get
            {
                return ((APrevYearCorpExRateRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public APrevYearCorpExRateRow NewRowTyped(bool AWithDefaultValues)
        {
            APrevYearCorpExRateRow ret = ((APrevYearCorpExRateRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public APrevYearCorpExRateRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new APrevYearCorpExRateRow(builder);
        }

        /// get typed set of changes
        public APrevYearCorpExRateTable GetChangesTyped()
        {
            return ((APrevYearCorpExRateTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "APrevYearCorpExRate";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_prev_year_corp_ex_rate";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetFromCurrencyCodeDBName()
        {
            return "a_from_currency_code_c";
        }

        /// get character length for column
        public static short GetFromCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetToCurrencyCodeDBName()
        {
            return "a_to_currency_code_c";
        }

        /// get character length for column
        public static short GetToCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetRateOfExchangeDBName()
        {
            return "a_rate_of_exchange_n";
        }

        /// get character length for column
        public static short GetRateOfExchangeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveFromDBName()
        {
            return "a_date_effective_from_d";
        }

        /// get character length for column
        public static short GetDateEffectiveFromLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTimeEffectiveFromDBName()
        {
            return "a_time_effective_from_i";
        }

        /// get character length for column
        public static short GetTimeEffectiveFromLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Old rates no longer in use.
    [Serializable()]
    public class APrevYearCorpExRateRow : System.Data.DataRow
    {
        private APrevYearCorpExRateTable myTable;

        /// Constructor
        public APrevYearCorpExRateRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((APrevYearCorpExRateTable)(this.Table));
        }

        /// Defines the currency being exchanged
        public String FromCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFromCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFromCurrencyCode)
                            || (((String)(this[this.myTable.ColumnFromCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnFromCurrencyCode] = value;
                }
            }
        }

        /// Defines which currency is being changed to
        public String ToCurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToCurrencyCode)
                            || (((String)(this[this.myTable.ColumnToCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnToCurrencyCode] = value;
                }
            }
        }

        /// The rate of exchange
        public Decimal RateOfExchange
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnRateOfExchange.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnRateOfExchange)
                            || (((Decimal)(this[this.myTable.ColumnRateOfExchange])) != value)))
                {
                    this[this.myTable.ColumnRateOfExchange] = value;
                }
            }
        }

        /// Date the exchange rate becomes effective
        public System.DateTime DateEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffectiveFrom)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnDateEffectiveFrom] = value;
                }
            }
        }

        /// System generated date/time stamp.
        public Int32 TimeEffectiveFrom
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTimeEffectiveFrom.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTimeEffectiveFrom)
                            || (((Int32)(this[this.myTable.ColumnTimeEffectiveFrom])) != value)))
                {
                    this[this.myTable.ColumnTimeEffectiveFrom] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
            this.SetNull(this.myTable.ColumnToCurrencyCode);
            this[this.myTable.ColumnRateOfExchange.Ordinal] = 0;
            this[this.myTable.ColumnDateEffectiveFrom.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTimeEffectiveFrom.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsFromCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFromCurrencyCode);
        }

        /// assign NULL value
        public void SetFromCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnFromCurrencyCode);
        }

        /// test for NULL value
        public bool IsToCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnToCurrencyCode);
        }

        /// assign NULL value
        public void SetToCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnToCurrencyCode);
        }

        /// test for NULL value
        public bool IsRateOfExchangeNull()
        {
            return this.IsNull(this.myTable.ColumnRateOfExchange);
        }

        /// assign NULL value
        public void SetRateOfExchangeNull()
        {
            this.SetNull(this.myTable.ColumnRateOfExchange);
        }

        /// test for NULL value
        public bool IsDateEffectiveFromNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffectiveFrom);
        }

        /// assign NULL value
        public void SetDateEffectiveFromNull()
        {
            this.SetNull(this.myTable.ColumnDateEffectiveFrom);
        }

        /// test for NULL value
        public bool IsTimeEffectiveFromNull()
        {
            return this.IsNull(this.myTable.ColumnTimeEffectiveFrom);
        }

        /// assign NULL value
        public void SetTimeEffectiveFromNull()
        {
            this.SetNull(this.myTable.ColumnTimeEffectiveFrom);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// GL batches from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldBatchTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 152;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchDescriptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchControlTotalId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchRunningTotalId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchDebitTotalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchCreditTotalId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchPeriodId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfEntryId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchStatusId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastJournalId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 16;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AThisYearOldBatch", "a_this_year_old_batch",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "BatchDescription", "a_batch_description_c", "Batch Description", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(3, "BatchControlTotal", "a_batch_control_total_n", "Batch Control Total", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(4, "BatchRunningTotal", "a_batch_running_total_n", "Batch Running Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(5, "BatchDebitTotal", "a_batch_debit_total_n", "Batch Debit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(6, "BatchCreditTotal", "a_batch_credit_total_n", "Batch Credit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(7, "BatchPeriod", "a_batch_period_i", "Batch Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(8, "DateEffective", "a_date_effective_d", "Effective Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(9, "DateOfEntry", "a_date_of_entry_d", "Entry Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(10, "BatchStatus", "a_batch_status_c", "Batch status", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(11, "LastJournal", "a_last_journal_i", "Last Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(12, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public AThisYearOldBatchTable() :
                base("AThisYearOldBatch")
        {
        }

        /// constructor
        public AThisYearOldBatchTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AThisYearOldBatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The ledger that the batch belongs to.
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnBatchDescription;
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public DataColumn ColumnBatchControlTotal;
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchRunningTotal;
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchDebitTotal;
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchCreditTotal;
        /// The accounting period that the batch belongs to.  Must be &lt;= 20.
        public DataColumn ColumnBatchPeriod;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateOfEntry;
        /// Has this batch been posted yet?
        public DataColumn ColumnBatchStatus;
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_control_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_running_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_debit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_credit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnBatchDescription = this.Columns["a_batch_description_c"];
            this.ColumnBatchControlTotal = this.Columns["a_batch_control_total_n"];
            this.ColumnBatchRunningTotal = this.Columns["a_batch_running_total_n"];
            this.ColumnBatchDebitTotal = this.Columns["a_batch_debit_total_n"];
            this.ColumnBatchCreditTotal = this.Columns["a_batch_credit_total_n"];
            this.ColumnBatchPeriod = this.Columns["a_batch_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnBatchStatus = this.Columns["a_batch_status_c"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnBatchNumber};
        }

        /// Access a typed row by index
        public AThisYearOldBatchRow this[int i]
        {
            get
            {
                return ((AThisYearOldBatchRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AThisYearOldBatchRow NewRowTyped(bool AWithDefaultValues)
        {
            AThisYearOldBatchRow ret = ((AThisYearOldBatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AThisYearOldBatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AThisYearOldBatchRow(builder);
        }

        /// get typed set of changes
        public AThisYearOldBatchTable GetChangesTyped()
        {
            return ((AThisYearOldBatchTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AThisYearOldBatch";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_this_year_old_batch";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchDescriptionDBName()
        {
            return "a_batch_description_c";
        }

        /// get character length for column
        public static short GetBatchDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchControlTotalDBName()
        {
            return "a_batch_control_total_n";
        }

        /// get character length for column
        public static short GetBatchControlTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchRunningTotalDBName()
        {
            return "a_batch_running_total_n";
        }

        /// get character length for column
        public static short GetBatchRunningTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchDebitTotalDBName()
        {
            return "a_batch_debit_total_n";
        }

        /// get character length for column
        public static short GetBatchDebitTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchCreditTotalDBName()
        {
            return "a_batch_credit_total_n";
        }

        /// get character length for column
        public static short GetBatchCreditTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchPeriodDBName()
        {
            return "a_batch_period_i";
        }

        /// get character length for column
        public static short GetBatchPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }

        /// get character length for column
        public static short GetDateOfEntryLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchStatusDBName()
        {
            return "a_batch_status_c";
        }

        /// get character length for column
        public static short GetBatchStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }

        /// get character length for column
        public static short GetLastJournalLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// GL batches from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldBatchRow : System.Data.DataRow
    {
        private AThisYearOldBatchTable myTable;

        /// Constructor
        public AThisYearOldBatchRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AThisYearOldBatchTable)(this.Table));
        }

        /// The ledger that the batch belongs to.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String BatchDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDescription)
                            || (((String)(this[this.myTable.ColumnBatchDescription])) != value)))
                {
                    this[this.myTable.ColumnBatchDescription] = value;
                }
            }
        }

        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public Decimal BatchControlTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchControlTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchControlTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchControlTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchControlTotal] = value;
                }
            }
        }

        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchRunningTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchRunningTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchRunningTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchRunningTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchRunningTotal] = value;
                }
            }
        }

        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDebitTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchDebitTotal] = value;
                }
            }
        }

        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchCreditTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchCreditTotal] = value;
                }
            }
        }

        /// The accounting period that the batch belongs to.  Must be &lt;= 20.
        public Int32 BatchPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchPeriod)
                            || (((Int32)(this[this.myTable.ColumnBatchPeriod])) != value)))
                {
                    this[this.myTable.ColumnBatchPeriod] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry)
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }

        /// Has this batch been posted yet?
        public String BatchStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchStatus)
                            || (((String)(this[this.myTable.ColumnBatchStatus])) != value)))
                {
                    this[this.myTable.ColumnBatchStatus] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal)
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchDescription);
            this[this.myTable.ColumnBatchControlTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchRunningTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnBatchStatus.Ordinal] = "Unposted";
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsBatchDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDescription);
        }

        /// assign NULL value
        public void SetBatchDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBatchDescription);
        }

        /// test for NULL value
        public bool IsBatchControlTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchControlTotal);
        }

        /// assign NULL value
        public void SetBatchControlTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchControlTotal);
        }

        /// test for NULL value
        public bool IsBatchRunningTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchRunningTotal);
        }

        /// assign NULL value
        public void SetBatchRunningTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchRunningTotal);
        }

        /// test for NULL value
        public bool IsBatchDebitTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDebitTotal);
        }

        /// assign NULL value
        public void SetBatchDebitTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchDebitTotal);
        }

        /// test for NULL value
        public bool IsBatchCreditTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchCreditTotal);
        }

        /// assign NULL value
        public void SetBatchCreditTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchCreditTotal);
        }

        /// test for NULL value
        public bool IsBatchPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnBatchPeriod);
        }

        /// assign NULL value
        public void SetBatchPeriodNull()
        {
            this.SetNull(this.myTable.ColumnBatchPeriod);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsDateOfEntryNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfEntry);
        }

        /// assign NULL value
        public void SetDateOfEntryNull()
        {
            this.SetNull(this.myTable.ColumnDateOfEntry);
        }

        /// test for NULL value
        public bool IsBatchStatusNull()
        {
            return this.IsNull(this.myTable.ColumnBatchStatus);
        }

        /// assign NULL value
        public void SetBatchStatusNull()
        {
            this.SetNull(this.myTable.ColumnBatchStatus);
        }

        /// test for NULL value
        public bool IsLastJournalNull()
        {
            return this.IsNull(this.myTable.ColumnLastJournal);
        }

        /// assign NULL value
        public void SetLastJournalNull()
        {
            this.SetNull(this.myTable.ColumnLastJournal);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// GL journals from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldJournalTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 153;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalDescriptionId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalDebitTotalId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalCreditTotalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalPeriodId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeCodeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastTransactionNumberId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalStatusId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionCurrencyId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnBaseCurrencyId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnExchangeRateToBaseId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnExchangeRateTimeId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnReversedId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 21;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AThisYearOldJournal", "a_this_year_old_journal",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "JournalDescription", "a_journal_description_c", "Journal Description", OdbcType.VarChar, 160, true),
                    new TTypedColumnInfo(4, "JournalDebitTotal", "a_journal_debit_total_n", "Journal Debit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(5, "JournalCreditTotal", "a_journal_credit_total_n", "Journal Credit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(6, "JournalPeriod", "a_journal_period_i", "Journal Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(7, "DateEffective", "a_date_effective_d", "Date Effective", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(8, "TransactionTypeCode", "a_transaction_type_code_c", "Transaction Type", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(9, "LastTransactionNumber", "a_last_transaction_number_i", "Last Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(10, "SubSystemCode", "a_sub_system_code_c", "Sub System", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(11, "JournalStatus", "a_journal_status_c", "Journal Status", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(12, "TransactionCurrency", "a_transaction_currency_c", "Transaction Currency", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(13, "BaseCurrency", "a_base_currency_c", "a_base_currency_c", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(14, "ExchangeRateToBase", "a_exchange_rate_to_base_n", "Exchange Rate to Base", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(15, "ExchangeRateTime", "a_exchange_rate_time_i", "Time", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(16, "Reversed", "a_reversed_l", "Journal Reversed?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(17, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(18, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(19, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(20, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(21, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public AThisYearOldJournalTable() :
                base("AThisYearOldJournal")
        {
        }

        /// constructor
        public AThisYearOldJournalTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AThisYearOldJournalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnJournalDescription;
        /// This is a number of currency units
        public DataColumn ColumnJournalDebitTotal;
        /// This is a number of currency units
        public DataColumn ColumnJournalCreditTotal;
        /// This defines which accounting period is being used
        public DataColumn ColumnJournalPeriod;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        ///
        public DataColumn ColumnTransactionTypeCode;
        ///
        public DataColumn ColumnLastTransactionNumber;
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        /// Has a journal been posted yet
        public DataColumn ColumnJournalStatus;
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        ///
        public DataColumn ColumnBaseCurrency;
        /// The rate of exchange
        public DataColumn ColumnExchangeRateToBase;
        /// The date and time
        public DataColumn ColumnExchangeRateTime;
        /// Indicates whether or not a journal has been reversed.
        public DataColumn ColumnReversed;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_debit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_credit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_base_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_reversed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnJournalDescription = this.Columns["a_journal_description_c"];
            this.ColumnJournalDebitTotal = this.Columns["a_journal_debit_total_n"];
            this.ColumnJournalCreditTotal = this.Columns["a_journal_credit_total_n"];
            this.ColumnJournalPeriod = this.Columns["a_journal_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnLastTransactionNumber = this.Columns["a_last_transaction_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnJournalStatus = this.Columns["a_journal_status_c"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnBaseCurrency = this.Columns["a_base_currency_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnExchangeRateTime = this.Columns["a_exchange_rate_time_i"];
            this.ColumnReversed = this.Columns["a_reversed_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber};
        }

        /// Access a typed row by index
        public AThisYearOldJournalRow this[int i]
        {
            get
            {
                return ((AThisYearOldJournalRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AThisYearOldJournalRow NewRowTyped(bool AWithDefaultValues)
        {
            AThisYearOldJournalRow ret = ((AThisYearOldJournalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AThisYearOldJournalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AThisYearOldJournalRow(builder);
        }

        /// get typed set of changes
        public AThisYearOldJournalTable GetChangesTyped()
        {
            return ((AThisYearOldJournalTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AThisYearOldJournal";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_this_year_old_journal";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalDescriptionDBName()
        {
            return "a_journal_description_c";
        }

        /// get character length for column
        public static short GetJournalDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalDebitTotalDBName()
        {
            return "a_journal_debit_total_n";
        }

        /// get character length for column
        public static short GetJournalDebitTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalCreditTotalDBName()
        {
            return "a_journal_credit_total_n";
        }

        /// get character length for column
        public static short GetJournalCreditTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalPeriodDBName()
        {
            return "a_journal_period_i";
        }

        /// get character length for column
        public static short GetJournalPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }

        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetLastTransactionNumberDBName()
        {
            return "a_last_transaction_number_i";
        }

        /// get character length for column
        public static short GetLastTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalStatusDBName()
        {
            return "a_journal_status_c";
        }

        /// get character length for column
        public static short GetJournalStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }

        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetBaseCurrencyDBName()
        {
            return "a_base_currency_c";
        }

        /// get character length for column
        public static short GetBaseCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }

        /// get character length for column
        public static short GetExchangeRateToBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExchangeRateTimeDBName()
        {
            return "a_exchange_rate_time_i";
        }

        /// get character length for column
        public static short GetExchangeRateTimeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReversedDBName()
        {
            return "a_reversed_l";
        }

        /// get character length for column
        public static short GetReversedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// GL journals from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldJournalRow : System.Data.DataRow
    {
        private AThisYearOldJournalTable myTable;

        /// Constructor
        public AThisYearOldJournalRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AThisYearOldJournalTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String JournalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDescription)
                            || (((String)(this[this.myTable.ColumnJournalDescription])) != value)))
                {
                    this[this.myTable.ColumnJournalDescription] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal JournalDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDebitTotal)
                            || (((Decimal)(this[this.myTable.ColumnJournalDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalDebitTotal] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal JournalCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalCreditTotal)
                            || (((Decimal)(this[this.myTable.ColumnJournalCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalCreditTotal] = value;
                }
            }
        }

        /// This defines which accounting period is being used
        public Int32 JournalPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalPeriod)
                            || (((Int32)(this[this.myTable.ColumnJournalPeriod])) != value)))
                {
                    this[this.myTable.ColumnJournalPeriod] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        ///
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode)
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }

        ///
        public Int32 LastTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnLastTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnLastTransactionNumber] = value;
                }
            }
        }

        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        /// Has a journal been posted yet
        public String JournalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalStatus)
                            || (((String)(this[this.myTable.ColumnJournalStatus])) != value)))
                {
                    this[this.myTable.ColumnJournalStatus] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency)
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }

        ///
        public String BaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBaseCurrency)
                            || (((String)(this[this.myTable.ColumnBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnBaseCurrency] = value;
                }
            }
        }

        /// The rate of exchange
        public Decimal ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase)
                            || (((Decimal)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }

        /// The date and time
        public Int32 ExchangeRateTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateTime)
                            || (((Int32)(this[this.myTable.ColumnExchangeRateTime])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateTime] = value;
                }
            }
        }

        /// Indicates whether or not a journal has been reversed.
        public Boolean Reversed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReversed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReversed)
                            || (((Boolean)(this[this.myTable.ColumnReversed])) != value)))
                {
                    this[this.myTable.ColumnReversed] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnJournalNumber);
            this.SetNull(this.myTable.ColumnJournalDescription);
            this[this.myTable.ColumnJournalDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this[this.myTable.ColumnLastTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnJournalStatus.Ordinal] = "Unposted";
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this.SetNull(this.myTable.ColumnBaseCurrency);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this[this.myTable.ColumnExchangeRateTime.Ordinal] = 0;
            this[this.myTable.ColumnReversed.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsJournalDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnJournalDescription);
        }

        /// assign NULL value
        public void SetJournalDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnJournalDescription);
        }

        /// test for NULL value
        public bool IsJournalDebitTotalNull()
        {
            return this.IsNull(this.myTable.ColumnJournalDebitTotal);
        }

        /// assign NULL value
        public void SetJournalDebitTotalNull()
        {
            this.SetNull(this.myTable.ColumnJournalDebitTotal);
        }

        /// test for NULL value
        public bool IsJournalCreditTotalNull()
        {
            return this.IsNull(this.myTable.ColumnJournalCreditTotal);
        }

        /// assign NULL value
        public void SetJournalCreditTotalNull()
        {
            this.SetNull(this.myTable.ColumnJournalCreditTotal);
        }

        /// test for NULL value
        public bool IsJournalPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnJournalPeriod);
        }

        /// assign NULL value
        public void SetJournalPeriodNull()
        {
            this.SetNull(this.myTable.ColumnJournalPeriod);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// test for NULL value
        public bool IsLastTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastTransactionNumber);
        }

        /// assign NULL value
        public void SetLastTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastTransactionNumber);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsJournalStatusNull()
        {
            return this.IsNull(this.myTable.ColumnJournalStatus);
        }

        /// assign NULL value
        public void SetJournalStatusNull()
        {
            this.SetNull(this.myTable.ColumnJournalStatus);
        }

        /// test for NULL value
        public bool IsTransactionCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionCurrency);
        }

        /// assign NULL value
        public void SetTransactionCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnTransactionCurrency);
        }

        /// test for NULL value
        public bool IsBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnBaseCurrency);
        }

        /// assign NULL value
        public void SetBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnBaseCurrency);
        }

        /// test for NULL value
        public bool IsExchangeRateToBaseNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// assign NULL value
        public void SetExchangeRateToBaseNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// test for NULL value
        public bool IsExchangeRateTimeNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateTime);
        }

        /// assign NULL value
        public void SetExchangeRateTimeNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateTime);
        }

        /// test for NULL value
        public bool IsReversedNull()
        {
            return this.IsNull(this.myTable.ColumnReversed);
        }

        /// assign NULL value
        public void SetReversedNull()
        {
            this.SetNull(this.myTable.ColumnReversed);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// GL transactions from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldTransactionTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 154;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrimaryAccountCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrimaryCostCentreCodeId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionDateId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionAmountId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnAmountInBaseCurrencyId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisIndicatorId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnReconciledStatusId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnNarrativeId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDebitCreditIndicatorId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionStatusId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnHeaderNumberId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDetailNumberId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubTypeId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnToIltFlagId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnSourceFlagId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnReferenceId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnSourceReferenceId = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnSystemGeneratedId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnAmountInIntlCurrencyId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnIchNumberId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 30;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AThisYearOldTransaction", "a_this_year_old_transaction",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "a_journal_number_i", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "TransactionNumber", "a_transaction_number_i", "Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "PrimaryAccountCode", "a_primary_account_code_c", "Primary Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(6, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(7, "PrimaryCostCentreCode", "a_primary_cost_centre_code_c", "Primary Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(8, "TransactionDate", "a_transaction_date_d", "Transaction Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(9, "TransactionAmount", "a_transaction_amount_n", "Transaction Amount", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(10, "AmountInBaseCurrency", "a_amount_in_base_currency_n", "Amount in Base Currency", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(11, "AnalysisIndicator", "a_analysis_indicator_l", "Analysis Indicator", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(12, "ReconciledStatus", "a_reconciled_status_l", "a_reconciled_status_l", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(13, "Narrative", "a_narrative_c", "Narrative", OdbcType.VarChar, 240, false),
                    new TTypedColumnInfo(14, "DebitCreditIndicator", "a_debit_credit_indicator_l", "Debit/Credit Indicator", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(15, "TransactionStatus", "a_transaction_status_l", "Transaction Posted Status", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(16, "HeaderNumber", "a_header_number_i", "Header Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(17, "DetailNumber", "a_detail_number_i", "Detail Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(18, "SubType", "a_sub_type_c", "a_sub_type_c", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(19, "ToIltFlag", "a_to_ilt_flag_l", "Transferred to ILT Ledger", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(20, "SourceFlag", "a_source_flag_l", "Source Transaction", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(21, "Reference", "a_reference_c", "Reference", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(22, "SourceReference", "a_source_reference_c", "Source Reference", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(23, "SystemGenerated", "a_system_generated_l", "System Generated", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(24, "AmountInIntlCurrency", "a_amount_in_intl_currency_n", "Amount in International Currency", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(25, "IchNumber", "a_ich_number_i", "ICH Process Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(26, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(27, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(28, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(29, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(30, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3
                }));
            return true;
        }

        /// constructor
        public AThisYearOldTransactionTable() :
                base("AThisYearOldTransaction")
        {
        }

        /// constructor
        public AThisYearOldTransactionTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AThisYearOldTransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        ///
        public DataColumn ColumnJournalNumber;
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnPrimaryAccountCode;
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnPrimaryCostCentreCode;
        /// Date the transaction took place
        public DataColumn ColumnTransactionDate;
        /// This is a number of currency units
        public DataColumn ColumnTransactionAmount;
        /// This is a number of currency units
        public DataColumn ColumnAmountInBaseCurrency;
        ///
        public DataColumn ColumnAnalysisIndicator;
        /// Shows if the transaction has been reconciled or not
        public DataColumn ColumnReconciledStatus;
        ///
        public DataColumn ColumnNarrative;
        ///
        public DataColumn ColumnDebitCreditIndicator;
        /// Has a transaction been posted yet
        public DataColumn ColumnTransactionStatus;
        /// The header (eg, cashbook #) that the transaction is associated with.
        public DataColumn ColumnHeaderNumber;
        /// The detail (within the header) that the transaction is associated with.
        public DataColumn ColumnDetailNumber;
        ///
        public DataColumn ColumnSubType;
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public DataColumn ColumnToIltFlag;
        /// To flag a transaction as having come from a source ledger and been processed in an ilt processing centre
        public DataColumn ColumnSourceFlag;
        /// Reference number/code for the transaction
        public DataColumn ColumnReference;
        /// Transaction key which initiated an ILT transaction
        public DataColumn ColumnSourceReference;
        /// Was this transaction generated automatically by the system?
        public DataColumn ColumnSystemGenerated;
        /// The transaction amount in the second base currency.
        public DataColumn ColumnAmountInIntlCurrency;
        /// identifes the ICH process number
        public DataColumn ColumnIchNumber;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_base_currency_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reconciled_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_header_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_ilt_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_source_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_source_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_generated_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_intl_currency_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_ich_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnPrimaryAccountCode = this.Columns["a_primary_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnPrimaryCostCentreCode = this.Columns["a_primary_cost_centre_code_c"];
            this.ColumnTransactionDate = this.Columns["a_transaction_date_d"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnAmountInBaseCurrency = this.Columns["a_amount_in_base_currency_n"];
            this.ColumnAnalysisIndicator = this.Columns["a_analysis_indicator_l"];
            this.ColumnReconciledStatus = this.Columns["a_reconciled_status_l"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnTransactionStatus = this.Columns["a_transaction_status_l"];
            this.ColumnHeaderNumber = this.Columns["a_header_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnSubType = this.Columns["a_sub_type_c"];
            this.ColumnToIltFlag = this.Columns["a_to_ilt_flag_l"];
            this.ColumnSourceFlag = this.Columns["a_source_flag_l"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnSourceReference = this.Columns["a_source_reference_c"];
            this.ColumnSystemGenerated = this.Columns["a_system_generated_l"];
            this.ColumnAmountInIntlCurrency = this.Columns["a_amount_in_intl_currency_n"];
            this.ColumnIchNumber = this.Columns["a_ich_number_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber,ColumnTransactionNumber};
        }

        /// Access a typed row by index
        public AThisYearOldTransactionRow this[int i]
        {
            get
            {
                return ((AThisYearOldTransactionRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AThisYearOldTransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            AThisYearOldTransactionRow ret = ((AThisYearOldTransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AThisYearOldTransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AThisYearOldTransactionRow(builder);
        }

        /// get typed set of changes
        public AThisYearOldTransactionTable GetChangesTyped()
        {
            return ((AThisYearOldTransactionTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AThisYearOldTransaction";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_this_year_old_transaction";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }

        /// get character length for column
        public static short GetTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetPrimaryAccountCodeDBName()
        {
            return "a_primary_account_code_c";
        }

        /// get character length for column
        public static short GetPrimaryAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetPrimaryCostCentreCodeDBName()
        {
            return "a_primary_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetPrimaryCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionDateDBName()
        {
            return "a_transaction_date_d";
        }

        /// get character length for column
        public static short GetTransactionDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }

        /// get character length for column
        public static short GetTransactionAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAmountInBaseCurrencyDBName()
        {
            return "a_amount_in_base_currency_n";
        }

        /// get character length for column
        public static short GetAmountInBaseCurrencyLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisIndicatorDBName()
        {
            return "a_analysis_indicator_l";
        }

        /// get character length for column
        public static short GetAnalysisIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReconciledStatusDBName()
        {
            return "a_reconciled_status_l";
        }

        /// get character length for column
        public static short GetReconciledStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }

        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 240;
        }

        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }

        /// get character length for column
        public static short GetDebitCreditIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionStatusDBName()
        {
            return "a_transaction_status_l";
        }

        /// get character length for column
        public static short GetTransactionStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetHeaderNumberDBName()
        {
            return "a_header_number_i";
        }

        /// get character length for column
        public static short GetHeaderNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }

        /// get character length for column
        public static short GetDetailNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubTypeDBName()
        {
            return "a_sub_type_c";
        }

        /// get character length for column
        public static short GetSubTypeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetToIltFlagDBName()
        {
            return "a_to_ilt_flag_l";
        }

        /// get character length for column
        public static short GetToIltFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSourceFlagDBName()
        {
            return "a_source_flag_l";
        }

        /// get character length for column
        public static short GetSourceFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }

        /// get character length for column
        public static short GetReferenceLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetSourceReferenceDBName()
        {
            return "a_source_reference_c";
        }

        /// get character length for column
        public static short GetSourceReferenceLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetSystemGeneratedDBName()
        {
            return "a_system_generated_l";
        }

        /// get character length for column
        public static short GetSystemGeneratedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAmountInIntlCurrencyDBName()
        {
            return "a_amount_in_intl_currency_n";
        }

        /// get character length for column
        public static short GetAmountInIntlCurrencyLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetIchNumberDBName()
        {
            return "a_ich_number_i";
        }

        /// get character length for column
        public static short GetIchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// GL transactions from previous periods in the current financial year.
    [Serializable()]
    public class AThisYearOldTransactionRow : System.Data.DataRow
    {
        private AThisYearOldTransactionTable myTable;

        /// Constructor
        public AThisYearOldTransactionRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AThisYearOldTransactionTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        ///
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String PrimaryAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryAccountCode)
                            || (((String)(this[this.myTable.ColumnPrimaryAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryAccountCode] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to
        public String PrimaryCostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryCostCentreCode)
                            || (((String)(this[this.myTable.ColumnPrimaryCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryCostCentreCode] = value;
                }
            }
        }

        /// Date the transaction took place
        public System.DateTime TransactionDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionDate)
                            || (((System.DateTime)(this[this.myTable.ColumnTransactionDate])) != value)))
                {
                    this[this.myTable.ColumnTransactionDate] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount)
                            || (((Decimal)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal AmountInBaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInBaseCurrency)
                            || (((Decimal)(this[this.myTable.ColumnAmountInBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInBaseCurrency] = value;
                }
            }
        }

        ///
        public Boolean AnalysisIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisIndicator)
                            || (((Boolean)(this[this.myTable.ColumnAnalysisIndicator])) != value)))
                {
                    this[this.myTable.ColumnAnalysisIndicator] = value;
                }
            }
        }

        /// Shows if the transaction has been reconciled or not
        public Boolean ReconciledStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReconciledStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReconciledStatus)
                            || (((Boolean)(this[this.myTable.ColumnReconciledStatus])) != value)))
                {
                    this[this.myTable.ColumnReconciledStatus] = value;
                }
            }
        }

        ///
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative)
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }

        ///
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator)
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }

        /// Has a transaction been posted yet
        public Boolean TransactionStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionStatus)
                            || (((Boolean)(this[this.myTable.ColumnTransactionStatus])) != value)))
                {
                    this[this.myTable.ColumnTransactionStatus] = value;
                }
            }
        }

        /// The header (eg, cashbook #) that the transaction is associated with.
        public Int32 HeaderNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeaderNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeaderNumber)
                            || (((Int32)(this[this.myTable.ColumnHeaderNumber])) != value)))
                {
                    this[this.myTable.ColumnHeaderNumber] = value;
                }
            }
        }

        /// The detail (within the header) that the transaction is associated with.
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber)
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }

        ///
        public String SubType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubType)
                            || (((String)(this[this.myTable.ColumnSubType])) != value)))
                {
                    this[this.myTable.ColumnSubType] = value;
                }
            }
        }

        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public Boolean ToIltFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToIltFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToIltFlag)
                            || (((Boolean)(this[this.myTable.ColumnToIltFlag])) != value)))
                {
                    this[this.myTable.ColumnToIltFlag] = value;
                }
            }
        }

        /// To flag a transaction as having come from a source ledger and been processed in an ilt processing centre
        public Boolean SourceFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceFlag)
                            || (((Boolean)(this[this.myTable.ColumnSourceFlag])) != value)))
                {
                    this[this.myTable.ColumnSourceFlag] = value;
                }
            }
        }

        /// Reference number/code for the transaction
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference)
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }

        /// Transaction key which initiated an ILT transaction
        public String SourceReference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceReference)
                            || (((String)(this[this.myTable.ColumnSourceReference])) != value)))
                {
                    this[this.myTable.ColumnSourceReference] = value;
                }
            }
        }

        /// Was this transaction generated automatically by the system?
        public Boolean SystemGenerated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemGenerated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemGenerated)
                            || (((Boolean)(this[this.myTable.ColumnSystemGenerated])) != value)))
                {
                    this[this.myTable.ColumnSystemGenerated] = value;
                }
            }
        }

        /// The transaction amount in the second base currency.
        public Decimal AmountInIntlCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInIntlCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInIntlCurrency)
                            || (((Decimal)(this[this.myTable.ColumnAmountInIntlCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInIntlCurrency] = value;
                }
            }
        }

        /// identifes the ICH process number
        public Int32 IchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIchNumber)
                            || (((Int32)(this[this.myTable.ColumnIchNumber])) != value)))
                {
                    this[this.myTable.ColumnIchNumber] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
            this[this.myTable.ColumnTransactionDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this[this.myTable.ColumnAmountInBaseCurrency.Ordinal] = 0;
            this[this.myTable.ColumnAnalysisIndicator.Ordinal] = false;
            this[this.myTable.ColumnReconciledStatus.Ordinal] = false;
            this.SetNull(this.myTable.ColumnNarrative);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnTransactionStatus.Ordinal] = false;
            this[this.myTable.ColumnHeaderNumber.Ordinal] = 0;
            this[this.myTable.ColumnDetailNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubType);
            this[this.myTable.ColumnToIltFlag.Ordinal] = false;
            this[this.myTable.ColumnSourceFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnSourceReference);
            this[this.myTable.ColumnSystemGenerated.Ordinal] = false;
            this[this.myTable.ColumnAmountInIntlCurrency.Ordinal] = 0;
            this[this.myTable.ColumnIchNumber.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionNumber);
        }

        /// assign NULL value
        public void SetTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnTransactionNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsPrimaryAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryAccountCode);
        }

        /// assign NULL value
        public void SetPrimaryAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsPrimaryCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryCostCentreCode);
        }

        /// assign NULL value
        public void SetPrimaryCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
        }

        /// test for NULL value
        public bool IsTransactionDateNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionDate);
        }

        /// assign NULL value
        public void SetTransactionDateNull()
        {
            this.SetNull(this.myTable.ColumnTransactionDate);
        }

        /// test for NULL value
        public bool IsTransactionAmountNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionAmount);
        }

        /// assign NULL value
        public void SetTransactionAmountNull()
        {
            this.SetNull(this.myTable.ColumnTransactionAmount);
        }

        /// test for NULL value
        public bool IsAmountInBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInBaseCurrency);
        }

        /// assign NULL value
        public void SetAmountInBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInBaseCurrency);
        }

        /// test for NULL value
        public bool IsAnalysisIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisIndicator);
        }

        /// assign NULL value
        public void SetAnalysisIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisIndicator);
        }

        /// test for NULL value
        public bool IsReconciledStatusNull()
        {
            return this.IsNull(this.myTable.ColumnReconciledStatus);
        }

        /// assign NULL value
        public void SetReconciledStatusNull()
        {
            this.SetNull(this.myTable.ColumnReconciledStatus);
        }

        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }

        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }

        /// test for NULL value
        public bool IsDebitCreditIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// assign NULL value
        public void SetDebitCreditIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// test for NULL value
        public bool IsTransactionStatusNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionStatus);
        }

        /// assign NULL value
        public void SetTransactionStatusNull()
        {
            this.SetNull(this.myTable.ColumnTransactionStatus);
        }

        /// test for NULL value
        public bool IsHeaderNumberNull()
        {
            return this.IsNull(this.myTable.ColumnHeaderNumber);
        }

        /// assign NULL value
        public void SetHeaderNumberNull()
        {
            this.SetNull(this.myTable.ColumnHeaderNumber);
        }

        /// test for NULL value
        public bool IsDetailNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDetailNumber);
        }

        /// assign NULL value
        public void SetDetailNumberNull()
        {
            this.SetNull(this.myTable.ColumnDetailNumber);
        }

        /// test for NULL value
        public bool IsSubTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSubType);
        }

        /// assign NULL value
        public void SetSubTypeNull()
        {
            this.SetNull(this.myTable.ColumnSubType);
        }

        /// test for NULL value
        public bool IsToIltFlagNull()
        {
            return this.IsNull(this.myTable.ColumnToIltFlag);
        }

        /// assign NULL value
        public void SetToIltFlagNull()
        {
            this.SetNull(this.myTable.ColumnToIltFlag);
        }

        /// test for NULL value
        public bool IsSourceFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSourceFlag);
        }

        /// assign NULL value
        public void SetSourceFlagNull()
        {
            this.SetNull(this.myTable.ColumnSourceFlag);
        }

        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }

        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }

        /// test for NULL value
        public bool IsSourceReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnSourceReference);
        }

        /// assign NULL value
        public void SetSourceReferenceNull()
        {
            this.SetNull(this.myTable.ColumnSourceReference);
        }

        /// test for NULL value
        public bool IsSystemGeneratedNull()
        {
            return this.IsNull(this.myTable.ColumnSystemGenerated);
        }

        /// assign NULL value
        public void SetSystemGeneratedNull()
        {
            this.SetNull(this.myTable.ColumnSystemGenerated);
        }

        /// test for NULL value
        public bool IsAmountInIntlCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInIntlCurrency);
        }

        /// assign NULL value
        public void SetAmountInIntlCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInIntlCurrency);
        }

        /// test for NULL value
        public bool IsIchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnIchNumber);
        }

        /// assign NULL value
        public void SetIchNumberNull()
        {
            this.SetNull(this.myTable.ColumnIchNumber);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// GL transaction Analysis Attributes from previous periods in the current financial year.
    [Serializable()]
    public class AThisyearoldTransAnalAttribTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 155;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisTypeCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisAttributeValueId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 12;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AThisyearoldTransAnalAttrib", "a_thisyearold_trans_anal_attrib",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "TransactionNumber", "a_transaction_number_i", "Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(6, "AnalysisTypeCode", "a_analysis_type_code_c", "Analysis Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(7, "AnalysisAttributeValue", "a_analysis_attribute_value_c", "Analysis Attribute Value", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(8, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3, 6
                }));
            return true;
        }

        /// constructor
        public AThisyearoldTransAnalAttribTable() :
                base("AThisyearoldTransAnalAttrib")
        {
        }

        /// constructor
        public AThisyearoldTransAnalAttribTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AThisyearoldTransAnalAttribTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        ///
        public DataColumn ColumnAnalysisTypeCode;
        ///
        public DataColumn ColumnAnalysisAttributeValue;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisAttributeValue = this.Columns["a_analysis_attribute_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[5] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber,ColumnTransactionNumber,ColumnAnalysisTypeCode};
        }

        /// Access a typed row by index
        public AThisyearoldTransAnalAttribRow this[int i]
        {
            get
            {
                return ((AThisyearoldTransAnalAttribRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AThisyearoldTransAnalAttribRow NewRowTyped(bool AWithDefaultValues)
        {
            AThisyearoldTransAnalAttribRow ret = ((AThisyearoldTransAnalAttribRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AThisyearoldTransAnalAttribRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AThisyearoldTransAnalAttribRow(builder);
        }

        /// get typed set of changes
        public AThisyearoldTransAnalAttribTable GetChangesTyped()
        {
            return ((AThisyearoldTransAnalAttribTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AThisyearoldTransAnalAttrib";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_thisyearold_trans_anal_attrib";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }

        /// get character length for column
        public static short GetTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }

        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeValueDBName()
        {
            return "a_analysis_attribute_value_c";
        }

        /// get character length for column
        public static short GetAnalysisAttributeValueLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// GL transaction Analysis Attributes from previous periods in the current financial year.
    [Serializable()]
    public class AThisyearoldTransAnalAttribRow : System.Data.DataRow
    {
        private AThisyearoldTransAnalAttribTable myTable;

        /// Constructor
        public AThisyearoldTransAnalAttribRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AThisyearoldTransAnalAttribTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        ///
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode)
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }

        ///
        public String AnalysisAttributeValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeValue)
                            || (((String)(this[this.myTable.ColumnAnalysisAttributeValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeValue] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionNumber);
        }

        /// assign NULL value
        public void SetTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnTransactionNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsAnalysisTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// assign NULL value
        public void SetAnalysisTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// test for NULL value
        public bool IsAnalysisAttributeValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeValue);
        }

        /// assign NULL value
        public void SetAnalysisAttributeValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Templates of general ledger batches which can be copied into the ledger.
    [Serializable()]
    public class ARecurringBatchTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 156;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchDescriptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchControlTotalId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchStatusId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchRunningTotalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchDebitTotalId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchCreditTotalId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchPeriodId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnUserIdId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfEntryId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnFrequencyCodeId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateBatchLastRunId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastJournalId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 19;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ARecurringBatch", "a_recurring_batch",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "BatchDescription", "a_batch_description_c", "Batch Description", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(3, "BatchControlTotal", "a_batch_control_total_n", "Batch Control Total", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(4, "BatchStatus", "a_batch_status_c", "Batch Status", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(5, "BatchRunningTotal", "a_batch_running_total_n", "Batch Running Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(6, "BatchDebitTotal", "a_batch_debit_total_n", "Batch Debit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(7, "BatchCreditTotal", "a_batch_credit_total_n", "Batch Credit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(8, "BatchPeriod", "a_batch_period_i", "Batch Period Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(9, "DateEffective", "a_date_effective_d", "Effective Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(10, "UserId", "s_user_id_c", "User ID", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(11, "DateOfEntry", "a_date_of_entry_d", "Entry Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(12, "FrequencyCode", "a_frequency_code_c", "Frequency", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(13, "DateBatchLastRun", "a_date_batch_last_run_d", "Date Batch Last Run", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(14, "LastJournal", "a_last_journal_i", "Last Recurring Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(15, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(16, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(17, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(18, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(19, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ARecurringBatchTable() :
                base("ARecurringBatch")
        {
        }

        /// constructor
        public ARecurringBatchTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ARecurringBatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnBatchDescription;
        /// This is a number of currency units
        public DataColumn ColumnBatchControlTotal;
        /// identifies the status of a batch
        public DataColumn ColumnBatchStatus;
        /// This is a number of currency units
        public DataColumn ColumnBatchRunningTotal;
        /// This is a number of currency units
        public DataColumn ColumnBatchDebitTotal;
        /// This is a number of currency units
        public DataColumn ColumnBatchCreditTotal;
        /// This defines which accounting period is being used
        public DataColumn ColumnBatchPeriod;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        /// This identifies who the current user is
        public DataColumn ColumnUserId;
        ///
        public DataColumn ColumnDateOfEntry;
        ///
        public DataColumn ColumnFrequencyCode;
        ///
        public DataColumn ColumnDateBatchLastRun;
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_control_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_running_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_debit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_credit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_frequency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_batch_last_run_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnBatchDescription = this.Columns["a_batch_description_c"];
            this.ColumnBatchControlTotal = this.Columns["a_batch_control_total_n"];
            this.ColumnBatchStatus = this.Columns["a_batch_status_c"];
            this.ColumnBatchRunningTotal = this.Columns["a_batch_running_total_n"];
            this.ColumnBatchDebitTotal = this.Columns["a_batch_debit_total_n"];
            this.ColumnBatchCreditTotal = this.Columns["a_batch_credit_total_n"];
            this.ColumnBatchPeriod = this.Columns["a_batch_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnFrequencyCode = this.Columns["a_frequency_code_c"];
            this.ColumnDateBatchLastRun = this.Columns["a_date_batch_last_run_d"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnBatchNumber};
        }

        /// Access a typed row by index
        public ARecurringBatchRow this[int i]
        {
            get
            {
                return ((ARecurringBatchRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ARecurringBatchRow NewRowTyped(bool AWithDefaultValues)
        {
            ARecurringBatchRow ret = ((ARecurringBatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ARecurringBatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ARecurringBatchRow(builder);
        }

        /// get typed set of changes
        public ARecurringBatchTable GetChangesTyped()
        {
            return ((ARecurringBatchTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ARecurringBatch";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_recurring_batch";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchDescriptionDBName()
        {
            return "a_batch_description_c";
        }

        /// get character length for column
        public static short GetBatchDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchControlTotalDBName()
        {
            return "a_batch_control_total_n";
        }

        /// get character length for column
        public static short GetBatchControlTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchStatusDBName()
        {
            return "a_batch_status_c";
        }

        /// get character length for column
        public static short GetBatchStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchRunningTotalDBName()
        {
            return "a_batch_running_total_n";
        }

        /// get character length for column
        public static short GetBatchRunningTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchDebitTotalDBName()
        {
            return "a_batch_debit_total_n";
        }

        /// get character length for column
        public static short GetBatchDebitTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchCreditTotalDBName()
        {
            return "a_batch_credit_total_n";
        }

        /// get character length for column
        public static short GetBatchCreditTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchPeriodDBName()
        {
            return "a_batch_period_i";
        }

        /// get character length for column
        public static short GetBatchPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }

        /// get character length for column
        public static short GetUserIdLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }

        /// get character length for column
        public static short GetDateOfEntryLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetFrequencyCodeDBName()
        {
            return "a_frequency_code_c";
        }

        /// get character length for column
        public static short GetFrequencyCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDateBatchLastRunDBName()
        {
            return "a_date_batch_last_run_d";
        }

        /// get character length for column
        public static short GetDateBatchLastRunLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }

        /// get character length for column
        public static short GetLastJournalLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Templates of general ledger batches which can be copied into the ledger.
    [Serializable()]
    public class ARecurringBatchRow : System.Data.DataRow
    {
        private ARecurringBatchTable myTable;

        /// Constructor
        public ARecurringBatchRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ARecurringBatchTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String BatchDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDescription)
                            || (((String)(this[this.myTable.ColumnBatchDescription])) != value)))
                {
                    this[this.myTable.ColumnBatchDescription] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal BatchControlTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchControlTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchControlTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchControlTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchControlTotal] = value;
                }
            }
        }

        /// identifies the status of a batch
        public String BatchStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchStatus)
                            || (((String)(this[this.myTable.ColumnBatchStatus])) != value)))
                {
                    this[this.myTable.ColumnBatchStatus] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal BatchRunningTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchRunningTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchRunningTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchRunningTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchRunningTotal] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal BatchDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDebitTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchDebitTotal] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal BatchCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchCreditTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchCreditTotal] = value;
                }
            }
        }

        /// This defines which accounting period is being used
        public Int32 BatchPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchPeriod)
                            || (((Int32)(this[this.myTable.ColumnBatchPeriod])) != value)))
                {
                    this[this.myTable.ColumnBatchPeriod] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        /// This identifies who the current user is
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId)
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }

        ///
        public System.DateTime? DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }

        ///
        public String FrequencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnFrequencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnFrequencyCode)
                            || (((String)(this[this.myTable.ColumnFrequencyCode])) != value)))
                {
                    this[this.myTable.ColumnFrequencyCode] = value;
                }
            }
        }

        ///
        public System.DateTime? DateBatchLastRun
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateBatchLastRun.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateBatchLastRun)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateBatchLastRun])) != value)))
                {
                    this[this.myTable.ColumnDateBatchLastRun] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal)
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchDescription);
            this[this.myTable.ColumnBatchControlTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchStatus.Ordinal] = "Unposted";
            this[this.myTable.ColumnBatchRunningTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnUserId);
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnFrequencyCode);
            this.SetNull(this.myTable.ColumnDateBatchLastRun);
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsBatchDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDescription);
        }

        /// assign NULL value
        public void SetBatchDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBatchDescription);
        }

        /// test for NULL value
        public bool IsBatchControlTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchControlTotal);
        }

        /// assign NULL value
        public void SetBatchControlTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchControlTotal);
        }

        /// test for NULL value
        public bool IsBatchStatusNull()
        {
            return this.IsNull(this.myTable.ColumnBatchStatus);
        }

        /// assign NULL value
        public void SetBatchStatusNull()
        {
            this.SetNull(this.myTable.ColumnBatchStatus);
        }

        /// test for NULL value
        public bool IsBatchRunningTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchRunningTotal);
        }

        /// assign NULL value
        public void SetBatchRunningTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchRunningTotal);
        }

        /// test for NULL value
        public bool IsBatchDebitTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDebitTotal);
        }

        /// assign NULL value
        public void SetBatchDebitTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchDebitTotal);
        }

        /// test for NULL value
        public bool IsBatchCreditTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchCreditTotal);
        }

        /// assign NULL value
        public void SetBatchCreditTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchCreditTotal);
        }

        /// test for NULL value
        public bool IsBatchPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnBatchPeriod);
        }

        /// assign NULL value
        public void SetBatchPeriodNull()
        {
            this.SetNull(this.myTable.ColumnBatchPeriod);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsUserIdNull()
        {
            return this.IsNull(this.myTable.ColumnUserId);
        }

        /// assign NULL value
        public void SetUserIdNull()
        {
            this.SetNull(this.myTable.ColumnUserId);
        }

        /// test for NULL value
        public bool IsDateOfEntryNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfEntry);
        }

        /// assign NULL value
        public void SetDateOfEntryNull()
        {
            this.SetNull(this.myTable.ColumnDateOfEntry);
        }

        /// test for NULL value
        public bool IsFrequencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnFrequencyCode);
        }

        /// assign NULL value
        public void SetFrequencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnFrequencyCode);
        }

        /// test for NULL value
        public bool IsDateBatchLastRunNull()
        {
            return this.IsNull(this.myTable.ColumnDateBatchLastRun);
        }

        /// assign NULL value
        public void SetDateBatchLastRunNull()
        {
            this.SetNull(this.myTable.ColumnDateBatchLastRun);
        }

        /// test for NULL value
        public bool IsLastJournalNull()
        {
            return this.IsNull(this.myTable.ColumnLastJournal);
        }

        /// assign NULL value
        public void SetLastJournalNull()
        {
            this.SetNull(this.myTable.ColumnLastJournal);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Templates of general ledger journals which are copied into the ledger with recurring general ledger batches.
    [Serializable()]
    public class ARecurringJournalTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 157;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalDescriptionId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalStatusId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalDebitTotalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalCreditTotalId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalPeriodId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeCodeId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnMethodOfPaymentCodeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastTransactionNumberId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnExchangeRateToBaseId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionCurrencyId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 19;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ARecurringJournal", "a_recurring_journal",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "JournalDescription", "a_journal_description_c", "Journal Description", OdbcType.VarChar, 160, true),
                    new TTypedColumnInfo(4, "JournalStatus", "a_journal_status_c", "Journal Status", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(5, "JournalDebitTotal", "a_journal_debit_total_n", "Journal Debit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(6, "JournalCreditTotal", "a_journal_credit_total_n", "Journal Credit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(7, "JournalPeriod", "a_journal_period_i", "Journal Period Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(8, "DateEffective", "a_date_effective_d", "Effective Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(9, "TransactionTypeCode", "a_transaction_type_code_c", "Transaction Type", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(10, "MethodOfPaymentCode", "a_method_of_payment_code_c", "Method of Payment", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(11, "LastTransactionNumber", "a_last_transaction_number_i", "Last Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(12, "SubSystemCode", "a_sub_system_code_c", "Sub System", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(13, "ExchangeRateToBase", "a_exchange_rate_to_base_n", "Exchange Rate to Base", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(14, "TransactionCurrency", "a_transaction_currency_c", "Transaction Currency", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(15, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(16, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(17, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(18, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(19, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public ARecurringJournalTable() :
                base("ARecurringJournal")
        {
        }

        /// constructor
        public ARecurringJournalTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ARecurringJournalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnJournalDescription;
        /// identifies the status of a batch
        public DataColumn ColumnJournalStatus;
        /// This is a number of currency units
        public DataColumn ColumnJournalDebitTotal;
        /// This is a number of currency units
        public DataColumn ColumnJournalCreditTotal;
        /// This defines which accounting period is being used
        public DataColumn ColumnJournalPeriod;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        ///
        public DataColumn ColumnTransactionTypeCode;
        /// This is how the partner paid. Eg cash, Cheque etc
        public DataColumn ColumnMethodOfPaymentCode;
        ///
        public DataColumn ColumnLastTransactionNumber;
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        /// The rate of exchange
        public DataColumn ColumnExchangeRateToBase;
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_debit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_credit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_method_of_payment_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnJournalDescription = this.Columns["a_journal_description_c"];
            this.ColumnJournalStatus = this.Columns["a_journal_status_c"];
            this.ColumnJournalDebitTotal = this.Columns["a_journal_debit_total_n"];
            this.ColumnJournalCreditTotal = this.Columns["a_journal_credit_total_n"];
            this.ColumnJournalPeriod = this.Columns["a_journal_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnMethodOfPaymentCode = this.Columns["a_method_of_payment_code_c"];
            this.ColumnLastTransactionNumber = this.Columns["a_last_transaction_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber};
        }

        /// Access a typed row by index
        public ARecurringJournalRow this[int i]
        {
            get
            {
                return ((ARecurringJournalRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ARecurringJournalRow NewRowTyped(bool AWithDefaultValues)
        {
            ARecurringJournalRow ret = ((ARecurringJournalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ARecurringJournalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ARecurringJournalRow(builder);
        }

        /// get typed set of changes
        public ARecurringJournalTable GetChangesTyped()
        {
            return ((ARecurringJournalTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ARecurringJournal";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_recurring_journal";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalDescriptionDBName()
        {
            return "a_journal_description_c";
        }

        /// get character length for column
        public static short GetJournalDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalStatusDBName()
        {
            return "a_journal_status_c";
        }

        /// get character length for column
        public static short GetJournalStatusLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalDebitTotalDBName()
        {
            return "a_journal_debit_total_n";
        }

        /// get character length for column
        public static short GetJournalDebitTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalCreditTotalDBName()
        {
            return "a_journal_credit_total_n";
        }

        /// get character length for column
        public static short GetJournalCreditTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalPeriodDBName()
        {
            return "a_journal_period_i";
        }

        /// get character length for column
        public static short GetJournalPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }

        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetMethodOfPaymentCodeDBName()
        {
            return "a_method_of_payment_code_c";
        }

        /// get character length for column
        public static short GetMethodOfPaymentCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetLastTransactionNumberDBName()
        {
            return "a_last_transaction_number_i";
        }

        /// get character length for column
        public static short GetLastTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }

        /// get character length for column
        public static short GetExchangeRateToBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }

        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Templates of general ledger journals which are copied into the ledger with recurring general ledger batches.
    [Serializable()]
    public class ARecurringJournalRow : System.Data.DataRow
    {
        private ARecurringJournalTable myTable;

        /// Constructor
        public ARecurringJournalRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ARecurringJournalTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String JournalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDescription)
                            || (((String)(this[this.myTable.ColumnJournalDescription])) != value)))
                {
                    this[this.myTable.ColumnJournalDescription] = value;
                }
            }
        }

        /// identifies the status of a batch
        public String JournalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalStatus)
                            || (((String)(this[this.myTable.ColumnJournalStatus])) != value)))
                {
                    this[this.myTable.ColumnJournalStatus] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal JournalDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDebitTotal)
                            || (((Decimal)(this[this.myTable.ColumnJournalDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalDebitTotal] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal JournalCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalCreditTotal)
                            || (((Decimal)(this[this.myTable.ColumnJournalCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalCreditTotal] = value;
                }
            }
        }

        /// This defines which accounting period is being used
        public Int32 JournalPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalPeriod)
                            || (((Int32)(this[this.myTable.ColumnJournalPeriod])) != value)))
                {
                    this[this.myTable.ColumnJournalPeriod] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        ///
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode)
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }

        /// This is how the partner paid. Eg cash, Cheque etc
        public String MethodOfPaymentCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfPaymentCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfPaymentCode)
                            || (((String)(this[this.myTable.ColumnMethodOfPaymentCode])) != value)))
                {
                    this[this.myTable.ColumnMethodOfPaymentCode] = value;
                }
            }
        }

        ///
        public Int32 LastTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnLastTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnLastTransactionNumber] = value;
                }
            }
        }

        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        /// The rate of exchange
        public Decimal ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase)
                            || (((Decimal)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency)
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnJournalDescription);
            this[this.myTable.ColumnJournalStatus.Ordinal] = "Unposted";
            this[this.myTable.ColumnJournalDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
            this[this.myTable.ColumnLastTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsJournalDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnJournalDescription);
        }

        /// assign NULL value
        public void SetJournalDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnJournalDescription);
        }

        /// test for NULL value
        public bool IsJournalStatusNull()
        {
            return this.IsNull(this.myTable.ColumnJournalStatus);
        }

        /// assign NULL value
        public void SetJournalStatusNull()
        {
            this.SetNull(this.myTable.ColumnJournalStatus);
        }

        /// test for NULL value
        public bool IsJournalDebitTotalNull()
        {
            return this.IsNull(this.myTable.ColumnJournalDebitTotal);
        }

        /// assign NULL value
        public void SetJournalDebitTotalNull()
        {
            this.SetNull(this.myTable.ColumnJournalDebitTotal);
        }

        /// test for NULL value
        public bool IsJournalCreditTotalNull()
        {
            return this.IsNull(this.myTable.ColumnJournalCreditTotal);
        }

        /// assign NULL value
        public void SetJournalCreditTotalNull()
        {
            this.SetNull(this.myTable.ColumnJournalCreditTotal);
        }

        /// test for NULL value
        public bool IsJournalPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnJournalPeriod);
        }

        /// assign NULL value
        public void SetJournalPeriodNull()
        {
            this.SetNull(this.myTable.ColumnJournalPeriod);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// test for NULL value
        public bool IsMethodOfPaymentCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMethodOfPaymentCode);
        }

        /// assign NULL value
        public void SetMethodOfPaymentCodeNull()
        {
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
        }

        /// test for NULL value
        public bool IsLastTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastTransactionNumber);
        }

        /// assign NULL value
        public void SetLastTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastTransactionNumber);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsExchangeRateToBaseNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// assign NULL value
        public void SetExchangeRateToBaseNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// test for NULL value
        public bool IsTransactionCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionCurrency);
        }

        /// assign NULL value
        public void SetTransactionCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnTransactionCurrency);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Templates of general ledger transactions which are copied into the ledger with general ledger batches.
    [Serializable()]
    public class ARecurringTransactionTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 158;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionDateId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionCurrencyId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionAmountId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnBaseCurrencyId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnExchangeRateToBaseId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnAmountInBaseCurrencyId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisIndicatorId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnMethodOfPaymentCodeId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnPeriodNumberId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnReconciledFlagId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeCodeId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnNarrativeId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnReferenceId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfEntryId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnUserIdId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnDebitCreditIndicatorId = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionStatusId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnHeaderNumberId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnDetailNumberId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubTypeId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 30;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 31;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ARecurringTransaction", "a_recurring_transaction",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "TransactionNumber", "a_transaction_number_i", "Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(6, "TransactionDate", "a_transaction_date_d", "Transaction Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(7, "TransactionCurrency", "a_transaction_currency_c", "Transaction Currency", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(8, "TransactionAmount", "a_transaction_amount_n", "Transaction Amount", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(9, "BaseCurrency", "a_base_currency_c", "Base Currency", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(10, "ExchangeRateToBase", "a_exchange_rate_to_base_n", "Exchange Rate to Base", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(11, "AmountInBaseCurrency", "a_amount_in_base_currency_n", "Amount in Base Currency", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(12, "AnalysisIndicator", "a_analysis_indicator_l", "Analysis Indicator", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(13, "MethodOfPaymentCode", "a_method_of_payment_code_c", "Method of Payment Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(14, "PeriodNumber", "a_period_number_i", "Period Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(15, "ReconciledFlag", "a_reconciled_flag_l", "a_reconciled_flag_l", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(16, "SubSystemCode", "a_sub_system_code_c", "Sub System Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(17, "TransactionTypeCode", "a_transaction_type_code_c", "Special Transaction Type Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(18, "Narrative", "a_narrative_c", "Narrative", OdbcType.VarChar, 240, false),
                    new TTypedColumnInfo(19, "Reference", "a_reference_c", "Reference", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(20, "DateOfEntry", "a_date_of_entry_d", "Date of Entry", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(21, "UserId", "s_user_id_c", "User Id", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(22, "DebitCreditIndicator", "a_debit_credit_indicator_l", "Debit/Credit Indicator", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(23, "TransactionStatus", "a_transaction_status_l", "Transaction Posted Status", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(24, "HeaderNumber", "a_header_number_i", "Header Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(25, "DetailNumber", "a_detail_number_i", "Detail Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(26, "SubType", "a_sub_type_c", "a_sub_type_c", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(27, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(28, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(29, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(30, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(31, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3
                }));
            return true;
        }

        /// constructor
        public ARecurringTransactionTable() :
                base("ARecurringTransaction")
        {
        }

        /// constructor
        public ARecurringTransactionTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ARecurringTransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// Journal  number that transaction belongs to
        public DataColumn ColumnJournalNumber;
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        /// Date the transaction took place
        public DataColumn ColumnTransactionDate;
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        /// This is a number of currency units
        public DataColumn ColumnTransactionAmount;
        /// This defines which currency is being used
        public DataColumn ColumnBaseCurrency;
        /// The rate of exchange
        public DataColumn ColumnExchangeRateToBase;
        /// This is a number of currency units
        public DataColumn ColumnAmountInBaseCurrency;
        ///
        public DataColumn ColumnAnalysisIndicator;
        ///
        public DataColumn ColumnMethodOfPaymentCode;
        /// This defines which accounting period is being used
        public DataColumn ColumnPeriodNumber;
        /// Shows if the transaction has been reconciled or not
        public DataColumn ColumnReconciledFlag;
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        ///
        public DataColumn ColumnTransactionTypeCode;
        ///
        public DataColumn ColumnNarrative;
        ///
        public DataColumn ColumnReference;
        ///
        public DataColumn ColumnDateOfEntry;
        ///
        public DataColumn ColumnUserId;
        ///
        public DataColumn ColumnDebitCreditIndicator;
        /// Has a transaction been posted yet
        public DataColumn ColumnTransactionStatus;
        /// The header (eg, cashbook #) that the transaction is associated with.
        public DataColumn ColumnHeaderNumber;
        /// The detail (within the header) that the transaction is associated with.
        public DataColumn ColumnDetailNumber;
        ///
        public DataColumn ColumnSubType;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_base_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_base_currency_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_method_of_payment_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_period_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_reconciled_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_user_id_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_header_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnTransactionDate = this.Columns["a_transaction_date_d"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnBaseCurrency = this.Columns["a_base_currency_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnAmountInBaseCurrency = this.Columns["a_amount_in_base_currency_n"];
            this.ColumnAnalysisIndicator = this.Columns["a_analysis_indicator_l"];
            this.ColumnMethodOfPaymentCode = this.Columns["a_method_of_payment_code_c"];
            this.ColumnPeriodNumber = this.Columns["a_period_number_i"];
            this.ColumnReconciledFlag = this.Columns["a_reconciled_flag_l"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnUserId = this.Columns["s_user_id_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnTransactionStatus = this.Columns["a_transaction_status_l"];
            this.ColumnHeaderNumber = this.Columns["a_header_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnSubType = this.Columns["a_sub_type_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber,ColumnTransactionNumber};
        }

        /// Access a typed row by index
        public ARecurringTransactionRow this[int i]
        {
            get
            {
                return ((ARecurringTransactionRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ARecurringTransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            ARecurringTransactionRow ret = ((ARecurringTransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ARecurringTransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ARecurringTransactionRow(builder);
        }

        /// get typed set of changes
        public ARecurringTransactionTable GetChangesTyped()
        {
            return ((ARecurringTransactionTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ARecurringTransaction";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_recurring_transaction";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }

        /// get character length for column
        public static short GetTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionDateDBName()
        {
            return "a_transaction_date_d";
        }

        /// get character length for column
        public static short GetTransactionDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }

        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }

        /// get character length for column
        public static short GetTransactionAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBaseCurrencyDBName()
        {
            return "a_base_currency_c";
        }

        /// get character length for column
        public static short GetBaseCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }

        /// get character length for column
        public static short GetExchangeRateToBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAmountInBaseCurrencyDBName()
        {
            return "a_amount_in_base_currency_n";
        }

        /// get character length for column
        public static short GetAmountInBaseCurrencyLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisIndicatorDBName()
        {
            return "a_analysis_indicator_l";
        }

        /// get character length for column
        public static short GetAnalysisIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetMethodOfPaymentCodeDBName()
        {
            return "a_method_of_payment_code_c";
        }

        /// get character length for column
        public static short GetMethodOfPaymentCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetPeriodNumberDBName()
        {
            return "a_period_number_i";
        }

        /// get character length for column
        public static short GetPeriodNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReconciledFlagDBName()
        {
            return "a_reconciled_flag_l";
        }

        /// get character length for column
        public static short GetReconciledFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }

        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }

        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 240;
        }

        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }

        /// get character length for column
        public static short GetReferenceLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }

        /// get character length for column
        public static short GetDateOfEntryLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetUserIdDBName()
        {
            return "s_user_id_c";
        }

        /// get character length for column
        public static short GetUserIdLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }

        /// get character length for column
        public static short GetDebitCreditIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionStatusDBName()
        {
            return "a_transaction_status_l";
        }

        /// get character length for column
        public static short GetTransactionStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetHeaderNumberDBName()
        {
            return "a_header_number_i";
        }

        /// get character length for column
        public static short GetHeaderNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }

        /// get character length for column
        public static short GetDetailNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubTypeDBName()
        {
            return "a_sub_type_c";
        }

        /// get character length for column
        public static short GetSubTypeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Templates of general ledger transactions which are copied into the ledger with general ledger batches.
    [Serializable()]
    public class ARecurringTransactionRow : System.Data.DataRow
    {
        private ARecurringTransactionTable myTable;

        /// Constructor
        public ARecurringTransactionRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ARecurringTransactionTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Journal  number that transaction belongs to
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// Date the transaction took place
        public System.DateTime TransactionDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionDate)
                            || (((System.DateTime)(this[this.myTable.ColumnTransactionDate])) != value)))
                {
                    this[this.myTable.ColumnTransactionDate] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency)
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount)
                            || (((Decimal)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String BaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBaseCurrency)
                            || (((String)(this[this.myTable.ColumnBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnBaseCurrency] = value;
                }
            }
        }

        /// The rate of exchange
        public Decimal ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase)
                            || (((Decimal)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal AmountInBaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInBaseCurrency)
                            || (((Decimal)(this[this.myTable.ColumnAmountInBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInBaseCurrency] = value;
                }
            }
        }

        ///
        public Boolean AnalysisIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisIndicator)
                            || (((Boolean)(this[this.myTable.ColumnAnalysisIndicator])) != value)))
                {
                    this[this.myTable.ColumnAnalysisIndicator] = value;
                }
            }
        }

        ///
        public String MethodOfPaymentCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnMethodOfPaymentCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnMethodOfPaymentCode)
                            || (((String)(this[this.myTable.ColumnMethodOfPaymentCode])) != value)))
                {
                    this[this.myTable.ColumnMethodOfPaymentCode] = value;
                }
            }
        }

        /// This defines which accounting period is being used
        public Int32 PeriodNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPeriodNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPeriodNumber)
                            || (((Int32)(this[this.myTable.ColumnPeriodNumber])) != value)))
                {
                    this[this.myTable.ColumnPeriodNumber] = value;
                }
            }
        }

        /// Shows if the transaction has been reconciled or not
        public Boolean ReconciledFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReconciledFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReconciledFlag)
                            || (((Boolean)(this[this.myTable.ColumnReconciledFlag])) != value)))
                {
                    this[this.myTable.ColumnReconciledFlag] = value;
                }
            }
        }

        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        ///
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode)
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }

        ///
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative)
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }

        ///
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference)
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }

        ///
        public System.DateTime? DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }

        ///
        public String UserId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUserId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUserId)
                            || (((String)(this[this.myTable.ColumnUserId])) != value)))
                {
                    this[this.myTable.ColumnUserId] = value;
                }
            }
        }

        ///
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator)
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }

        /// Has a transaction been posted yet
        public Boolean TransactionStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionStatus)
                            || (((Boolean)(this[this.myTable.ColumnTransactionStatus])) != value)))
                {
                    this[this.myTable.ColumnTransactionStatus] = value;
                }
            }
        }

        /// The header (eg, cashbook #) that the transaction is associated with.
        public Int32 HeaderNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeaderNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeaderNumber)
                            || (((Int32)(this[this.myTable.ColumnHeaderNumber])) != value)))
                {
                    this[this.myTable.ColumnHeaderNumber] = value;
                }
            }
        }

        /// The detail (within the header) that the transaction is associated with.
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber)
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }

        ///
        public String SubType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubType)
                            || (((String)(this[this.myTable.ColumnSubType])) != value)))
                {
                    this[this.myTable.ColumnSubType] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this[this.myTable.ColumnTransactionDate.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBaseCurrency);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this[this.myTable.ColumnAmountInBaseCurrency.Ordinal] = 0;
            this[this.myTable.ColumnAnalysisIndicator.Ordinal] = false;
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
            this[this.myTable.ColumnPeriodNumber.Ordinal] = 0;
            this[this.myTable.ColumnReconciledFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this.SetNull(this.myTable.ColumnNarrative);
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnDateOfEntry);
            this.SetNull(this.myTable.ColumnUserId);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnTransactionStatus.Ordinal] = false;
            this[this.myTable.ColumnHeaderNumber.Ordinal] = 0;
            this[this.myTable.ColumnDetailNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubType);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionNumber);
        }

        /// assign NULL value
        public void SetTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnTransactionNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsTransactionDateNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionDate);
        }

        /// assign NULL value
        public void SetTransactionDateNull()
        {
            this.SetNull(this.myTable.ColumnTransactionDate);
        }

        /// test for NULL value
        public bool IsTransactionCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionCurrency);
        }

        /// assign NULL value
        public void SetTransactionCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnTransactionCurrency);
        }

        /// test for NULL value
        public bool IsTransactionAmountNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionAmount);
        }

        /// assign NULL value
        public void SetTransactionAmountNull()
        {
            this.SetNull(this.myTable.ColumnTransactionAmount);
        }

        /// test for NULL value
        public bool IsBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnBaseCurrency);
        }

        /// assign NULL value
        public void SetBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnBaseCurrency);
        }

        /// test for NULL value
        public bool IsExchangeRateToBaseNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// assign NULL value
        public void SetExchangeRateToBaseNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// test for NULL value
        public bool IsAmountInBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInBaseCurrency);
        }

        /// assign NULL value
        public void SetAmountInBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInBaseCurrency);
        }

        /// test for NULL value
        public bool IsAnalysisIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisIndicator);
        }

        /// assign NULL value
        public void SetAnalysisIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisIndicator);
        }

        /// test for NULL value
        public bool IsMethodOfPaymentCodeNull()
        {
            return this.IsNull(this.myTable.ColumnMethodOfPaymentCode);
        }

        /// assign NULL value
        public void SetMethodOfPaymentCodeNull()
        {
            this.SetNull(this.myTable.ColumnMethodOfPaymentCode);
        }

        /// test for NULL value
        public bool IsPeriodNumberNull()
        {
            return this.IsNull(this.myTable.ColumnPeriodNumber);
        }

        /// assign NULL value
        public void SetPeriodNumberNull()
        {
            this.SetNull(this.myTable.ColumnPeriodNumber);
        }

        /// test for NULL value
        public bool IsReconciledFlagNull()
        {
            return this.IsNull(this.myTable.ColumnReconciledFlag);
        }

        /// assign NULL value
        public void SetReconciledFlagNull()
        {
            this.SetNull(this.myTable.ColumnReconciledFlag);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }

        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }

        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }

        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }

        /// test for NULL value
        public bool IsDateOfEntryNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfEntry);
        }

        /// assign NULL value
        public void SetDateOfEntryNull()
        {
            this.SetNull(this.myTable.ColumnDateOfEntry);
        }

        /// test for NULL value
        public bool IsUserIdNull()
        {
            return this.IsNull(this.myTable.ColumnUserId);
        }

        /// assign NULL value
        public void SetUserIdNull()
        {
            this.SetNull(this.myTable.ColumnUserId);
        }

        /// test for NULL value
        public bool IsDebitCreditIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// assign NULL value
        public void SetDebitCreditIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// test for NULL value
        public bool IsTransactionStatusNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionStatus);
        }

        /// assign NULL value
        public void SetTransactionStatusNull()
        {
            this.SetNull(this.myTable.ColumnTransactionStatus);
        }

        /// test for NULL value
        public bool IsHeaderNumberNull()
        {
            return this.IsNull(this.myTable.ColumnHeaderNumber);
        }

        /// assign NULL value
        public void SetHeaderNumberNull()
        {
            this.SetNull(this.myTable.ColumnHeaderNumber);
        }

        /// test for NULL value
        public bool IsDetailNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDetailNumber);
        }

        /// assign NULL value
        public void SetDetailNumberNull()
        {
            this.SetNull(this.myTable.ColumnDetailNumber);
        }

        /// test for NULL value
        public bool IsSubTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSubType);
        }

        /// assign NULL value
        public void SetSubTypeNull()
        {
            this.SetNull(this.myTable.ColumnSubType);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Detailed analysis information stored along with the recurring transaction template.
    [Serializable()]
    public class ARecurringTransAnalAttribTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 159;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisTypeCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisAttributeValueId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 12;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ARecurringTransAnalAttrib", "a_recurring_trans_anal_attrib",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "TransactionNumber", "a_transaction_number_i", "Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(6, "AnalysisTypeCode", "a_analysis_type_code_c", "Analysis Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(7, "AnalysisAttributeValue", "a_analysis_attribute_value_c", "Analysis Attribute Value", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(8, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3, 6
                }));
            return true;
        }

        /// constructor
        public ARecurringTransAnalAttribTable() :
                base("ARecurringTransAnalAttrib")
        {
        }

        /// constructor
        public ARecurringTransAnalAttribTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ARecurringTransAnalAttribTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        ///
        public DataColumn ColumnAnalysisTypeCode;
        ///
        public DataColumn ColumnAnalysisAttributeValue;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisAttributeValue = this.Columns["a_analysis_attribute_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[5] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber,ColumnTransactionNumber,ColumnAnalysisTypeCode};
        }

        /// Access a typed row by index
        public ARecurringTransAnalAttribRow this[int i]
        {
            get
            {
                return ((ARecurringTransAnalAttribRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ARecurringTransAnalAttribRow NewRowTyped(bool AWithDefaultValues)
        {
            ARecurringTransAnalAttribRow ret = ((ARecurringTransAnalAttribRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ARecurringTransAnalAttribRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ARecurringTransAnalAttribRow(builder);
        }

        /// get typed set of changes
        public ARecurringTransAnalAttribTable GetChangesTyped()
        {
            return ((ARecurringTransAnalAttribTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ARecurringTransAnalAttrib";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_recurring_trans_anal_attrib";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }

        /// get character length for column
        public static short GetTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }

        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeValueDBName()
        {
            return "a_analysis_attribute_value_c";
        }

        /// get character length for column
        public static short GetAnalysisAttributeValueLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Detailed analysis information stored along with the recurring transaction template.
    [Serializable()]
    public class ARecurringTransAnalAttribRow : System.Data.DataRow
    {
        private ARecurringTransAnalAttribTable myTable;

        /// Constructor
        public ARecurringTransAnalAttribRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ARecurringTransAnalAttribTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        ///
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode)
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }

        ///
        public String AnalysisAttributeValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeValue)
                            || (((String)(this[this.myTable.ColumnAnalysisAttributeValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeValue] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionNumber);
        }

        /// assign NULL value
        public void SetTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnTransactionNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsAnalysisTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// assign NULL value
        public void SetAnalysisTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// test for NULL value
        public bool IsAnalysisAttributeValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeValue);
        }

        /// assign NULL value
        public void SetAnalysisAttributeValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Store current and forward period general ledger batches for a ledger.
    [Serializable()]
    public class ABatchTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 166;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchDescriptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchControlTotalId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchRunningTotalId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchDebitTotalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchCreditTotalId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchPeriodId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfEntryId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchStatusId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastJournalId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 16;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ABatch", "a_batch",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "BatchDescription", "a_batch_description_c", "Batch Description", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(3, "BatchControlTotal", "a_batch_control_total_n", "Batch Control Total", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(4, "BatchRunningTotal", "a_batch_running_total_n", "Batch Running Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(5, "BatchDebitTotal", "a_batch_debit_total_n", "Batch Debit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(6, "BatchCreditTotal", "a_batch_credit_total_n", "Batch Credit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(7, "BatchPeriod", "a_batch_period_i", "Batch Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(8, "DateEffective", "a_date_effective_d", "Effective Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(9, "DateOfEntry", "a_date_of_entry_d", "Entry Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(10, "BatchStatus", "a_batch_status_c", "Batch status", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(11, "LastJournal", "a_last_journal_i", "Last Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(12, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(13, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(14, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(15, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(16, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ABatchTable() :
                base("ABatch")
        {
        }

        /// constructor
        public ABatchTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ABatchTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The ledger that the batch belongs to.
        public DataColumn ColumnLedgerNumber;
        /// Identifies the batch.
        public DataColumn ColumnBatchNumber;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnBatchDescription;
        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public DataColumn ColumnBatchControlTotal;
        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchRunningTotal;
        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchDebitTotal;
        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public DataColumn ColumnBatchCreditTotal;
        /// This identifies which accounting period that the batch belongs to.
        public DataColumn ColumnBatchPeriod;
        /// Date the  batch comes into effect
        public DataColumn ColumnDateEffective;
        /// Date the  batch was created.
        public DataColumn ColumnDateOfEntry;
        /// Has this batch been posted yet?
        public DataColumn ColumnBatchStatus;
        /// Identifies a journal within a batch
        public DataColumn ColumnLastJournal;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_control_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_running_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_debit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_credit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_journal_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnBatchDescription = this.Columns["a_batch_description_c"];
            this.ColumnBatchControlTotal = this.Columns["a_batch_control_total_n"];
            this.ColumnBatchRunningTotal = this.Columns["a_batch_running_total_n"];
            this.ColumnBatchDebitTotal = this.Columns["a_batch_debit_total_n"];
            this.ColumnBatchCreditTotal = this.Columns["a_batch_credit_total_n"];
            this.ColumnBatchPeriod = this.Columns["a_batch_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnBatchStatus = this.Columns["a_batch_status_c"];
            this.ColumnLastJournal = this.Columns["a_last_journal_i"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnBatchNumber};
        }

        /// Access a typed row by index
        public ABatchRow this[int i]
        {
            get
            {
                return ((ABatchRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ABatchRow NewRowTyped(bool AWithDefaultValues)
        {
            ABatchRow ret = ((ABatchRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ABatchRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ABatchRow(builder);
        }

        /// get typed set of changes
        public ABatchTable GetChangesTyped()
        {
            return ((ABatchTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ABatch";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_batch";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchDescriptionDBName()
        {
            return "a_batch_description_c";
        }

        /// get character length for column
        public static short GetBatchDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchControlTotalDBName()
        {
            return "a_batch_control_total_n";
        }

        /// get character length for column
        public static short GetBatchControlTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchRunningTotalDBName()
        {
            return "a_batch_running_total_n";
        }

        /// get character length for column
        public static short GetBatchRunningTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchDebitTotalDBName()
        {
            return "a_batch_debit_total_n";
        }

        /// get character length for column
        public static short GetBatchDebitTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchCreditTotalDBName()
        {
            return "a_batch_credit_total_n";
        }

        /// get character length for column
        public static short GetBatchCreditTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchPeriodDBName()
        {
            return "a_batch_period_i";
        }

        /// get character length for column
        public static short GetBatchPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }

        /// get character length for column
        public static short GetDateOfEntryLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchStatusDBName()
        {
            return "a_batch_status_c";
        }

        /// get character length for column
        public static short GetBatchStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetLastJournalDBName()
        {
            return "a_last_journal_i";
        }

        /// get character length for column
        public static short GetLastJournalLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Store current and forward period general ledger batches for a ledger.
    [Serializable()]
    public class ABatchRow : System.Data.DataRow
    {
        private ABatchTable myTable;

        /// Constructor
        public ABatchRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ABatchTable)(this.Table));
        }

        /// The ledger that the batch belongs to.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// Identifies the batch.
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String BatchDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDescription)
                            || (((String)(this[this.myTable.ColumnBatchDescription])) != value)))
                {
                    this[this.myTable.ColumnBatchDescription] = value;
                }
            }
        }

        /// Raw total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.  Entered by the user.
        public Decimal BatchControlTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchControlTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchControlTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchControlTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchControlTotal] = value;
                }
            }
        }

        /// Running total amount of the batch calculated as transactions are enterd.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchRunningTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchRunningTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchRunningTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchRunningTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchRunningTotal] = value;
                }
            }
        }

        /// Raw debit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchDebitTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchDebitTotal] = value;
                }
            }
        }

        /// Raw credit total amount of the batch.  If the journals within the batch have different currencies, this is just a raw numeric sum of all the journal amounts.  It does not reflect a monetary value in a specific currency.
        public Decimal BatchCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchCreditTotal)
                            || (((Decimal)(this[this.myTable.ColumnBatchCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnBatchCreditTotal] = value;
                }
            }
        }

        /// This identifies which accounting period that the batch belongs to.
        public Int32 BatchPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchPeriod)
                            || (((Int32)(this[this.myTable.ColumnBatchPeriod])) != value)))
                {
                    this[this.myTable.ColumnBatchPeriod] = value;
                }
            }
        }

        /// Date the  batch comes into effect
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        /// Date the  batch was created.
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry)
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }

        /// Has this batch been posted yet?
        public String BatchStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchStatus)
                            || (((String)(this[this.myTable.ColumnBatchStatus])) != value)))
                {
                    this[this.myTable.ColumnBatchStatus] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 LastJournal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastJournal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastJournal)
                            || (((Int32)(this[this.myTable.ColumnLastJournal])) != value)))
                {
                    this[this.myTable.ColumnLastJournal] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnBatchDescription);
            this[this.myTable.ColumnBatchControlTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchRunningTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnBatchPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnBatchStatus.Ordinal] = "Unposted";
            this[this.myTable.ColumnLastJournal.Ordinal] = 0;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsBatchDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDescription);
        }

        /// assign NULL value
        public void SetBatchDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnBatchDescription);
        }

        /// test for NULL value
        public bool IsBatchControlTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchControlTotal);
        }

        /// assign NULL value
        public void SetBatchControlTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchControlTotal);
        }

        /// test for NULL value
        public bool IsBatchRunningTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchRunningTotal);
        }

        /// assign NULL value
        public void SetBatchRunningTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchRunningTotal);
        }

        /// test for NULL value
        public bool IsBatchDebitTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchDebitTotal);
        }

        /// assign NULL value
        public void SetBatchDebitTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchDebitTotal);
        }

        /// test for NULL value
        public bool IsBatchCreditTotalNull()
        {
            return this.IsNull(this.myTable.ColumnBatchCreditTotal);
        }

        /// assign NULL value
        public void SetBatchCreditTotalNull()
        {
            this.SetNull(this.myTable.ColumnBatchCreditTotal);
        }

        /// test for NULL value
        public bool IsBatchPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnBatchPeriod);
        }

        /// assign NULL value
        public void SetBatchPeriodNull()
        {
            this.SetNull(this.myTable.ColumnBatchPeriod);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsDateOfEntryNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfEntry);
        }

        /// assign NULL value
        public void SetDateOfEntryNull()
        {
            this.SetNull(this.myTable.ColumnDateOfEntry);
        }

        /// test for NULL value
        public bool IsBatchStatusNull()
        {
            return this.IsNull(this.myTable.ColumnBatchStatus);
        }

        /// assign NULL value
        public void SetBatchStatusNull()
        {
            this.SetNull(this.myTable.ColumnBatchStatus);
        }

        /// test for NULL value
        public bool IsLastJournalNull()
        {
            return this.IsNull(this.myTable.ColumnLastJournal);
        }

        /// assign NULL value
        public void SetLastJournalNull()
        {
            this.SetNull(this.myTable.ColumnLastJournal);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Holds details of each general ledger journal, which contains a group of transactions.
    [Serializable()]
    public class AJournalTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 167;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalDescriptionId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalDebitTotalId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalCreditTotalId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalPeriodId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateEffectiveId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeCodeId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnLastTransactionNumberId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalStatusId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionCurrencyId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnExchangeRateToBaseId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnExchangeRateTimeId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateOfEntryId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnReversedId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 21;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AJournal", "a_journal",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "JournalDescription", "a_journal_description_c", "Journal Description", OdbcType.VarChar, 160, true),
                    new TTypedColumnInfo(4, "JournalDebitTotal", "a_journal_debit_total_n", "Journal Debit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(5, "JournalCreditTotal", "a_journal_credit_total_n", "Journal Credit Total", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(6, "JournalPeriod", "a_journal_period_i", "Journal Period Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(7, "DateEffective", "a_date_effective_d", "Date Effective", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(8, "TransactionTypeCode", "a_transaction_type_code_c", "Transaction Type", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(9, "LastTransactionNumber", "a_last_transaction_number_i", "Last Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(10, "SubSystemCode", "a_sub_system_code_c", "Sub System", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(11, "JournalStatus", "a_journal_status_c", "Journal Status", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(12, "TransactionCurrency", "a_transaction_currency_c", "Transaction Currency", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(13, "ExchangeRateToBase", "a_exchange_rate_to_base_n", "Exchange Rate to Base", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(14, "ExchangeRateTime", "a_exchange_rate_time_i", "Time (of Exchange Rate)", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(15, "DateOfEntry", "a_date_of_entry_d", "Entry Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(16, "Reversed", "a_reversed_l", "Journal Reversed?", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(17, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(18, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(19, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(20, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(21, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2
                }));
            return true;
        }

        /// constructor
        public AJournalTable() :
                base("AJournal")
        {
        }

        /// constructor
        public AJournalTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AJournalTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// The journal belongs to this ledger.
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch the journal belongs to.
        public DataColumn ColumnBatchNumber;
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        /// This is a long description and is 80 characters long.
        public DataColumn ColumnJournalDescription;
        /// This is a number of currency units in the currency of the transaction.
        public DataColumn ColumnJournalDebitTotal;
        /// This is the number of currency units in the currency of the transaction.
        public DataColumn ColumnJournalCreditTotal;
        /// This defines which accounting period is being used
        public DataColumn ColumnJournalPeriod;
        /// Date the journal comes into effect.
        public DataColumn ColumnDateEffective;
        /// Which type of journal is this?  Eg. STD, ALLOC, REALLOC, REVAL.
        public DataColumn ColumnTransactionTypeCode;
        /// The number of the last transaction within the journal.
        public DataColumn ColumnLastTransactionNumber;
        /// Indicates the sub system of accounts that the journal belongs to.  Eg. GL, AP, GR
        public DataColumn ColumnSubSystemCode;
        /// Has a journal been posted yet
        public DataColumn ColumnJournalStatus;
        /// This defines which currency is being used
        public DataColumn ColumnTransactionCurrency;
        /// The rate of exchange from the transaction currency (in a_transaction_currency_c) to the ledger base currency.
        public DataColumn ColumnExchangeRateToBase;
        /// The time component of the exchange rate.
        public DataColumn ColumnExchangeRateTime;
        /// Date the journal was created.
        public DataColumn ColumnDateOfEntry;
        /// Indicates whether or not a journal has been reversed.
        public DataColumn ColumnReversed;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_debit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_credit_total_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_period_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_effective_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_last_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_status_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_currency_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_to_base_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_exchange_rate_time_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_date_of_entry_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_reversed_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnJournalDescription = this.Columns["a_journal_description_c"];
            this.ColumnJournalDebitTotal = this.Columns["a_journal_debit_total_n"];
            this.ColumnJournalCreditTotal = this.Columns["a_journal_credit_total_n"];
            this.ColumnJournalPeriod = this.Columns["a_journal_period_i"];
            this.ColumnDateEffective = this.Columns["a_date_effective_d"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnLastTransactionNumber = this.Columns["a_last_transaction_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnJournalStatus = this.Columns["a_journal_status_c"];
            this.ColumnTransactionCurrency = this.Columns["a_transaction_currency_c"];
            this.ColumnExchangeRateToBase = this.Columns["a_exchange_rate_to_base_n"];
            this.ColumnExchangeRateTime = this.Columns["a_exchange_rate_time_i"];
            this.ColumnDateOfEntry = this.Columns["a_date_of_entry_d"];
            this.ColumnReversed = this.Columns["a_reversed_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[3] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber};
        }

        /// Access a typed row by index
        public AJournalRow this[int i]
        {
            get
            {
                return ((AJournalRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AJournalRow NewRowTyped(bool AWithDefaultValues)
        {
            AJournalRow ret = ((AJournalRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AJournalRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AJournalRow(builder);
        }

        /// get typed set of changes
        public AJournalTable GetChangesTyped()
        {
            return ((AJournalTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AJournal";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_journal";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalDescriptionDBName()
        {
            return "a_journal_description_c";
        }

        /// get character length for column
        public static short GetJournalDescriptionLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalDebitTotalDBName()
        {
            return "a_journal_debit_total_n";
        }

        /// get character length for column
        public static short GetJournalDebitTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalCreditTotalDBName()
        {
            return "a_journal_credit_total_n";
        }

        /// get character length for column
        public static short GetJournalCreditTotalLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalPeriodDBName()
        {
            return "a_journal_period_i";
        }

        /// get character length for column
        public static short GetJournalPeriodLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateEffectiveDBName()
        {
            return "a_date_effective_d";
        }

        /// get character length for column
        public static short GetDateEffectiveLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }

        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetLastTransactionNumberDBName()
        {
            return "a_last_transaction_number_i";
        }

        /// get character length for column
        public static short GetLastTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalStatusDBName()
        {
            return "a_journal_status_c";
        }

        /// get character length for column
        public static short GetJournalStatusLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionCurrencyDBName()
        {
            return "a_transaction_currency_c";
        }

        /// get character length for column
        public static short GetTransactionCurrencyLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetExchangeRateToBaseDBName()
        {
            return "a_exchange_rate_to_base_n";
        }

        /// get character length for column
        public static short GetExchangeRateToBaseLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetExchangeRateTimeDBName()
        {
            return "a_exchange_rate_time_i";
        }

        /// get character length for column
        public static short GetExchangeRateTimeLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateOfEntryDBName()
        {
            return "a_date_of_entry_d";
        }

        /// get character length for column
        public static short GetDateOfEntryLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReversedDBName()
        {
            return "a_reversed_l";
        }

        /// get character length for column
        public static short GetReversedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Holds details of each general ledger journal, which contains a group of transactions.
    [Serializable()]
    public class AJournalRow : System.Data.DataRow
    {
        private AJournalTable myTable;

        /// Constructor
        public AJournalRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AJournalTable)(this.Table));
        }

        /// The journal belongs to this ledger.
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch the journal belongs to.
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// This is a long description and is 80 characters long.
        public String JournalDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDescription)
                            || (((String)(this[this.myTable.ColumnJournalDescription])) != value)))
                {
                    this[this.myTable.ColumnJournalDescription] = value;
                }
            }
        }

        /// This is a number of currency units in the currency of the transaction.
        public Decimal JournalDebitTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalDebitTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalDebitTotal)
                            || (((Decimal)(this[this.myTable.ColumnJournalDebitTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalDebitTotal] = value;
                }
            }
        }

        /// This is the number of currency units in the currency of the transaction.
        public Decimal JournalCreditTotal
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalCreditTotal.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalCreditTotal)
                            || (((Decimal)(this[this.myTable.ColumnJournalCreditTotal])) != value)))
                {
                    this[this.myTable.ColumnJournalCreditTotal] = value;
                }
            }
        }

        /// This defines which accounting period is being used
        public Int32 JournalPeriod
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalPeriod.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalPeriod)
                            || (((Int32)(this[this.myTable.ColumnJournalPeriod])) != value)))
                {
                    this[this.myTable.ColumnJournalPeriod] = value;
                }
            }
        }

        /// Date the journal comes into effect.
        public System.DateTime DateEffective
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateEffective.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateEffective)
                            || (((System.DateTime)(this[this.myTable.ColumnDateEffective])) != value)))
                {
                    this[this.myTable.ColumnDateEffective] = value;
                }
            }
        }

        /// Which type of journal is this?  Eg. STD, ALLOC, REALLOC, REVAL.
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode)
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }

        /// The number of the last transaction within the journal.
        public Int32 LastTransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLastTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLastTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnLastTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnLastTransactionNumber] = value;
                }
            }
        }

        /// Indicates the sub system of accounts that the journal belongs to.  Eg. GL, AP, GR
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        /// Has a journal been posted yet
        public String JournalStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalStatus)
                            || (((String)(this[this.myTable.ColumnJournalStatus])) != value)))
                {
                    this[this.myTable.ColumnJournalStatus] = value;
                }
            }
        }

        /// This defines which currency is being used
        public String TransactionCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionCurrency)
                            || (((String)(this[this.myTable.ColumnTransactionCurrency])) != value)))
                {
                    this[this.myTable.ColumnTransactionCurrency] = value;
                }
            }
        }

        /// The rate of exchange from the transaction currency (in a_transaction_currency_c) to the ledger base currency.
        public Decimal ExchangeRateToBase
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateToBase.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateToBase)
                            || (((Decimal)(this[this.myTable.ColumnExchangeRateToBase])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateToBase] = value;
                }
            }
        }

        /// The time component of the exchange rate.
        public Int32 ExchangeRateTime
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnExchangeRateTime.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnExchangeRateTime)
                            || (((Int32)(this[this.myTable.ColumnExchangeRateTime])) != value)))
                {
                    this[this.myTable.ColumnExchangeRateTime] = value;
                }
            }
        }

        /// Date the journal was created.
        public System.DateTime DateOfEntry
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateOfEntry.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateOfEntry)
                            || (((System.DateTime)(this[this.myTable.ColumnDateOfEntry])) != value)))
                {
                    this[this.myTable.ColumnDateOfEntry] = value;
                }
            }
        }

        /// Indicates whether or not a journal has been reversed.
        public Boolean Reversed
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReversed.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReversed)
                            || (((Boolean)(this[this.myTable.ColumnReversed])) != value)))
                {
                    this[this.myTable.ColumnReversed] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnJournalNumber);
            this.SetNull(this.myTable.ColumnJournalDescription);
            this[this.myTable.ColumnJournalDebitTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalCreditTotal.Ordinal] = 0;
            this[this.myTable.ColumnJournalPeriod.Ordinal] = 0;
            this[this.myTable.ColumnDateEffective.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this[this.myTable.ColumnLastTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnJournalStatus.Ordinal] = "Unposted";
            this.SetNull(this.myTable.ColumnTransactionCurrency);
            this[this.myTable.ColumnExchangeRateToBase.Ordinal] = 0;
            this[this.myTable.ColumnExchangeRateTime.Ordinal] = 0;
            this[this.myTable.ColumnDateOfEntry.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnReversed.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsJournalDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnJournalDescription);
        }

        /// assign NULL value
        public void SetJournalDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnJournalDescription);
        }

        /// test for NULL value
        public bool IsJournalDebitTotalNull()
        {
            return this.IsNull(this.myTable.ColumnJournalDebitTotal);
        }

        /// assign NULL value
        public void SetJournalDebitTotalNull()
        {
            this.SetNull(this.myTable.ColumnJournalDebitTotal);
        }

        /// test for NULL value
        public bool IsJournalCreditTotalNull()
        {
            return this.IsNull(this.myTable.ColumnJournalCreditTotal);
        }

        /// assign NULL value
        public void SetJournalCreditTotalNull()
        {
            this.SetNull(this.myTable.ColumnJournalCreditTotal);
        }

        /// test for NULL value
        public bool IsJournalPeriodNull()
        {
            return this.IsNull(this.myTable.ColumnJournalPeriod);
        }

        /// assign NULL value
        public void SetJournalPeriodNull()
        {
            this.SetNull(this.myTable.ColumnJournalPeriod);
        }

        /// test for NULL value
        public bool IsDateEffectiveNull()
        {
            return this.IsNull(this.myTable.ColumnDateEffective);
        }

        /// assign NULL value
        public void SetDateEffectiveNull()
        {
            this.SetNull(this.myTable.ColumnDateEffective);
        }

        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// test for NULL value
        public bool IsLastTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLastTransactionNumber);
        }

        /// assign NULL value
        public void SetLastTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnLastTransactionNumber);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsJournalStatusNull()
        {
            return this.IsNull(this.myTable.ColumnJournalStatus);
        }

        /// assign NULL value
        public void SetJournalStatusNull()
        {
            this.SetNull(this.myTable.ColumnJournalStatus);
        }

        /// test for NULL value
        public bool IsTransactionCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionCurrency);
        }

        /// assign NULL value
        public void SetTransactionCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnTransactionCurrency);
        }

        /// test for NULL value
        public bool IsExchangeRateToBaseNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// assign NULL value
        public void SetExchangeRateToBaseNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateToBase);
        }

        /// test for NULL value
        public bool IsExchangeRateTimeNull()
        {
            return this.IsNull(this.myTable.ColumnExchangeRateTime);
        }

        /// assign NULL value
        public void SetExchangeRateTimeNull()
        {
            this.SetNull(this.myTable.ColumnExchangeRateTime);
        }

        /// test for NULL value
        public bool IsDateOfEntryNull()
        {
            return this.IsNull(this.myTable.ColumnDateOfEntry);
        }

        /// assign NULL value
        public void SetDateOfEntryNull()
        {
            this.SetNull(this.myTable.ColumnDateOfEntry);
        }

        /// test for NULL value
        public bool IsReversedNull()
        {
            return this.IsNull(this.myTable.ColumnReversed);
        }

        /// assign NULL value
        public void SetReversedNull()
        {
            this.SetNull(this.myTable.ColumnReversed);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Detailed information for each debit and credit in a general ledger journal.
    [Serializable()]
    public class ATransactionTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 168;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrimaryAccountCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnPrimaryCostCentreCodeId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionDateId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionAmountId = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnAmountInBaseCurrencyId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisIndicatorId = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnReconciledStatusId = 12;
        /// used for generic TTypedDataTable functions
        public static short ColumnNarrativeId = 13;
        /// used for generic TTypedDataTable functions
        public static short ColumnDebitCreditIndicatorId = 14;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionStatusId = 15;
        /// used for generic TTypedDataTable functions
        public static short ColumnHeaderNumberId = 16;
        /// used for generic TTypedDataTable functions
        public static short ColumnDetailNumberId = 17;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubTypeId = 18;
        /// used for generic TTypedDataTable functions
        public static short ColumnToIltFlagId = 19;
        /// used for generic TTypedDataTable functions
        public static short ColumnSourceFlagId = 20;
        /// used for generic TTypedDataTable functions
        public static short ColumnReferenceId = 21;
        /// used for generic TTypedDataTable functions
        public static short ColumnSourceReferenceId = 22;
        /// used for generic TTypedDataTable functions
        public static short ColumnSystemGeneratedId = 23;
        /// used for generic TTypedDataTable functions
        public static short ColumnAmountInIntlCurrencyId = 24;
        /// used for generic TTypedDataTable functions
        public static short ColumnIchNumberId = 25;
        /// used for generic TTypedDataTable functions
        public static short ColumnKeyMinistryKeyId = 26;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 27;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 28;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 29;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 30;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 31;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ATransaction", "a_transaction",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "TransactionNumber", "a_transaction_number_i", "Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "PrimaryAccountCode", "a_primary_account_code_c", "Primary Account Code", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(6, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(7, "PrimaryCostCentreCode", "a_primary_cost_centre_code_c", "Primary Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(8, "TransactionDate", "a_transaction_date_d", "Transaction Date", OdbcType.Date, -1, true),
                    new TTypedColumnInfo(9, "TransactionAmount", "a_transaction_amount_n", "Transaction Amount", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(10, "AmountInBaseCurrency", "a_amount_in_base_currency_n", "Amount in Base Currency", OdbcType.Decimal, 24, true),
                    new TTypedColumnInfo(11, "AnalysisIndicator", "a_analysis_indicator_l", "Analysis Indicator", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(12, "ReconciledStatus", "a_reconciled_status_l", "a_reconciled_status_l", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(13, "Narrative", "a_narrative_c", "Narrative", OdbcType.VarChar, 160, false),
                    new TTypedColumnInfo(14, "DebitCreditIndicator", "a_debit_credit_indicator_l", "Debit/Credit Indicator", OdbcType.Bit, -1, true),
                    new TTypedColumnInfo(15, "TransactionStatus", "a_transaction_status_l", "Transaction Posted Status", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(16, "HeaderNumber", "a_header_number_i", "Header Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(17, "DetailNumber", "a_detail_number_i", "Detail Number", OdbcType.Int, -1, false),
                    new TTypedColumnInfo(18, "SubType", "a_sub_type_c", "a_sub_type_c", OdbcType.VarChar, 16, false),
                    new TTypedColumnInfo(19, "ToIltFlag", "a_to_ilt_flag_l", "Transferred to ILT Ledger", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(20, "SourceFlag", "a_source_flag_l", "Source Transaction", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(21, "Reference", "a_reference_c", "Reference", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(22, "SourceReference", "a_source_reference_c", "Source Reference", OdbcType.VarChar, 100, false),
                    new TTypedColumnInfo(23, "SystemGenerated", "a_system_generated_l", "System Generated", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(24, "AmountInIntlCurrency", "a_amount_in_intl_currency_n", "Amount in International Currency", OdbcType.Decimal, 24, false),
                    new TTypedColumnInfo(25, "IchNumber", "a_ich_number_i", "ICH Process Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(26, "KeyMinistryKey", "a_key_ministry_key_n", "Key Ministry", OdbcType.Decimal, 10, false),
                    new TTypedColumnInfo(27, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(28, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(29, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(30, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(31, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3
                }));
            return true;
        }

        /// constructor
        public ATransactionTable() :
                base("ATransaction")
        {
        }

        /// constructor
        public ATransactionTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ATransactionTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        ///
        public DataColumn ColumnJournalNumber;
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// This identifies the account the financial transaction must be stored against [NOT USED]
        public DataColumn ColumnPrimaryAccountCode;
        /// This identifies which cost centre an account is applied to
        public DataColumn ColumnCostCentreCode;
        /// This identifies which cost centre an account is applied to [NOT USED]
        public DataColumn ColumnPrimaryCostCentreCode;
        /// Date the transaction took place
        public DataColumn ColumnTransactionDate;
        /// This is a number of currency units
        public DataColumn ColumnTransactionAmount;
        /// This is a number of currency units
        public DataColumn ColumnAmountInBaseCurrency;
        /// Used to get a yes no response from the user
        public DataColumn ColumnAnalysisIndicator;
        /// shows if the transaction has been reconciled or not
        public DataColumn ColumnReconciledStatus;
        ///
        public DataColumn ColumnNarrative;
        ///
        public DataColumn ColumnDebitCreditIndicator;
        /// Has a transaction been posted yet
        public DataColumn ColumnTransactionStatus;
        /// The header (eg, cashbook #) that the transaction is associated with. [NOT USED]
        public DataColumn ColumnHeaderNumber;
        /// The detail (within the header) that the transaction is associated with. [NOT USED]
        public DataColumn ColumnDetailNumber;
        ///
        public DataColumn ColumnSubType;
        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public DataColumn ColumnToIltFlag;
        /// To flag a transaction as having come from a source ledger and been processed in an ilt processing centre
        public DataColumn ColumnSourceFlag;
        /// Reference number/code for the transaction
        public DataColumn ColumnReference;
        /// Transaction key which initiated an ILT transaction
        public DataColumn ColumnSourceReference;
        /// Was this transaction generated automatically by the system?
        public DataColumn ColumnSystemGenerated;
        /// The transaction amount in the second base currency.
        public DataColumn ColumnAmountInIntlCurrency;
        /// identifes the ICH process number
        public DataColumn ColumnIchNumber;
        /// Key ministry to which this transaction applies (just for fund transfers)
        public DataColumn ColumnKeyMinistryKey;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_primary_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_date_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_amount_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_base_currency_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reconciled_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_narrative_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_debit_credit_indicator_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_status_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_header_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_detail_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_type_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_to_ilt_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_source_flag_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_source_reference_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_system_generated_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("a_amount_in_intl_currency_n", typeof(Decimal)));
            this.Columns.Add(new System.Data.DataColumn("a_ich_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_key_ministry_key_n", typeof(Int64)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnPrimaryAccountCode = this.Columns["a_primary_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnPrimaryCostCentreCode = this.Columns["a_primary_cost_centre_code_c"];
            this.ColumnTransactionDate = this.Columns["a_transaction_date_d"];
            this.ColumnTransactionAmount = this.Columns["a_transaction_amount_n"];
            this.ColumnAmountInBaseCurrency = this.Columns["a_amount_in_base_currency_n"];
            this.ColumnAnalysisIndicator = this.Columns["a_analysis_indicator_l"];
            this.ColumnReconciledStatus = this.Columns["a_reconciled_status_l"];
            this.ColumnNarrative = this.Columns["a_narrative_c"];
            this.ColumnDebitCreditIndicator = this.Columns["a_debit_credit_indicator_l"];
            this.ColumnTransactionStatus = this.Columns["a_transaction_status_l"];
            this.ColumnHeaderNumber = this.Columns["a_header_number_i"];
            this.ColumnDetailNumber = this.Columns["a_detail_number_i"];
            this.ColumnSubType = this.Columns["a_sub_type_c"];
            this.ColumnToIltFlag = this.Columns["a_to_ilt_flag_l"];
            this.ColumnSourceFlag = this.Columns["a_source_flag_l"];
            this.ColumnReference = this.Columns["a_reference_c"];
            this.ColumnSourceReference = this.Columns["a_source_reference_c"];
            this.ColumnSystemGenerated = this.Columns["a_system_generated_l"];
            this.ColumnAmountInIntlCurrency = this.Columns["a_amount_in_intl_currency_n"];
            this.ColumnIchNumber = this.Columns["a_ich_number_i"];
            this.ColumnKeyMinistryKey = this.Columns["a_key_ministry_key_n"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[4] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber,ColumnTransactionNumber};
        }

        /// Access a typed row by index
        public ATransactionRow this[int i]
        {
            get
            {
                return ((ATransactionRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ATransactionRow NewRowTyped(bool AWithDefaultValues)
        {
            ATransactionRow ret = ((ATransactionRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ATransactionRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ATransactionRow(builder);
        }

        /// get typed set of changes
        public ATransactionTable GetChangesTyped()
        {
            return ((ATransactionTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ATransaction";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_transaction";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }

        /// get character length for column
        public static short GetTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetPrimaryAccountCodeDBName()
        {
            return "a_primary_account_code_c";
        }

        /// get character length for column
        public static short GetPrimaryAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetPrimaryCostCentreCodeDBName()
        {
            return "a_primary_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetPrimaryCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionDateDBName()
        {
            return "a_transaction_date_d";
        }

        /// get character length for column
        public static short GetTransactionDateLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionAmountDBName()
        {
            return "a_transaction_amount_n";
        }

        /// get character length for column
        public static short GetTransactionAmountLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAmountInBaseCurrencyDBName()
        {
            return "a_amount_in_base_currency_n";
        }

        /// get character length for column
        public static short GetAmountInBaseCurrencyLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisIndicatorDBName()
        {
            return "a_analysis_indicator_l";
        }

        /// get character length for column
        public static short GetAnalysisIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReconciledStatusDBName()
        {
            return "a_reconciled_status_l";
        }

        /// get character length for column
        public static short GetReconciledStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetNarrativeDBName()
        {
            return "a_narrative_c";
        }

        /// get character length for column
        public static short GetNarrativeLength()
        {
            return 160;
        }

        /// get the name of the field in the database for this column
        public static string GetDebitCreditIndicatorDBName()
        {
            return "a_debit_credit_indicator_l";
        }

        /// get character length for column
        public static short GetDebitCreditIndicatorLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionStatusDBName()
        {
            return "a_transaction_status_l";
        }

        /// get character length for column
        public static short GetTransactionStatusLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetHeaderNumberDBName()
        {
            return "a_header_number_i";
        }

        /// get character length for column
        public static short GetHeaderNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDetailNumberDBName()
        {
            return "a_detail_number_i";
        }

        /// get character length for column
        public static short GetDetailNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubTypeDBName()
        {
            return "a_sub_type_c";
        }

        /// get character length for column
        public static short GetSubTypeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetToIltFlagDBName()
        {
            return "a_to_ilt_flag_l";
        }

        /// get character length for column
        public static short GetToIltFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSourceFlagDBName()
        {
            return "a_source_flag_l";
        }

        /// get character length for column
        public static short GetSourceFlagLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetReferenceDBName()
        {
            return "a_reference_c";
        }

        /// get character length for column
        public static short GetReferenceLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetSourceReferenceDBName()
        {
            return "a_source_reference_c";
        }

        /// get character length for column
        public static short GetSourceReferenceLength()
        {
            return 100;
        }

        /// get the name of the field in the database for this column
        public static string GetSystemGeneratedDBName()
        {
            return "a_system_generated_l";
        }

        /// get character length for column
        public static short GetSystemGeneratedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAmountInIntlCurrencyDBName()
        {
            return "a_amount_in_intl_currency_n";
        }

        /// get character length for column
        public static short GetAmountInIntlCurrencyLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetIchNumberDBName()
        {
            return "a_ich_number_i";
        }

        /// get character length for column
        public static short GetIchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetKeyMinistryKeyDBName()
        {
            return "a_key_ministry_key_n";
        }

        /// get character length for column
        public static short GetKeyMinistryKeyLength()
        {
            return 10;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Detailed information for each debit and credit in a general ledger journal.
    [Serializable()]
    public class ATransactionRow : System.Data.DataRow
    {
        private ATransactionTable myTable;

        /// Constructor
        public ATransactionRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ATransactionTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        ///
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against [NOT USED]
        public String PrimaryAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryAccountCode)
                            || (((String)(this[this.myTable.ColumnPrimaryAccountCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryAccountCode] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        /// This identifies which cost centre an account is applied to [NOT USED]
        public String PrimaryCostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnPrimaryCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnPrimaryCostCentreCode)
                            || (((String)(this[this.myTable.ColumnPrimaryCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnPrimaryCostCentreCode] = value;
                }
            }
        }

        /// Date the transaction took place
        public System.DateTime TransactionDate
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionDate.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return DateTime.MinValue;
                }
                else
                {
                    return ((System.DateTime)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionDate)
                            || (((System.DateTime)(this[this.myTable.ColumnTransactionDate])) != value)))
                {
                    this[this.myTable.ColumnTransactionDate] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal TransactionAmount
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionAmount.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionAmount)
                            || (((Decimal)(this[this.myTable.ColumnTransactionAmount])) != value)))
                {
                    this[this.myTable.ColumnTransactionAmount] = value;
                }
            }
        }

        /// This is a number of currency units
        public Decimal AmountInBaseCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInBaseCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInBaseCurrency)
                            || (((Decimal)(this[this.myTable.ColumnAmountInBaseCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInBaseCurrency] = value;
                }
            }
        }

        /// Used to get a yes no response from the user
        public Boolean AnalysisIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisIndicator)
                            || (((Boolean)(this[this.myTable.ColumnAnalysisIndicator])) != value)))
                {
                    this[this.myTable.ColumnAnalysisIndicator] = value;
                }
            }
        }

        /// shows if the transaction has been reconciled or not
        public Boolean ReconciledStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReconciledStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReconciledStatus)
                            || (((Boolean)(this[this.myTable.ColumnReconciledStatus])) != value)))
                {
                    this[this.myTable.ColumnReconciledStatus] = value;
                }
            }
        }

        ///
        public String Narrative
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnNarrative.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnNarrative)
                            || (((String)(this[this.myTable.ColumnNarrative])) != value)))
                {
                    this[this.myTable.ColumnNarrative] = value;
                }
            }
        }

        ///
        public Boolean DebitCreditIndicator
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDebitCreditIndicator.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDebitCreditIndicator)
                            || (((Boolean)(this[this.myTable.ColumnDebitCreditIndicator])) != value)))
                {
                    this[this.myTable.ColumnDebitCreditIndicator] = value;
                }
            }
        }

        /// Has a transaction been posted yet
        public Boolean TransactionStatus
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionStatus.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionStatus)
                            || (((Boolean)(this[this.myTable.ColumnTransactionStatus])) != value)))
                {
                    this[this.myTable.ColumnTransactionStatus] = value;
                }
            }
        }

        /// The header (eg, cashbook #) that the transaction is associated with. [NOT USED]
        public Int32 HeaderNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnHeaderNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnHeaderNumber)
                            || (((Int32)(this[this.myTable.ColumnHeaderNumber])) != value)))
                {
                    this[this.myTable.ColumnHeaderNumber] = value;
                }
            }
        }

        /// The detail (within the header) that the transaction is associated with. [NOT USED]
        public Int32 DetailNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDetailNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDetailNumber)
                            || (((Int32)(this[this.myTable.ColumnDetailNumber])) != value)))
                {
                    this[this.myTable.ColumnDetailNumber] = value;
                }
            }
        }

        ///
        public String SubType
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubType.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubType)
                            || (((String)(this[this.myTable.ColumnSubType])) != value)))
                {
                    this[this.myTable.ColumnSubType] = value;
                }
            }
        }

        /// Indicates whether the ILT transaction has been transferred to transaction for ILT file.
        public Boolean ToIltFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnToIltFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnToIltFlag)
                            || (((Boolean)(this[this.myTable.ColumnToIltFlag])) != value)))
                {
                    this[this.myTable.ColumnToIltFlag] = value;
                }
            }
        }

        /// To flag a transaction as having come from a source ledger and been processed in an ilt processing centre
        public Boolean SourceFlag
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceFlag.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceFlag)
                            || (((Boolean)(this[this.myTable.ColumnSourceFlag])) != value)))
                {
                    this[this.myTable.ColumnSourceFlag] = value;
                }
            }
        }

        /// Reference number/code for the transaction
        public String Reference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnReference)
                            || (((String)(this[this.myTable.ColumnReference])) != value)))
                {
                    this[this.myTable.ColumnReference] = value;
                }
            }
        }

        /// Transaction key which initiated an ILT transaction
        public String SourceReference
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSourceReference.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSourceReference)
                            || (((String)(this[this.myTable.ColumnSourceReference])) != value)))
                {
                    this[this.myTable.ColumnSourceReference] = value;
                }
            }
        }

        /// Was this transaction generated automatically by the system?
        public Boolean SystemGenerated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSystemGenerated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSystemGenerated)
                            || (((Boolean)(this[this.myTable.ColumnSystemGenerated])) != value)))
                {
                    this[this.myTable.ColumnSystemGenerated] = value;
                }
            }
        }

        /// The transaction amount in the second base currency.
        public Decimal AmountInIntlCurrency
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAmountInIntlCurrency.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Decimal)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAmountInIntlCurrency)
                            || (((Decimal)(this[this.myTable.ColumnAmountInIntlCurrency])) != value)))
                {
                    this[this.myTable.ColumnAmountInIntlCurrency] = value;
                }
            }
        }

        /// identifes the ICH process number
        public Int32 IchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnIchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnIchNumber)
                            || (((Int32)(this[this.myTable.ColumnIchNumber])) != value)))
                {
                    this[this.myTable.ColumnIchNumber] = value;
                }
            }
        }

        /// Key ministry to which this transaction applies (just for fund transfers)
        public Int64 KeyMinistryKey
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyMinistryKey.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int64)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyMinistryKey)
                            || (((Int64)(this[this.myTable.ColumnKeyMinistryKey])) != value)))
                {
                    this[this.myTable.ColumnKeyMinistryKey] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
            this[this.myTable.ColumnTransactionDate.Ordinal] = DateTime.Today;
            this[this.myTable.ColumnTransactionAmount.Ordinal] = 0;
            this[this.myTable.ColumnAmountInBaseCurrency.Ordinal] = 0;
            this[this.myTable.ColumnAnalysisIndicator.Ordinal] = false;
            this[this.myTable.ColumnReconciledStatus.Ordinal] = false;
            this.SetNull(this.myTable.ColumnNarrative);
            this[this.myTable.ColumnDebitCreditIndicator.Ordinal] = true;
            this[this.myTable.ColumnTransactionStatus.Ordinal] = false;
            this[this.myTable.ColumnHeaderNumber.Ordinal] = 0;
            this[this.myTable.ColumnDetailNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubType);
            this[this.myTable.ColumnToIltFlag.Ordinal] = false;
            this[this.myTable.ColumnSourceFlag.Ordinal] = false;
            this.SetNull(this.myTable.ColumnReference);
            this.SetNull(this.myTable.ColumnSourceReference);
            this[this.myTable.ColumnSystemGenerated.Ordinal] = false;
            this[this.myTable.ColumnAmountInIntlCurrency.Ordinal] = 0;
            this[this.myTable.ColumnIchNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnKeyMinistryKey);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionNumber);
        }

        /// assign NULL value
        public void SetTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnTransactionNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsPrimaryAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryAccountCode);
        }

        /// assign NULL value
        public void SetPrimaryAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsPrimaryCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnPrimaryCostCentreCode);
        }

        /// assign NULL value
        public void SetPrimaryCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnPrimaryCostCentreCode);
        }

        /// test for NULL value
        public bool IsTransactionDateNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionDate);
        }

        /// assign NULL value
        public void SetTransactionDateNull()
        {
            this.SetNull(this.myTable.ColumnTransactionDate);
        }

        /// test for NULL value
        public bool IsTransactionAmountNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionAmount);
        }

        /// assign NULL value
        public void SetTransactionAmountNull()
        {
            this.SetNull(this.myTable.ColumnTransactionAmount);
        }

        /// test for NULL value
        public bool IsAmountInBaseCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInBaseCurrency);
        }

        /// assign NULL value
        public void SetAmountInBaseCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInBaseCurrency);
        }

        /// test for NULL value
        public bool IsAnalysisIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisIndicator);
        }

        /// assign NULL value
        public void SetAnalysisIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisIndicator);
        }

        /// test for NULL value
        public bool IsReconciledStatusNull()
        {
            return this.IsNull(this.myTable.ColumnReconciledStatus);
        }

        /// assign NULL value
        public void SetReconciledStatusNull()
        {
            this.SetNull(this.myTable.ColumnReconciledStatus);
        }

        /// test for NULL value
        public bool IsNarrativeNull()
        {
            return this.IsNull(this.myTable.ColumnNarrative);
        }

        /// assign NULL value
        public void SetNarrativeNull()
        {
            this.SetNull(this.myTable.ColumnNarrative);
        }

        /// test for NULL value
        public bool IsDebitCreditIndicatorNull()
        {
            return this.IsNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// assign NULL value
        public void SetDebitCreditIndicatorNull()
        {
            this.SetNull(this.myTable.ColumnDebitCreditIndicator);
        }

        /// test for NULL value
        public bool IsTransactionStatusNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionStatus);
        }

        /// assign NULL value
        public void SetTransactionStatusNull()
        {
            this.SetNull(this.myTable.ColumnTransactionStatus);
        }

        /// test for NULL value
        public bool IsHeaderNumberNull()
        {
            return this.IsNull(this.myTable.ColumnHeaderNumber);
        }

        /// assign NULL value
        public void SetHeaderNumberNull()
        {
            this.SetNull(this.myTable.ColumnHeaderNumber);
        }

        /// test for NULL value
        public bool IsDetailNumberNull()
        {
            return this.IsNull(this.myTable.ColumnDetailNumber);
        }

        /// assign NULL value
        public void SetDetailNumberNull()
        {
            this.SetNull(this.myTable.ColumnDetailNumber);
        }

        /// test for NULL value
        public bool IsSubTypeNull()
        {
            return this.IsNull(this.myTable.ColumnSubType);
        }

        /// assign NULL value
        public void SetSubTypeNull()
        {
            this.SetNull(this.myTable.ColumnSubType);
        }

        /// test for NULL value
        public bool IsToIltFlagNull()
        {
            return this.IsNull(this.myTable.ColumnToIltFlag);
        }

        /// assign NULL value
        public void SetToIltFlagNull()
        {
            this.SetNull(this.myTable.ColumnToIltFlag);
        }

        /// test for NULL value
        public bool IsSourceFlagNull()
        {
            return this.IsNull(this.myTable.ColumnSourceFlag);
        }

        /// assign NULL value
        public void SetSourceFlagNull()
        {
            this.SetNull(this.myTable.ColumnSourceFlag);
        }

        /// test for NULL value
        public bool IsReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnReference);
        }

        /// assign NULL value
        public void SetReferenceNull()
        {
            this.SetNull(this.myTable.ColumnReference);
        }

        /// test for NULL value
        public bool IsSourceReferenceNull()
        {
            return this.IsNull(this.myTable.ColumnSourceReference);
        }

        /// assign NULL value
        public void SetSourceReferenceNull()
        {
            this.SetNull(this.myTable.ColumnSourceReference);
        }

        /// test for NULL value
        public bool IsSystemGeneratedNull()
        {
            return this.IsNull(this.myTable.ColumnSystemGenerated);
        }

        /// assign NULL value
        public void SetSystemGeneratedNull()
        {
            this.SetNull(this.myTable.ColumnSystemGenerated);
        }

        /// test for NULL value
        public bool IsAmountInIntlCurrencyNull()
        {
            return this.IsNull(this.myTable.ColumnAmountInIntlCurrency);
        }

        /// assign NULL value
        public void SetAmountInIntlCurrencyNull()
        {
            this.SetNull(this.myTable.ColumnAmountInIntlCurrency);
        }

        /// test for NULL value
        public bool IsIchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnIchNumber);
        }

        /// assign NULL value
        public void SetIchNumberNull()
        {
            this.SetNull(this.myTable.ColumnIchNumber);
        }

        /// test for NULL value
        public bool IsKeyMinistryKeyNull()
        {
            return this.IsNull(this.myTable.ColumnKeyMinistryKey);
        }

        /// assign NULL value
        public void SetKeyMinistryKeyNull()
        {
            this.SetNull(this.myTable.ColumnKeyMinistryKey);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Analysis information entered by the user for a general ledger transaction.
    [Serializable()]
    public class ATransAnalAttribTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 169;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnBatchNumberId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnJournalNumberId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionNumberId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnAccountCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnCostCentreCodeId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisTypeCodeId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnAnalysisAttributeValueId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 12;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ATransAnalAttrib", "a_trans_anal_attrib",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "BatchNumber", "a_batch_number_i", "Batch Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(2, "JournalNumber", "a_journal_number_i", "Journal Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(3, "TransactionNumber", "a_transaction_number_i", "Transaction Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(4, "AccountCode", "a_account_code_c", "Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(5, "CostCentreCode", "a_cost_centre_code_c", "Cost Centre Code", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(6, "AnalysisTypeCode", "a_analysis_type_code_c", "Analysis Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(7, "AnalysisAttributeValue", "a_analysis_attribute_value_c", "Analysis Attribute Value", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(8, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1, 2, 3, 6
                }));
            return true;
        }

        /// constructor
        public ATransAnalAttribTable() :
                base("ATransAnalAttrib")
        {
        }

        /// constructor
        public ATransAnalAttribTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ATransAnalAttribTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// identifes which batch a transaction belongs to
        public DataColumn ColumnBatchNumber;
        /// Identifies a journal within a batch
        public DataColumn ColumnJournalNumber;
        /// Identifies a transaction within a journal within a batch within a ledger
        public DataColumn ColumnTransactionNumber;
        /// This identifies the account the financial transaction must be stored against
        public DataColumn ColumnAccountCode;
        /// Cost Centre to which the attribute relates
        public DataColumn ColumnCostCentreCode;
        ///
        public DataColumn ColumnAnalysisTypeCode;
        ///
        public DataColumn ColumnAnalysisAttributeValue;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_batch_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_journal_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_cost_centre_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_analysis_attribute_value_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnBatchNumber = this.Columns["a_batch_number_i"];
            this.ColumnJournalNumber = this.Columns["a_journal_number_i"];
            this.ColumnTransactionNumber = this.Columns["a_transaction_number_i"];
            this.ColumnAccountCode = this.Columns["a_account_code_c"];
            this.ColumnCostCentreCode = this.Columns["a_cost_centre_code_c"];
            this.ColumnAnalysisTypeCode = this.Columns["a_analysis_type_code_c"];
            this.ColumnAnalysisAttributeValue = this.Columns["a_analysis_attribute_value_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[5] {
                    ColumnLedgerNumber,ColumnBatchNumber,ColumnJournalNumber,ColumnTransactionNumber,ColumnAnalysisTypeCode};
        }

        /// Access a typed row by index
        public ATransAnalAttribRow this[int i]
        {
            get
            {
                return ((ATransAnalAttribRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ATransAnalAttribRow NewRowTyped(bool AWithDefaultValues)
        {
            ATransAnalAttribRow ret = ((ATransAnalAttribRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ATransAnalAttribRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ATransAnalAttribRow(builder);
        }

        /// get typed set of changes
        public ATransAnalAttribTable GetChangesTyped()
        {
            return ((ATransAnalAttribTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ATransAnalAttrib";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_trans_anal_attrib";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetBatchNumberDBName()
        {
            return "a_batch_number_i";
        }

        /// get character length for column
        public static short GetBatchNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetJournalNumberDBName()
        {
            return "a_journal_number_i";
        }

        /// get character length for column
        public static short GetJournalNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionNumberDBName()
        {
            return "a_transaction_number_i";
        }

        /// get character length for column
        public static short GetTransactionNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetAccountCodeDBName()
        {
            return "a_account_code_c";
        }

        /// get character length for column
        public static short GetAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetCostCentreCodeDBName()
        {
            return "a_cost_centre_code_c";
        }

        /// get character length for column
        public static short GetCostCentreCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisTypeCodeDBName()
        {
            return "a_analysis_type_code_c";
        }

        /// get character length for column
        public static short GetAnalysisTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetAnalysisAttributeValueDBName()
        {
            return "a_analysis_attribute_value_c";
        }

        /// get character length for column
        public static short GetAnalysisAttributeValueLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Analysis information entered by the user for a general ledger transaction.
    [Serializable()]
    public class ATransAnalAttribRow : System.Data.DataRow
    {
        private ATransAnalAttribTable myTable;

        /// Constructor
        public ATransAnalAttribRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ATransAnalAttribTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// identifes which batch a transaction belongs to
        public Int32 BatchNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnBatchNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnBatchNumber)
                            || (((Int32)(this[this.myTable.ColumnBatchNumber])) != value)))
                {
                    this[this.myTable.ColumnBatchNumber] = value;
                }
            }
        }

        /// Identifies a journal within a batch
        public Int32 JournalNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnJournalNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnJournalNumber)
                            || (((Int32)(this[this.myTable.ColumnJournalNumber])) != value)))
                {
                    this[this.myTable.ColumnJournalNumber] = value;
                }
            }
        }

        /// Identifies a transaction within a journal within a batch within a ledger
        public Int32 TransactionNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionNumber)
                            || (((Int32)(this[this.myTable.ColumnTransactionNumber])) != value)))
                {
                    this[this.myTable.ColumnTransactionNumber] = value;
                }
            }
        }

        /// This identifies the account the financial transaction must be stored against
        public String AccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAccountCode)
                            || (((String)(this[this.myTable.ColumnAccountCode])) != value)))
                {
                    this[this.myTable.ColumnAccountCode] = value;
                }
            }
        }

        /// Cost Centre to which the attribute relates
        public String CostCentreCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCostCentreCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCostCentreCode)
                            || (((String)(this[this.myTable.ColumnCostCentreCode])) != value)))
                {
                    this[this.myTable.ColumnCostCentreCode] = value;
                }
            }
        }

        ///
        public String AnalysisTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisTypeCode)
                            || (((String)(this[this.myTable.ColumnAnalysisTypeCode])) != value)))
                {
                    this[this.myTable.ColumnAnalysisTypeCode] = value;
                }
            }
        }

        ///
        public String AnalysisAttributeValue
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnAnalysisAttributeValue.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnAnalysisAttributeValue)
                            || (((String)(this[this.myTable.ColumnAnalysisAttributeValue])) != value)))
                {
                    this[this.myTable.ColumnAnalysisAttributeValue] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this[this.myTable.ColumnBatchNumber.Ordinal] = 0;
            this[this.myTable.ColumnJournalNumber.Ordinal] = 0;
            this[this.myTable.ColumnTransactionNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnAccountCode);
            this.SetNull(this.myTable.ColumnCostCentreCode);
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsBatchNumberNull()
        {
            return this.IsNull(this.myTable.ColumnBatchNumber);
        }

        /// assign NULL value
        public void SetBatchNumberNull()
        {
            this.SetNull(this.myTable.ColumnBatchNumber);
        }

        /// test for NULL value
        public bool IsJournalNumberNull()
        {
            return this.IsNull(this.myTable.ColumnJournalNumber);
        }

        /// assign NULL value
        public void SetJournalNumberNull()
        {
            this.SetNull(this.myTable.ColumnJournalNumber);
        }

        /// test for NULL value
        public bool IsTransactionNumberNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionNumber);
        }

        /// assign NULL value
        public void SetTransactionNumberNull()
        {
            this.SetNull(this.myTable.ColumnTransactionNumber);
        }

        /// test for NULL value
        public bool IsAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAccountCode);
        }

        /// assign NULL value
        public void SetAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnAccountCode);
        }

        /// test for NULL value
        public bool IsCostCentreCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCostCentreCode);
        }

        /// assign NULL value
        public void SetCostCentreCodeNull()
        {
            this.SetNull(this.myTable.ColumnCostCentreCode);
        }

        /// test for NULL value
        public bool IsAnalysisTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// assign NULL value
        public void SetAnalysisTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisTypeCode);
        }

        /// test for NULL value
        public bool IsAnalysisAttributeValueNull()
        {
            return this.IsNull(this.myTable.ColumnAnalysisAttributeValue);
        }

        /// assign NULL value
        public void SetAnalysisAttributeValueNull()
        {
            this.SetNull(this.myTable.ColumnAnalysisAttributeValue);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Lists the suspense accounts of each ledger.
    [Serializable()]
    public class ASuspenseAccountTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 170;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnSuspenseAccountCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 6;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ASuspenseAccount", "a_suspense_account",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "SuspenseAccountCode", "a_suspense_account_code_c", "Suspense Account Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(3, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(4, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ASuspenseAccountTable() :
                base("ASuspenseAccount")
        {
        }

        /// constructor
        public ASuspenseAccountTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ASuspenseAccountTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// This identifies an account which will be treated as a suspense account.
        public DataColumn ColumnSuspenseAccountCode;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_suspense_account_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnSuspenseAccountCode = this.Columns["a_suspense_account_code_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnSuspenseAccountCode};
        }

        /// Access a typed row by index
        public ASuspenseAccountRow this[int i]
        {
            get
            {
                return ((ASuspenseAccountRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ASuspenseAccountRow NewRowTyped(bool AWithDefaultValues)
        {
            ASuspenseAccountRow ret = ((ASuspenseAccountRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ASuspenseAccountRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ASuspenseAccountRow(builder);
        }

        /// get typed set of changes
        public ASuspenseAccountTable GetChangesTyped()
        {
            return ((ASuspenseAccountTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ASuspenseAccount";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_suspense_account";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSuspenseAccountCodeDBName()
        {
            return "a_suspense_account_code_c";
        }

        /// get character length for column
        public static short GetSuspenseAccountCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Lists the suspense accounts of each ledger.
    [Serializable()]
    public class ASuspenseAccountRow : System.Data.DataRow
    {
        private ASuspenseAccountTable myTable;

        /// Constructor
        public ASuspenseAccountRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ASuspenseAccountTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// This identifies an account which will be treated as a suspense account.
        public String SuspenseAccountCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSuspenseAccountCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSuspenseAccountCode)
                            || (((String)(this[this.myTable.ColumnSuspenseAccountCode])) != value)))
                {
                    this[this.myTable.ColumnSuspenseAccountCode] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSuspenseAccountCode);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsSuspenseAccountCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSuspenseAccountCode);
        }

        /// assign NULL value
        public void SetSuspenseAccountCodeNull()
        {
            this.SetNull(this.myTable.ColumnSuspenseAccountCode);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Transaction types which have special processing. Eg. Allocation, Reallocation, Gift, Revaluation.
    [Serializable()]
    public class ASpecialTransTypeTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 171;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnTransactionTypeDescriptionId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnSpecTransProcessToCallId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnSpecTransUndoProcessId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 9;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ASpecialTransType", "a_special_trans_type",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "SubSystemCode", "a_sub_system_code_c", "Sub System Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(1, "TransactionTypeCode", "a_transaction_type_code_c", "Special Transaction Type Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(2, "TransactionTypeDescription", "a_transaction_type_description_c", "Description", OdbcType.VarChar, 64, true),
                    new TTypedColumnInfo(3, "SpecTransProcessToCall", "a_spec_trans_process_to_call_c", "Process to Call", OdbcType.VarChar, 80, true),
                    new TTypedColumnInfo(4, "SpecTransUndoProcess", "a_spec_trans_undo_process_c", "Process for undo", OdbcType.VarChar, 80, false),
                    new TTypedColumnInfo(5, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(8, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(9, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ASpecialTransTypeTable() :
                base("ASpecialTransType")
        {
        }

        /// constructor
        public ASpecialTransTypeTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ASpecialTransTypeTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        ///
        public DataColumn ColumnTransactionTypeCode;
        /// This is a short description which is 32 charcters long
        public DataColumn ColumnTransactionTypeDescription;
        /// The filename of the process to call
        public DataColumn ColumnSpecTransProcessToCall;
        /// Process to call to undo the work of the special transaction process, if needed
        public DataColumn ColumnSpecTransUndoProcess;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_transaction_type_description_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_spec_trans_process_to_call_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_spec_trans_undo_process_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnTransactionTypeCode = this.Columns["a_transaction_type_code_c"];
            this.ColumnTransactionTypeDescription = this.Columns["a_transaction_type_description_c"];
            this.ColumnSpecTransProcessToCall = this.Columns["a_spec_trans_process_to_call_c"];
            this.ColumnSpecTransUndoProcess = this.Columns["a_spec_trans_undo_process_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnSubSystemCode,ColumnTransactionTypeCode};
        }

        /// Access a typed row by index
        public ASpecialTransTypeRow this[int i]
        {
            get
            {
                return ((ASpecialTransTypeRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ASpecialTransTypeRow NewRowTyped(bool AWithDefaultValues)
        {
            ASpecialTransTypeRow ret = ((ASpecialTransTypeRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ASpecialTransTypeRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ASpecialTransTypeRow(builder);
        }

        /// get typed set of changes
        public ASpecialTransTypeTable GetChangesTyped()
        {
            return ((ASpecialTransTypeTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ASpecialTransType";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_special_trans_type";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeCodeDBName()
        {
            return "a_transaction_type_code_c";
        }

        /// get character length for column
        public static short GetTransactionTypeCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetTransactionTypeDescriptionDBName()
        {
            return "a_transaction_type_description_c";
        }

        /// get character length for column
        public static short GetTransactionTypeDescriptionLength()
        {
            return 64;
        }

        /// get the name of the field in the database for this column
        public static string GetSpecTransProcessToCallDBName()
        {
            return "a_spec_trans_process_to_call_c";
        }

        /// get character length for column
        public static short GetSpecTransProcessToCallLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetSpecTransUndoProcessDBName()
        {
            return "a_spec_trans_undo_process_c";
        }

        /// get character length for column
        public static short GetSpecTransUndoProcessLength()
        {
            return 80;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Transaction types which have special processing. Eg. Allocation, Reallocation, Gift, Revaluation.
    [Serializable()]
    public class ASpecialTransTypeRow : System.Data.DataRow
    {
        private ASpecialTransTypeTable myTable;

        /// Constructor
        public ASpecialTransTypeRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ASpecialTransTypeTable)(this.Table));
        }

        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        ///
        public String TransactionTypeCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeCode)
                            || (((String)(this[this.myTable.ColumnTransactionTypeCode])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeCode] = value;
                }
            }
        }

        /// This is a short description which is 32 charcters long
        public String TransactionTypeDescription
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnTransactionTypeDescription.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnTransactionTypeDescription)
                            || (((String)(this[this.myTable.ColumnTransactionTypeDescription])) != value)))
                {
                    this[this.myTable.ColumnTransactionTypeDescription] = value;
                }
            }
        }

        /// The filename of the process to call
        public String SpecTransProcessToCall
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecTransProcessToCall.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecTransProcessToCall)
                            || (((String)(this[this.myTable.ColumnSpecTransProcessToCall])) != value)))
                {
                    this[this.myTable.ColumnSpecTransProcessToCall] = value;
                }
            }
        }

        /// Process to call to undo the work of the special transaction process, if needed
        public String SpecTransUndoProcess
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecTransUndoProcess.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecTransUndoProcess)
                            || (((String)(this[this.myTable.ColumnSpecTransUndoProcess])) != value)))
                {
                    this[this.myTable.ColumnSpecTransUndoProcess] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
            this.SetNull(this.myTable.ColumnTransactionTypeDescription);
            this.SetNull(this.myTable.ColumnSpecTransProcessToCall);
            this.SetNull(this.myTable.ColumnSpecTransUndoProcess);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsTransactionTypeCodeNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// assign NULL value
        public void SetTransactionTypeCodeNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeCode);
        }

        /// test for NULL value
        public bool IsTransactionTypeDescriptionNull()
        {
            return this.IsNull(this.myTable.ColumnTransactionTypeDescription);
        }

        /// assign NULL value
        public void SetTransactionTypeDescriptionNull()
        {
            this.SetNull(this.myTable.ColumnTransactionTypeDescription);
        }

        /// test for NULL value
        public bool IsSpecTransProcessToCallNull()
        {
            return this.IsNull(this.myTable.ColumnSpecTransProcessToCall);
        }

        /// assign NULL value
        public void SetSpecTransProcessToCallNull()
        {
            this.SetNull(this.myTable.ColumnSpecTransProcessToCall);
        }

        /// test for NULL value
        public bool IsSpecTransUndoProcessNull()
        {
            return this.IsNull(this.myTable.ColumnSpecTransUndoProcess);
        }

        /// assign NULL value
        public void SetSpecTransUndoProcessNull()
        {
            this.SetNull(this.myTable.ColumnSpecTransUndoProcess);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Shows which systems are interfaced (have been added) to each general ledger.
    [Serializable()]
    public class ASystemInterfaceTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 172;
        /// used for generic TTypedDataTable functions
        public static short ColumnLedgerNumberId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnSubSystemCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnSetUpCompleteId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 7;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ASystemInterface", "a_system_interface",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "LedgerNumber", "a_ledger_number_i", "Ledger Number", OdbcType.Int, -1, true),
                    new TTypedColumnInfo(1, "SubSystemCode", "a_sub_system_code_c", "Sub System Code", OdbcType.VarChar, 24, true),
                    new TTypedColumnInfo(2, "SetUpComplete", "a_set_up_complete_l", "Set Up Complete", OdbcType.Bit, -1, false),
                    new TTypedColumnInfo(3, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(4, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(5, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(6, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(7, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ASystemInterfaceTable() :
                base("ASystemInterface")
        {
        }

        /// constructor
        public ASystemInterfaceTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ASystemInterfaceTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This is used as a key field in most of the accounting system files
        public DataColumn ColumnLedgerNumber;
        /// Defines a sub system of accounts
        public DataColumn ColumnSubSystemCode;
        ///
        public DataColumn ColumnSetUpComplete;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_ledger_number_i", typeof(Int32)));
            this.Columns.Add(new System.Data.DataColumn("a_sub_system_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_set_up_complete_l", typeof(Boolean)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnLedgerNumber = this.Columns["a_ledger_number_i"];
            this.ColumnSubSystemCode = this.Columns["a_sub_system_code_c"];
            this.ColumnSetUpComplete = this.Columns["a_set_up_complete_l"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnLedgerNumber,ColumnSubSystemCode};
        }

        /// Access a typed row by index
        public ASystemInterfaceRow this[int i]
        {
            get
            {
                return ((ASystemInterfaceRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ASystemInterfaceRow NewRowTyped(bool AWithDefaultValues)
        {
            ASystemInterfaceRow ret = ((ASystemInterfaceRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ASystemInterfaceRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ASystemInterfaceRow(builder);
        }

        /// get typed set of changes
        public ASystemInterfaceTable GetChangesTyped()
        {
            return ((ASystemInterfaceTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ASystemInterface";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_system_interface";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetLedgerNumberDBName()
        {
            return "a_ledger_number_i";
        }

        /// get character length for column
        public static short GetLedgerNumberLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetSubSystemCodeDBName()
        {
            return "a_sub_system_code_c";
        }

        /// get character length for column
        public static short GetSubSystemCodeLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetSetUpCompleteDBName()
        {
            return "a_set_up_complete_l";
        }

        /// get character length for column
        public static short GetSetUpCompleteLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Shows which systems are interfaced (have been added) to each general ledger.
    [Serializable()]
    public class ASystemInterfaceRow : System.Data.DataRow
    {
        private ASystemInterfaceTable myTable;

        /// Constructor
        public ASystemInterfaceRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ASystemInterfaceTable)(this.Table));
        }

        /// This is used as a key field in most of the accounting system files
        public Int32 LedgerNumber
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLedgerNumber.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Int32)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLedgerNumber)
                            || (((Int32)(this[this.myTable.ColumnLedgerNumber])) != value)))
                {
                    this[this.myTable.ColumnLedgerNumber] = value;
                }
            }
        }

        /// Defines a sub system of accounts
        public String SubSystemCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSubSystemCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSubSystemCode)
                            || (((String)(this[this.myTable.ColumnSubSystemCode])) != value)))
                {
                    this[this.myTable.ColumnSubSystemCode] = value;
                }
            }
        }

        ///
        public Boolean SetUpComplete
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSetUpComplete.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    throw new System.Data.StrongTypingException("Error: DB null", null);
                }
                else
                {
                    return ((Boolean)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSetUpComplete)
                            || (((Boolean)(this[this.myTable.ColumnSetUpComplete])) != value)))
                {
                    this[this.myTable.ColumnSetUpComplete] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this[this.myTable.ColumnLedgerNumber.Ordinal] = 0;
            this.SetNull(this.myTable.ColumnSubSystemCode);
            this[this.myTable.ColumnSetUpComplete.Ordinal] = false;
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsLedgerNumberNull()
        {
            return this.IsNull(this.myTable.ColumnLedgerNumber);
        }

        /// assign NULL value
        public void SetLedgerNumberNull()
        {
            this.SetNull(this.myTable.ColumnLedgerNumber);
        }

        /// test for NULL value
        public bool IsSubSystemCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSubSystemCode);
        }

        /// assign NULL value
        public void SetSubSystemCodeNull()
        {
            this.SetNull(this.myTable.ColumnSubSystemCode);
        }

        /// test for NULL value
        public bool IsSetUpCompleteNull()
        {
            return this.IsNull(this.myTable.ColumnSetUpComplete);
        }

        /// assign NULL value
        public void SetSetUpCompleteNull()
        {
            this.SetNull(this.myTable.ColumnSetUpComplete);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Describes what is to be displayed for a currency and language combination when displaying the amount as text.
    [Serializable()]
    public class ACurrencyLanguageTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 173;
        /// used for generic TTypedDataTable functions
        public static short ColumnCurrencyCodeId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnLanguageCodeId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnitLabelSingularId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnUnitLabelPluralId = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnSpecialCodeId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnDecimalOptionsId = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnDecimalLabelSingularId = 6;
        /// used for generic TTypedDataTable functions
        public static short ColumnDecimalLabelPluralId = 7;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 8;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 9;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 10;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 11;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 12;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "ACurrencyLanguage", "a_currency_language",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "CurrencyCode", "a_currency_code_c", "Currency Code", OdbcType.VarChar, 16, true),
                    new TTypedColumnInfo(1, "LanguageCode", "p_language_code_c", "Language Code", OdbcType.VarChar, 20, true),
                    new TTypedColumnInfo(2, "UnitLabelSingular", "a_unit_label_singular_c", "Singular", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(3, "UnitLabelPlural", "a_unit_label_plural_c", "Plural", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(4, "SpecialCode", "a_special_code_c", "Special Code", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(5, "DecimalOptions", "a_decimal_options_c", "Decimal Option", OdbcType.VarChar, 24, false),
                    new TTypedColumnInfo(6, "DecimalLabelSingular", "a_decimal_label_singular_c", "Singular", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(7, "DecimalLabelPlural", "a_decimal_label_plural_c", "Plural", OdbcType.VarChar, 32, false),
                    new TTypedColumnInfo(8, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(9, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(10, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(11, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(12, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0, 1
                }));
            return true;
        }

        /// constructor
        public ACurrencyLanguageTable() :
                base("ACurrencyLanguage")
        {
        }

        /// constructor
        public ACurrencyLanguageTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public ACurrencyLanguageTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// This defines which currency is being used
        public DataColumn ColumnCurrencyCode;
        /// This is the code used to identify a language.
        public DataColumn ColumnLanguageCode;
        /// The currency unit label when the amount is 1
        public DataColumn ColumnUnitLabelSingular;
        /// The currency unit label when the amount is &gt; 1
        public DataColumn ColumnUnitLabelPlural;
        /// This is needed to determine the gender in some languages.
        public DataColumn ColumnSpecialCode;
        /// Describes what to do with the decimal when representing it as text.  Not to display, display as text or as a numeric
        public DataColumn ColumnDecimalOptions;
        /// The currency decimal label when the amount is 1
        public DataColumn ColumnDecimalLabelSingular;
        /// The currency decimal label when the amount is &gt; 1
        public DataColumn ColumnDecimalLabelPlural;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_currency_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("p_language_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_unit_label_singular_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_unit_label_plural_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_special_code_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_decimal_options_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_decimal_label_singular_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_decimal_label_plural_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnCurrencyCode = this.Columns["a_currency_code_c"];
            this.ColumnLanguageCode = this.Columns["p_language_code_c"];
            this.ColumnUnitLabelSingular = this.Columns["a_unit_label_singular_c"];
            this.ColumnUnitLabelPlural = this.Columns["a_unit_label_plural_c"];
            this.ColumnSpecialCode = this.Columns["a_special_code_c"];
            this.ColumnDecimalOptions = this.Columns["a_decimal_options_c"];
            this.ColumnDecimalLabelSingular = this.Columns["a_decimal_label_singular_c"];
            this.ColumnDecimalLabelPlural = this.Columns["a_decimal_label_plural_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[2] {
                    ColumnCurrencyCode,ColumnLanguageCode};
        }

        /// Access a typed row by index
        public ACurrencyLanguageRow this[int i]
        {
            get
            {
                return ((ACurrencyLanguageRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public ACurrencyLanguageRow NewRowTyped(bool AWithDefaultValues)
        {
            ACurrencyLanguageRow ret = ((ACurrencyLanguageRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public ACurrencyLanguageRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new ACurrencyLanguageRow(builder);
        }

        /// get typed set of changes
        public ACurrencyLanguageTable GetChangesTyped()
        {
            return ((ACurrencyLanguageTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "ACurrencyLanguage";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_currency_language";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetCurrencyCodeDBName()
        {
            return "a_currency_code_c";
        }

        /// get character length for column
        public static short GetCurrencyCodeLength()
        {
            return 16;
        }

        /// get the name of the field in the database for this column
        public static string GetLanguageCodeDBName()
        {
            return "p_language_code_c";
        }

        /// get character length for column
        public static short GetLanguageCodeLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetUnitLabelSingularDBName()
        {
            return "a_unit_label_singular_c";
        }

        /// get character length for column
        public static short GetUnitLabelSingularLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetUnitLabelPluralDBName()
        {
            return "a_unit_label_plural_c";
        }

        /// get character length for column
        public static short GetUnitLabelPluralLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetSpecialCodeDBName()
        {
            return "a_special_code_c";
        }

        /// get character length for column
        public static short GetSpecialCodeLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDecimalOptionsDBName()
        {
            return "a_decimal_options_c";
        }

        /// get character length for column
        public static short GetDecimalOptionsLength()
        {
            return 24;
        }

        /// get the name of the field in the database for this column
        public static string GetDecimalLabelSingularDBName()
        {
            return "a_decimal_label_singular_c";
        }

        /// get character length for column
        public static short GetDecimalLabelSingularLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDecimalLabelPluralDBName()
        {
            return "a_decimal_label_plural_c";
        }

        /// get character length for column
        public static short GetDecimalLabelPluralLength()
        {
            return 32;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Describes what is to be displayed for a currency and language combination when displaying the amount as text.
    [Serializable()]
    public class ACurrencyLanguageRow : System.Data.DataRow
    {
        private ACurrencyLanguageTable myTable;

        /// Constructor
        public ACurrencyLanguageRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((ACurrencyLanguageTable)(this.Table));
        }

        /// This defines which currency is being used
        public String CurrencyCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCurrencyCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCurrencyCode)
                            || (((String)(this[this.myTable.ColumnCurrencyCode])) != value)))
                {
                    this[this.myTable.ColumnCurrencyCode] = value;
                }
            }
        }

        /// This is the code used to identify a language.
        public String LanguageCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnLanguageCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnLanguageCode)
                            || (((String)(this[this.myTable.ColumnLanguageCode])) != value)))
                {
                    this[this.myTable.ColumnLanguageCode] = value;
                }
            }
        }

        /// The currency unit label when the amount is 1
        public String UnitLabelSingular
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitLabelSingular.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitLabelSingular)
                            || (((String)(this[this.myTable.ColumnUnitLabelSingular])) != value)))
                {
                    this[this.myTable.ColumnUnitLabelSingular] = value;
                }
            }
        }

        /// The currency unit label when the amount is &gt; 1
        public String UnitLabelPlural
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnUnitLabelPlural.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnUnitLabelPlural)
                            || (((String)(this[this.myTable.ColumnUnitLabelPlural])) != value)))
                {
                    this[this.myTable.ColumnUnitLabelPlural] = value;
                }
            }
        }

        /// This is needed to determine the gender in some languages.
        public String SpecialCode
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnSpecialCode.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnSpecialCode)
                            || (((String)(this[this.myTable.ColumnSpecialCode])) != value)))
                {
                    this[this.myTable.ColumnSpecialCode] = value;
                }
            }
        }

        /// Describes what to do with the decimal when representing it as text.  Not to display, display as text or as a numeric
        public String DecimalOptions
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDecimalOptions.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDecimalOptions)
                            || (((String)(this[this.myTable.ColumnDecimalOptions])) != value)))
                {
                    this[this.myTable.ColumnDecimalOptions] = value;
                }
            }
        }

        /// The currency decimal label when the amount is 1
        public String DecimalLabelSingular
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDecimalLabelSingular.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDecimalLabelSingular)
                            || (((String)(this[this.myTable.ColumnDecimalLabelSingular])) != value)))
                {
                    this[this.myTable.ColumnDecimalLabelSingular] = value;
                }
            }
        }

        /// The currency decimal label when the amount is &gt; 1
        public String DecimalLabelPlural
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDecimalLabelPlural.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDecimalLabelPlural)
                            || (((String)(this[this.myTable.ColumnDecimalLabelPlural])) != value)))
                {
                    this[this.myTable.ColumnDecimalLabelPlural] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnCurrencyCode);
            this.SetNull(this.myTable.ColumnLanguageCode);
            this.SetNull(this.myTable.ColumnUnitLabelSingular);
            this.SetNull(this.myTable.ColumnUnitLabelPlural);
            this.SetNull(this.myTable.ColumnSpecialCode);
            this.SetNull(this.myTable.ColumnDecimalOptions);
            this.SetNull(this.myTable.ColumnDecimalLabelSingular);
            this.SetNull(this.myTable.ColumnDecimalLabelPlural);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsCurrencyCodeNull()
        {
            return this.IsNull(this.myTable.ColumnCurrencyCode);
        }

        /// assign NULL value
        public void SetCurrencyCodeNull()
        {
            this.SetNull(this.myTable.ColumnCurrencyCode);
        }

        /// test for NULL value
        public bool IsLanguageCodeNull()
        {
            return this.IsNull(this.myTable.ColumnLanguageCode);
        }

        /// assign NULL value
        public void SetLanguageCodeNull()
        {
            this.SetNull(this.myTable.ColumnLanguageCode);
        }

        /// test for NULL value
        public bool IsUnitLabelSingularNull()
        {
            return this.IsNull(this.myTable.ColumnUnitLabelSingular);
        }

        /// assign NULL value
        public void SetUnitLabelSingularNull()
        {
            this.SetNull(this.myTable.ColumnUnitLabelSingular);
        }

        /// test for NULL value
        public bool IsUnitLabelPluralNull()
        {
            return this.IsNull(this.myTable.ColumnUnitLabelPlural);
        }

        /// assign NULL value
        public void SetUnitLabelPluralNull()
        {
            this.SetNull(this.myTable.ColumnUnitLabelPlural);
        }

        /// test for NULL value
        public bool IsSpecialCodeNull()
        {
            return this.IsNull(this.myTable.ColumnSpecialCode);
        }

        /// assign NULL value
        public void SetSpecialCodeNull()
        {
            this.SetNull(this.myTable.ColumnSpecialCode);
        }

        /// test for NULL value
        public bool IsDecimalOptionsNull()
        {
            return this.IsNull(this.myTable.ColumnDecimalOptions);
        }

        /// assign NULL value
        public void SetDecimalOptionsNull()
        {
            this.SetNull(this.myTable.ColumnDecimalOptions);
        }

        /// test for NULL value
        public bool IsDecimalLabelSingularNull()
        {
            return this.IsNull(this.myTable.ColumnDecimalLabelSingular);
        }

        /// assign NULL value
        public void SetDecimalLabelSingularNull()
        {
            this.SetNull(this.myTable.ColumnDecimalLabelSingular);
        }

        /// test for NULL value
        public bool IsDecimalLabelPluralNull()
        {
            return this.IsNull(this.myTable.ColumnDecimalLabelPlural);
        }

        /// assign NULL value
        public void SetDecimalLabelPluralNull()
        {
            this.SetNull(this.myTable.ColumnDecimalLabelPlural);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }

    /// Lookup table for Key Focus Areas
    [Serializable()]
    public class AKeyFocusAreaTable : TTypedDataTable
    {
        /// TableId for Ict.Common.Data generic functions
        public static short TableId = 300;
        /// used for generic TTypedDataTable functions
        public static short ColumnKeyFocusAreaId = 0;
        /// used for generic TTypedDataTable functions
        public static short ColumnKeyFocusAreaCommentId = 1;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateCreatedId = 2;
        /// used for generic TTypedDataTable functions
        public static short ColumnCreatedById = 3;
        /// used for generic TTypedDataTable functions
        public static short ColumnDateModifiedId = 4;
        /// used for generic TTypedDataTable functions
        public static short ColumnModifiedById = 5;
        /// used for generic TTypedDataTable functions
        public static short ColumnModificationIdId = 6;

        private static bool FInitInfoValues = InitInfoValues();
        private static bool InitInfoValues()
        {
            TableInfo.Add(TableId, new TTypedTableInfo(TableId, "AKeyFocusArea", "a_key_focus_area",
                new TTypedColumnInfo[] {
                    new TTypedColumnInfo(0, "KeyFocusArea", "a_key_focus_area_c", "Key Focus Area", OdbcType.VarChar, 40, true),
                    new TTypedColumnInfo(1, "KeyFocusAreaComment", "a_key_focus_area_comment_c", "Comment", OdbcType.VarChar, 400, false),
                    new TTypedColumnInfo(2, "DateCreated", "s_date_created_d", "Created Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(3, "CreatedBy", "s_created_by_c", "Created By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(4, "DateModified", "s_date_modified_d", "Modified Date", OdbcType.Date, -1, false),
                    new TTypedColumnInfo(5, "ModifiedBy", "s_modified_by_c", "Modified By", OdbcType.VarChar, 20, false),
                    new TTypedColumnInfo(6, "ModificationId", "s_modification_id_c", "", OdbcType.VarChar, 150, false)
                },
                new int[] {
                    0
                }));
            return true;
        }

        /// constructor
        public AKeyFocusAreaTable() :
                base("AKeyFocusArea")
        {
        }

        /// constructor
        public AKeyFocusAreaTable(string ATablename) :
                base(ATablename)
        {
        }

        /// constructor for serialization
        public AKeyFocusAreaTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
        {
        }

        /// Name of Key Focus Area
        public DataColumn ColumnKeyFocusArea;
        /// Comment
        public DataColumn ColumnKeyFocusAreaComment;
        /// The date the record was created.
        public DataColumn ColumnDateCreated;
        /// User ID of who created this record.
        public DataColumn ColumnCreatedBy;
        /// The date the record was modified.
        public DataColumn ColumnDateModified;
        /// User ID of who last modified this record.
        public DataColumn ColumnModifiedBy;
        /// This identifies the current version of the record.
        public DataColumn ColumnModificationId;

        /// create the columns
        protected override void InitClass()
        {
            this.Columns.Add(new System.Data.DataColumn("a_key_focus_area_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("a_key_focus_area_comment_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_created_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_created_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_date_modified_d", typeof(System.DateTime)));
            this.Columns.Add(new System.Data.DataColumn("s_modified_by_c", typeof(String)));
            this.Columns.Add(new System.Data.DataColumn("s_modification_id_c", typeof(String)));
        }

        /// assign columns to properties, set primary key
        public override void InitVars()
        {
            this.ColumnKeyFocusArea = this.Columns["a_key_focus_area_c"];
            this.ColumnKeyFocusAreaComment = this.Columns["a_key_focus_area_comment_c"];
            this.ColumnDateCreated = this.Columns["s_date_created_d"];
            this.ColumnCreatedBy = this.Columns["s_created_by_c"];
            this.ColumnDateModified = this.Columns["s_date_modified_d"];
            this.ColumnModifiedBy = this.Columns["s_modified_by_c"];
            this.ColumnModificationId = this.Columns["s_modification_id_c"];
            this.PrimaryKey = new System.Data.DataColumn[1] {
                    ColumnKeyFocusArea};
        }

        /// Access a typed row by index
        public AKeyFocusAreaRow this[int i]
        {
            get
            {
                return ((AKeyFocusAreaRow)(this.Rows[i]));
            }
        }

        /// create a new typed row
        public AKeyFocusAreaRow NewRowTyped(bool AWithDefaultValues)
        {
            AKeyFocusAreaRow ret = ((AKeyFocusAreaRow)(this.NewRow()));
            if ((AWithDefaultValues == true))
            {
                ret.InitValues();
            }
            return ret;
        }

        /// create a new typed row, always with default values
        public AKeyFocusAreaRow NewRowTyped()
        {
            return this.NewRowTyped(true);
        }

        /// new typed row using DataRowBuilder
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AKeyFocusAreaRow(builder);
        }

        /// get typed set of changes
        public AKeyFocusAreaTable GetChangesTyped()
        {
            return ((AKeyFocusAreaTable)(base.GetChangesTypedInternal()));
        }

        /// return the CamelCase name of the table
        public static string GetTableName()
        {
            return "AKeyFocusArea";
        }

        /// return the name of the table as it is used in the database
        public static string GetTableDBName()
        {
            return "a_key_focus_area";
        }

        /// get an odbc parameter for the given column
        public override OdbcParameter CreateOdbcParameter(Int32 AColumnNr)
        {
            return CreateOdbcParameter(TableId, AColumnNr);
        }

        /// get the name of the field in the database for this column
        public static string GetKeyFocusAreaDBName()
        {
            return "a_key_focus_area_c";
        }

        /// get character length for column
        public static short GetKeyFocusAreaLength()
        {
            return 40;
        }

        /// get the name of the field in the database for this column
        public static string GetKeyFocusAreaCommentDBName()
        {
            return "a_key_focus_area_comment_c";
        }

        /// get character length for column
        public static short GetKeyFocusAreaCommentLength()
        {
            return 400;
        }

        /// get the name of the field in the database for this column
        public static string GetDateCreatedDBName()
        {
            return "s_date_created_d";
        }

        /// get character length for column
        public static short GetDateCreatedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetCreatedByDBName()
        {
            return "s_created_by_c";
        }

        /// get character length for column
        public static short GetCreatedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetDateModifiedDBName()
        {
            return "s_date_modified_d";
        }

        /// get character length for column
        public static short GetDateModifiedLength()
        {
            return -1;
        }

        /// get the name of the field in the database for this column
        public static string GetModifiedByDBName()
        {
            return "s_modified_by_c";
        }

        /// get character length for column
        public static short GetModifiedByLength()
        {
            return 20;
        }

        /// get the name of the field in the database for this column
        public static string GetModificationIdDBName()
        {
            return "s_modification_id_c";
        }

        /// get character length for column
        public static short GetModificationIdLength()
        {
            return 150;
        }

    }

    /// Lookup table for Key Focus Areas
    [Serializable()]
    public class AKeyFocusAreaRow : System.Data.DataRow
    {
        private AKeyFocusAreaTable myTable;

        /// Constructor
        public AKeyFocusAreaRow(System.Data.DataRowBuilder rb) :
                base(rb)
        {
            this.myTable = ((AKeyFocusAreaTable)(this.Table));
        }

        /// Name of Key Focus Area
        public String KeyFocusArea
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyFocusArea.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyFocusArea)
                            || (((String)(this[this.myTable.ColumnKeyFocusArea])) != value)))
                {
                    this[this.myTable.ColumnKeyFocusArea] = value;
                }
            }
        }

        /// Comment
        public String KeyFocusAreaComment
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnKeyFocusAreaComment.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnKeyFocusAreaComment)
                            || (((String)(this[this.myTable.ColumnKeyFocusAreaComment])) != value)))
                {
                    this[this.myTable.ColumnKeyFocusAreaComment] = value;
                }
            }
        }

        /// The date the record was created.
        public System.DateTime? DateCreated
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateCreated.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateCreated)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateCreated])) != value)))
                {
                    this[this.myTable.ColumnDateCreated] = value;
                }
            }
        }

        /// User ID of who created this record.
        public String CreatedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnCreatedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnCreatedBy)
                            || (((String)(this[this.myTable.ColumnCreatedBy])) != value)))
                {
                    this[this.myTable.ColumnCreatedBy] = value;
                }
            }
        }

        /// The date the record was modified.
        public System.DateTime? DateModified
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnDateModified.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return null;
                }
                else
                {
                    return ((System.DateTime?)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnDateModified)
                            || (((System.DateTime?)(this[this.myTable.ColumnDateModified])) != value)))
                {
                    this[this.myTable.ColumnDateModified] = value;
                }
            }
        }

        /// User ID of who last modified this record.
        public String ModifiedBy
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModifiedBy.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModifiedBy)
                            || (((String)(this[this.myTable.ColumnModifiedBy])) != value)))
                {
                    this[this.myTable.ColumnModifiedBy] = value;
                }
            }
        }

        /// This identifies the current version of the record.
        public String ModificationId
        {
            get
            {
                object ret;
                ret = this[this.myTable.ColumnModificationId.Ordinal];
                if ((ret == System.DBNull.Value))
                {
                    return String.Empty;
                }
                else
                {
                    return ((String)(ret));
                }
            }
            set
            {
                if ((this.IsNull(this.myTable.ColumnModificationId)
                            || (((String)(this[this.myTable.ColumnModificationId])) != value)))
                {
                    this[this.myTable.ColumnModificationId] = value;
                }
            }
        }

        /// set default values
        public virtual void InitValues()
        {
            this.SetNull(this.myTable.ColumnKeyFocusArea);
            this.SetNull(this.myTable.ColumnKeyFocusAreaComment);
            this[this.myTable.ColumnDateCreated.Ordinal] = DateTime.Today;
            this.SetNull(this.myTable.ColumnCreatedBy);
            this.SetNull(this.myTable.ColumnDateModified);
            this.SetNull(this.myTable.ColumnModifiedBy);
            this.SetNull(this.myTable.ColumnModificationId);
        }

        /// test for NULL value
        public bool IsKeyFocusAreaNull()
        {
            return this.IsNull(this.myTable.ColumnKeyFocusArea);
        }

        /// assign NULL value
        public void SetKeyFocusAreaNull()
        {
            this.SetNull(this.myTable.ColumnKeyFocusArea);
        }

        /// test for NULL value
        public bool IsKeyFocusAreaCommentNull()
        {
            return this.IsNull(this.myTable.ColumnKeyFocusAreaComment);
        }

        /// assign NULL value
        public void SetKeyFocusAreaCommentNull()
        {
            this.SetNull(this.myTable.ColumnKeyFocusAreaComment);
        }

        /// test for NULL value
        public bool IsDateCreatedNull()
        {
            return this.IsNull(this.myTable.ColumnDateCreated);
        }

        /// assign NULL value
        public void SetDateCreatedNull()
        {
            this.SetNull(this.myTable.ColumnDateCreated);
        }

        /// test for NULL value
        public bool IsCreatedByNull()
        {
            return this.IsNull(this.myTable.ColumnCreatedBy);
        }

        /// assign NULL value
        public void SetCreatedByNull()
        {
            this.SetNull(this.myTable.ColumnCreatedBy);
        }

        /// test for NULL value
        public bool IsDateModifiedNull()
        {
            return this.IsNull(this.myTable.ColumnDateModified);
        }

        /// assign NULL value
        public void SetDateModifiedNull()
        {
            this.SetNull(this.myTable.ColumnDateModified);
        }

        /// test for NULL value
        public bool IsModifiedByNull()
        {
            return this.IsNull(this.myTable.ColumnModifiedBy);
        }

        /// assign NULL value
        public void SetModifiedByNull()
        {
            this.SetNull(this.myTable.ColumnModifiedBy);
        }

        /// test for NULL value
        public bool IsModificationIdNull()
        {
            return this.IsNull(this.myTable.ColumnModificationId);
        }

        /// assign NULL value
        public void SetModificationIdNull()
        {
            this.SetNull(this.myTable.ColumnModificationId);
        }
    }
}
