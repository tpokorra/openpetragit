<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Petra.Client.App.Core</name>
    </assembly>
    <members>
        <member name="T:Ict.Petra.Client.App.Core.TDataCache">
             <summary>
             Provides a client-side cache for DataTables of any size.
            
             Classes or GUI controls that need access to such data just call the
             GetCacheable... procedures to get access to the corresponding DataTable.
            
             The GetCacheable... function figures out whether this particular DataTable
             is already in the Client-side cache or not. If it is already there, it just
             gives back a reference to the Client-side cache DataSet. If it isn't, it
             checks whether it available from a file and whether this file contains
             up-to-date data. If it isn't available from file or the file is out of date,
             the DataTable is retrieved once from the Petra Server and persisted in a file
             before giving back a reference to the Client-side cache DataSet.
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TDataCache.CACHEFILESDIR">
            <summary>Subdirectory under the Folder that .NET determines to be the 'IsolatedStorage' folder for the current User of the Operating System</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TDataCache.CACHEABLEDT_FILE_EXTENSION">
            <summary>File Extension for Cacheable DataTables that are persisted in a file</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TDataCache.UCacheableTablesManager">
            <summary>Holds reference to an instance of TCacheableTablesManager (for caching of DataTables)</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TDataCache.UIsolatedStorageFile">
            <summary>Holds reference to an instance of the Isolated Storage file system</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.ReloadCacheTable(System.String)">
             <summary>
             Causes the TDataCache to reload the specified Cache DataTable the next time
             it is accessed.
            
             </summary>
             <param name="ACacheableTableName">Name of the Cache Table to be reloaded
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.ReloadCacheTable(System.String,System.Object)">
             <summary>
             Causes the TDataCache to reload the specified Cache Table immediately with
             an applied FilterCriteria.
            
             </summary>
             <param name="ACacheableTableName">Name of the Cache Table to be reloaded</param>
             <param name="AFilterCriteria">An Object containing the filter criteria value that is
             used by the server-side function that retrieves the data for the cacheable
             DataTable
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.GetCacheableDataTableFileForReading(System.String)">
             <summary>
             Returns an opened Stream for a cached DataTable that was previously
             serialized to binary file.
            
             @comment Uses the '.NET IsolatedStorage' to load the DataTable.
            
             </summary>
             <param name="ATableName">Name of the DataTable that was previously serialized to a
             file
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.GetCacheableDataTableFileForWriting(System.String)">
             <summary>
             Returns an opened Stream for a cached DataTable that should be serialized to
             a binary file.
            
             If the file doesn't exist yet, it is created automatically.
            
             @comment Uses the '.NET IsolatedStorage' to load the DataTable. The
             IsolatedStorageScope is 'Roaming', so the files that are written using this
             function will be stored in the Windows User's Roaming Profile (and are
             therfore available on every Windows Workstation that the user logs on to
             in the same Domain)!
            
             </summary>
             <param name="ATableName">Name of the DataTable that should be serialized to a file
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.GetCacheableDataTableFromPetraServer(System.String,System.String,System.Type@)">
             <summary>
             Makes the actual PetraServer method call for the retrieval of a cacheable
             DataTable.
            
             </summary>
             <param name="ACacheableTableName">description1</param>
             <param name="AHashCode">Hash of the cacheable DataTable in the client-side cache, or
             '' if it isn't in the client-side cache yet (in this case the cacheable</param>
             <param name="ACacheableTableSystemType"></param>
             <returns>)</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.GetCacheableDataTableFromPetraServer(System.String,System.String,System.Object,System.Type@)">
             <summary>
             Makes the actual PetraServer method call for the retrieval of a cacheable
             DataTable.
            
             </summary>
             <param name="ACacheableTableName">description1</param>
             <param name="AHashCode">Hash of the cacheable DataTable in the client-side cache, or
             '' if it isn't in the client-side cache yet (in this case the cacheable
             DataTable is always returned) (see @return)</param>
             <param name="AFilterCriteria">An Object containing the filter criteria value that is
             used by the server-side function that retrieves the data for the cacheable
             DataTable</param>
             <param name="ACacheableTableSystemType"></param>
             <returns>)
             If the Hash that is passed in in AHashCode doesn't fit the
             Hash that the server-side CacheableTablesManager has for this cacheable
             DataTable, the specified DataTable is returned, otherwise nil.
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.GetCacheableDataTableFromCache(System.String)">
             <summary>
             Returns the chosen DataTable from the Client-side Cache.
            
             If the DataTable is not available on the Client side, this procedure checks
             whether it available from a file and whether this file contains up-to-date
             data. If it isn't available from file or the file is out of date, the
             DataTable is retrieved once from the Petra Server and persisted in a file
             (as Binary Serialized DataTable) before giving it to the caller.
             </summary>
             <param name="ACacheableTableName">The cached DataTable that should be returned in the
             DataTable</param>
             <returns>Chosen DataTable.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.GetCacheableDataTableFromCache(System.String,System.String,System.Object,System.Type@)">
             <summary>
             Returns the chosen DataTable from the Client-side Cache.
            
             If the DataTable is not available on the Client side, this procedure checks
             whether it available from a file and whether this file contains up-to-date
             data. If it isn't available from file or the file is out of date, the
             DataTable is retrieved once from the Petra Server and persisted in a file
             (as Binary Serialized DataTable) before giving it to the caller.
             </summary>
             <remarks>
             This overload needs to be used for cacheable DataTables that are
             returned not containing all DataRows that are available in the DB, but
             only some DataRows based on specified criteria (eg. some cacheable Finance
             DataTables).
             </remarks>
             <param name="ACacheableTableName">The cached DataTable that should be returned in the
             DataSet</param>
             <param name="AFilterCriteriaString">A criteria string that can be passed to the
             'Select' method of a DataTable</param>
             <param name="AFilterCriteria">An Object containing the filter criteria value that is
             used by the server-side function that retrieves the data for the cacheable
             DataTable</param>
             <param name="ADataTableType"> The Type of the DataTable (useful in case it's a
             Typed DataTable).</param>
             <returns>Chosen DataTable.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.GetSpecificallyFilteredCacheableDataTableFromCache(System.String,System.String,System.Object,System.Type@)">
             <summary>
             Returns the chosen DataTable from the Client-side Cache.
            
             If the DataTable is not available on the Client side, this procedure checks
             whether it available from a file and whether this file contains up-to-date
             data. If it isn't available from file or the file is out of date, the
             DataTable is retrieved once from the Petra Server and persisted in a file
             (as Binary Serialized DataTable) before giving it to the caller.
             </summary>
             <remarks>
             This overload needs to be used for cacheable DataTables that are
             returned not containing all DataRows that are available in the DB, but
             only some DataRows based on specified criteria (eg. some cacheable Finance
             DataTables). Set the <paramref name="ASpecificFilter" /> to a supported value to
             get the desired filtering.
             </remarks>
             <param name="ACacheableTableName">The cached DataTable that should be returned in the
             DataTable</param>
             <param name="ASpecificFilter">Hard-coded string that directs the filtering and the use of
             <paramref name="AFilterCriteria" />.</param>
             <param name="AFilterCriteria">An Object containing the filter criteria value that is
             used by the server-side function that retrieves the data for the cacheable DataTable.</param>
             <param name="ADataTableType"> The Type of the DataTable (useful in case it's a
             Typed DataTable).</param>
             <returns>Chosen DataTable, filtered as specified.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.SaveChangedCacheableDataTableToPetraServer(System.String,Ict.Common.Data.TTypedDataTable@,Ict.Common.Verification.TVerificationResultCollection@)">
            <summary>
            Saves changes of that were made to a specific Cachable DataTable.
            </summary>
            <remarks>
            Uses Ict.Petra.Shared.CacheableTablesManager to store the DataTable
            once its saved successfully to the DB, which in turn tells all other Clients
            that they need to reload this Cacheable DataTable the next time something in the
            Client accesses it.
            </remarks>
            <param name="ACacheableTableName">Name of the Cacheable DataTable with changes.</param>
            <param name="AChangedCacheableDT">Cacheable DataTable with changes. The whole DataTable needs
            to be submitted, not just changes to it!</param>
            <param name="AVerificationResult">Will be filled with any
            VerificationResults if errors occur.</param>
            <returns>Status of the operation.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.SaveSpecificallyFilteredCacheableDataTableToPetraServer(System.String,Ict.Common.Data.TTypedDataTable@,System.Object,Ict.Common.Verification.TVerificationResultCollection@)">
            <summary>
            Saves changes of that were made to a specific Cachable DataTable.
            </summary>
            <remarks>
            Uses Ict.Petra.Shared.CacheableTablesManager to store the DataTable
            once its saved successfully to the DB, which in turn tells all other Clients
            that they need to reload this Cacheable DataTable the next time something in the
            Client accesses it.
            </remarks>
            <param name="ACacheableTableName">Name of the Cacheable DataTable with changes.</param>
            <param name="AChangedCacheableDT">Cacheable DataTable with changes. The whole DataTable needs
            to be submitted, not just changes to it!</param>
            <param name="AFilterCriteria">An Object containing the filter criteria value that is
            used by the server-side function that retrieves the data for the cacheable
            DataTable. (This is needed for the re-loading of the DataTable into the server-side
            Cache Manager after saving was successful.)</param>
            <param name="AVerificationResult">Will be filled with any
            VerificationResults if errors occur.</param>
            <returns>Status of the operation.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.LoadCacheableDataTableFromFile(System.String)">
             <summary>
             Deserializes a cacheable DataTable from a binary file on disk into a
             DataTable.
            
             </summary>
             <param name="ATableName">File name of the cacheable DataTable that should be loaded</param>
             <returns>Deserialized DataTable
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.SaveCacheableDataTableToFile(System.Data.DataTable)">
             <summary>
             Serialize a cached DataTable to a binary file on disk.
            
             </summary>
             <param name="ADataTable">DataTable that should be serialized to a file
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.ClearAllCaches">
            <summary>
            this should be called to reset all caches, for example when a new patch is installed
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TDataCache.TMCommon">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMCommon.GetCacheableCommonTable(Ict.Petra.Shared.MCommon.TCacheableCommonTablesEnum)">
             Returns the chosen DataTable for the Common Namespace from the Cache.
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @return Chosen DataTable
            
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TDataCache.TMPartner">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPartner.GetCacheablePartnerTable(Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum)">
             Returns the chosen DataTable for the Petra Partner Module, Partner Sub-Module
             from the
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @return Chosen DataTable
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPartner.GetCacheableSubscriptionsTable(Ict.Petra.Shared.MPartner.TCacheableSubscriptionsTablesEnum)">
             Returns the chosen DataTable for the Petra Partner Module, Subscriptions
             Sub-Module from the
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @return Chosen DataTable
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPartner.RefreshCacheableSubscriptionsTable(Ict.Petra.Shared.MPartner.TCacheableSubscriptionsTablesEnum)">
             Tells the PetraServer to reload the cacheable DataTable from the DB,
             refreshes the DataTable in the client-side Cache and saves it to a file.
            
             @param ACacheableTable The cached DataTable that should be reloaded from DB.
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPartner.GetCacheableMailingTable(Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum)">
             Returns the chosen DataTable for the Petra Partner Module, Mailing
             Sub-Module from the
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @return Chosen DataTable
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPartner.RefreshCacheableMailingTable(Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum)">
             Tells the PetraServer to reload the cacheable DataTable from the DB,
             refreshes the DataTable in the client-side Cache and saves it to a file.
            
             @param ACacheableTable The cached DataTable that should be reloaded from DB.
            
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TDataCache.TMFinance">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMFinance.GetCacheableFinanceTable(Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum)">
             Returns the chosen DataTable for the Petra Finance Module from the
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @return Chosen DataTable
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMFinance.GetCacheableFinanceTable(Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum,System.Int32)">
             Returns the chosen DataTable for the Petra Finance Module from the
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             This overload of GetCacheableFinanceTable also considers the Ledger Number,
             and only retrieves the rows based on the given Ledger Number.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @param ALedgerNumber The number of the current ledger that the data should be
             from
             @return Chosen DataTable
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMFinance.RefreshCacheableFinanceTable(Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum)">
             Tells the PetraServer to reload the cacheable DataTable from the DB,
             refreshes the DataTable in the client-side Cache and persists it to a file.
            
             @param ACacheableTable The cached DataTable that should be reloaded from DB.
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMFinance.RefreshCacheableFinanceTable(Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum,System.Int32)">
             Tells the PetraServer to reload the cacheable DataTable from the DB,
             refreshes the DataTable in the client-side Cache and persists it to a file.
            
             @param ACacheableTable The cached DataTable that should be reloaded from DB.
             @param ALedgerNumber The number of the current ledger that the data should be
             from
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMFinance.GetBasedOnLedger(Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum,System.String,System.Int32,System.Type@)">
             Get rows from a table that are based on a ledger; (e.g. Costcentres, Accounts)
             The cache will only retrieve data for the one ledger, and check the next time
             if the data is already there for another ledger
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @param ALedgerColumnDBName The name of the column in this table that has the
             ledger number
             @param ALedgerNumber The number of the current ledger that the data should be
             from
             @return The table in the cache with data from all ledgers requested till now
            
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TDataCache.TMPersonnel">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPersonnel.GetCacheablePersonnelTable(Ict.Petra.Shared.MPersonnel.TCacheablePersonTablesEnum)">
             Returns the chosen DataTable for the Petra Partner Module, Partner Sub-Module
             from the
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @return Chosen DataTable
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPersonnel.RefreshCacheablePersonnelTable(Ict.Petra.Shared.MPersonnel.TCacheablePersonTablesEnum)">
             Tells the PetraServer to reload the cacheable DataTable from the DB,
             refreshes the DataTable in the client-side Cache and saves it to a file.
            
             @param ACacheableTable The cached DataTable that should be reloaded from DB.
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPersonnel.GetCacheableUnitsTable(Ict.Petra.Shared.MPersonnel.TCacheableUnitTablesEnum)">
             Returns the chosen DataTable for the Petra Partner Module, Subscriptions
             Sub-Module from the
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @return Chosen DataTable
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMPersonnel.RefreshCacheableUnitsTable(Ict.Petra.Shared.MPersonnel.TCacheableUnitTablesEnum)">
             Tells the PetraServer to reload the cacheable DataTable from the DB,
             refreshes the DataTable in the client-side Cache and saves it to a file.
            
             @param ACacheableTable The cached DataTable that should be reloaded from DB.
            
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TDataCache.TMSysMan">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMSysMan.GetCacheableSysManTable(Ict.Petra.Shared.MSysMan.TCacheableSysManTablesEnum)">
             Returns the chosen DataTable for the Petra SysMan Module
            
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ACacheableTable The cached DataTable that should be returned in the
             DataSet
             @return Chosen DataTable
            
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TDataCache.TMSysMan.RefreshCacheableSysManTable(Ict.Petra.Shared.MSysMan.TCacheableSysManTablesEnum)">
             Tells the PetraServer to reload the cacheable DataTable from the DB,
             refreshes the DataTable in the client-side Cache and saves it to a file.
            
             @param ACacheableTable The cached DataTable that should be reloaded from DB.
            
        </member>
        <member name="T:Ict.Petra.Client.App.Core.Cache_Lookup">
            <summary>
            Provides Methods that perform a lookup of a Code in a Cacheable DataTable
            and return the Description of that code.
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.Cache_Lookup.TMCommon">
            <summary>
            Common Lookups.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.Cache_Lookup.TMCommon.RefreshCacheableCommonTable(Ict.Petra.Shared.MCommon.TCacheableCommonTablesEnum)">
            <summary>
            Refreshes the internal cached DataTable from the DataCache.
            </summary>
            <remarks>Called by TDataCache if the DataTable was
            refreshed on the Serverside.</remarks>
            <param name="ACacheableTable"></param>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.Cache_Lookup.TMCommon.DetermineCountryNameFromCode(System.String)">
            <summary>
            Determines full Country Name from Country Code.
            </summary>
            <param name="ACountryCode">Country Code to lookup</param>
            <returns>Full Country Name for Country Code; if Country Code isn't found in
            the lookup table, the Country Code is returned.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.Cache_Lookup.TMCommon.DetermineLanguageNameFromCode(System.String)">
            <summary>
            Determines full Language Name from Language Code.
            </summary>
            <param name="ALanguageCode">Language Code to lookup</param>
            <returns>Full Language Name for Country Code; if Language Code isn't found in
            the lookup table, the Language Code is returned.</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.ActionEventArgs">
            <summary>
            EventArgs for Form Actions
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.ActionEventArgs.Enabled">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.ActionEventArgs.ActionName">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.ActionEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="AActionName"></param>
            <param name="AEnabled"></param>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TFrmUnhandledExceptionDetailsDialog">
            auto generated: Error Details - OpenPetra
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TFrmUnhandledExceptionDetailsDialog.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TFrmUnhandledExceptionDetailsDialog.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TFrmUnhandledExceptionDetailsDialog.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TFrmUnhandledExceptionDetailsDialog.#ctor(System.IntPtr)">
            constructor
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TFrmUnhandledExceptionDetailsDialog.ActionEnabledEvent(System.Object,Ict.Petra.Client.App.Core.ActionEventArgs)">
            auto generated
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TFrmUnhandledExceptionDetailsDialog.ErrorDetails">
            <summary>Error Details shown on this screen.</summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TUnhandledExceptionForm">
             <summary>
             Dialog for displaying information to the user that a severe error occured in
             the PetraClient application.
             </summary>
             <description>
             Mimics Windows' own 'application crash window', but allows
               (1) different texts to be displayed (eg. depending on the situation, the
                   error, etc.)
               (2) different 'OK' button text (if it is a fatal error, the Text is changed
                   to 'Close Petra')
               (3) different Icons to be displayed (eg. depending on the situation, the
                   error, etc.)
               (4) opening a Error Detail screen that shows the Exception text and allows
                   copying of that to the Clipboard
               (5) e-mailing the Exception text to the Petra Team using the 'Bugreport'
                   feature (only enabled if Progress 4GL didn't crash)
            
             This Form is intended to be called from Ict.Petra.Client.App.Core.ExceptionHandling.
             </description>
            <summary>
            Description of UnhandledExceptionDialog_Designer.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
            <returns>void</returns>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.TheException">
            <summary>The Exception that is handled by this screen.</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.NonRecoverable">
            <summary>True if the Exception handled by this screen is non-recoverable, false if it is recoverable.</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.FormTitle">
            <summary>Set this to set a non-default Title for this Form.</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.HeadingText">
            <summary>Set this to set a non-default heading.</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.Info1Text">
            <summary>Set this to set a non-default Info 1 text (shown in the header part of the Form).</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.Info2Text">
            <summary>Set this to set a non-default Info 2 text (shown in the lower part of the Form).</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TUnhandledExceptionForm.Info3Text">
            <summary>Set this to set a non-default Info 3 text (shown in the lower part of the Form).</summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TUserDefaults">
             <summary>
             Loads and saves all user-customisable defaults.
             The TUserDefaults class gives access to all user-customisable defaults.
            
             @Comment The User Defaults are stored in the Database (s_user_defaults table)
               on the Server.
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PETRA_DISPLAYMODULEBACKGRDPICTURE">
            <summary>
            ------------------------------------------------------------------------------
            Petra General User Default Constants
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FINDOPTIONS_CRITERIAFIELDSLEFT">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FINDOPTIONS_CRITERIAFIELDSRIGHT">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FINDOPTIONS_NUMBEROFRESULTROWS">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FINDOPTIONS_SHOWMATCHBUTTONS">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FINDOPTIONS_FIELDSDEFAULTMATCHVALUES">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FINDOPTIONS_EXACTPARTNERKEYMATCHSEARCH">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FIND_SPLITPOS_FORM">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FIND_SPLITPOS_CRITERIA">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FIND_SPLITPOS_FINDBYDETAILS">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FIND_SPLITPOS_FINDBYDETAILS_CRIT">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FIND_PARTNERDETAILS_OPEN">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FIND_PARTNERTASKS_OPEN">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FIND_CRIT_FINDCURRADDRONLY">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_FIND_CRIT_PARTNERSTATUS">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_EDIT_UPPERPARTCOLLAPSED">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_EDIT_MATCHSETTINGS_LEFT">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_EDIT_MATCHSETTINGS_RIGHT">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_ACQUISITIONCODE">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_LANGUAGECODE">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_TIPS">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.PARTNER_EXTRAC_LAST_EXTRACT_NAME">
            <summary>Name of the last created extract </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.FINANCE_REPORTING_SHOWDIFFFINANCIALYEARSELECTION">
            <summary>
            ------------------------------------------------------------------------------
            Reporting User Default Constants
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.USERDEFAULT_LASTPARTNERMAILROOM">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.USERDEFAULT_LASTPERSONPERSONNEL">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.USERDEFAULT_LASTUNITPERSONNEL">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.USERDEFAULT_LASTPERSONCONFERENCE">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.GUserDefaults">
            <summary>this cannot go into Ict.Petra.Client.App.Core.Shared, because this would give a circular reference; this file already requires Ict.Petra.Client.App.Core.Shared.UserInfo</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.SaveChangedUserDefault(System.String)">
             <summary>
             Saves one specific changed User Default.
            
             </summary>
             <param name="AKey">The Key of the User Default that should get saved.</param>
             <returns>true if successful, false if not.
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.SaveChangedUserDefaults">
             <summary>
             Saves all changed User Defaults.
            
             </summary>
             <returns>true if successful, false if not.
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.RefreshCachedUserDefault(System.String,System.String,System.String)">
             <summary>
             Refreshes a UserDefault in the local Cache that has been updated on the
             Server side or in the DB.
            
             @comment This is needed for the case where several PetraClient instances of
             the same Petra User are running and they are updating the same UserDefault.
             On detecting such a 'collision', the PetraServer queues a ClientTask to
             refresh the specific UserDefault in the local Cache, and the
             TClientTaskInstance.Execute background thread then invokes this function.
            
             </summary>
             <param name="AChangedUserDefaultCode">UserDefault Code to update</param>
             <param name="AChangedUserDefaultValue">Changed UserDefault Value</param>
             <param name="AChangedUserDefaultModId">ModificationID of the changed UserDefault
             DataRow
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.ReloadCachedUserDefaults">
             <summary>
             Reload the User Defaults.
             Causes TUserDefaults to reload the cached User Defaults Table
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.ReloadCachedUserDefaultsOnServer">
             <summary>
             Reload the User Defaults if called on the server.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.HasDefault(System.String)">
            <summary>
            Find out if a user default exists already.
            This is required where the default should be calculated otherwise
            (e.g. FINANCE_REPORTING_SHOWDIFFFINANCIALYEARSELECTION)
            </summary>
            <returns>true if a default with the given key already exists
            </returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetBooleanDefault(System.String,System.Boolean)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <param name="ADefault"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetBooleanDefault(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetCharDefault(System.String,System.Char)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <param name="ADefault"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetCharDefault(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetDoubleDefault(System.String,System.Double)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <param name="ADefault"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetDoubleDefault(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetInt16Default(System.String,System.Int16)">
             <summary>
             The following set of functions serve as shortcuts to get User Defaults of a
             specific type.
            
             </summary>
             <param name="AKey">The Key of the User Default that should get retrieved.</param>
             <param name="ADefault">The value that should be returned in case the Key is not (yet)
             in the User Defaults.
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetInt16Default(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetInt32Default(System.String,System.Int32)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <param name="ADefault"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetInt32Default(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetInt64Default(System.String,System.Int64)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <param name="ADefault"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetInt64Default(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetStringDefault(System.String,System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <param name="ADefault"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.GetStringDefault(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.SetDefault(System.String,System.Object)">
             <summary>
             Sets a User Default.
            
             </summary>
             <param name="AKey">The Key of the User Default that should get saved.</param>
             <param name="AValue">The value that should be stored. Note: This can be anything on
             which ToString can be called.
             </param>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TUserDefaults.NamedDefaults">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.NamedDefaults.WINDOW_POSITION_PREFIX">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TUserDefaults.NamedDefaults.WINDOW_POSITION_AND_SIZE_PREFIX">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.NamedDefaults.SetLastPartnerWorkedWith(System.Int64,Ict.Petra.Shared.TLastPartnerUse)">
            <summary>
            Updates and immediately saves the UserDefault for the 'Last Partner Used'.
            </summary>
            <param name="APartnerKey">Partner Key of the last used Partner</param>
            <param name="ALastPartnerUse">Specifies which 'Last Partner Used' setting should be
            updated
            </param>
            <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TUserDefaults.TInternal">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.TInternal.HasUserDefault(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.TInternal.GetUserDefault(System.String,System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <param name="ADefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.TInternal.GetUserDefault(System.String)">
            <summary>
            overload
            </summary>
            <param name="AKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserDefaults.TInternal.SetUserDefault(System.String,System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AKey"></param>
            <param name="AValue"></param>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TConnector">
            <summary>
            The TConnector class is responsible for opening a connection to the
            PetraServer's ClientManager and to retrieve Remoting Proxy objects for
            the Server-side .NET Remoting Sponsor and several other remoted objects from
            the PetraServer.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteServerConnection(System.String,Ict.Petra.Shared.Interfaces.IClientManagerInterface@)">
             <summary>
             Opens a .NET Remoting connection to the PetraServer's ClientManager.
            
             </summary>
             <param name="ConfigFile">File name of the .NET (Remoting) Configuration file</param>
             <param name="ARemote">.NET Remoting Proxy object for the ClientManager object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemotePollClientTasks(System.String,Ict.Petra.Shared.Interfaces.IPollClientTasksInterface@)">
             <summary>
             Retrieves a Remoting Proxy object for the Server-side TPollClientTasks object
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the Remoting Sponsor object</param>
             <param name="ARemote">.NET Remoting Proxy object for the Remoting Sponsor object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteTestObject(System.String,Ict.Petra.Shared.Interfaces.IRemoteFactory@)">
             <summary>
             Retrieves a Remoting Proxy object for a generic Server-side object factory
             (used only for development purposes)
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the generic Server-side object
             factory</param>
             <param name="ARemote">.NET Remoting Proxy object for the generic Server-side object
             factory
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteMCommonObject(System.String,Ict.Petra.Shared.Interfaces.MCommon.IMCommonNamespace@)">
             <summary>
             Retrieves a Remoting Proxy object for the Server-side MCommon namespace
            
             @comment The MCommon Namespace holds client-instantiable objects for the
             Petra Common Module.
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the MCommon namespace object</param>
             <param name="ARemote">.NET Remoting Proxy object for the MCommon namespace object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteMConferenceObject(System.String,Ict.Petra.Shared.Interfaces.MConference.IMConferenceNamespace@)">
             <summary>
             Retrieves a Remoting Proxy object for the Server-side MConference namespace
            
             @comment The MConferenceNamespace holds client-instantiable objects for the
             Petra Conference Module.
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the MConference namespace object</param>
             <param name="ARemote">.NET Remoting Proxy object for the MConference namespace object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteMPartnerObject(System.String,Ict.Petra.Shared.Interfaces.MPartner.IMPartnerNamespace@)">
             <summary>
             Retrieves a Remoting Proxy object for the Server-side MPartner namespace
            
             @comment The MPartner Namespace holds client-instantiable objects for the
             Petra Partner Module.
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the MPartner namespace object</param>
             <param name="ARemote">.NET Remoting Proxy object for the MPartner namespace object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteMPersonnelObject(System.String,Ict.Petra.Shared.Interfaces.MPersonnel.IMPersonnelNamespace@)">
             <summary>
             Retrieves a Remoting Proxy object for the Server-side MPersonnel namespace
            
             @comment The MPersonnel Namespace holds client-instantiable objects for the
             Petra Personnel Module.
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the MPersonnel namespace object</param>
             <param name="ARemote">.NET Remoting Proxy object for the MPersonnel namespace object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteMFinanceObject(System.String,Ict.Petra.Shared.Interfaces.MFinance.IMFinanceNamespace@)">
             <summary>
             Retrieves a Remoting Proxy object for the Server-side MFinance namespace
            
             @comment The MFinance Namespace holds client-instantiable objects for the
             Petra Finance Module.
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the MFinance namespace object</param>
             <param name="ARemote">.NET Remoting Proxy object for the MFinance namespace object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteMReportingObject(System.String,Ict.Petra.Shared.Interfaces.MReporting.IMReportingNamespace@)">
             <summary>
             Retrieves a Remoting Proxy object for the Server-side MReporting namespace
            
             @comment The MReporting Namespace holds client-instantiable objects for the
             Petra Reporting Module.
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the MReporting namespace object</param>
             <param name="ARemote">.NET Remoting Proxy object for the MReporting namespace object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.GetRemoteMSysManObject(System.String,Ict.Petra.Shared.Interfaces.MSysMan.IMSysManNamespace@)">
             <summary>
             Retrieves a Remoting Proxy object for the Server-side MSysMan namespace
            
             @comment The MSysMan Namespace holds client-instantiable objects for the
             Petra System Manager Module.
            
             </summary>
             <param name="RemotingURL">The Server-assigned URL for the MSysMan namespace object</param>
             <param name="ARemote">.NET Remoting Proxy object for the MSysMan namespace object
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnector.DetermineServerIPAddress">
             <summary>
             Determines the PetraServer's IP Address by parsing the .NET (Remoting)
             Configuration file.
            
             </summary>
             <returns>The IP Address of the PetraServer that we connect to
             </returns>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnector.ServerIPAddr">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnector.ServerIPPort">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.ServerIPAddressNotFoundInConfigurationFileException">
            <summary>
            Thrown if the IP Address of the PetraServer could not be extracted from the .NET (Remoting) Configuration File.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.ServerIPAddressNotFoundInConfigurationFileException.#ctor(System.String,System.Exception)">
            <summary>
            constructor
            </summary>
            <param name="strConnectionString"></param>
            <param name="inExp"></param>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.ServerIPAddressNotFoundInConfigurationFileException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.ServerIPAddressNotFoundInConfigurationFileException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="AMessage"></param>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TEnsureKeepAlive">
             <summary>
             Creates a Tread which regularly calls into remoted server-side Objects that
             are registered with this Class. This call increases the remoted Objects'
             ILease CurrentLeaseTime so that they don't get marked for GC.
            
             If this signal is no longer received by a remoted server-side Object, the
             Object is marked for GC by the LeaseManager in the PetraServer as soon as its
             CurrentLeaseTime gets to zero!
            
             @comment Usage: Call Register for registering remoted Objects and UnRegister for
             releasing remoted Objects. Objects that are not UnRegistered will live on
             the PetraServer until the AppDomain for the Client is destroyed!!!
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TEnsureKeepAlive.StrConnectionBroken">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TEnsureKeepAlive.StrConnectionBrokenTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TEnsureKeepAlive.StrConnectionClosed">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TEnsureKeepAlive.StrConnectionClosedTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TEnsureKeepAlive.StrConnectionUnavailableCause">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TEnsureKeepAlive.UKeepAliveObjects">
            <summary>Keeps the Registered Objects</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TEnsureKeepAlive.UKeepRemotedObjectsAlive">
            <summary>Needs to be true as long as the Thread should still execute</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TEnsureKeepAlive.#ctor">
             <summary>
             Starts the KeepAliveThread.
            
             </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TEnsureKeepAlive.StopKeepAlive">
             <summary>
             Stops the KeepAliveThread.
            
             @comment The only way to start the KeepAliveThread again is to create a new
             TEnsureKeepAlive object. However, since there should be only one such
             Thread throughout the Client's lifetime, this should not be necessary.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TEnsureKeepAlive.Register(System.MarshalByRefObject)">
             <summary>
             Registers a remoted Object with the KeepAlive mechanism of this Class.
            
             @comment Once a remoted Object is Registered, it will be not be GC'ed on the
             PetraServer until it is UnRegistered.
            
             </summary>
             <param name="ARemotedObject">The Remoted Object as an Interface
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TEnsureKeepAlive.Register(Ict.Common.IInterface)">
            <summary>
            todoComment
            </summary>
            <param name="ARemotedObject"></param>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TEnsureKeepAlive.UnRegister(System.MarshalByRefObject)">
             <summary>
             Unregisters an remoted Object with the KeepAlive mechanism of this Class.
            
             @comment Once an Object is UnRegistered, it will be marked for GC by the
             LeaseManager in the PetraServer as soon as its CurrentLeaseTime gets to
             zero!
            
             </summary>
             <param name="ARemotedObject">The Remoted Object as an Interface
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TEnsureKeepAlive.UnRegister(Ict.Common.IInterface)">
            <summary>
            overload
            </summary>
            <param name="ARemotedObject"></param>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TEnsureKeepAlive.KeepAliveThread">
             <summary>
             Thread that calls in regular intervals into registered remoted server-side
             Objects.
            
             @comment The Thread is started at Class instantiation and can be stopped by
             calling the StopKeepAlive method.
            
             @comment The interval can be configured with the ClientSetting
             'ServerObjectKeepAliveIntervalInSeconds'.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TServerInfo">
             <summary>
             The TServerInfo class holds information about the PetraServer that the
             Client is connected to.
            
             Currently hold only very basic information, will be extended in the future.
            
             @Comment Change the class to retrieve the Server info on its own on
                      constructor call.
             </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerInfo.#ctor(Ict.Common.TExecutingOSEnum)">
             <summary>
             Constructor that initialises the property values.
            
             @todo Change the class to retrieve the Server info on its own on
            
             </summary>
             <param name="ServerOS">Operating System of the PetraServer that the Client is
             connected to
             </param>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TServerInfo.ServerOS">
            <summary>class procedure set_ServerOS(const Value: TExecutingOS); static;write set_ServerOS</summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TClientInfo">
             <summary>
             The TClientInfo class holds information about the currently running instance
             of the Petra Client.
            
             Currently hold only very basic information, will be extended in the future.
             </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientInfo.InitializeUnit">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientInfo.InitVersion">
            find out the current version of the client
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientInfo.Get_ClientComputerName">
            <summary>
            todoComment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientInfo.Get_ClientIPAddress">
            <summary>
            todoComment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientInfo.Get_ClientAssemblyVersion">
            <summary>
            todoComment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientInfo.Get_InstallationKind">
            <summary>
            todoComment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientInfo.Get_ClientOS">
            <summary>
            todoComment
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientInfo.ClientOS">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientInfo.ClientIPAddress">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientInfo.ClientComputerName">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientInfo.ClientAssemblyVersion">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientInfo.InstallationKind">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TClientTasksQueue">
             <summary>
             Manages the execution of Client Tasks.
            
             Tasks are first retrieved by the KeepAlive tread. TClientTasksQueue then
             executes the separate Tasks asynchronously using a TClientTaskInstance for
             each Task.
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TClientTasksQueue.FClientTasksDataTable">
            Holds the ClientTasksDataTable that was passed in when Create got called.
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientTasksQueue.#ctor(System.Int32,System.Data.DataTable)">
            <summary>
            Passes in the ClientTasksDataTable which contains the Client Tasks.
            </summary>
            <param name="AClientID"></param>
            <param name="AClientTasksDataTable"></param>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientTasksQueue.QueueClientTasks">
            <summary>
            Gets called by KeepAliveThread if new ClientTasks were sent by the Server.
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TClientTaskInstance">
            <summary>
            Executes a certain Task.
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TClientTaskInstance.FClientTaskDataRow">
            Holds a certain row of the ClientTasksDataTable that was passed in when ClientTask property got set.
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientTaskInstance.Execute">
            <summary>
            Executes the Client Task.
            </summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientTaskInstance.ClientTask">
            <summary>
            Property for passing the DataRow of a Client Task.
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TSystemDefaults">
             <summary>
             Gives access to all System Defaults.
            
             The System Defaults are stored in the Database on the Server and are cached
             by the PetraServer for speed reasons and to reduce the DB queries that are
             run. The System Defaults are also held in a cache table on the Client side
             which is managed by this unit. This is done to reduce remoting bandwidth.
             Both the Server-side and Client-side caches can be refreshed.
            
             @Comment The Client-side cache can be refreshed by the Server by queueing
               a certain ClientTask for the Client. The TClientTaskInstance class then
               calls the ReloadCachedSystemDefaults procedure to make the Client refresh
               its cache as soon as the next request to GetSystemDefault is made.
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TSystemDefaults.UTableCached">
            <summary>holds a state that tells whether the Typed DataTable is cached or not</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TSystemDefaults.USystemDefaultsDT">
            <summary>this Typed DataTable holds the cached System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TSystemDefaults.UReadWriteLock">
            <summary>used to control read and write access to the cache</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TSystemDefaults.LoadSystemDefaultsTable">
             <summary>
             Loads the System Defaults into the cached Typed DataTable.
            
             The System Defaults are retrieved from the PetraServer.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TSystemDefaults.GetSystemDefault(System.String,System.String)">
             <summary>
             Returns the value of the specified System Default.
            
             The caller doesn't need to know whether the Cache is already populated - if
             this should be necessary, this function will make a request to populate the
             cache.
            
             </summary>
             <param name="ASystemDefaultName">The System Default for which the value should be
             returned</param>
             <param name="ADefault">The value that should be returned if the System Default was
             not found</param>
             <returns>The value of the System Default, or the value of the ADefault
             parameter if the specified System Default was not found
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TSystemDefaults.GetSystemDefault(System.String)">
             <summary>
             Returns the value of the specified System Default.
            
             The caller doesn't need to know whether the Cache is already populated - if
             this should be necessary, this function will make a request to populate the
             cache.
            
             </summary>
             <param name="ASystemDefaultName">The System Default for which the value should be
             returned</param>
             <returns>The value of the System Default, or SYSDEFAULT_NOT_FOUND if the
             specified System Default was not found
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TSystemDefaults.ReloadCachedSystemDefaults">
             <summary>
             Causes TSystemDefaults to reload the cached System Defaults Table the next
             time it is accessed.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TSystemDefaults.ReloadCachedSystemDefaultsOnServer">
             <summary>
             Causes the PetraServer to reload the Server-side cached System Defaults.
             Also causes TSystemDefaults to reload the cached System Defaults Table the
             next time it is accessed.
            
             This function must be used in the case when in the Petra 4GL System Manager
             -> Maintain System Parameters some parameters are changed. The 4GL screen
             will need to call this function to make the PetraServer reload the cached
             System Defaults. The Client will then reload its cache accordingly.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TConnectionManagement">
            <summary>
            Manages the connection to the PetraServer.
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TConnectionManagement.GConnectionManagement">
            <summary>
            static instance of this class
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnectionManagement.Get_ServerIPAddr">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnectionManagement.Get_ServerIPPort">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnectionManagement.ConnectToServer(System.String,System.String,System.Int32@,System.String@,System.Boolean@,System.String@)">
            <summary>
            todoComment
            </summary>
            <param name="AUserName"></param>
            <param name="APassword"></param>
            <param name="AProcessID"></param>
            <param name="AWelcomeMessage"></param>
            <param name="ASystemEnabled"></param>
            <param name="AError"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TConnectionManagement.DisconnectFromServer(System.String@)">
            <summary>
            todoComment
            </summary>
            <param name="ACantDisconnectReason"></param>
            <returns></returns>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnectionManagement.ClientName">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnectionManagement.ClientID">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnectionManagement.ServerIPAddr">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnectionManagement.ServerIPPort">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnectionManagement.ServerOS">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnectionManagement.RemoteFactoryObject">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnectionManagement.KeepAlive">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TConnectionManagement.RemoteObjects">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.EServerConnectionServerNotReachableException">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.EServerConnectionServerNotReachableException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.EServerConnectionServerNotReachableException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.EServerConnectionGeneralException">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.EServerConnectionGeneralException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.EServerConnectionGeneralException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TUserInfo">
            <summary>
            Holds User Information (particularly security-related) in a global variable
            and allows refreshing of this information.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserInfo.ReloadCachedUserInfo">
             <summary>
             Causes TUserInfo to immediately reload the cached UserInformation.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUserInfo.SignalReloadCachedUserInfo(System.String)">
             <summary>
             Queues a ClientTask for reloading of the UserInfo for all connected Clients
             with a certain UserID.
            
             </summary>
             <param name="AUserID">UserID for which the ClientTask should be queued
             </param>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TClientSettings">
             <summary>
             Holds read-only Client settings (from .NET Configuration File and Command
             Line). These settings are determined once when the Constructor is executed.
            
             </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientSettings.GetPathTemp">
            get temp path in the user directory. this is called from PetraClientMain directly
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientSettings.GetExportPath">
            get export path in the user directory. used eg. by GL Batch or Gift Batch export
            will create the directory if it does not exist yet.
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TClientSettings.#ctor">
             <summary>
             Loads settings from .NET Configuration File and Command Line.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.ConfigurationFile">
            <summary>Name of .NET Configuration File, if specified via command line options</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.PathTemp">
            <summary>Temp Path (eg. for storing the Log File)</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.BehaviourSeveralClients">
            <summary>should it be allowed to have several clients running at the same time, or should the user be asked</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.DelayedDataLoading">
            <summary>Delayed data loading (should be true for remote connections)</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.ReportingPathReportSettings">
            <summary>the path for the report settings in the data directory</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.ReportingPathReportUserSettings">
            <summary>the path for the report settings in the data directory that are written by the user</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.ServerPollIntervalInSeconds">
            <summary>The interval in seconds in which the PetraClient checks for ClientTasks</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.ServerObjectKeepAliveIntervalInSeconds">
            <summary>The interval in seconds in which the PetraClient keeps the remoted Objects on the PetraServer alive</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.RunAsStandalone">
            <summary>should the server be started by the client?</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.RunAsRemote">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.PetraServerAdmin_Configfile">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.PetraServer_Configfile">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.Petra_Path_Bin">
            <summary>the directory of the delphi executables and dll files</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.Petra_Path_DB">
            <summary>the location of the petra database, that is used for starting the standalone ODBC server</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.Petra_Path_Dat">
            <summary>the directory that contains the directories Reportsettings, accounts, etc.</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.Petra_Path_Patches">
            <summary>the local directory where the patches are installed by InnoSetup</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.Petra_Path_RemotePatches">
            <summary>the remote directory where the patches are installed by InnoSetup</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.PostgreSql_BaseDir">
            <summary>the PostgreSql installation directory</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.PostgreSql_DataDir">
            <summary>the database directory for the postgreSql server</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.GUIRunningOnNonStandardDPI">
            <summary>false if PetraClient is running on Standard DPI (96 DPI, Normal font size), otherwise true. This gets set from MainWindow.pas!</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.CustomStartupMessage">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.PetraWebSite">
            <summary>Link to the petra web site</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.PetraPatches">
            <summary>Link to the site of petra patches</summary>
        </member>
        <member name="P:Ict.Petra.Client.App.Core.TClientSettings.PetraSupportTeamEmail">
            <summary>Email address of the openPETRA support team of an organisation</summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TServerLookup">
            <summary>
            Provides Client-side static functions that perform server-side lookups for
            the Client.
            Classes or GUI controls that need to do a server-side lookup just call the
            desired procedures here to get the result from the PetraServer (and therefore
            don't need to know about a certain business object that is used on a screen
            and its methods).
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TServerLookup.TMPartner">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.GetPartnerShortName(System.Int64,System.String@,Ict.Petra.Shared.TPartnerClass@,System.Boolean)">
               Gets the ShortName of a Partner.
            
               @param APartnerKey PartnerKey of Partner to find the short name for
               @param APartnerShortName ShortName for the found Partner ('' if Partner
                   doesn't exist or PartnerKey is 0)
               @param APartnerClass Partner Class of the found Partner (FAMILY if Partner
                   doesn't exist or PartnerKey is 0)
               @param APartnerStatus Partner Status for the found Partner (spscINACTIVE if Partner
                   doesn't exist or PartnerKey is 0)
               @param AMergedPartners Set to false if the function should return 'false' if
                 the Partner' Partner Status is MERGED
               @return true if Partner was found in DB (except if AMergedPartners is false
                 and Partner is MERGED) or PartnerKey is 0, otherwise false
             // future public static methods for MFinance go here...
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.PartnerInfo(System.Int64,Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum,Ict.Petra.Shared.MPartner.Partner.Data.PartnerInfoTDS@)">
            <summary>
            Returns miscellaneous Partner data.
            </summary>
            <remarks>Used by the Partner Info UserControl.</remarks>
            <param name="APartnerKey">PartnerKey of the Partner for which the data
            should be retrieved.</param>
            <param name="APartnerInfoScope">Scope of data that should be loaded and
            returned by the PetraServer.</param>
            <param name="APartnerInfoDS">Typed DataSet that contains the requested Partner data.</param>
            <returns>True if the Partner exists, otherwise false.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.PartnerInfo(System.Int64,Ict.Petra.Shared.MPartner.TLocationPK,Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum,Ict.Petra.Shared.MPartner.Partner.Data.PartnerInfoTDS@)">
            <summary>
            Returns miscellaneous Partner data.
            </summary>
            <remarks>Used by the Partner Info UserControl.</remarks>
            <param name="APartnerKey">PartnerKey of the Partner for which the data
            should be retrieved.</param>
            <param name="ALocationKey">LocationKey of the Location for which data
            for the Partner specified should be retrieved.</param>
            <param name="APartnerInfoScope">Scope of data that should be loaded and
            returned by the PetraServer.</param>
            <param name="APartnerInfoDS">Typed DataSet that contains the requested Partner data.</param>
            <returns>True if the Partner exists, otherwise false.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.GetPartnerShortName(System.Int64,System.String@,Ict.Petra.Shared.TPartnerClass@)">
            <summary>
            overload
            </summary>
            <param name="APartnerKey"></param>
            <param name="APartnerShortName"></param>
            <param name="APartnerClass"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.VerifyPartner(System.Int64,Ict.Petra.Shared.TPartnerClass[],System.String@,Ict.Petra.Shared.TPartnerClass@,System.Boolean@)">
            <summary>
            Verifies the existence of a Partner.
            </summary>
            <param name="APartnerKey">PartnerKey of Partner to find the short name for</param>
            <param name="AValidPartnerClasses">Pass in a Set of valid PartnerClasses that the
             Partner is allowed to have (eg. [PERSON, FAMILY], or an empty Set ( [] ).</param>
            <param name="APartnerShortName">ShortName for the found Partner ('' if Partner
             doesn't exist or PartnerKey is 0)</param>
            <param name="APartnerClass">Partner Class of the found Partner (FAMILY if Partner
             doesn't exist or PartnerKey is 0)</param>
            <param name="AIsMergedPartner">true if the Partner' Partner Status is MERGED,
             otherwise false</param>
            <returns>true if Partner was found in DB (except if AValidPartnerClasses isn't
             an empty Set and the found Partner isn't of a PartnerClass that is in the
             Set) or PartnerKey is 0, otherwise false</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.VerifyPartner(System.Int64,System.String@,Ict.Petra.Shared.TPartnerClass@,System.Boolean@,System.Boolean@)">
            <summary>
            Verifies the existence of a Partner.
            </summary>
            <param name="APartnerKey">PartnerKey of Partner to find the short name for</param>
            <param name="APartnerShortName">ShortName for the found Partner ('' if Partner
             doesn't exist or PartnerKey is 0)</param>
            <param name="APartnerClass">Partner Class of the found Partner (FAMILY if Partner
             doesn't exist or PartnerKey is 0)</param>
            <param name="AIsMergedPartner">true if the Partner' Partner Status is MERGED,
             otherwise false</param>
            <param name="AUserCanAccessPartner">true if the current user has the rights to
            edit this partner</param>
            <returns>true if Partner was found in DB (except if AValidPartnerClasses isn't
             an empty Set and the found Partner isn't of a PartnerClass that is in the
             Set) or PartnerKey is 0, otherwise false</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.MergedPartnerDetails(System.Int64,System.String@,Ict.Petra.Shared.TPartnerClass@,System.Int64@,System.String@,Ict.Petra.Shared.TPartnerClass@,System.String@,System.DateTime@)">
            <summary>
            Returns information about a Partner that was Merged and about the
            Partner it was merged into.
            </summary>
            <param name="AMergedPartnerPartnerKey">PartnerKey of Merged Partner.</param>
            <param name="AMergedPartnerPartnerShortName">ShortName of Merged Partner.</param>
            <param name="AMergedPartnerPartnerClass">Partner Class of Merged Partner.</param>
            <param name="AMergedIntoPartnerKey">PartnerKey of Merged-Into Partner. (Only
            populated if that information is available.)</param>
            <param name="AMergedIntoPartnerShortName">ShortName of Merged-Into Partner. (Only
            populated if that information is available.)</param>
            <param name="AMergedIntoPartnerClass">PartnerClass of Merged-Into Partner. (Only
            populated if that information is available.)</param>
            <param name="AMergedBy">User who performed the Partner Merge operation. (Only
            populated if that information is available.)</param>
            <param name="AMergeDate">Date on which the Partner Merge operation was done. (Only
            populated if that information is available.)</param>
            <returns>True if (1) Merged Partner exists and (2) its Status is MERGED,
            otherwise false.</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.GetExtractDescription(System.String,System.String@)">
            <summary>
            Retrieves the description of an extract.
            </summary>
            <param name="AExtractName">The name which identifies the extract</param>
            <param name="AExtractDescription">The description of the extract</param>
            <returns>true if the extract was found and the description was retrieved</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.GetPartnerFoundationStatus(System.Int64,System.Boolean@)">
            <summary>
            Gets the foundation status of the partner
            </summary>
            <param name="APartnerKey">Partner key of the partner to retrieve the foundation status</param>
            <param name="AIsFoundation">true if the partner (organisation) is a foundation. Otherwise false</param>
            <returns>true if an entry of the partner was found in table p_organisation</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMPartner.GetRecentlyUsedPartners(System.Int32,System.Collections.ArrayList,System.Collections.Generic.Dictionary{System.Int64,System.String}@)">
            <summary>
            Get a list of the last used partners from the current user.
            </summary>
            <param name="AMaxPartnersCount">Maxinum numbers of Partners to return</param>
            <param name="APartnerClasses">List of partner classes which kind of partners the result should contain.
            If it contains "*" then all recent partners will be returned otherwise only the partners whose
            partner class is in APartnerClasses.</param>
            <param name="ARecentlyUsedPartners">List of the last used partner names and partner keys</param>
            <returns>true if call was successfull</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TServerLookup.TMFinance">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TServerLookup.TMSysMan">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMSysMan.GetInstalledPatches(Ict.Petra.Shared.MSysMan.Data.SPatchLogTable@)">
            <summary>
            Get all the installed Patches
            </summary>
            <param name="APatchLogDT">Table of installed patches</param>
            <returns>true</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TServerLookup.TMSysMan.GetDBVersion(System.String@)">
            <summary>
            Get the current database version from the server
            </summary>
            <param name="APetraDBVersion">Database version</param>
            <returns>true</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TPollClientTasks">
             <summary>
             Creates a Thread which calls a Method of the server-side Class
             TPollClientTasks in regular intervals to retrieve any ClientTasks.
            
             If this signal is no longer received by the PetraServer, the PetraServer
             automatically tears down the Client's AppDomain and the Server can no longer
             be reached from the Client!
             THEREFORE THIS THREAD MUST RUN UNINTERRUPTED AS LONG AS THE CLIENT RUNS TO
             ALLOW ACCESS TO THE PETRA SERVER!
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TPollClientTasks.StrConnectionBroken">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TPollClientTasks.StrConnectionBrokenTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TPollClientTasks.StrConnectionClosed">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TPollClientTasks.StrConnectionClosedTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TPollClientTasks.StrConnectionUnavailableCause">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TPollClientTasks.FClientID">
            <summary>The ClientID of the logged in Client</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TPollClientTasks.FKeepPollingClientTasks">
            <summary>Needs to be true as long as the thread should still execute</summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.TPollClientTasks.FRemotePollClientTasks">
            <summary>Reference to Serverside Object</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TPollClientTasks.#ctor(System.Int32,Ict.Petra.Shared.Interfaces.IPollClientTasksInterface)">
             <summary>
             Starts the PollClientTasksThread.
            
             </summary>
             <param name="AClientID">ClientID of the PetraClient</param>
             <param name="ARemotePollClientTasks">Reference to the instantiated Server-side
             TPollClientTasks Object that will get called regularly.
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TPollClientTasks.StopPollClientTasks">
             <summary>
             Stops the PollClientTasksThread.
            
             @comment The only way to start the PollClientTasksThread again is to create a new
             TPollClientTasks object. However, since there should be only one such
             thread throughout the Client's lifetime, this should not be necessary.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TPollClientTasks.PollClientTasksThread">
             <summary>
             Thread that calls a Method of the server-side Class TPollClientTasks in
             regular intervals.
            
             @comment The Thread is started at Class instantiation and can be stopped by
             calling the StopKeepAlive method.
            
             @comment The interval can be configured with the ClientSetting
             'ServerPollIntervalInSeconds'.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.ProcessReminders">
             <summary>
             Provides means to run the Partner Reminders processing for a PetraClient
             that is running in Standalone mode.
            
             @Comment Partner Reminders processing for PetraClients that are *not* running
               in Standalone mode is done on the Linux server using a cron job that runs
               at midnight everday. For Standalone Clients, a Windows Scheduler job is set
               up that does the Partner Reminders processing, but due to the restriction
               to only one logged in User (with the Standalone License) this job can't
               do the processing while a user is logged in. This is where this Unit comes
               into play - it does the Partner Reminders processing while the PetraClient
               is running and connected to the Progress DB using the same 4GL procedure,
               'autoprocess.p' through AppLink 4GL. TODO this needs to be changed
             </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.ProcessReminders.ProcessRemindersDelegate(System.Object)">
             <summary>
             processing the Partner Reminders.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.ProcessReminders.StartStandaloneRemindersProcessing">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TApplicationShutdownCallback">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.ExceptionHandling">
            <summary>
            contains procedures for structured Exception handling. They are
            intended to be used as 'last resort' in case an Exception that was thrown
            anywhere in the Application wasn't caught anywhere.
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.ExceptionHandling.FALLBACK_LOGFILE_NAME">
            <summary>
            log file name (should really be set in the config file)
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.App.Core.ExceptionHandling.GApplicationShutdownCallback">
            <summary>This is set by method "PetraClientMain.StartUp" in the PetraClient.exe Assembly.</summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.ExceptionHandling.LogException(System.Exception,System.String)">
            <summary>
            todoComment
            </summary>
            <param name="AException"></param>
            <param name="ALogText"></param>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.ExceptionHandling.UnhandledExceptionHandler(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="ASender"></param>
            <param name="AEventArgs"></param>
        </member>
        <member name="T:Ict.Petra.Client.App.Core.TUnhandledThreadExceptionHandler">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.App.Core.TUnhandledThreadExceptionHandler.OnThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="ASender"></param>
            <param name="AEventArgs"></param>
        </member>
    </members>
</doc>
