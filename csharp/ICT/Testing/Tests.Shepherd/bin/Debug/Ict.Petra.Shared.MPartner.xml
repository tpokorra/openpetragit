<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Petra.Shared.MPartner</name>
    </assembly>
    <members>
        <member name="T:Ict.Petra.Shared.MPartner.Checks">
            <summary>
            Contains functions to be used by the Server and the Client that perform
            certain checks - specific for the Partner Module.
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Checks.HasPartnerType(System.String,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerTypeTable,System.Boolean)">
            <summary>
            Determines whether a specified Partner Type code is contained in the PPartnerTypeTable
            that is passed in. The AExactMatch parameter determines whether the check is done on an
            exact string match, or a 'starts with' string match.
            </summary>
            <param name="APartnerType"></param>Partner Type code that should be checked for
            <param name="APPartnerTypeDT"></param>PPartnerTypeTable containing rows of Partner Types
            <param name="AExactMatch"></param>Exact string match for APartnerType if true,
            otherwise 'starts with' string match
            <returns>true if APartnerType was found in APPartnerTypeDT, otherwise false</returns>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.TSecurity">
            <summary>
            Contains security-related functions for Partners that that can be used by any Class.
            </summary>
            <remarks>There are other security-related Methods to be found on the server side. Class: Ict.Petra.Server.MParter, Security.cs, Class TSecurity.</remarks>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TSecurity.PARTNER_RESTRICTED_TO_GROUP">
            <summary>Partner is restricted to a Security Group</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TSecurity.PARTNER_RESTRICTED_TO_USER">
            <summary>Partner is restricted to a User</summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.TSecurity.CanAccessPartner(Ict.Petra.Shared.MPartner.Partner.Data.PPartnerRow,System.Boolean,Ict.Petra.Shared.MPartner.Partner.Data.PFoundationRow)">
            <summary>
            Tests whether the current user has access to a particular Partner.
            </summary>
            <remarks>
            <para>Corresponds to Progress 4GL Method 'CanAccessPartner' in
            common/sp_partn.p</para>
            <para>A server-side implementation of this Method exists that has only the
            <paramref name="APartnerRow"/>parameter as an Argument. It
            looks up the Foundation Row on its own if this is needed.</para>
            </remarks>
            <param name="APartnerRow">Partner for which access should be checked for.</param>
            <param name="AIsFoundation">Set to true if Partner is a Foundation.</param>
            <param name="AFoundationRow">Foundation Row needs to be passed in
            if Partner is a Foundation.</param>
            <returns><see cref="F:Ict.Petra.Shared.Security.TPartnerAccessLevelEnum.palGranted"/> if access
            to the Partner is granted, otherwise a different
            <see cref="T:Ict.Petra.Shared.Security.TPartnerAccessLevelEnum"/> value.</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.TSecurity.CanAccessPartnerExc(Ict.Petra.Shared.MPartner.Partner.Data.PPartnerRow,System.Boolean,Ict.Petra.Shared.MPartner.Partner.Data.PFoundationRow)">
            <summary>
            Tests whether the current user has access to a particular Partner.
            </summary>
            <remarks>This Method throws an <see cref="T:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException"/>
            if access to the Partner is not granted, thereby ensuring that a denied access
            doesn't go unnoticed.</remarks>
            <param name="APartnerRow">Partner for which access should be checked for.</param>
            <param name="AIsFoundation">Set to true if Partner is a Foundation.</param>
            <param name="AFoundationRow">Foundation Row needs to be passed in
            if Partner is a Foundation.</param>
            <returns>void</returns>
            <exception cref="T:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException">Thrown if access is not granted.</exception>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.TSecurity.AccessLevelExceptionEvaluatorAndThrower(Ict.Petra.Shared.MPartner.Partner.Data.PPartnerRow,Ict.Petra.Shared.Security.TPartnerAccessLevelEnum)">
            <summary>
            Evaluates the passed in AccessLevel and throws
            <see cref="T:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException"/> if the AccessLevel
            isn't <see cref="F:Ict.Petra.Shared.Security.TPartnerAccessLevelEnum.palGranted"/>.
            </summary>
            <param name="APartnerRow">Partner for which access should be checked for.</param>
            <param name="AAccessLevel">AccessLevel as determined by caller.</param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.TSecurity.CheckFoundationSecurity(Ict.Petra.Shared.MPartner.Partner.Data.PFoundationRow)">
            <summary>
            Tests whether the current user has access to a particular Foundation.
            </summary>
            <remarks>Corresponds to Progress 4GL Method 'CheckFoundationSecurity' in
            common/sp_partn.p</remarks>
            <param name="AFoundationRow">Foundation row to check for.</param>
            <returns>True if the current user has access to the passed in Foundation,
            otherwise false.</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.TSecurity.CheckFoundationSecurity(System.Int64,System.Int64)">
            <summary>
            Tests whether the current user has access to a particular Foundation.
            </summary>
            <remarks>Corresponds to Progress 4GL Method 'CheckFoundationSecurity' in
            common/sp_partn.p</remarks>
            <param name="AFoundationOwner1Key">PartnerKey of the first owner of the Foundation.
            Pass in 0 if there is no first owner.</param>
            <param name="AFoundationOwner2Key">PartnerKey of the second owner of the Foundation
            Pass in 0 if there is no second owner.</param>
            <returns>True if the current user has access to the passed in Foundation,
            otherwise false.</returns>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum">
            <summary>
            enumeration for the tab pages on Partner Edit screen
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpDefault">
            <summary>
            the default page
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpAddresses">
            <summary>
            address page
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpDetails">
            <summary>
            detail page (different for each partner class)
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpFoundationDetails">
            <summary>
            detail page for partner class foundations
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpSubscriptions">
            <summary>
            page for subscriptions
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpPartnerTypes">
            <summary>
            page for partner types
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpFamilyMembers">
            <summary>
            page for family members
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpOfficeSpecific">
            <summary>
            page for office specific data labels
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpInterests">
            <summary>
            page for interests
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpReminders">
            <summary>
            page for reminders
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpRelationships">
            <summary>
            page for relationships between partners
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpContacts">
            <summary>
            page for contact management
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerEditTabPageEnum.petpNotes">
            <summary>
            page for notes about the partner
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum">
            <summary>
            Specifies the Scope of data that is to be returned to the Partner Info UserControl.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum.pisHeadOnly">
            <summary>Partner 'head' data only</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum.pisPartnerLocationOnly">
            <summary>Partner Location only, excluding rest of the data and 'head' data</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum.pisPartnerLocationAndRestOnly">
            <summary>Partner Location and rest of the data only, excluding 'head' data</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum.pisLocationPartnerLocationOnly">
            <summary>Location and Partner Location only, excluding rest of the data and 'head' data</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum.pisLocationPartnerLocationAndRestOnly">
            <summary>Location, Partner Location and rest of the data only, excluding 'head' data</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TPartnerInfoScopeEnum.pisFull">
            <summary>All PartnerInfo data</summary>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.eShortNameFormat">
            different ways to format the shortname of a partner
            used eg by Ict.Petra.Shared.MPartner.Calculations.FormatShortName()
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.eShortNameFormat.eShortname">
            lastname, firstname, title
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.eShortNameFormat.eReverseShortname">
            title firstname lastname
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.eShortNameFormat.eOnlyTitle">
            title
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.eShortNameFormat.eOnlySurname">
            family name
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.eShortNameFormat.eReverseLastnameInitialsOnly">
            firstname l.; useful for data protection
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.eShortNameFormat.eReverseWithoutTitle">
            firstname lastname
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.TLocationPK">
            <summary>
            class that combines location key and site key
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.TLocationPK.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.TLocationPK.#ctor(System.Int64,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="ASiteKey">site key</param>
            <param name="ALocationKey">location key</param>
        </member>
        <member name="P:Ict.Petra.Shared.MPartner.TLocationPK.SiteKey">
            <summary>
            the site key
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.MPartner.TLocationPK.LocationKey">
            <summary>
            the location key
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.MPartnerConstants">
            <summary>
            some constants used in the partner module
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.ADDRESSMGMT_SIMILARLOCATIONTABLE">
            <summary>Addressmanagement</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERADDRESSAGGREGATERESPONSE_DATASET">
            <summary>Addressmanagement</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.EXISTINGLOCATIONPARAMETERS_TABLENAME">
            <summary>Addressmanagement</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.ADDRESSADDEDORCHANGEDPROMOTION_TABLENAME">
            <summary>Addressmanagement</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.ADDRESSCHANGEPROMOTIONPARAMETERS_TABLENAME">
            <summary>Addressmanagement</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.SUBSCRIPTIONS_STATUS_PERMANENT">
            <summary>Subscription Statuses</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.SUBSCRIPTIONS_STATUS_PROVISIONAL">
            <summary>Subscription Statuses</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.SUBSCRIPTIONS_STATUS_GIFT">
            <summary>Subscription Statuses</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.SUBSCRIPTIONS_STATUS_CANCELLED">
            <summary>Subscription Statuses</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.SUBSCRIPTIONS_STATUS_EXPIRED">
            <summary>Subscription Statuses</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.SUBSCRIPTIONS_REASON_ENDED_BADADDR">
            <summary>Subscription Reasons Ended</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_EMAIL">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_FAX">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_FORMLETTER">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_LETTER">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_MAILING">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_PERSON">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_PHONE">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_RESPONSE">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.METHOD_CONTACT_VISIT">
            <summary>Method of Contact</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERTYPE_EX_WORKER">
            <summary>Partner Types (Special Types)</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERTYPE_LEDGER">
            <summary>Partner Types</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERCLASS_FAMILY">
            <summary>Partner class</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERCLASS_PERSON">
            <summary>Partner class</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERCLASS_ORGANISATION">
            <summary>Partner class</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERCLASS_CHURCH">
            <summary>Partner class</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERCLASS_VENUE">
            <summary>Partner class</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERCLASS_UNIT">
            <summary>Partner class</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.UNIT_TYPE_KEYMIN">
            <summary>Unit-Type is key-min</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERCLASS_BANK">
            <summary>Partner class</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERSTATUS_ACTIVE">
            <summary>Partner status</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERSTATUS_INACTIVE">
            <summary>Partner status</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.GENDER_FEMALE">
            <summary>Gender</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.GENDER_MALE">
            <summary>Gender</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.GENDER_UNKNOWN">
            <summary>Gender</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.ADDRESSEETYPE_MALE">
            <summary>Addresseetype</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.ADDRESSEETYPE_FEMALE">
            <summary>Addresseetype</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.ADDRESSEETYPE_DEFAULT">
            <summary>Addresseetype</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.MARITALSTATUS_UNDEFINED">
            <summary>Marital Status</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.MARITALSTATUS_SINGLE">
            <summary>Marital Status</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.MARITALSTATUS_ENGAGED">
            <summary>Marital Status</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.MARITALSTATUS_MARRIED">
            <summary>Marital Status</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.MARITALSTATUS_DIVORCED">
            <summary>Marital Status</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.LOCATIONTYPE_HOME">
            <summary>Location Type</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_PARTNERKEY">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_FAMILYNAME">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_LOCALITY">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_STREETNAME">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_ADDRESS">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_POSTALCODE">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_CITY">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_COUNTY">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_COUNTRYCODE">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_AQUISITION">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_GENDER">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_ADDRESSEE_TYPE">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_LANGUAGE">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_FIRSTNAME">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_EMAIL">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_PHONE">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_MOBILEPHONE">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_TITLE">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_SPECIALTYPES">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_MARITALSTATUS">
            <summary>Partner Import Column Name</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.PARTNERIMPORT_AQUISITION_DEFAULT">
            <summary>Default Aquisition Code to use for Partner Import</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.DEFAULT_CODE_UNKNOWN">
            Default values
            <summary>used eg. for PPerson.OccupationCode</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.MPartnerConstants.ACQUISITIONCODE_APPLICANT">
            <summary> Acquisition code for partner </summary>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.Calculations">
            <summary>
            Contains functions to be used by the Server and the Client that perform
            certain calculations - specific for the Partner Module.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.Calculations.PARTNERLOCATION_BESTADDR_COLUMN">
            <summary>
            column name for best address
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.Calculations.PARTNERLOCATION_ICON_COLUMN">
            <summary>
            column name for the location icon
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.Calculations.StrNoNameInfoAvailable">
            <summary>
            message for when no information is available
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DeterminePartnerLocationsDateStatus(System.Data.DataSet)">
            <summary>
            check the validity of each location and update the icon for each location (current address, old address, future address)
            for the current date
            </summary>
            <param name="APartnerLocationsDS">the dataset with the locations</param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DeterminePartnerLocationsDateStatus(System.Data.DataTable,System.DateTime)">
            <summary>
            check the validity of each location and update the icon of each location (current address, old address, future address)
            </summary>
            <param name="APartnerLocationsDT">the datatable to check</param>
            <param name="ADateToCheck"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DetermineBestAddress(System.Data.DataSet)">
            <summary>
            find which address is the best, and mark it the column BestAddress
            </summary>
            <param name="APartnerLocationsDS">the dataset with the addresses</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DetermineBestAddress(System.Data.DataTable)">
            <summary>
            find which address is the best, and mark it the column BestAddress
            </summary>
            <param name="APartnerLocationsDT">the datatable with the addresses</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DeterminePartnerShortName(System.String,System.String,System.String,System.String)">
            <summary>
            format the shortname for a partner in a standardized way
            </summary>
            <param name="AName">surname of partner</param>
            <param name="ATitle">title</param>
            <param name="AFirstName">first name</param>
            <param name="AMiddleName">middle name</param>
            <returns>formatted shortname</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DeterminePartnerShortName(System.String,System.String,System.String)">
            <summary>
            overload for DeterminePartnerShortName, no middle name
            </summary>
            <param name="AName">surname</param>
            <param name="ATitle">title</param>
            <param name="AFirstName">firstname</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DeterminePartnerShortName(System.String,System.String)">
            <summary>
            overload for DeterminePartnerShortName, no middle name and no first name
            </summary>
            <param name="AName">surname</param>
            <param name="ATitle">title</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DeterminePartnerShortName(System.String)">
            <summary>
            overload for DeterminePartnerShortName, no title, firstname and middle name
            </summary>
            <param name="AName">surname</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DetermineLocationString(Ict.Petra.Shared.MPartner.Partner.Data.PLocationRow)">
            <summary>
            Builds a formatted String out of the data that is contained in a Location.
            </summary>
            <param name="ALocationDR">DataRow containing the Location data.</param>
            <returns>Formatted String.</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DetermineLocationString(Ict.Petra.Shared.MPartner.Partner.Data.PLocationRow,Ict.Petra.Shared.MPartner.Calculations.TPartnerLocationFormatEnum)">
            <summary>
            Builds a formatted String out of the data that is contained in a Location.
            </summary>
            <param name="ALocationDR">DataRow containing the Location data.</param>
            <param name="APartnerLocationStringFormat">Specifies how to format the String that is returned.</param>
            <returns>Formatted String.</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DetermineLocationString(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            overload
            </summary>
            <param name="ABuilding1"></param>
            <param name="ABuilding2"></param>
            <param name="ALocality"></param>
            <param name="AStreetName"></param>
            <param name="AAddress3"></param>
            <param name="ASuburb"></param>
            <param name="ACity"></param>
            <param name="ACounty"></param>
            <param name="APostalCode"></param>
            <param name="ACountryCode"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DetermineLocationString(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Ict.Petra.Shared.MPartner.Calculations.TPartnerLocationFormatEnum)">
            <summary>
            Builds a formatted String out of the data that is contained in a Location.
            </summary>
            <param name="ABuilding1">building name 1</param>
            <param name="ABuilding2">building name 2</param>
            <param name="ALocality">locality</param>
            <param name="AStreetName">street name</param>
            <param name="AAddress3">address 3</param>
            <param name="ASuburb">suburb</param>
            <param name="ACity">city</param>
            <param name="ACounty">county</param>
            <param name="APostalCode">postal code</param>
            <param name="ACountryCode">country code</param>
            <param name="PartnerLocationStringFormat">requested format</param>
            <returns>formatted string</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.DetermineCurrentAddresses(Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable)">
            <summary>
            get the current address from a location table
            </summary>
            <param name="ATable">table with locations</param>
            <returns>data view containing the current address</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.CalculateTabCountsAddresses(Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int32@,System.Int32@)">
            <summary>
            count the available current addresses and the total number of addresses
            </summary>
            <param name="ATable">table with locations</param>
            <param name="ATotalAddresses">returns the total number of address</param>
            <param name="ACurrentAddresses">returns the number of current addresses</param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.CalculateTabCountsSubscriptions(Ict.Petra.Shared.MPartner.Mailroom.Data.PSubscriptionTable,System.Int32@,System.Int32@)">
            <summary>
            Count the subscriptions
            </summary>
            <param name="ATable">table with subscriptions</param>
            <param name="ATotalSubscriptions">returns the total number of subscriptions</param>
            <param name="AActiveSubscriptions">returns the number of active subscriptions</param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.FormatShortName(System.String,Ict.Petra.Shared.MPartner.eShortNameFormat)">
            <summary>
            convert shortname from Lastname, firstname, title to another shortname format
            TODO: use partner key to get to the full name, resolve issues with couples that have different family names etc
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.FormalGreeting(System.String)">
            format a formal greeting for the given partner short name. this formal greeting can be used in a letter
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.CalculateAge(System.DateTime)">
            <summary>
            Calculates the age in years at the current date.
            </summary>
            <param name="ABirthday">The birthday from which to calculate the current age</param>
            <returns>The age in years</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.Calculations.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            Calculates the age in years at a given date.
            </summary>
            <param name="ABirthday">The birthday from which to calculate the age</param>
            <param name="ACalculationDate">The date against which the birthday should be calculated</param>
            <returns>The age in years</returns>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.Calculations.TPartnerLocationFormatEnum">
            <summary>
            Specifies how to format the String that is returned by Method
            <see cref="M:Ict.Petra.Shared.MPartner.Calculations.DetermineLocationString(Ict.Petra.Shared.MPartner.Partner.Data.PLocationRow,Ict.Petra.Shared.MPartner.Calculations.TPartnerLocationFormatEnum)"/>.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.Calculations.TPartnerLocationFormatEnum.plfCommaSeparated">
            <summary>Return Location Part Strings separated by comma</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.Calculations.TPartnerLocationFormatEnum.plfLineBreakSeparated">
            <summary>Return Location Part Strings separated by CR+LF</summary>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum">
            <summary>
            Enums holding the possible cacheable tables for the Petra Partner Module, specifically Partner submodule
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.AddresseeTypeList">
            <summary>
            Ex. Fam - Family, SM - Single Male, etc.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.AcquisitionCodeList">
            <summary>
            how did we get to know this partner
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.BusinessCodeList">
            <summary>
            List of businesses with codes
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.CurrencyCodeList">
            <summary>
            Unit of money for various countries.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.DataLabelList">
            <summary>
            This table is used to define data labels for individual use in each office.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.DataLabelUseList">
            <summary>
            This table defines where a data label is used and the order the labels appear in.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.DataLabelLookupCategoryList">
            <summary>
            This table holds the categories that can be used for data label values.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.DataLabelLookupList">
            <summary>
            This table holds all lookup values that can be used for data label values.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.DenominationList">
            <summary>
            List of denomination codes for churches
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.InterestList">
            <summary>
            Area of Interest
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.InterestCategoryList">
            <summary>
            Categories for Area of Interest
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.LocationTypeList">
            <summary>
            Types of address e.g. home, business
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.MaritalStatusList">
            <summary>
            This table contains the codes indicating someones marital status.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.MethodOfContactList">
            <summary>
            How contacts are made
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.OccupationList">
            <summary>
            List of occupations with codes
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.PartnerStatusList">
            <summary>
            List of statuses for partners
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.PartnerTypeList">
            <summary>
            List of all possible special types for a partner.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.ProposalStatusList">
            <summary>
            Foundation proposal status codes and descriptions
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.ProposalSubmissionTypeList">
            <summary>
            Submission type for foundation proposals e.g. EMAIL, LETTER.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.RelationList">
            <summary>
            List of relationships between partners.  Relations occur in one direction only.   The relation code is used in the p_partner_relationship record.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.RelationCategoryList">
            <summary>
            This table contains the codes that indicate the categories of relations (grouping).
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.UnitTypeList">
            <summary>
            General information about the unit such as unit type and entry conference.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.CountyList">
            <summary>
            list of counties
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.FoundationOwnerList">
            <summary>
            list of users that are associated with foundations
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.InstalledSitesList">
            <summary>
            list of installed sites
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheablePartnerTablesEnum.CountryListFromExistingLocations">
            <summary>
            list of countries that are actually used in the database (smaller than the full country list)
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum">
            <summary>
            Enums holding the possible cacheable tables for the Petra Partner Module, specifically Mailing submodule
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum.ContactAttributeList">
            <summary>
            Possible attributes for partner contacts.  Gives the description of each attribute code.  An attribute is a type of contact that was made or which occurred with a partner.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum.ContactAttributeDetailList">
            <summary>
            Possible attribute details for each contact attribute.  Breaks down the attribute into more specifice information that applies to a contact with a partner.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum.MethodOfContactList">
            <summary>
            How contacts are made
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum.MergeFormList">
            <summary>
            Master record for Mail Merge output creation
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum.MergeFieldList">
            <summary>
            Fields within a Mail Merge Form
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableMailingTablesEnum.PostCodeRegionList">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.TCacheableSubscriptionsTablesEnum">
            <summary>
            Enums holding the possible cacheable tables for the Petra Partner Module, specifically Subscriptions submodule
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableSubscriptionsTablesEnum.PublicationCostList">
            <summary>
            Cost of a publication
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableSubscriptionsTablesEnum.PublicationList">
            <summary>
            available publications
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableSubscriptionsTablesEnum.ReasonSubscriptionGivenList">
            <summary>
            List of reasons for giving a subscription
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MPartner.TCacheableSubscriptionsTablesEnum.ReasonSubscriptionCancelledList">
            <summary>
            List of reasons for cancelling a subscription
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.EPartnerNotExistantException">
            <summary>
            Throw this Exception when a Business Object is asked to load data for a Partner that does either not exist or is deleted, not active, etc.  whatever is applicable to the situation.
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerNotExistantException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerNotExistantException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerNotExistantException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerNotExistantException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for serialization
            </summary>
            <param name="info">needed for serialization</param>
            <param name="context">needed for serialization</param>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.EPartnerLocationNotExistantException">
            <summary>
            Can be thrown to signalise that a PPartnerLocation Key does not exist in the DB
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerLocationNotExistantException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerLocationNotExistantException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerLocationNotExistantException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerLocationNotExistantException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for serialization
            </summary>
            <param name="info">needed for serialization</param>
            <param name="context">needed for serialization</param>
        </member>
        <member name="T:Ict.Petra.Shared.MPartner.EPartnerFamilyIDException">
            <summary>
            Throw this exception to signalize that there is a problem in finding a family ID
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerFamilyIDException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerFamilyIDException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerFamilyIDException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor for serialization
            </summary>
            <param name="info">needed for serialization</param>
            <param name="context">needed for serialization</param>
        </member>
        <member name="M:Ict.Petra.Shared.MPartner.EPartnerFamilyIDException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for serialization
            </summary>
            <param name="info">needed for serialization</param>
            <param name="context">needed for serialization</param>
        </member>
    </members>
</doc>
