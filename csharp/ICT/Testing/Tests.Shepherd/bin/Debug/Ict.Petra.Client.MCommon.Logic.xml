<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Petra.Client.MCommon.Logic</name>
    </assembly>
    <members>
        <member name="T:Ict.Petra.Client.MCommon.TAddressHandling">
            <summary>
            Contains functions for handling of Addresses.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddress(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32)">
             <summary>
             Creates a new DataRow in the passed PLocation and PPartnerLocation tables.
            
             </summary>
             <param name="ALocationDT">Typed PLocation table. If nil is passed in it is created
             automatically</param>
             <param name="APartnerLocationDT">Typed PPartnerLocation table. If nil is passed in
             it is created automatically</param>
             <param name="APartnerKey">PartneKey of the Partner for which the Address should
             be created</param>
             <param name="APartnerClass">PartnerClass of the Partner for which the Address should
             be created</param>
             <param name="ACountryCode"></param>
             <param name="ANewLocationKey">A LocationKey that the new Location and
             PartnerLocation rows would be set to.</param>
             <returns>void</returns>
             <exception cref="T:System.ArgumentException"> if any of the Arguments (or their combination) is
             not valid
             </exception>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddress(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64)">
             <summary>
             Creates a new DataRow in the passed PLocation and PPartnerLocation tables.
            
             </summary>
             <param name="ALocationDT">Typed PLocation table. If nil is passed in it is created
             automatically</param>
             <param name="APartnerLocationDT">Typed PPartnerLocation table. If nil is passed in
             it is created automatically</param>
             <param name="APartnerKey">PartneKey of the Partner for which the Address should
             be created</param>
             <param name="APartnerClass">PartnerClass of the Partner for which the Address should
             be created</param>
             <param name="ACountryCode"></param>
             <param name="ANewLocationKey">A LocationKey that the new Location and
             PartnerLocation rows would be set to.</param>
             <param name="ACopyFromPartnerLocationKey">Pass in a PartnerLocation Key if certain
             data (e-mail address, URL and mobile phone number) should be copied over
             to the new Address. Note: the DataRow specified with
             ACopyFromPartnerLocationKey must be present in the APartnerLocationDT
             table!</param>
             <param name="ACopyFromPartnerSiteKey">A SiteKey to find the location that should be the source of the copy</param>
             <returns>void</returns>
             <exception cref="T:System.ArgumentException"> if any of the Arguments (or their combination) is
             not valid
             </exception>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddress(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int64,System.Int32,System.Int64,System.Boolean,System.Boolean)">
             <summary>
             Creates a new DataRow in the passed PLocation and PPartnerLocation tables.
            
             </summary>
             <param name="ALocationDT">Typed PLocation table. If nil is passed in it is created
             automatically</param>
             <param name="APartnerLocationDT">Typed PPartnerLocation table. If nil is passed in
             it is created automatically</param>
             <param name="APartnerKey">PartneKey of the Partner for which the Address should
             be created</param>
             <param name="APartnerClass">PartnerClass of the Partner for which the Address should
             be created</param>
             <param name="ACountryCode"></param>
             <param name="ANewLocationKey">A LocationKey that the new Location and
             PartnerLocation rows would be set to.</param>
             <param name="ACopyFromFamilyPartnerKey">Pass in the PartnerKey of a Family Partner
             to copy over all data from the Family's Address. Note: the DataRow
             specified with ACopyFromFamilyPartnerKey must be present in the
             APartnerLocationDT table!</param>
             <param name="ACopyFromFamilyLocationKey">Pass in the LocationKey of the Family
             Partner specified in ACopyFromFamilyPartnerKey to copy over all data from
             the Family's Address. Note: the DataRow specified with
             ACopyFromFamilyLocationKey must be present in both the ALocationDT and
             APartnerLocationDT table!</param>
             <param name="ACopyFromFamilySiteKey">A SiteKey to find the location that should be the source of the copy</param>
             <param name="ACopyFromFamilyOnlyLocation"></param>
             <param name="ADeleteDataRowCopiedFrom"></param>
             <returns>void</returns>
             <exception cref="T:System.ArgumentException"> if any of the Arguments (or their combination) is
             not valid
             </exception>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddress(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int64,System.Int32,System.Int64,System.Boolean)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
            <param name="ACopyFromFamilyLocationKey"></param>
            <param name="ACopyFromFamilySiteKey"></param>
            <param name="ACopyFromFamilyOnlyLocation"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddress(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int64,System.Int32,System.Int64)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
            <param name="ACopyFromFamilyLocationKey"></param>
            <param name="ACopyFromFamilySiteKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddress(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
            <param name="ACopyFromPartnerSiteKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
            <param name="ACopyFromFamilyLocationKey"></param>
            <param name="ACopyFromFamilySiteKey"></param>
            <param name="ACopyFromFamilyOnlyLocation"></param>
            <param name="ADeleteDataRowCopiedFrom"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddress(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64,System.Boolean)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
            <param name="ACopyFromPartnerSiteKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
            <param name="ACopyFromFamilyLocationKey"></param>
            <param name="ACopyFromFamilySiteKey"></param>
            <param name="ACopyFromFamilyOnlyLocation"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddress(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
            <param name="ACopyFromPartnerSiteKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
            <param name="ACopyFromFamilyLocationKey"></param>
            <param name="ACopyFromFamilySiteKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CopyFoundAddressLocationData(Ict.Petra.Shared.MPartner.Partner.Data.PLocationRow,Ict.Petra.Shared.MPartner.Partner.Data.PLocationRow)">
            <summary>
            </summary>
            <param name="AFoundAddressLocationRow"></param>
            <param name="ADestinationLocationRow"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CopyLocationData(Ict.Petra.Shared.MPartner.Partner.Data.PLocationRow,Ict.Petra.Shared.MPartner.Partner.Data.PLocationRow)">
             <summary>
             Copies over all columns of a Location Row, except the Primary Key columns
             and the last four columns (containing creation and change information).
            
             </summary>
             <param name="ACopyLocationsRow">Row to copy data from</param>
             <param name="ADestinationLocationsRow">Row to copy data to
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddressInternal(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64,System.Boolean,System.Boolean)">
             <summary>
             Creates a new DataRow in the passed PLocation and PPartnerLocation tables.
            
             </summary>
             <param name="ALocationDT">Typed PLocation table. If nil is passed in it is created
             automatically</param>
             <param name="APartnerLocationDT">Typed PPartnerLocation table. If nil is passed in
             it is created automatically</param>
             <param name="APartnerKey">PartneKey of the Partner for which the Address should
             be created</param>
             <param name="APartnerClass">PartnerClass of the Partner for which the Address should
             be created</param>
             <param name="ACountryCode"></param>
             <param name="ANewLocationKey">A LocationKey that the new Location and
             PartnerLocation rows would be set to.</param>
             <param name="ACopyFromPartnerLocationKey">Pass in a PartnerLocation Key if certain
             data (e-mail address, URL and mobile phone number) should be copied over
             to the new Address (the following parameters must then be -1 to be legal)
             Default: -1 (=no copy). Note: the DataRow specified with
             ACopyFromPartnerLocationKey must be present in the APartnerLocationDT
             table!</param>
             <param name="ACopyFromPartnerSiteKey">A SiteKey to find the location that should
             be the source of the copy</param>
             <param name="ACopyFromFamilyPartnerKey">Pass in the PartnerKey of a Family Partner
             to copy over all data from the Family's Address
             (ACopyFromPartnerLocationKey must be -1 to be legal). Default: -1
             (=no copy). Note: the DataRow specified with ACopyFromFamilyPartnerKey must
             be present in the APartnerLocationDT table!</param>
             <param name="ACopyFromFamilyLocationKey">Pass in the LocationKey of the Family
             Partner specified in ACopyFromFamilyPartnerKey to copy over all data from
             the Family's Address (ACopyFromPartnerLocationKey must be -1 to be legal)
             Default: -1 (=no copy). Note: the DataRow specified with
             ACopyFromFamilyLocationKey must be present in both the ALocationDT and
             APartnerLocationDT table!</param>
             <param name="ACopyFromFamilySiteKey">A SiteKey to find the location that should be the
             source of the copy</param>
             <param name="ACopyFromFamilyOnlyLocation"></param>
             <param name="ADeleteDataRowCopiedFrom"></param>
             <returns>void</returns>
             <exception cref="T:System.ArgumentException">If any of the Arguments (or their combination) is
             not valid
             </exception>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddressInternal(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64,System.Boolean)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
            <param name="ACopyFromPartnerSiteKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
            <param name="ACopyFromFamilyLocationKey"></param>
            <param name="ACopyFromFamilySiteKey"></param>
            <param name="ACopyFromFamilyOnlyLocation"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddressInternal(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
            <param name="ACopyFromPartnerSiteKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
            <param name="ACopyFromFamilyLocationKey"></param>
            <param name="ACopyFromFamilySiteKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddressInternal(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
            <param name="ACopyFromPartnerSiteKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
            <param name="ACopyFromFamilyLocationKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddressInternal(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
            <param name="ACopyFromPartnerSiteKey"></param>
            <param name="ACopyFromFamilyPartnerKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddressInternal(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
            <param name="ACopyFromPartnerSiteKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddressInternal(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
            <param name="ACopyFromPartnerLocationKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.CreateNewAddressInternal(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable,Ict.Petra.Shared.MPartner.Partner.Data.PPartnerLocationTable,System.Int64,Ict.Petra.Shared.TPartnerClass,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="ALocationDT"></param>
            <param name="APartnerLocationDT"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerClass"></param>
            <param name="ACountryCode"></param>
            <param name="ANewLocationKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.GetAddressOrder(System.String)">
             <summary>
             Gets the AdressOrder (p_address_order_i DB field) of a certain Country.
            
             </summary>
             <param name="ACountryCode">CountryCode (ISO Code) of a Country</param>
             <returns>AddressOrder for that Country (0 if Country cannot be found).
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.GetDefaultLocationType(Ict.Petra.Shared.TPartnerClass)">
            <summary>
            </summary>
            <param name="APartnerClass"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TAddressHandling.GetDefaultAddresseeType(Ict.Petra.Shared.TPartnerClass)">
            returns the default addressee type for the given Partner class
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TDelegateGetPartnerShortName">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TFieldOfServiceLogic">
             <summary>
             Logic for the Field Of Service Screen
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TFieldOfServiceLogic.FMainDS">
            <summary>Main DataSet for the Screen</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TFieldOfServiceLogic.FUIConnector">
            <summary>Reference to the screen's UIConnector (serverside Business Object)</summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TFieldOfServiceLogic.GetFieldOfServiceUIConnector(System.Int64,Ict.Petra.Shared.MCommon.Data.FieldOfServiceTDS@)">
             <summary>
             Instantiates the Screen's UIConnector and retrieves data.
            
             </summary>
             <param name="APartnerKey">Partner Key of the Partner</param>
             <param name="AMainDS">Typed DataSet containing the data from the DB</param>
             <returns>true if successful, otherwise false
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TFieldOfServiceLogic.UnRegisterUIConnector">
             <summary>
             Frees the UIConnector so it can be GC'ed on the server side.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TOfficeSpecificDataLabelsLogic">
            <summary>
            Contains logic for the Office Specific Data Labels Grid.
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TPartnerAddressChangePropagationSelectionLogic">
            <summary>
            Contains logic for the Partner Address Change Propagation Selection Dialog.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TPartnerAddressChangePropagationSelectionLogic.CreateColumns(Ict.Common.Controls.TSgrdDataGrid,System.Data.DataTable)">
             <summary>
             This procedure creates the colums of the DataGrid displayed
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TPartnerAddressChangePropagationSelectionLogic.InitialisePartnerTypeFamilyMembers(Ict.Petra.Shared.MPartner.Partner.Data.PartnerAddressAggregateTDSChangePromotionParametersTable)">
             <summary>
             This procedure initializes this System.Object.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TPartnerAddressChangePropagationSelectionLogic.PartnerSharingLocationDV">
             <summary>
             This property handles the datasource of this dialogue
            
             </summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TPartnerAddressChangePropagationSelectionLogic.DataGrid">
             <summary>
             This property handles the TypeCode property
            
             </summary>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TPartnerLocationChangePropagationSelectionLogic">
            <summary>
            Contains logic for the Partner Location Change Propagation Selection Dialog.
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TPartnerLocationChangePropagationSelectionLogic.CreateColumnsPersonsLocations(Ict.Common.Controls.TSgrdDataGrid,System.Data.DataTable)">
             <summary>
             This procedure creates the colums of the Persons' Locations DataGrid
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TPartnerLocationChangePropagationSelectionLogic.CreateColumnsChangedDetails(Ict.Common.Controls.TSgrdDataGrid,System.Data.DataTable)">
             <summary>
             This procedure creates the colums of the Changed Details DataGrid
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TPartnerLocationChangePropagationSelectionLogic.InitialisePartnerTypeFamilyMembers(Ict.Petra.Shared.MPartner.Partner.Data.PartnerAddressAggregateTDSChangePromotionParametersTable)">
             <summary>
             This procedure initializes this System.Object.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TPartnerLocationChangePropagationSelectionLogic.PartnerSharingLocationDV">
             <summary>
             This property handles the datasource of this dialogue
            
             </summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TPartnerLocationChangePropagationSelectionLogic.DataGridPersonsLocations">
             <summary>
             This property handles the TypeCode property
            
             </summary>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.CommonResourcestrings">
            <summary>
            Contains resourcetexts that are used across several Petra Modules.
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrGenericInfo">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrGenericWarning">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrGenericError">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrGenericReady">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrGenericInactiveCode">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrGenericFunctionalityNotAvailable">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrFormHasUnsavedChanges">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrFormHasUnsavedChangesQuestion">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrSavingDataCancelled">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrSavingDataNothingToSave">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrSavingDataErrorOccured">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrPetraServerTooBusy">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrPetraServerTooBusyTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrOpeningCancelledByUser">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrOpeningCancelledByUserTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrPartnerClass">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrPartnerKey">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrErrorOnlyForPerson">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrErrorOnlyForFamilyOrPerson">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrErrorOnlyForPersonOrUnit">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrErrorTheCodeIsNoLongerActive1">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrErrorTheCodeIsNoLongerActive2">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrErrorTheCodeIsNoLongerActive3">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrErrorNoInstalledSites">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrBtnTextNew">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrBtnTextEdit">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrBtnTextDelete">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrBtnTextCancel">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrBtnTextDone">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrPartnerStatusChange">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.CommonResourcestrings.StrPartnerReActivationTitle">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TTellGuiToEnableSaveButton">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic">
            <summary>
            Contains logic for the UC_DataLabels_OfficeSpecific UserControl.
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.UGridRowInfo">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.UInFocussingMode">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.ExecutePossiblySomethingToSave">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.TestDataColumnChanging(System.Object,System.Data.DataColumnChangeEventArgs)">
            <summary>
            test code
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.InitialiseDataStructures(Ict.Petra.Shared.MPartner.Partner.Data.PDataLabelValuePartnerTable,Ict.Petra.Shared.MPersonnel.Personnel.Data.PDataLabelValueApplicationTable)">
             <summary>
             Initialises DataSets and Tables
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.SetupGridValueCell(System.Int32,Ict.Petra.Shared.MPartner.Partner.Data.PDataLabelRow)">
             <summary>
             Sets up the value cell(s) for a specific data label
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.GetOrCreateDataLabelValueRow(System.Boolean,Ict.Petra.Shared.MPartner.Partner.Data.PDataLabelRow,Ict.Petra.Shared.MPartner.Partner.Data.PDataLabelValuePartnerRow@,Ict.Petra.Shared.MPersonnel.Personnel.Data.PDataLabelValueApplicationRow@)">
             <summary>
             Get or create a data column for a given data label
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.PerformDataBinding(Ict.Petra.Shared.MPartner.Partner.Data.PDataLabelRow,Ict.Petra.Shared.MPartner.Partner.Data.PDataLabelValuePartnerRow,Ict.Petra.Shared.MPersonnel.Personnel.Data.PDataLabelValueApplicationRow,System.Windows.Forms.UserControl)">
             <summary>
             perform data binding for user control depending on type etc.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.SetupGridColumnsAndRows">
             <summary>
             Sets up the columns and rows of the Grid.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.ActUponGridSizeChanged">
             <summary>
             React on a resized grid
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.ApplyCellValue(System.Int32,System.Int32)">
             <summary>
             Apply value in specified cell to underlying data structure
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.DataSavedEventFired(System.Boolean)">
             <summary>
             React upon data saved event
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.FreeStaticObjects">
            <summary>
            Needs to be called from the instantiator of this Class once it is
            done with using this class to ensure that no memory leak occurs!!!
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.SaveAllChanges">
            <summary>
            This provides a means for the control host to tell the control to ensure the datasource is uptodate
            </summary>
            <returns>void</returns>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.MainDS">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.PartnerKey">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.ApplicationKey">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.RegistrationOffice">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.OfficeSpecificDataLabelUse">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.OfficeSpecificGrid">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.UCStatusBar">
            <summary>todoComment</summary>
        </member>
        <member name="E:Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic.PossiblySomethingToSave">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TGridRowInfo">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.Initialize(System.Int32)">
            <summary>
            todoComment
            </summary>
            <param name="ANumberOfRows"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.SetDataRowKey(System.Int32,System.Int32)">
            <summary>
            todoComment
            </summary>
            <param name="AGridRowIndex"></param>
            <param name="ADataRowKey"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.SetHeader(System.Int32,System.Boolean)">
            <summary>
            todoComment
            </summary>
            <param name="AGridRowIndex"></param>
            <param name="AIsHeader"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.SetControl(System.Int32,System.Windows.Forms.UserControl)">
            <summary>
            todoComment
            </summary>
            <param name="AGridRowIndex"></param>
            <param name="AControl"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.SetControlWidth(System.Int32,System.Int32,System.Int32)">
            <summary>
            todoComment
            </summary>
            <param name="AColumn1Width"></param>
            <param name="AColumn2Width"></param>
            <param name="AColumn3Width"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.Count">
            <summary>
            todoComment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.GetDataRowKey(System.Int32)">
            <summary>
            todoComment
            </summary>
            <param name="AGridRowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.IsHeader(System.Int32)">
            <summary>
            todoComment
            </summary>
            <param name="AGridRowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.GetControl(System.Int32)">
            <summary>
            todoComment
            </summary>
            <param name="AGridRowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TGridRowInfo.GetRow(System.Windows.Forms.UserControl)">
            <summary>
            todoComment
            </summary>
            <param name="AControl"></param>
            <returns></returns>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TCellEventNotificationController">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TCellEventNotificationController.FGridLogic">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TCellEventNotificationController.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TCellEventNotificationController.Initialize(Ict.Petra.Client.MCommon.TUCOfficeSpecificDataLabelsLogic)">
            <summary>
            todoComment
            </summary>
            <param name="AGridLogic"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TCellEventNotificationController.OnFocusEntered(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="ASender"></param>
            <param name="AEventArgs"></param>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TCellEventNotificationController.OnFocusLeaving(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="ASender"></param>
            <param name="ACancelEventArgs"></param>
        </member>
        <member name="T:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic">
             <summary>
             Contains logic for the UC_PartnerAddresses UserControl.
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrAnotherAddressIsMailingAddress">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrAnotherAddressIsMailingAddressTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrSecurityViolationExplanation1">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrSecurityViolationExplanation2">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrSecurityViolationExplanationTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrDeleteQuestionLine1">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrDeleteQuestionShared">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrDeleteQuestionNotShared">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrDeleteQuestionTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrFoundAddressIsDuplicate">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrFoundAddressIsDuplicateTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrPartnerReActivationBecauseOfNewAddr">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrAddressCannotBeExpired">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.StrAddressCannotBeExpiredTitle">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FPartnerEditUIConnector">
            <summary>Holds a reference to the Proxy System.Object of the Serverside UIConnector</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FMainDS">
            <summary>Holds a reference to the DataSet that contains most data that is used on the screen</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FDataGridDV">
            <summary>DataView that the SourceDataGrid is bound to</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FCurrentDataRow">
            <summary>DataRow of the record we are currently working with</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FCurrentGridRow">
            <summary>Grid Row of the record we are currently working with</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FCurrentLocationKey">
            <summary>DataTable Key value for the record we are currently working with</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FCurrentSiteKey">
            <summary>DataTable Key value for the record we are currently working with</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FDataGrid">
            <summary>Holds a reference to the DataGrid that is used to display the records</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FGridRowIconsImageList">
            <summary>Holds a reference to an ImageList containing Icons that can be shown in Grid Rows</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FClientSideNewDataRowKey">
            <summary>Fictive DataTable Key value for new records that is used on the Client side  until the record is saved by the PetraServer and gets a proper Key value</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FIsRecordBeingAdded">
            <summary>true if a record is beeing added, otherwise false</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FNewRecordFromRecordKey">
            <summary>DataTable Key value of an existing record that is used in creating a new record</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FValidFromBeforeEditing">
            <summary>Value of DateEffective DataColumn before the user edits the current record</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FValidUntilBeforeEditing">
            <summary>Value of DateGoodUntil DataColumn before the user edits the current record</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FSendMailBeforeEditing">
            <summary>Value of SendMail DataColumn before the user edits the current record</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FJustDeletedPartnerLocationsRow">
            <summary>Copy of the PartnerLocation record that is being deleted</summary>
        </member>
        <member name="F:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.FCleanupAddressesLocationKeys">
            <summary>Array holding LocationKeys of records that need to be cleaned up (deleted) before Merging</summary>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.CleanupRecordsBeforeMerge">
             <summary>
             Performs necessary actions to make the Merging of rows that were changed on
             the Server side into the Client-side DataSet possible.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.CopyFoundAddressData(Ict.Petra.Shared.MPartner.Partner.Data.PLocationRow)">
             <summary>
             Allows copying of an Address that the user has found (using Menu 'Edit'->'Find
             New Address') into the currently edited Address.
            
             </summary>
             <param name="AFoundAddressLocationRow">DataRow containing the Location information
             for the found Address.
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.#ctor">
             <summary>
             Default Constructor.
            
             Initialises Fields.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.CheckDeleteSecurityNonSharedLocation(System.Boolean)">
             <summary>
             Checks security for deletion of non-shared Locations.
            
             </summary>
             <param name="AShowMessages">Set to true to show a message if the check fails,
             otherwise to false</param>
             <returns>true if the user has the necessary security privileges, otherwise
             false
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.CheckDeleteSecurityGeneral(System.Boolean)">
             <summary>
             Checks security for deletion of Locations.
            
             </summary>
             <param name="AShowMessages">Set to true to show a message if the check fails,
             otherwise to false</param>
             <returns>true if the user has the necessary security privileges, otherwise
             false
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.GetCurrentRecords">
             <summary>
             Returns a DataView that contains only Current DataRows.
            
             </summary>
             <returns>DataView that contains only Current DataRows.
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.CreateColumns(Ict.Petra.Shared.MPartner.Partner.Data.PLocationTable)">
             <summary>
             Creates DataBound columns for the Grid control.
            
             </summary>
             <param name="ASourceTable">DataTable containing DataColumns which should be
             DataBound to columns of the DataGrid
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.EditRecord">
             <summary>
             Edits the currently selected record.
            
             Note: a record actually consists of two records (one for the p_location table
             and one for the p_partner_location table).
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.EnsureDefaultRecordIsPresentIfNeeded">
             <summary>
             Ensures that a 'default' record is always present.
            
             This makes it possible to have a Grid that always has at least 1 record (i.e.
             never has zero records).
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.ExpireAllCurrentAddresses(System.DateTime)">
             <summary>
             Expires all Current Addresses (that is, non-Past and non-Future Addresses).
            
             </summary>
             <param name="ACancelDate">Date when the Subscriptions should end (can be empty)</param>
             <returns>ArrayList holding Addresses that were Expired
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.ProcessEditedRecord(Ict.Petra.Shared.MPartner.Partner.Data.PartnerEditTDSPPartnerLocationRow@)">
             <summary>
             Ends the editing of the currently selected record.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.RefreshRecordsAfterMerge">
             <summary>
             Performs necessary actions after the Merging of rows that were changed on
             the Server side into the Client-side DataSet.
            
             Determination of the Grid icons and the 'Best Address' (this changes
             certain DataColumns in some DataRows!)
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.AddRecord(System.Int64,System.Int32,System.Int32)">
             <summary>
             Adds a new record (based on either the selected record or a found record),
            
             Note: a new record actually consists of two new records (one for the
             p_location table and one for the p_partner_location table).
            
             </summary>
             <param name="ANewFromSiteKey">The SiteKey of the currently selected record</param>
             <param name="ANewFromLocationKey">The LocationKey of the currently selected record</param>
             <param name="AFoundNewLocationKey">Must be 0, except if a new record has been found
             by the user and the data of this record should be copied over into the new
             record.</param>
             <returns>Key of new record.
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.IsAddressRowPresent(Ict.Petra.Shared.MPartner.TLocationPK)">
             <summary>
             Checks whether the Partner has an Address with the specified PK.
            
             @comment Displays an error message to the user if it will return false!
            
             </summary>
             <param name="ALocationPK">PK of a DataRow in the PLocation table</param>
             <returns>true if the Address was found, otherwise false.
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.AddCleanupAddressesLocationKey(System.Int32)">
             <summary>
             Adds one LocationKey to the FCleanupAddressesLocationKeys array.
            
             </summary>
             <param name="ALocationKey">Location Key that is to be added
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.AddDefaultRecord">
             <summary>
             Adds a 'default' record to each of the DataTables.
            
             This makes it possible to have a Grid that always has at least 1 record (i.e.
             never has zero records).
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.DeleteRecord">
             <summary>
             Deletes the currently selected record.
            
             Displays a MessageBox to the user where he/she needs to choose 'Yes' or 'No'.
             The record is only deleted when 'Yes' is chosen and security checks were OK.
            
             Note: a record actually consists of two records (one for the p_location table
             and one for the p_partner_location table).
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.DetermineInitiallySelectedRecord(System.Int32@,System.Int32@,System.Int64@)">
             <summary>
             Determines the record that should be initially be the selected record.
            
             </summary>
             <param name="ARowNumber">Grid row number for the initially selected record</param>
             <param name="ALocationKey">DataTable Key value for the initially selected record</param>
             <param name="ASiteKey">DataTable Key value for the initially selected record
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.DetermineRecordToSelect(System.Data.DataView)">
             <summary>
             Determines the row that needs to be selected in the Grid (depending on
             whether its an existing or a new row).
            
             </summary>
             <param name="ADataView">DataView that the Grid is DataBound to</param>
             <returns>DataRowView containing the row that needs to be selected
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.DetermineCurrentKey(System.Int32)">
             <summary>
             Determines the DataTable Key of the currently selected record.
            
             Besides returning the DataTable Key, this also sets important internal
             variables!
            
             </summary>
             <param name="ARow">Grid row of the currently selected record.</param>
             <returns>DataTable Key of the currently selected record.
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.LoadDataOnDemand">
             <summary>
             Loads Data from the PetraServer into FMainDS.
            
             Data comes from the p_location and p_partner_location tables in the DB,
            
             </summary>
             <returns>true if successful, otherwise false.
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.GetAddressKindIconForGridRow(System.Int32)">
             <summary>
             Determines the Address Kind Icon (displayed in the first Column of the Grid).
            
             </summary>
             <param name="ARow">Grid Row</param>
             <returns>Address Kind Icon
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.GetMailingAddressIconForGridRow(System.Int32)">
             <summary>
             Determines the Mailing Address Icon (displayed in the second Column of the
             Grid).
            
             </summary>
             <param name="ARow">Grid Row</param>
             <returns>Mailing Address Icon
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.GetToolTipTextForGridRow(System.Int16,System.Int16)">
             <summary>
             Determines the Text that should be shown as a ToolTip for a certain Grid Row.
            
             </summary>
             <param name="AColumn">IGNORED (but needed because this will be called from a
             callback that has this parameter)</param>
             <param name="ARow">Grid Row</param>
             <returns>ToolTip Text
             </returns>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.PartnerEditUIConnector">
            <summary>Used for passing through the Clientside Proxy for the UIConnector</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.MainDS">
            <summary>DataSet that contains most data that is used on the screen</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.LocationKey">
            <summary>DataTable Key value for the record we are working with</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.SiteKey">
            <summary>DataTable Key value for the record we are working with</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.DataGrid">
            <summary>DataGrid that is used to display the records</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.GridRowIconsImageList">
            <summary>ImageList containing Icons that can be shown in Grid Rows</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.IsRecordBeingAdded">
            <summary>true if a record is beeing added, otherwise false</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.LocationDataRowOfCurrentlySelectedRecord">
            <summary>Record that is currently selected (p_location DataTable)</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.PartnerLocationDataRowOfCurrentlySelectedRecord">
            <summary>Record that is currently selected (p_partner_location DataTable)</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.NewRecordFromRecordKey">
            <summary>Key value of an existing record that is used to create a new record</summary>
        </member>
        <member name="P:Ict.Petra.Client.MCommon.TUCPartnerAddressesLogic.RecordKeyBeforeFinding">
            <summary>Holds the PK of the PLocationTable before the PK was changed to the PK of the found Address if a Find Address command was issued by the user, otherwilse this is nil</summary>
        </member>
    </members>
</doc>
