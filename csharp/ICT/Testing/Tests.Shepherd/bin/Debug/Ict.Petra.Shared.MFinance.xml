<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Petra.Shared.MFinance</name>
    </assembly>
    <members>
        <member name="T:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum">
            <summary>
            Enums holding the possible cacheable tables for the Petra Finance Module, specifically Finance submodule
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.AnalysisTypeList">
            <summary>
            Contains types of analysis attributes
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.FreeformAnalysisList">
            <summary>
            Values for the analysis types
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.AnalysisAttributeList">
            <summary>
            Relationsship between account and analysis type
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.BudgetTypeList">
            <summary>
            Used for initial set up of budgets, for how to calculate amounts for each period.  Some possible types are adhoc,same,percentage of annual.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.CostCentreTypesList">
            <summary>
            Stores standard and user-defined cost centre types.  For example: Foreign, Local.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.MethodOfGivingList">
            <summary>
            Special payment programs the donor may give money through. (ie, Gift Aid in the UK)
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.MethodOfPaymentList">
            <summary>
            Media types of money received. Eg: Cash, Check Credit Card
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.MotivationGroupList">
            <summary>
            This is used to track a partner's reason for contacting the organisation/sending money. Divided into Motivation Detail codes
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.MotivationList">
            <summary>
            list of motivations (for gifts)
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.AccountingPeriodList">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.LedgerNameList">
            <summary>
            names of available ledgers
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.LedgerDetails">
            <summary>
            ledger details (number of accounting periods, current period, etc)
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.CostCentreList">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.AccountList">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TCacheableFinanceTablesEnum.AccountHierarchyList">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.MFinance.CommonRoutines">
            <summary>
            Contains several functions which are specific to the Petra Finance Module.
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MFinance.CommonRoutines.CheckBIC(System.String)">
             <summary>
             Checks whether the submitted BIC (Bank Identifier Code) is valid.
            
             The Bank Identifier Code is a unique address which, in telecommunication
             messages, identifies precisely the financial institutions involved in
             financial transactions. This identification method was recognised by the
             International Organisation for Standardisation (ISO).
            
             BICs either have 8 or 11 characters. The 11-character version specifes the
             "Branch code" in addition to the other information.
             Here is an example of an BIC: "BANKCCLL" or "BANKCCLLMAR".
             BANK = Bank Code. "BANK" identifies the bank, here "banque BNP-Paribas".
             This four-character code is called the Bank Code. It is unique
             to each financial institution and can only be made up of letters.
             CC   = Country Code. "CC" is the ISO country code for France.
             The country code identifies the country in which the financial
             institution is located and can only be made up of letters.
             LL   = Location Code. "LL" stands for Paris. It is the Location Code.
             This 2-character code may be alphabetical or numerical.
             The location code provides geographical distinction within a country,
             eg., cities, states, provinces and time zones.
             MAR  = Branch Code. "BNP-Paribas" has several branches throughout France.
             "MAR" identifies the "banque BNP-Paribas" branch in "Marseille",
             a city in the South of France.
             This 3-character code is called the Branch Code. It identifies a
             specific branch, or, for example, a department in a bank within the same
             country as the 8-character SWIFT BIC. This code may be alphabetical or
             numerical. *The Branch code is optional for SWIFT users.*
             Example from of the BIC code of London Branch of the HSBC Bank PLC
             (CITY OF LONDON CORPORATE OFFICE): MIDLGB2110C
            
             There is a web site where BIC codes can be checked:
             http://www.swift.com/biconline/
            
             </summary>
             <param name="ABic">String that should be checked</param>
             <returns>True if ABic is a valid BIC or an empty String or nil, False if it is
             not valid.
             </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MFinance.CommonRoutines.CheckAccountNumberIsNotIBAN(System.String)">
             <summary>
             Checks whether the given account number is NOT an IBAN.
            
             This check is derived from a statement found in the 'EUROPEAN COMMITTEE FOR
             BANKING STANDARDS' (ECBS) document 'IBAN: STANDARD IMPLEMENTATION GUIDELINES'
             (SIG203 V3.2 - AUGUST 2003), Section 8.2., which says:
             "The presence of an IBAN can be detected from the two starting alpha
             characters which signify the ISO country code followed by two numeric digits
             which signify the IBAN check digits. *There are no domestic account numbers
             known which start with two alpha characters followed by two numeric digits*."
            
             </summary>
             <param name="AAccountNumber">String that should be checked.
             </param>
             <returns>True if the submitted account number does not start with two letters
             followed by two digits. If the submitted account number does start with two
             letters followed by two digits then it returns False.</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MFinance.CommonRoutines.CheckAccountNumber(System.String,System.String)">
            <summary>
            Checks the validity of a bank account number.
            This function checks the validity of a bank account number by performing a
            country-specific check on the submitted account number, if a check rountine for
            that country exists.
            </summary>
            <param name="AAccountNumber">Account number</param>
            <param name="ABankCountryCode">Country code of the bank</param>
            <returns> -1 = length check failed.
                       0 = invalid account number
                       1 = valid account number
                       2 = probably valid - account number cannot be validated by country-specific check
                       3 = account number could not be validated - no country-specific check implemented
                       4 = Bank partner could not be found
            </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MFinance.CommonRoutines.CheckAccountNumber_NL(System.String)">
             <summary>
             Checks a Dutch (NL) account number ("Rekeningnummer") for validity.
             Explanation:  (1) Excludes "Postbank" account numbers (Postgiro-accounts) since
                            there is no way to verify them.
                        (2) Checks the length of the account number.
                        (3) Runs a checksum algorithm to check the Dutch bank account numbers
                            (modulo 11 proof).
                            Example with bank account number "123456789":
                              1st digit bank-account-number = 1 9 * 1 =  9
                              2nd digit bank-account-number = 2 8 * 2 = 16
                              3rd digit bank-account-number = 3 7 * 3 = 21
                              4th digit bank-account-number = 4 6 * 4 = 24
                              5th digit bank-account-number = 5 5 * 5 = 25
                              6th digit bank-account-number = 6 4 * 6 = 24
                              7th digit bank-account-number = 7 3 * 7 = 21
                              8th digit bank-account-number = 8 2 * 8 = 16
                              9th digit bank-account-number = 9 1 * 9 =  9
                                                             added up: 165
            
                              Because 165 is devidable by 11, chances are big
                              that the bank account number "123456789" is correct
                              (165/11=15 rest 0).
            
                        NOTE: "Postbank" account numbers (Postgiro-accounts) cannot be validated!
                              In this case the return value is "2".
            
             </summary>
             <param name="AAcountNumber">Account number</param>
             <returns> -1 = length check failed.
                        0 = invalid account number
                        1 = valid account number
                        2 = probably valid - account number cannot be validated
                            (is a "Postbank" account number [a Postgiro-account])
             </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MFinance.CommonRoutines.PruneAccountNumber(System.String)">
            <summary>
            Removes all characters that are not 0...9 and A...Z from the submitted account number.
            This function is used to be able to compare account numbers that are entered in
            a "fancy" style, eg. "1234-567.89" against ones that are entered in a "plain" style,
            eg. "123456789". This function always returns the plain stlye, no matter if the
            submitted account number is "fancy" style or not.
            </summary>
            <param name="AAcountNumber"></param>
            <returns>AccountNumber in plain style</returns>
        </member>
        <member name="T:Ict.Petra.Shared.MFinance.MFinanceConstants">
            <summary>
            some constants used in the finance module
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BATCH_UNPOSTED">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BATCH_POSTED">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BATCH_CANCELLED">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.TRANSACTION_FX_REVAL">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.TRANSACTION_STD">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.TRANSACTION_ALLOC">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.TRANSACTION_REALLOC">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.TRANSACTION_GIFT">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.TRANSACTION_AP">
            <summary>GL Batch</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.ACCOUNT_HIERARCHY_STANDARD">
            <summary>General Ledger</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.AP_DOCUMENT_OPEN">
            <summary>Accounts Payable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.AP_DOCUMENT_APPROVED">
            <summary>Accounts Payable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.AP_DOCUMENT_POSTED">
            <summary>Accounts Payable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.AP_DOCUMENT_PARTIALLY_PAID">
            <summary>Accounts Payable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.AP_DOCUMENT_PAID">
            <summary>Accounts Payable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.ACCOUNT_PROPERTY_BANK_ACCOUNT">
            <summary>Account Property</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BANK_STMT_STATUS_MATCHED">
            <summary>Bank statements</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BANK_STMT_STATUS_MATCHED_GIFT">
            <summary>Bank statements</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BANK_STMT_STATUS_MATCHED_GL">
            <summary>Bank statements</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BANK_STMT_STATUS_MATCHED_AP">
            <summary>Bank statements</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BANK_STMT_STATUS_NO_MATCHING">
            <summary>Bank statements</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.BANK_STMT_STATUS_UNMATCHED">
            <summary>Bank statements</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.SUB_SYSTEM_GL">
            <summary>Sub Systems, General Ledger</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.SUB_SYSTEM_AP">
            <summary>Sub Systems, Accounts Payable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.SUB_SYSTEM_AR">
            <summary>Sub Systems, Accounts Receivable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.SUB_SYSTEM_GR">
            <summary>Sub Systems, Gifts receivable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.MFinanceConstants.GROUP_DETAIL_KEY_MIN">
            <summary>Unit-Type is key-min</summary>
        </member>
        <member name="T:Ict.Petra.Shared.MFinance.TFinanceBatchFilterEnum">
            <summary>
            enumeration for the filter of the batch screens.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TFinanceBatchFilterEnum.fbfNone">
            <summary>
            no batches displayed
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TFinanceBatchFilterEnum.fbfReadyForPosting">
            <summary>
            show only batches that are ready for posting
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TFinanceBatchFilterEnum.fbfEditing">
            <summary>
            show batches that are unposted and not cancelled. includes ready for posting
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TFinanceBatchFilterEnum.fbfAllCurrent">
            <summary>
            show all batches in current and forward posting periods. includes editing and batches ready for posting
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MFinance.TFinanceBatchFilterEnum.fbfAll">
            <summary>
            show all batches, even previous periods (and years?). includes editing and batches ready for posting
            </summary>
        </member>
    </members>
</doc>
