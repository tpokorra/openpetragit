<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Petra.Shared.MReporting</name>
    </assembly>
    <members>
        <member name="T:Ict.Petra.Shared.MReporting.TRowComparer">
            <summary>
            compare that is able to sort the result of a report
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TRowComparer.FColumnList">
            <summary>list of integers; the column numbers by which the rows should be sorted</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TRowComparer.FCompareMultipleLevels">
            <summary>Enables sorting of multiple levels. This will make the result into a flat table</summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TRowComparer.#ctor(System.String,System.Boolean)">
             <summary>
             Create a comparer, based on the comma separated list of column numbers
            
             </summary>
             <param name="AColumns">comma separated list of integers, describing the columns that the sorting should be based upon</param>
             <param name="ACompareMultipleLevels">Indicator if sorting of multiple levels is allowed.</param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TRowComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two rows of type TResult, using the set of column numbers
            implements the IComparer interface
            </summary>
            <param name="x">First object of TResult to compare</param>
            <param name="y">Second object of TResult to compare</param>
            <returns>same as IComparer.Compare: -1 means x is less than y, =0 means x=y, 1 means x>y
            </returns>
        </member>
        <member name="T:Ict.Petra.Shared.MReporting.TResult">
             <summary>
             This represents one single line of the result.
             The lines are related to each other in a hierarchy,
             which is represented by masterRow and childRow.
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.masterRow">
            <summary>
            the parent row for this current row
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.childRow">
            <summary>
            the identification number of this row
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.depth">
            <summary>
            current depth
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.display">
            <summary>
            should this row be displayed
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.debit_credit_indicator">
            <summary>
            is this a debit or a credit
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.code">
            <summary>
            another identifier, but independent of hierarchy; used for debugging and other references
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.condition">
            <summary>
            condition for this row to be displayed
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.header">
            <summary>
            header for this row
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.descr">
            <summary>
            description on the left
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResult.column">
            <summary>
            values for each column
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResult.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.String,System.String,System.Boolean,Ict.Common.TVariant[],Ict.Common.TVariant[],Ict.Common.TVariant[])">
             <summary>
             constructor
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResult.#ctor(Ict.Petra.Shared.MReporting.TResult)">
             <summary>
             copy constructor; creates a copy of the given object
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResult.Assign(Ict.Petra.Shared.MReporting.TResult)">
             <summary>
             copies the values of the given object into the self object
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Shared.MReporting.TResultList">
             <summary>
             This class contains a collection of result lines.
             The result can be exported as a CSV file.
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResultList.results">
            <summary>the list of TResult objects</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TResultList.MaxDisplayColumns">
            <summary>the most right column that should be displayed (start counting at 1)</summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.AddRow(System.Int32,System.Int32,System.Boolean,System.Int32,System.String,System.String,System.Boolean,Ict.Common.TVariant[],Ict.Common.TVariant[],Ict.Common.TVariant[])">
            <summary>
            add a row to the result
            </summary>
            <param name="masterRow"></param>
            <param name="childRow"></param>
            <param name="display"></param>
            <param name="depth"></param>
            <param name="code"></param>
            <param name="condition"></param>
            <param name="debit_credit_indicator"></param>
            <param name="header"></param>
            <param name="descr"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.#ctor">
             <summary>
             Constructor
             creates the list for the TResult objects
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.#ctor(Ict.Petra.Shared.MReporting.TResultList)">
             <summary>
             Copy Constructor
             creates a copy of another Resultlist;
             this is required to be able to print and export to CSV with the correctly formatted dates
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.Clear">
            <summary>
            clear the result list
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.Sort(System.String)">
             <summary>
             Sort the result.
             only sorts the children of the same parent line.
             First column has higher precedence, so the sorting starts with the last column
            
             </summary>
             <param name="AColumns">comma separated list of integers, describing the columns that the sorting should be based upon
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.Sort(System.String,System.Boolean)">
            <summary>
            Sort the result.
            If AMakeFlatTable is false, then it only sorts the children of the same parent line.
            Otherwise it sorts all lines but the result will be that all children have the same parent line.
            First column has higher precedence, so the sorting starts with the last column
            </summary>
            <param name="AColumns">comma separated list of integers, describing the columns that the sorting should be based upon</param>
            <param name="AMakeFlatTable">Indicator if we should make a flat table. This allows sorting with multiple levels</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.UpdateRow(System.Int32,System.Int32,Ict.Common.TVariant[])">
             <summary>
             Update an existing row, identified by the masterRow and childRow numbers.
             This is needed for the second calculation, which involves other columns,
             whose values did not exist in the first run
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetDeepestVisibleLevel(System.Int32)">
            <summary>
            get the deepest visible level for the given parent row (how deep is the deepest child)
            </summary>
            <param name="AMasterRow"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetDeepestVisibleLevel">
            <summary>
            overloaded version; look for the depth of the deepest child in the whole report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.SortChildren">
            <summary>
            sort the results by their childrow code; using sort by insertion
            needed for excel export
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.CreateSortedListByMaster(System.Collections.ArrayList,System.Int32)">
            <summary>
            sort rows by master
            </summary>
            <param name="sortedList"></param>
            <param name="masterRow"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.WriteBinaryFile(Ict.Petra.Shared.MReporting.TParameterList,System.String)">
             <summary>
             This stores the resultlist and parameterlist into a binary file (using the Datatable conversion);
             This can be used for debugging the printing, and saving time on calculating the report by reusing previous results
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.ReadBinaryFile(System.String,Ict.Petra.Shared.MReporting.TParameterList@)">
             <summary>
             This loads the resultlist and parameterlist from a binary file (using the Datatable conversion);
             This can be used for debugging the printing, and saving time on calculating the report by reusing previous results
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.LoadFromDataTable(System.Data.DataTable)">
            <summary>
            This loads the resultlist from a datatable.
            Mainly used for sending the resultlist over a remote connection
            </summary>
            <param name="table">the datatable that contains a collection of results
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.ToDataTable(Ict.Petra.Shared.MReporting.TParameterList)">
            <summary>
            This stores the resultlist into a datatable.
            Mainly used for sending the resultlist over a remote connection
            </summary>
            <returns>the datatable that contains a collection of results
            </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.ConvertToFormattedStrings(Ict.Petra.Shared.MReporting.TParameterList,System.String)">
            <summary>
            This formats the dates for different output, for example printing
            </summary>
            <param name="AParameters">the current parameters, environmnent variables, for formatting</param>
            <param name="AOutputType">if this is 'Localized' then the dates are formatted in the format DD-MMM-YYYY</param>
            <returns>s a new copy of the result, with the correct formatting
            </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.ConvertToFormattedStrings(Ict.Petra.Shared.MReporting.TParameterList)">
            <summary>
            overload, use Localized formatting
            </summary>
            <param name="AParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.WriteCSV(Ict.Petra.Shared.MReporting.TParameterList,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            This stores the resultlist into a CSV file.
            </summary>
            <param name="AParameters"></param>
            <param name="csvfilename"></param>
            <param name="separator">if this has the value FIND_BEST_SEPARATOR,
            then first the parameters will be checked for CSV_separator, and if that parameter does not exist,
            then the CurrentCulture is checked, for the local language settings</param>
            <param name="ADebugging">if true, thent the currency and date values are written encoded, not localized
            <param name="AExportOnlyLowestLevel">if true, only the lowest level of AParameters are exported (level with higest depth)
            otherwise all levels in AParameter are exported</param>
            </param>
            <returns>true for success</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.WriteCSV(Ict.Petra.Shared.MReporting.TParameterList,System.String,System.String,System.Boolean)">
            <summary>
            overload; export all levels
            </summary>
            <param name="AParameters"></param>
            <param name="csvfilename"></param>
            <param name="separator"></param>
            <param name="ADebugging"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.WriteCSV(Ict.Petra.Shared.MReporting.TParameterList,System.String,System.String)">
            <summary>
            overload; no debugging
            </summary>
            <param name="AParameters"></param>
            <param name="csvfilename"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.WriteCSV(Ict.Petra.Shared.MReporting.TParameterList,System.String)">
            <summary>
            overload; no specific separator, find the best for the current localisation
            </summary>
            <param name="AParameters"></param>
            <param name="csvfilename"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.WriteCSV(Ict.Petra.Shared.MReporting.TParameterList,System.String,System.Boolean)">
            <summary>
            overlaod; no specific separator, find the best for the current localisation
            </summary>
            <param name="AParameters"></param>
            <param name="csvfilename"></param>
            <param name="AExportOnlyLowestLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetResults">
             <summary>
             needed for TRptSituation.processAllRows
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.HasColumns(System.Int32)">
             <summary>
             This function checks if the given row has
             at least one column not equal 0 or NULL
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.HasChildRows(System.Int32)">
             <summary>
             This function checks if the master has children
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetRow(System.Int32)">
             <summary>
             This function returns the row
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetRow(System.String)">
             <summary>
             This function returns the row
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetFirstChildRow(System.Int32)">
             <summary>
             This function returns the first child row of the master
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetChildRows(System.Int32,System.Collections.ArrayList@)">
             <summary>
             This function returns the child rows of the master
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetGrandChildRows(System.Int32,System.Collections.ArrayList@)">
             <summary>
             This function returns the grand children rows of the master
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.HasChildColumns(System.Int32)">
             <summary>
             This function checks if the children of the master have
             at least one column not equal 0 or NULL
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.GetMaxDisplayColumns">
            <summary>
            the maximum number of displayed columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TResultList.SetMaxDisplayColumns(System.Int32)">
            <summary>
            set the maximum number of displayed columns
            </summary>
            <param name="col"></param>
        </member>
        <member name="T:Ict.Petra.Shared.MReporting.eParameterFit">
            This is used to specify, how strictly the column and level value should be fit
            by the result of a search for a parameter.
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.eParameterFit.eExact">
            <summary>
            will fit both column and value exactly.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.eParameterFit.eBestFit">
            <summary>
            will fit the closest column and level, only looking to the current and upper levels
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.eParameterFit.eAllColumnFit">
            <summary>
            will also include values in the levels below the current level
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.eParameterFit.eBestFitEvenLowerLevel">
            <summary>
            will only consider values whose column has the value ALLCOLUMNS (99).
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.MReporting.TParameter">
            <summary>
            This class is able to hold one value,
            and knows to which column and level this variable applies.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameter.name">
            <summary>
            name of the parameter
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameter.column">
            <summary>can be between 1 and 12 and more, or one of the constants defined in Ict.Petra.Shared.MReporting.Consts</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameter.level">
            <summary>level 1 is the main level, the bigger the number, the lower the level.</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameter.subreport">
            <summary>there can be several subreports on a report, with different formatting (lines etc). default is 1 for report wide settings, 0 for the first report</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameter.value">
            <summary>the value of this parameter</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameter.paramType">
            <summary>CALCULATIONPARAMETERS should not be written back to the UI</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameter.pRptElement">
            <summary>can be used for later calculations, when the depending values have been calculated</summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameter.pRptGroup">
            <summary>can be used for later calculations, when the depending values have been calculated</summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameter.#ctor(System.String,Ict.Common.TVariant,System.Int32,System.Int32,System.Int32,System.Object,System.Object,System.Int32)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameter.#ctor(System.String,Ict.Common.TVariant,System.Int32,System.Int32,System.Int32,System.Object,System.Object)">
            <summary>
            constructor
            </summary>
            <param name="pname"></param>
            <param name="pvalue"></param>
            <param name="pcolumn"></param>
            <param name="plevel"></param>
            <param name="psubreport"></param>
            <param name="pRptElement"></param>
            <param name="pRptGroup"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameter.#ctor(System.String,Ict.Common.TVariant,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            constructor
            </summary>
            <param name="pname"></param>
            <param name="pvalue"></param>
            <param name="pcolumn"></param>
            <param name="plevel"></param>
            <param name="psubreport"></param>
            <param name="pRptElement"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameter.#ctor(System.String,Ict.Common.TVariant,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="pname"></param>
            <param name="pvalue"></param>
            <param name="pcolumn"></param>
            <param name="plevel"></param>
            <param name="psubreport"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameter.#ctor(Ict.Petra.Shared.MReporting.TParameter)">
            <summary>
            copy constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="T:Ict.Petra.Shared.MReporting.TParameterList">
             <summary>
             This class is a container class that holds an unlimited number of TParameter objects.
             It provides functions to add parameters of all possible types.
             It provides functions for retrieving the value of a given parameter,
             depending on column and level.
             The data can be stored to an xml file and loaded from an xml file.
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.TParameterList.parameters">
            <summary>the collection TParameter objects</summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.#ctor">
             <summary>
             Constructor
             initialises the member variable parameters
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.#ctor(Ict.Petra.Shared.MReporting.TParameterList)">
             <summary>
             Copy Constructor
             creates a copy of another ParameterList;
             this is required to be able to print and export to CSV with the correctly formatted dates
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Clear">
             <summary>
             Clear all parameters from the current list
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.LoadFromDataTable(System.Data.DataTable)">
            <summary>
            This loads the parameters from a datatable
            Mainly used for sending the parameters over a remote connection
            </summary>
            <param name="param">the datatable that contains a collection of parameters
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.ToDataTable">
            <summary>
            This stores the parameters into a datatable
            Mainly used for sending the parameters over a remote connection
            </summary>
            <returns>the datatable that contains a collection of parameters
            </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Copy(Ict.Petra.Shared.MReporting.TParameterList,System.Int32,System.Int32,Ict.Petra.Shared.MReporting.eParameterFit,System.Int32)">
             <summary>
             Procedure to copy all parameters of one column from another parameter list;
             The column is first emptied in this parameter list, before the copying takes place.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Copy(Ict.Petra.Shared.MReporting.TParameterList)">
            <summary>
            copy the whole list
            </summary>
            <param name="AOtherList"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.CopyMissing(Ict.Petra.Shared.MReporting.TParameterList)">
            <summary>
            add all parameters that do not have an equivalent in this parameter list
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.MoveColumn(System.Int32,System.Int32)">
             <summary>
             Procedure to move a column
             That means, all parameters in ANewColumn will be deleted,
             and all parameters in the column AOldColumn will be changed to column ANewColumn.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.SwitchColumn(System.Int32,System.Int32)">
             <summary>
             Switch to columns; can be used to move a column forward.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.RemoveColumn(System.Int32)">
             <summary>
             Remove a column; will not move the following columns
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,Ict.Common.TVariant,System.Int32,System.Int32,System.Object,System.Object,System.Int32)">
            <summary>
            Common procedure to add a parameter, expects the value as a variant
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,Ict.Common.TVariant,System.Int32,System.Int32)">
            <summary>
            overloaded method
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
            <param name="column"></param>
            <param name="depth"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,Ict.Common.TVariant,System.Int32)">
            <summary>
            overload
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
            <param name="column"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,Ict.Common.TVariant)">
            <summary>
            overloaded add
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,Ict.Common.TVariant,System.Int32,System.Int32,System.Int32)">
             <summary>
             procedure to add a parameter, expects the value as a variant;
             used when loading from xml file (value of subreport is known)
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.Boolean,System.Int32,System.Int32,System.Object,System.Object,System.Int32)">
             <summary>
             Procedure to add a parameter of type Boolean
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.Boolean)">
            <summary>
            overloaded add
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.Decimal,System.Int32,System.Int32,System.Object,System.Object,System.Int32)">
             <summary>
             Procedure to add a parameter of type Decimal
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.Decimal)">
            <summary>
            overloaded add for Decimal
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.String,System.Int32,System.Int32,System.Object,System.Object,System.Int32)">
             <summary>
             Procedure to add a parameter of type String
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.String)">
            <summary>
            overloaded add for string
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.DateTime,System.Int32,System.Int32,System.Object,System.Object,System.Int32)">
             <summary>
             Procedure to add a parameter of type DateTime
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.DateTime)">
            <summary>
            overloaded add for date
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Object,System.Int32)">
             <summary>
             Procedure to add a parameter of type Int32
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Add(System.String,System.Int32)">
            <summary>
            overloaded add for int32
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.RemoveVariable(System.String,System.Int32,System.Int32,Ict.Petra.Shared.MReporting.eParameterFit)">
             <summary>
             Remove a variable; it will not exist anymore
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.RemoveVariable(System.String,System.Int32)">
            <summary>
            overloaded version of RemoveVariable; uses bestfit
            </summary>
            <param name="AParameterId"></param>
            <param name="AColumn"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.RemoveVariable(System.String)">
            <summary>
            remove variable completely from list, all occurances
            </summary>
            <param name="AParameterId"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Exists(System.String,System.Int32,System.Int32,Ict.Petra.Shared.MReporting.eParameterFit)">
            <summary>
            Test if a value other than NOTFOUND would be returned
            </summary>
            <param name="parameterId"></param>
            <param name="column"></param>
            <param name="depth"></param>
            <param name="exact">determines how strictly a match has to fit the request; can be eExact, eBestFit, eAllColumnFit, eBestFitEvenLowerLevel</param>
            <returns>true if the parameter exists in the current collection
            </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Exists(System.String,System.Int32,System.Int32)">
            <summary>
            overloaded method
            </summary>
            <param name="parameterId"></param>
            <param name="column"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Exists(System.String,System.Int32)">
            <summary>
            overloaded
            </summary>
            <param name="parameterId"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Exists(System.String)">
            <summary>
            overloaded version of exists
            </summary>
            <param name="parameterId"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Debug(System.String)">
             <summary>
             Prints a message to log with all occurances of the given variable in the parameter list
             This can be helpful for debugging.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Get(System.String,System.Int32,System.Int32,Ict.Petra.Shared.MReporting.eParameterFit)">
             <summary>
             Common procedure to retrieve a parameter of any type; will return a TVariant object
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Get(System.String,System.Int32,System.Int32)">
            <summary>
            overloaded method
            </summary>
            <param name="parameterId"></param>
            <param name="column"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Get(System.String,System.Int32)">
            <summary>
            overloaded version
            </summary>
            <param name="parameterId"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Get(System.String)">
            <summary>
            overloaded version of Get
            </summary>
            <param name="parameterId"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.GetOrDefault(System.String,System.Int32,Ict.Common.TVariant)">
             <summary>
             Common procedure to retrieve a parameter or a default value; will return a TVariant object
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.GetGrpValue(System.String,System.Int32,System.Int32,Ict.Petra.Shared.MReporting.eParameterFit)">
            <summary>
            get an untyped reference to an object of TRptGrpValue
            </summary>
            <returns>an untyped reference to an object of TRptGrpValue
            </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.GetGrpValue(System.String)">
            <summary>
            overload for GetGrpValue
            </summary>
            <param name="parameterId"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.GetParameter(System.String,System.Int32,System.Int32,Ict.Petra.Shared.MReporting.eParameterFit)">
             <summary>
             Common procedure to retrieve a parameter of any type; will return a TParameter object
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.GetParameter(System.String)">
            <summary>
            overload for GetParameter
            </summary>
            <param name="parameterId"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Load(System.String)">
            <summary>
            Read the parameters from a text file (xml format);
            used for loading settings
            </summary>
            <param name="filename">relative or absolute filename
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Save(System.String,System.Boolean)">
            <summary>
            Write all the parameters to a text file (xml format);
            used for storing settings
            </summary>
            <param name="filename">relative or absolute filename</param>
            <param name="AWithDebugInfo">should internal values be printed, only true for Testing
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.Save(System.String)">
            <summary>
            overload for save; no debug information will be added
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.ConvertToFormattedStrings(System.String)">
            <summary>
            This formats the dates for different output, for example printing
            </summary>
            <param name="AOutputType">if this is 'Localized' then the dates are formatted in the format DD-MMM-YYYY</param>
            <returns>s a new copy of the parameters, with the correct formatting
            </returns>
        </member>
        <member name="M:Ict.Petra.Shared.MReporting.TParameterList.ConvertToFormattedStrings">
            <summary>
            overload, use Localized as default output type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ict.Petra.Shared.MReporting.ReportingConsts">
            <summary>
            some useful constants that are used throughout the reporting tool
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.MAX_FUNCTION_PARAMETER">
            <summary>
            maximum number of function parameters
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.APPLICATIONPARAMETERS">
            <summary>
            to identify parameters that are only important for this run
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.CALCULATIONPARAMETERS">
            <summary>
            to identify parameters that are only important during calculation of the report
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERTITLE1">
            <summary>
            identifier for the header title1 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERTITLE2">
            <summary>
            identifier for the header title2 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERTYPE">
            <summary>
            identifier for the header type field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERPERIOD">
            <summary>
            identifier for the header period field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERPERIOD2">
            <summary>
            identifier for the header period2 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERPERIOD3">
            <summary>
            identifier for the header period3 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERDESCR1">
            <summary>
            identifier for the header descr1 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERDESCR2">
            <summary>
            identifier for the header descr2 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERDESCR3">
            <summary>
            identifier for the header descr3 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERPAGENR">
            <summary>
            identifier for the header page number field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERDATE">
            <summary>
            identifier for the header date field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERLINE">
            <summary>
            identifier for the header line
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERPAGELEFT1">
            <summary>
            identifier for the header pageleft1 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERPAGELEFT2">
            <summary>
            identifier for the header pageleft2 field
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.DETAILFULLLINE">
            <summary>
            identifier for the detail full line
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.COLUMN_TEMP_LOWERLEVEL">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.ALLCOLUMNS">
            <summary>
            for parameters; if this is set, the parameter applies to all columns
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.HEADERCOLUMN">
            <summary>
            only applies to the header
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.COLUMNLEFT">
            <summary>
            the column to the left, description
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.MReporting.ReportingConsts.MAX_COLUMNS">
            <summary>
            maximum number of columns
            </summary>
        </member>
    </members>
</doc>
