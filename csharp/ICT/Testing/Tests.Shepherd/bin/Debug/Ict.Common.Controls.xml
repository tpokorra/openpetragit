<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Common.Controls</name>
    </assembly>
    <members>
        <member name="T:Ict.Common.Controls.TButtonImage">
            <summary>
            The Class provides the image for the TbtnCreated class.
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TButtonImage.FPersonImage">
            <summary>Field containing the image</summary>
        </member>
        <member name="M:Ict.Common.Controls.TButtonImage.#ctor">
             <summary>
             The constructor of this class
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Common.Controls.TbtnCreated">
            <summary>
            The btnCreated Button is a small button which provides information on who and
            when something was changed on the hosting form. It is not databound to the
            host, so the developer needs to provide the necessary information himself.
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TbtnCreated.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TbtnCreated.FDateCreated">
            <summary>Add strict private fields here</summary>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.InitializeComponent">
            <summary>
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> <summary> Required method for Designer support  do not modify the contents of this method with the code editor.
            </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.#ctor">
             <summary>
             Private Declarations }
             The constructor of this class
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.BuildMessage">
            <summary>
            This function builts a message for the tooltip and the messagebox.
            </summary>
            <returns>The message string according to the property values.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.Dispose(System.Boolean)">
            <summary>
            <summary> Clean up any resources being used. </summary>
            This procedure processes the disposing of this class.
            </summary>
            <param name="Disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.SetDefaults">
            <summary>
            Add strict private routines here
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.OnClick(System.EventArgs)">
            <summary>
            This procedure processes the click on this control.
            </summary>
            <param name="e">Event Arguments
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.OnCreateControl">
            <summary>
            This procedure ensures that the control is displayed in the right size at
            the beginning.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.OnMouseEnter(System.EventArgs)">
            <summary>
            This procedure ensures that the tooltip is displayed when the mouse enteres
            the button.
            </summary>
            <param name="e">Event Arguments
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.OnMouseHover(System.EventArgs)">
            <summary>
            This procedure ensures that the tooltip is displayed when the mouse hovers
            over the button.
            </summary>
            <param name="e">Event Arguments
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.OnResize(System.EventArgs)">
            <summary>
            This procedure ensures that the height of this control cannot be changed.
            </summary>
            <param name="e">Event Arguments
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.UpdateFields(System.Data.DataTable,System.Int32)">
            <summary>
            This procedure updates the following fields in the TbtnButton class:
            CreatedBy, DateCreated, DateModified, ModifiedBy.
            </summary>
            <param name="ATable">A table to which this control referes.</param>
            <param name="ARow">A row in the table which holds the data
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.UpdateFields(System.Data.DataTable)">
            <summary>
            This procedure updates the following fields in the TbtnButton class:
            CreatedBy, DateCreated, DateModified, ModifiedBy.
            </summary>
            <param name="ATable">A table to which this control referes.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.UpdateFields(System.Data.DataView,System.Int32)">
            <summary>
            This procedure updates the following fields in the TbtnButton class:
            CreatedBy, DateCreated, DateModified, ModifiedBy.
            </summary>
            <param name="AView">A table view to which this control referes.</param>
            <param name="ARow">A row in the table which holds the data
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.UpdateFields(System.Data.DataView)">
            <summary>
            This procedure updates the following fields in the TbtnButton class:
            CreatedBy, DateCreated, DateModified, ModifiedBy.
            </summary>
            <param name="AView">A table view to which this control referes.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnCreated.UpdateFields_SearchDate(System.Data.DataTable)">
            <summary>
            Search in each row for the smallest "created" field
            and the biggest "modified" field.
            Update these values: CreatedBy, DateCreated, DateModified, ModifiedBy.
            </summary>
            <param name="ADataTable">The data table to retrieve the modified and created values.</param>
        </member>
        <member name="P:Ict.Common.Controls.TbtnCreated.CreatedBy">
             <summary>
             This property gets or sets the creator.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TbtnCreated.DateCreated">
             <summary>
             This property gets or sets the creation date.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TbtnCreated.DateModified">
             <summary>
             This property determines which column should be sorted. This may be esential
             for heirs of this class which use more the one column in the combobox. The
             default value for this property is therefore NIL.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TbtnCreated.ModifiedBy">
             <summary>
             This property determines which column should be sorted. This may be esential
             for heirs of this class which use more the one column in the combobox. The
             default value for this property is therefore NIL.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TbtnCreated.Size">
             <summary>
             This property determines which column should be sorted. This may be esential
             for heirs of this class which use more the one column in the combobox. The
             default value for this property is therefore NIL.
            
             </summary>
        </member>
        <member name="T:Ict.Common.Controls.TbtnVarioText">
            <summary>
            This unit provides a Button that adjusts its width to the text it displays.
            The AdjustWidth property handles the behaviour of this Button. If the property
            is set to true then the Button adjusts its width to the text it displays. If it
            is set to false then it behaves like a normal Button.
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TbtnVarioText.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TbtnVarioText.FAdjustWidth">
            <summary>
            should the width of the button adjust to the text it displays
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TbtnVarioText.InitializeComponent">
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> Properties itself Property stuff <summary> Required method for Designer support  do not modify the contents of this
            method with the code editor.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnVarioText.#ctor">
             <summary>
             The constructor of this class
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnVarioText.AlterWidth">
             <summary>
             This procedure adjusts the width of the button.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnVarioText.Dispose(System.Boolean)">
             <summary>
             <summary> Clean up any resources being used. </summary>
             The destructor of this class
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TbtnVarioText.OnTextChanged(System.EventArgs)">
             <summary>
             This event is called when the text of the button changes.
             }{*******************************************************************************
             This event is called when the text of the button changes.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TbtnVarioText.AdjustWidth">
             <summary>
             This property determines whether the button resizes to the text length or not.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TbtnVarioText.Size">
             <summary>
             This property sets or gets he size of the control in pixels..
            
             </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDataColumnChangedEventHandler">
            <summary>
            delegate for the situation when the data column changes
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TClbVersatile">
            <summary>
            This control is a checked listbox, that can be automatically sorted by the
            checked items and the names of the items.
            It is derived from sgrdDatagrid, because that it is more powerful than System.Windows.Forms.CheckedListBox
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TSgrdDataGrid">
             <summary>
             TSgrdDataGrid is an extension of SourceGrid.DataGrid that contains several
             customisations and helper functions, especially for viewing DataTable data in
             a List-like manner.
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FColumnHeaderView">
             <summary>
             View for the ColumnHeaders of this Grid
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FShowColumnHeadersDisabled">
             <summary>
             Determines whether the column headers should appear 'greyed out' if the Grid
             is disabled.
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FAlternateBackColor">
             <summary>
             Used by to colour the background of every odd numbered row differently to
             generate a 'banding' effect (works only with columns defined in
             sgrdDataGrid.Columns!).
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FToolTipTextDelegate">
             <summary>
             If set to an appropriate delegate function, this provides ToolTips on each
             Cell of the Grid (works only with columns defined in sgrdDataGrid.Columns!).
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FSortableHeaders">
             <summary>
             Determines whether the column headers should support sorting by clicking on
             them (works only with columns defined in sgrdDataGrid.Columns!).
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FRowsSelectedBeforeSort">
             <summary>
             Keeps track of the the selected rows before sorting in order to be able
             to select them again after sorting the Grid.
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FKeepRowSelectedAfterSort">
             <summary>
             Maintains the state of whether the currently selected row should stay
             selected after sorting the Grid.
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FLastKeyCode">
             <summary>
             Used by the PerformAutoFindFirstCharacter procedure.
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FAutoFindMode">
             <summary>
             Used by the PerformAutoFindFirstCharacter procedure.
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FAutoFindColumn">
             <summary>
             Used by the PerformAutoFindFirstCharacter procedure.
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FAutoFindMatchingDataView">
             <summary>
             Used by the PerformAutoFindFirstCharacter procedure.
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGrid.FAutoFindListRebuildNeeded">
             <summary>
             Maintains a state for the PerformAutoFindFirstCharacter procedure.
            
             </summary>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.InitializeComponent">
            <summary>
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> <summary> Required method for Designer support  do not modify the contents of this method with the code editor.
            </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.#ctor">
            <summary>
            TSgrdDataGrid is an extension of SourceGrid.DataGrid that contains several
            customisations and helper functions, especially for viewing DataTable data in
            a List-like manner.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.Dispose(System.Boolean)">
            <summary>
            Destructor
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.Set_DefaultProperties">
             <summary>
             This procedure sets the default properties.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddTextColumn(System.String,System.Data.DataColumn)">
             <summary>
             Easy method to add a new Text column.
            
             </summary>
             <param name="AColumnTitle">Title of the HeaderColumn</param>
             <param name="ADataColumn">DataColumn to which this column should be DataBound
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddTextColumn(System.String,System.Data.DataColumn,System.Int16)">
             <summary>
             Easy method to add a new Text column.
            
             </summary>
             <param name="AColumnTitle">Title of the HeaderColumn</param>
             <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
             <param name="AColumnWidth">Column width in pixels (-1 for automatic width)
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddTextColumn(System.String,System.Data.DataColumn,System.Int16,SourceGrid.Cells.Editors.EditorBase)">
            <summary>
            Easy method to add a new Text column.
            </summary>
            <param name="AColumnTitle"></param>
            <param name="ADataColumn"></param>
            <param name="AColumnWidth"></param>
            <param name="AEditor"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddTextColumn(System.String,System.Data.DataColumn,System.Int16,SourceGrid.Cells.Controllers.ControllerBase,SourceGrid.Cells.Editors.EditorBase,SourceGrid.Cells.Models.ModelContainer,SourceGrid.Cells.Views.IView)">
             <summary>
             Easy method to add a new Text column.
            
             </summary>
             <param name="AColumnTitle">Title of the HeaderColumn</param>
             <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
             <param name="AColumnWidth">Column width in pixels (-1 for automatic width)</param>
             <param name="AController"></param>
             <param name="AEditor">An instance of an Editor (based on ICellVirtual.Editor)</param>
             <param name="AModel"></param>
             <param name="AView"></param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddTextColumn(System.String,System.Data.DataColumn,System.Int16,SourceGrid.Cells.Controllers.ControllerBase,SourceGrid.Cells.Editors.EditorBase,SourceGrid.Cells.Models.ModelContainer,SourceGrid.Cells.Views.IView,SourceGrid.Conditions.ConditionView)">
             <summary>
             Easy method to add a new Text column.
            
             </summary>
             <param name="AColumnTitle">Title of the HeaderColumn</param>
             <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
             <param name="AColumnWidth">Column width in pixels (-1 for automatic width)</param>
             <param name="AController"></param>
             <param name="AEditor">An instance of an Editor (based on ICellVirtual.Editor)</param>
             <param name="AModel"></param>
             <param name="AView"></param>
             <param name="AConditionView"></param>
            
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddCheckBoxColumn(System.String,System.Data.DataColumn)">
            <summary>
            Easy method to add a new CheckBox column.
            </summary>
            <param name="AColumnTitle">Title of the HeaderColumn</param>
            <param name="ADataColumn">DataColumn to which this column should be DataBound
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddCheckBoxColumn(System.String,System.Data.DataColumn,System.Boolean)">
            <summary>
            Easy method to add a new CheckBox column.
            </summary>
            <param name="AColumnTitle">Title of the HeaderColumn</param>
            <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
            <param name="AReadOnly">Set to true if the column should be read-only</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddCheckBoxColumn(System.String,System.Data.DataColumn,System.Int16)">
            <summary>
            Easy method to add a new CheckBox column.
            </summary>
            <param name="AColumnTitle">Title of the HeaderColumn</param>
            <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
            <param name="AColumnWidth">Column width in pixels (-1 for automatic width)
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddCheckBoxColumn(System.String,System.Data.DataColumn,System.Int16,System.Boolean)">
            <summary>
            Easy method to add a new CheckBox column.
            </summary>
            <param name="AColumnTitle">Title of the HeaderColumn</param>
            <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
            <param name="AColumnWidth">Column width in pixels (-1 for automatic width)</param>
            <param name="AReadOnly">Set to true if the column should be read-only</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddCheckBoxColumn(System.String,System.Data.DataColumn,System.Int16,SourceGrid.Cells.Editors.EditorBase,System.Boolean)">
            <summary>
            Easy method to add a new CheckBox column.
            </summary>
            <param name="AColumnTitle">Title of the HeaderColumn</param>
            <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
            <param name="AColumnWidth">Column width in pixels (-1 for automatic width)</param>
            <param name="AEditor"></param>
            <param name="AReadOnly">Set to true if the column should be read-only</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddImageColumn(Ict.Common.Controls.DelegateGetImageForRow)">
             <summary>
             Easy method to add a new Image column without a header text.
            
             </summary>
             <param name="AGetImageDelegate">Delegate method that will be called to retrieve
             the Image which should be displayed in the cell.
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddImageColumn(System.String,Ict.Common.Controls.DelegateGetImageForRow)">
             <summary>
             Easy method to add a new Image column with header text.
            
             </summary>
             <param name="AGetImageDelegate">Delegate method that will be called to retrieve
             the Image which should be displayed in the cell.</param>
             <param name="AColumnTitle">Title of the HeaderColumn
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddDateColumn(System.String,System.Data.DataColumn)">
            <summary>
            Add a date column that is read-only. The date is displayed in an a common international data format, independent of a computer's date formatting settings.
            </summary>
            <param name="AColumnTitle">Title of the HeaderColumn</param>
            <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddCurrencyColumn(System.String,System.Data.DataColumn)">
            <summary>
            add a column that shows a currency value.
            aligns the value to the right.
            prints number in red if it is negative
            </summary>
            <param name="AColumnTitle">Title of the HeaderColumn</param>
            <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.AddCurrencyColumn(System.String,System.Data.DataColumn,System.Int32)">
            <summary>
            add a column that shows a currency value.
            aligns the value to the right.
            prints number in red if it is negative
            </summary>
            <param name="AColumnTitle">Title of the HeaderColumn</param>
            <param name="ADataColumn">DataColumn to which this column should be DataBound</param>
            <param name="AFractionDigits">Number of digits after the decimal point</param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnEnabledChanged(System.EventArgs)">
            <summary>
            when the grid is enabled or disabled
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnSortedRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            after sorting
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnSortingRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            before sorting
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnDataViewChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            something changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnDoubleClickCell(SourceGrid.CellContextEventArgs)">
            <summary>
            double click on cell
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnDoubleClickHeaderCell(SourceGrid.ColumnEventArgs)">
            <summary>
            double click on the header cell
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnInsertKeyPressed(SourceGrid.RowEventArgs)">
            <summary>
            key has been pressed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnDeleteKeyPressed(SourceGrid.RowEventArgs)">
            <summary>
            delete key has been pressed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnEnterKeyPressed(SourceGrid.RowEventArgs)">
            <summary>
            enter key has been pressed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.OnSpaceKeyPressed(SourceGrid.RowEventArgs)">
            <summary>
            space key has been pressed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.ProcessDialogKey(System.Windows.Forms.Keys)">
             <summary>
             Used only internally to process the Enter and Space keys. Must be public to
             work.
            
             </summary>
             <param name="AKeyData">Passed by the Operating System.
             @result See .NET 1.1 API documentation on how this needs to be set.
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.DataSourceRowToIndex2(System.Data.DataRowView)">
             <summary>
             This is a replacement for the DataGrid.Rows.DataSourceRowToIndex function.
             The DataSourceRowToIndex function internally uses IList.IndexOf, which doesn't find DataRowView
             objects that are returned from a DataView that is created from the Grid's DataView
             [((DevAge.ComponentModel.BoundDataView) base.DataSource).mDataView] when searchin in the Grid's DataView
             --- for IList.IndexOf(), the same DataRowView object seem to be two differnt objects...!
            
             DataSourceRowToIndex2 manually iterates through the Grid's DataView and compares Rows objects. This works!
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.SelectRowInGrid(System.Int32)">
            select a row in the grid, and invoke the even for FocusedRowChanged
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.PerformAutoFindFirstCharacter(System.Windows.Forms.Keys)">
             <summary>
             Performs selection of rows with a matching first character as the user
             presses certain keys that produce characters that this procedure can search
             for.
            
             </summary>
             <param name="AKey">Keyboard code, passed in from ProcessSpecialGridKey
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGrid.ProcessSpecialGridKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Used only internally to to be able to implement other custom key handling.
            Must be public to work.
            </summary>
            <param name="AKeyEventArgs">Passed by the Operating System.</param>
            <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.ColumnHeaderView">
             <summary>
             Read access to the View for the ColumnHeaders of this Grid (used by
             sgrdDataGrid.Columns).
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.ToolTipTextDelegate">
             <summary>
             Set this to an appropriate delegate function to provide ToolTips for each
             Cell of the Grid.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.AutoStretchColumnsToFitWidth">
             This property determines whether AutoStretchColumnsToFitWidth should be used.
            
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.MinimumHeight">
             This property determines which MinimumHeight should be used.
            
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.SpecialKeys">
            <summary>
            This property determines which SpecialKeys should be used.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.DataSource">
            <summary>
            Helper function for SourceGrid 4 that enables us to hook up our ListChangedEventHandler
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.SelectedDataRowsAsDataRowView">
            <summary>
            Helper function for SourceGrid 4 that returns the SelectedDataRows as a DataRowView
            (as SourceGrid 3 did).
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.AlternatingBackgroundColour">
            / Custom properties follow
             This property determines which AlternatingBackgroundColour should be used.
            
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.SortableHeaders">
             This property determines whether the column headers should support sorting
             by clicking on them.
            
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.KeepRowSelectedAfterSort">
             This property determines whether the currently selected row should stay
             selected after sorting the Grid.
            
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.AutoFindMode">
             This property determines which AutoFindMode should be used.
            
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGrid.AutoFindColumn">
             This property determines which Column of the DataGrid should be
             enabled for AutoFind (Note: This is not the DataColumn of the DataView!).
            
        </member>
        <member name="E:Ict.Common.Controls.TSgrdDataGrid.DoubleClickCell">
             This Event is thrown when a Cell of the Grid is DoubleClicked with the mouse.
            
        </member>
        <member name="E:Ict.Common.Controls.TSgrdDataGrid.DoubleClickHeaderCell">
            <summary>
            Occurs when when a HeaderCell of the Grid is DoubleClicked with the mouse.
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TSgrdDataGrid.InsertKeyPressed">
             This Event is thrown when the Insert key is pressed on the Grid.
            
        </member>
        <member name="E:Ict.Common.Controls.TSgrdDataGrid.DeleteKeyPressed">
             This Event is thrown when the Delete key is pressed on the Grid.
            
        </member>
        <member name="E:Ict.Common.Controls.TSgrdDataGrid.EnterKeyPressed">
             This Event is thrown when the Enter key is pressed on the Grid.
            
        </member>
        <member name="E:Ict.Common.Controls.TSgrdDataGrid.SpaceKeyPressed">
             This Event is thrown when the Space key is pressed on the Grid.
            
        </member>
        <member name="T:Ict.Common.Controls.TSgrdDataGrid.DoubleClickController">
            This custom SourceGrid Controller handles the DoubleClick event of the Grid and
            fires either the OnDoubleClickCell or OnDoubleClickHeaderCell Event.
        </member>
        <member name="M:Ict.Common.Controls.TClbVersatile.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TClbVersatile.DataBindGrid(System.Data.DataTable,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             This will bind the table to the grid, using the first column for the checked boxes,
             and sorting the rest of the grid by ASortColumn.
             If you want to use the event DataColumnChanged, first assign the property DataColumnChanged before calling this procedure.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TClbVersatile.GetCheckedStringList">
             <summary>
             This function returns the comma separated list of the currently selected row,
             identified by their codes (using FKeyColumn)
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TClbVersatile.GetAllStringList">
             <summary>
             This function returns the comma separated list of all row,
             identified by their codes (using FKeyColumn)
            
             </summary>
             <returns>String</returns>
        </member>
        <member name="M:Ict.Common.Controls.TClbVersatile.ClearSelected">
             <summary>
             Clear the checked state for all items
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TClbVersatile.SetCheckedStringList(System.String)">
            <summary>
            This function selects the strings retrieved from the parameter AStringsToCheck;
            All other items are unselected.
            </summary>
            <param name="AStringsToCheck">a comma separated list of keys of the rows that should be selected</param>
            <returns>s false if a string could not be found in the control datasource
            </returns>
        </member>
        <member name="P:Ict.Common.Controls.TClbVersatile.CheckedItemsCount">
            <summary>
            the number of checked items
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TClbVersatile.DataColumnChanged">
             <summary>
             allows popping up a question whether to check the CheckBox
            
             </summary>
        </member>
        <member name="T:Ict.Common.Controls.TAcceptNewEntryEventHandler">
            <summary>
            delegate for when a new item is added
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDataSourceChangingEventHandler">
            <summary>
            delegate for when the data source changes
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TAcceptNewEntryEventArgs">
            <summary>
            event arguments for when a new item is added
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TAcceptNewEntryEventArgs.ItemString">
            <summary>
            the new item
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDataSourceChangingEventArgs">
            <summary>
            event arguments for the data source changing event
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TDataSourceChangingEventArgs.OldDataSource">
            <summary>
            the old data source
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TDataSourceChangingEventArgs.NewDataSource">
            <summary>
            the new data source
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TCmbAutoComplete">
            <summary>
            The cmbAutoComplete ComboBox behaves just like the default ComboBox from .Net.
            It does only have two additional Property, namely 'AcceptNewValues' and
            'CaseSensitiveSearch'. If the 'AcceptNewValues' property is set to 'true',
            the user may add new items to the list of items of this ComboBox, otherwise
            he cannot add new item. The 'CaseSensitiveSearch' property allows to switch
            between a case sensitive search and a non case sensitive search in the items
            of the Combobox. However the ComboBox searches its internal data for the text
            being entered and returns the first occurance of that text. The searching is
            done while typing, saving the end user some time.
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TCmbAutoComplete.UNIT_SUPPORTED_DATA_TYPES">
            <summary>
            which data types are supported at the moment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TCmbAutoComplete.FColumnsToSearch">
            <summary>
            which columns to search
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetDataSourceStringList(System.String)">
            <summary>
            overload
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetDataSourceStringList(System.Collections.Specialized.StringCollection)">
             <summary>
             This procedure is an alternative to set_datasource.
             This is helpful if there is only one column, and the values are all strings.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.AddStringItem(System.String)">
             <summary>
             This procedure helps with modifying the datasource.
             This is helpful if there is only one column, and the values are all strings.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.BuildColumnStringCollection(System.String)">
             <summary>
             This function builds a string collection out of a comma seperated list given
             in the format of a string. The occurance of each column can only be one.
             Therefore Duplicates are being removed.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.RemoveStringItem(System.String)">
             <summary>
             This procedure helps with modifying the datasource.
             This is helpful if there is only one column, and the values are all strings.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetColumnNr(System.String)">
            <summary>
            </summary>
            <returns>the number of the given column
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetColumnNrOfDisplayMember">
            <summary>
            </summary>
            <returns>the number of the column that has its name stored in DisplayMember
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetColumnNrOfValueMember">
            <summary>
            </summary>
            <returns>the number of the column that has its name stored in ValueMember
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetSelectedRowView">
            <summary>
            This function returns the currently selected row
            </summary>
            <returns>the currently selected row
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.OnAcceptNewEntryEvent(Ict.Common.Controls.TAcceptNewEntryEventArgs)">
            <summary>
            This procedure is called when a new item should be put in the item list.
            </summary>
            <param name="Args">TAcceptNewEntryEventArgs.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.OnDataSourceChanged(System.EventArgs)">
            <summary>
            This procedure is called when the value of the DataSource property is
            changed on ListControl.
            </summary>
            <param name="e">Event Arguments.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.OnDataSourceChanging(Ict.Common.Controls.TDataSourceChangingEventArgs)">
            <summary>
            This procedure is called when the value of the DataSource property is
            changed on ListControl.
            </summary>
            <param name="e">Event Arguments.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.OnEnter(System.EventArgs)">
            <summary>
            This procedure is called when this control becomes the active control of the form.
            </summary>
            <param name="e">System.EventArgs.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This procedure is called when a key is down. This event is the first
            event to be called in the key events.
            </summary>
            <param name="e">The Key Event Arguments.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This procedure is called when a key is pressed. This event is the second
            event to be called in the key events.
            </summary>
            <param name="e">The Key Press Event Arguments</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This procedure is called when a key goes up again. This event is the last
            event to be called in the key events.
            </summary>
            <param name="e">The Key Event Arguments.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.AskUserAcceptNewEntries(Ict.Common.Controls.TAcceptNewEntryEventArgs)">
            <summary>
            ask the user if he wants to add this new item to the combobox
            </summary>
            <param name="mArgs"></param>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.OnLeave(System.EventArgs)">
            <summary>
            This procedure is called when this control looses its active status and is
            no longer the active control of a form.
            </summary>
            <param name="e">Event Arguments.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.AddItemToDataSource(System.String)">
            <summary>
            This procedure adds an item to the DataSource if the DataSource consists
            out of a DataTable with only one column. Otherwise it does nothing.
            </summary>
            <param name="ItemString">System.String The string of the item to add.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.DoColumnNamesExistInDataSource">
             <summary>
             This function checks the existance of a column name within the datasource
             specified.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.CheckColumnStringCollection">
             <summary>
             This function check the string collection of Columns to search against the
             datasource given to the combobox.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.CheckDataSourceType">
             <summary>
             This procedure complains if the type of the DataSource property of this
             ComboBox is not of the following:
             - System.Data.DataTable
             - System.Data.DataView
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.FindStringSortedByLength(System.String,System.Int32)">
            <summary>
            This function returns the index of the combobox items with the following
            characteristics:
            - item starts with the specified string
            - if there are more items which fulfill this criterion the index of the
            shortest item is returned
            </summary>
            <param name="SearchString">The string which is search for in the ComboBox</param>
            <param name="StartIndex">The index where the comparison should start.</param>
            <returns>The index of the item if found or -1 if nothing is found.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.FindStringSortedByLength(System.String)">
            <summary>
            This function returns the index of the combobox items with the following
            characteristics:
            - item starts with the specified string
            - if there are more items which fulfill this criterion the index of the
            shortest item is returned
            </summary>
            <param name="SearchString">The string which is search for in the ComboBox</param>
            <returns>The index of the item if found or -1 if nothing is found.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.FindStringInComboBox(System.String)">
            <summary>
            This function searches the ObjectCollection of a given ComboBox for a
            string specified by SearchString.
            </summary>
            <param name="SearchString">The string which is searched for.</param>
            <returns>The index of the item if found or -1 if nothing is found.</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.FindInt32InComboBox(System.Int32)">
            <summary>
            This function searches the ObjectCollection of a given ComboBox for a
            string specified by SearchInt32.
            </summary>
            <param name="SearchInt32">The Int32 which is searched for.</param>
            <returns>The index of the item if found or -1 if nothing is found.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.FindInt64InComboBox(System.Int64)">
            <summary>
            This function searches the ObjectCollection of a given ComboBox for a
            string specified by SearchInt64.
            </summary>
            <param name="SearchInt64">The Int64 which is searched for.</param>
            <returns>The index of the item if found or -1 if nothing is found.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetNumberOfDataSourceCols">
            <summary>
            This function gets the number of columns of the current DataSource.
            </summary>
            <returns>The number of columns of the current DataSource
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetSelectedInt32(System.Int32)">
            <summary>
            This function returns the Int32 value of the selected item, first column
            </summary>
            <param name="ColumnNumber">The column number of the data source; if -1, then the value column is used</param>
            <returns>-1 if nothing is selected
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetSelectedInt32">
            <summary>
            get the int value of the default column
            </summary>
            <returns>selected int value</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetSelectedInt64(System.Int32)">
            <summary>
            This function returns the Int64 value of the selected item, first column
            </summary>
            <param name="ColumnNumber">The column number of the data source; if -1, then the value column is used</param>
            <returns>-1 if nothing is selected
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetSelectedInt64">
            <summary>
            get the int value of the default column
            </summary>
            <returns>selected int value</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetSelectedString(System.Int32)">
            <summary>
            This function returns the string value of the selected item, first column
            </summary>
            <param name="ColumnNumber">The column number of the data source; if -1, then the value column is used</param>
            <returns>empty string if nothing is selected
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.GetSelectedString">
            <summary>
            get selected value as a string, from the default column
            </summary>
            <returns>get selected string value</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetSelectedInt32(System.Int32,System.Int32)">
            <summary>
            This function selects an item with the given Int32 value.
            Select alternative index if the int value is not existing
            </summary>
            <param name="ANr">Int value to search for</param>
            <param name="AAlternativeIndex">if the ANr cannot be found in the list, select the item with this index; it is by default -1</param>
            <returns>false if the int value is not existing
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetSelectedInt32(System.Int32)">
            <summary>
            This function selects an item with the given Int32 value.
            Select first element if the int value is not existing
            </summary>
            <param name="ANr">Int value to search for</param>
            <returns>false if the int value is not existing
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetSelectedInt64(System.Int64,System.Int32)">
            <summary>
            This function selects an item with the given Int64 value.
            Select alternative index if the int value is not existing
            </summary>
            <param name="ANr">Int value to search for</param>
            <param name="AAlternativeIndex">if the ANr cannot be found in the list, select the item with this index; it is by default -1</param>
            <returns>false if the int value is not existing
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetSelectedInt64(System.Int64)">
            <summary>
            This function selects an item with the given Int64 value.
            Select first element if the int value is not existing
            </summary>
            <param name="ANr">Int value to search for</param>
            <returns>false if the int value is not existing
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetSelectedString(System.String)">
            <summary>
            This function selects an item with the given string value.
            Select first element if the string value is not existing
            </summary>
            <returns>false if the string value is not existing
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetSelectionColorLength">
             <summary>
             This procedure sets the selection colouring length to the desired value.
             If the property SuppressSelectionColor is TRUE then the selection length
             is set to 0. If the property SuppressSelectionColor is FALSE then the
             selection length is set to the length of the current string in its textbox.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.HasDataSourceCorrectDataType(System.Object)">
            <summary>
            This function checks whether the DataSource property of this combobox has
            the correct data type. The following types are correct data types:
            - System.Data.DataSet
            - System.Data.DataTable
            - System.Data.DataView
            </summary>
            <param name="ASource">DataSource to be checked.</param>
            <returns>true if the data type of the DataSource property is one of the types above, false otherwise.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.ProhibitChangeToDataSource">
             <summary>
             This procedure should prevent databinding from manipulating the original
             source.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.RestoreOriginalItem">
             <summary>
             This procedure restores the original value of the combobox if someone
             typed in something that could not be found in the items collection of the
             combobox.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbAutoComplete.SetBoundValueToDBNull">
             <summary>
             This procedure sets the data bound value to DBNull. The procedure obtains
             the databound field through the databinding.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.AcceptNewValues">
             <summary>
             This property determines which column should be sorted. This may be esential
             for heirs of this class which use more the one column in the combobox. The
             default value for this property is therefore NIL.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.ColumnsToSearch">
             <summary>
             This property determines which columns are searched, when the user enters
             text into the combobox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.ColumnsToSearchCollection">
             <summary>
             This property determines which columns are searched, when the user enters
             text into the combobox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.CaseSensitiveSearch">
             <summary>
             This property determines which column should be sorted. This may be esential
             for heirs of this class which use more the one column in the combobox. The
             default value for this property is therefore NIL.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.DataSource">
             <summary>
             This property determines which column should be sorted. This may be esential
             for heirs of this class which use more the one column in the combobox. The
             default value for this property is therefore NIL.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.SuppressSelectionColor">
             <summary>
             This property manages the colour of the selection. If set to TRUE the
             selected item of the ComboBox is not coloured in selection mode colours.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.SelectedItem">
            <summary>
            property for the current selection;
            SelectedItem is about the display member, SelectedValue reflects the value member
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.SelectedValue">
            <summary>
            property for the current selection;
            SelectedItem is about the display member, SelectedValue reflects the value member
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TCmbAutoComplete.AcceptNewEntries">
            <summary>
            This property manages the new entry event
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TCmbAutoComplete.DataSourceChanging">
            <summary>
            This property manages the new entry event
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.AutoCompleteSource">
            <summary>
            required to be overwritten from Parent
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.AutoCompleteMode">
            <summary>
            required to be overwritten from Parent
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbAutoComplete.AutoCompleteCustomSource">
            <summary>
            required to be overwritten from Parent
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TCmbLabelled">
            <summary>
            The TCmbLabelled is a ComboBox which offers the possibility of having
            up to 4 columns in its drop down pane as well as a databound label next to it.
            Within these columns can be either some text or an 16 by 16 image. The
            TCmbLabelled has several new properties. The TCmbLabelled does
            not allowed the user to add new items to the ComboBox. The following
            properties are essential for this control to work:
            - DataSource:
              Here the underlying table / view has to be set. This is mostly done in the
              following way:
                cmbLabelledComboBox.cmbComboBox.BeginUpdate();
                cmbLabelledComboBox.cmbComboBox.DataSource := YOUR_DATA_TABLE / YOUR_DATA_VIEW;
                cmbLabelledComboBox.cmbComboBox.DisplayMember := COLUMN NAME;
                cmbLabelledComboBox.cmbComboBox.ValueMember := COLUMN NAME;
                cmbLabelledComboBox.cmbComboBox.EndUpdate();
              PLEASE remember that the actual Combobox is public and you have to make sure
              that the data is really bound to the ComboBox and not to the UserControl itself.
            - DisplayInColumn1 ... DisplayIn Column4:
              Here the colomn of the underlying DataSource table / view has to be set. If
              no table column name for the 1st column of the drop down is given
              DisplayMember respectively ValueMember is used.
            - ColumnWidthCol1 ... ColumnWidthCol4:
              Here the width of the columns of the drop down pane is adjusted. Please note
              that it is not allowed to set the with of a previous column to 0 and the next
              column to a value other than 0 (ColumnWidthCol2 = 0, ColumnWidthCol3 = 100 is
              a forbidden scenario.
            - GridLine... ;
              If set to true a grid line in the drop down pane is drawn
            - LabelDisplaysColumn:
              This property sets the content of the label. You can display any content of
              your DataSource provided, you give the right column name of the dataSource.
            - Images:
              Here an ImageList is needed. All images in that list have indices. If you note
              these indices in one column of the DataSource the cmbVersatile ComboBox will
              automatically grab these images and display them in the colomn you assign.
            - ImageColumn:
              The column number of the drop down's column which holds the image indices.
              Please note: 0 refers to no column!, 1 to column 1 ... 4 to column 4.
            TODO: Known features from .Net:
            The databinding is a little bit troublesome. You can use it if the rows of the
            DataSource table have been added with the routine 'Add'. Otherwise the databinding
            just breaks. For additional information on this topic visit the Petra - Wiki.
            TODO: Here is the link to the complete article:
            http://ict.om.org/PetraWiki/current/index.php?title=Problems_in_DataBinding_a_View_to_a_ComboBox
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TCmbLabelled.cmbCombobox">
            <summary>
            the Combobox that is part of this user control
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TCmbLabelled.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TCmbLabelled.lblDescription">
            <summary>
            the label that is part of this user control
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TCmbLabelled.FLabelDisplaysColumn">
            <summary>
            define which column of the combobox will be used for the label
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.InitializeComponent">
            <summary> Required method for Designer support
            do not modify the contents of this method with the code editor.
            This procedure initializes this very component.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.InitializeComboBox">
             <summary>
             This procedure initializes the ComboBox of this control. This procedure has
             to be called before calling the procedure InitializeComponent.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.DataBindLabel(System.String)">
             <summary>
             This procedure adds this colomn to the DataBindings of the lblDescription.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.Dispose(System.Boolean)">
            <summary>
            <summary> Clean up any resources being used. </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.GetLabelRectangleF">
            <summary>
            This function calculates the area of the label.
            </summary>
            <returns>The RectangleF of the label.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.GetLabelWidth">
            <summary>
            This function calculates the width of the label.
            </summary>
            <returns>The width of the label.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.SetDefaultHeight">
             <summary>
             This procedure sets the default height for this UserControl.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.SetDefaultProperties">
             <summary>
             This procedure sets the default properties for this UserControl.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.Set_LabelWidth">
             <summary>
             This function writes the width of the Label.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.OnCreateControl">
            <summary>
            This event occurs when the control is created.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.OnResize(System.EventArgs)">
            <summary>
            This procedure ensures that the height of this control cannot be changed.
            </summary>
            <param name="e">Event Arguments
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.TCmbLabelled_DataSourceChanged(System.Object,System.EventArgs)">
            <summary>
            This event goes off when the DataSource is fired.
            </summary>
            <param name="sender">The sender of this event.</param>
            <param name="e">The event arguments.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.TCmbLabelled_BackColorChanged(System.Object,System.EventArgs)">
            <summary>
            This procedure ensures that the height of this control cannot be changed.
            </summary>
            <param name="sender"></param>
            <param name="e">Event Arguments
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.TCmbLabelled_ForeColorChanged(System.Object,System.EventArgs)">
            <summary>
            This procedure ensures that the height of this control cannot be changed.
            </summary>
            <param name="sender"></param>
            <param name="e">Event Arguments</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.LblDescription_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            custom paint method for the label
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.TCmbLabelled_Leave(System.Object,System.EventArgs)">
            <summary>
            when the focus is lost
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.TCmbLabelled_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            This event goes off when the selection is committed to the combobox.
            </summary>
            <param name="sender">The sender of this event.</param>
            <param name="e">The event arguments.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbLabelled.TCmbLabelled_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            when the control is displayed again
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.CaseSensitiveSearch">
             <summary>
             This property determines which column should be sorted. This may be esential
             for heirs of this class which use more the one column in the combobox. The
             default value for this property is therefore null.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.ColumnNum">
             <summary>
             This property manages number of columns within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.ColumnWidthCol1">
             <summary>
             This property manages the width of a column within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.ColumnWidthCol2">
             <summary>
             This property manages the width of a column within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.ColumnWidthCol3">
             <summary>
             This property manages the width of a column within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.ColumnWidthCol4">
             <summary>
             This property manages the width of a column within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.ComboBoxWidth">
             <summary>
             This property may be used to influence the width of the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.DisplayInColumn1">
             <summary>
             This property manages the content of the 1st column in the combobox
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.DisplayInColumn2">
             <summary>
             This property manages the content of the 2nd column in the combobox
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.DisplayInColumn3">
             <summary>
             This property manages the content of the 3rd column in the combobox
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.DisplayInColumn4">
             <summary>
             This property manages the content of the 4th column in the combobox
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.DisplayMember">
             <summary>
             This property may be used to influence the DisplayMember.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.ImageColumn">
             <summary>
             This property manages the image column.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.Images">
             <summary>
             This property holds the images.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.LabelDisplaysColumn">
             <summary>
             This property may be used to read the width of the Label.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.LabelWidth">
             <summary>
             This property may be used to read the width of the Label.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.SuppressSelectionColor">
             <summary>
             This property manages the colour of the selection. If set to TRUE the
             selected item of the ComboBox is not coloured in selection mode colours.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbLabelled.ValueMember">
             <summary>
             This property may be used to influence the ValueMember.
            
             </summary>
        </member>
        <member name="T:Ict.Common.Controls.TCmbVersatile">
            The cmbVersatile ComboBox is a ComboBox which offers the possibility of having
            up to 4 columns in its drop down pane. Within this columns can be either some
            text or an 16 by 16 image. The cmbVersatile ComboBox has several new properties.
            Here the user is not allowed to add new items to the ComboBox. The following
            properties are essential for this control to work:
            - DataSource:
              Here the underlying table / view has to be set. This is mostly done in the
              following way:
                cmbVersatile.BeginUpdate();
                cmbVersatile.DataSource := YOUR_DATA_TABLE / YOUR_DATA_VIEW;
                cmbVersatile.DisplayMember := COLUMN NAME;
                cmbVersatile.ValueMember := COLUMN NAME;
                cmbVersatile.EndUpdate();
            - DisplayInColumn1 ... DisplayIn Column4:
              Here the colomn of the underlying DataSource table / view has to be set. If
              no table column name for the 1st column of the drop down is given
              DisplayMember respectively ValueMember is used.
            - ColumnWidthCol1 ... ColumnWidthCol4:
              Here the width of the columns of the drop down pane is adjusted. Please note
              that it is not allowed to set the with of a previous column to 0 and the next
              column to a value other than 0 (ColumnWidthCol2 = 0, ColumnWidthCol3 = 100 is
              a forbidden scenario.
            - GridLine... ;
              If set to true a grid line in the drop down pane is drawn
            - Images:
              Here an ImageList is needed. All images in that list have indices. If you note
              these indices in one column of the DataSource the cmbVersatile ComboBox will
              automatically grab these images and display them in the colomn you assign.
            - ImageColumn:
              The column number of the drop down's column which holds the image indices.
              Please note: 0 refers to no column!, 1 to column 1 ... 4 to column 4.
            TODO: Known features from .Net:
            The databinding is a little bit troublesome. You can use it if the rows of the
            DataSource table have been added with the routine 'Add'. Otherwise the databinding
            just breaks. For additional information on this topic visit the Petra - Wiki.
            Here is the link to the complete article:
            TODO: http://ict.om.org/PetraWiki/current/index.php?title=Problems_in_DataBinding_a_View_to_a_ComboBox
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.#ctor">
             <summary>
             This is the constructer of this class
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.CheckColumnNumber">
             <summary>
             This procedure checks and sets the right
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.DataSourceContainsColumn(System.String)">
            <summary>
            check if the datasource knows that column
            </summary>
            <param name="AColumn">column to look for</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.Dispose(System.Boolean)">
            <summary>
            This procedure disposes the TcmbVersatile.
            </summary>
            <param name="Disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.GetDataSourceTable(System.Object)">
            <summary>
            This procedure needs a object in
            order to come up with the table.
            </summary>
            <param name="ADataSource">The object to be transformed into a table.</param>
            <returns>The table of the System.ComponentModel.MarshalByValueComponent System.Object.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.GetDataSourceTableFromSelf">
            <summary>
            returns the currently used DataTable
            </summary>
            <returns>the DataTable from the DataSource</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.Set_DefaultProperties">
             <summary>
             This procedure sets the default properties.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.Set_ColumnNum(System.Int32)">
            <summary>
            This procedure sets the number of columns within the ComboBox
            </summary>
            <param name="Value">The number of columns.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.Get_ColumnNumber(System.Object,System.String)">
            <summary>
            This procedure gets the colum nnumber from a given DataSource if the
            name of the column is provided.
            </summary>
            <param name="DataSource">The DataSource the column is in.</param>
            <param name="ColumnName">The name of the column to get the ordial from.</param>
            <returns>The column ordial.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.Get_ItemString(System.Int32,System.Int32)">
            <summary>
            This procedure gets the string representation of the item identified by the
            row number and the column number of the DataSource property of this control.
            </summary>
            <param name="Row">The row number of the item</param>
            <param name="Col">The column number of the item</param>
            <returns>The string representation of the item
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            This event occurs when a row in the DropDown pane is drawn.
            </summary>
            <param name="e">The DrawItemEventArgs for this event.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.DrawDropDownEntry(System.Int32,System.Int32,System.Windows.Forms.DrawItemEventArgs,System.Drawing.SolidBrush,System.Drawing.SolidBrush,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.String,System.Drawing.StringFormat,System.Int32,System.Int32)">
            <summary>
            This function draws an entry in the DropDown pane.
            </summary>
            <param name="AColumnWidth">The width of the current column</param>
            <param name="AnItemIndex">The index for this very row.</param>
            <param name="AnEvent">The current DrawItemEventArgs.</param>
            <param name="ABackgroundBrush">The brush for the background</param>
            <param name="AForegroundBrush">The brush for the foreground</param>
            <param name="ABackgroundRectangle">The drawing / writing area</param>
            <param name="AnImageRectangle">The area the image should expand to</param>
            <param name="ACurrColumnNumber">The current column number</param>
            <param name="ADisplayString">The string to display</param>
            <param name="ADisplayStringFormat">The format of the string</param>
            <param name="AColumnXStartCoord">The X Coordinate of the start point for writing</param>
            <param name="AColumnYStartCoord">The Y Coordinate of the start point for writing</param>
            <returns>Zero for success, -1 for failure.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.DrawGridlines(System.Drawing.Rectangle,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            This procedure draws the gridlines within the DropDown pane. The procedure
            is called from the OnDrawItem routine.
            </summary>
            <param name="ABackgroundRectangle">The drawing area.</param>
            <param name="AnEvent">Event Arguments from the OnDrawItem routine.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TCmbVersatile.OnCreateControl">
             <summary>
             This event occurs when the control is created.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.AcceptNewValues">
             This property determines which column should be sorted. This may be esential
             for heirs of this class which use more the one column in the combobox. The
             default value for this property is therefore NIL.
            
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.ColumnNum">
             <summary>
             This property manages number of columns within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.ColumnWidthCol1">
             <summary>
             This property manages the width of a column within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.ColumnWidthCol2">
             <summary>
             This property manages the width of a column within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.ColumnWidthCol3">
             <summary>
             This property manages the width of a column within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.ColumnWidthCol4">
             <summary>
             This property manages the width of a column within the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.GridLineVertical">
             <summary>
             This property manages the vertical grid line in the drop down list.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.GridLineHorizontal">
             <summary>
             This property manages the horizontal grid line in the drop down list.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.GridLineColor">
             <summary>
             This property manages the color of the grid lines in the drop down list.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.ImageColumn">
             <summary>
             This property manages the image column.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.Images">
             <summary>
             This property holds the images.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.DisplayInColumn1">
             <summary>
             This property manages the content of the 1st column in the combobox
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.DisplayInColumn2">
             <summary>
             This property manages the content of the 2nd column in the combobox
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.DisplayInColumn3">
             <summary>
             This property manages the content of the 3rd column in the combobox
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.DisplayInColumn4">
             <summary>
             This property manages the content of the 4th column in the combobox
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TCmbVersatile.Sorted">
            <summary>
            This property controls whether items in the list portion are sorted. Here
            it is only in the declaration to hide the property and make it readonly.
            The sorting is now adjusted with the DropDownSorting property.
            write set_Sorted;
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.ControlsUtilities">
            <summary>
            General utility functions for ICT applications that work with Controls.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ControlsUtilities.AddTabNextToTab(System.Windows.Forms.TabControl,System.Windows.Forms.TabPage,System.String)">
            <summary>
            Add another TabPage next to the given Tabpage
            </summary>
            <param name="ATabControl">parent control containing the tabpages</param>
            <param name="AAddTabPage">the new tabpage</param>
            <param name="ANextToTabPage">the neighbour</param>
        </member>
        <member name="M:Ict.Common.Controls.ControlsUtilities.HideTabs(System.Windows.Forms.TabControl,System.Collections.ArrayList)">
            <summary>
            hide a specified group of tab pages
            </summary>
            <param name="ATabControl">parent control</param>
            <param name="ATabsToHide">pages to hide</param>
        </member>
        <member name="M:Ict.Common.Controls.ControlsUtilities.SwapTabPages(System.Windows.Forms.TabControl,System.Windows.Forms.TabPage,System.Windows.Forms.TabPage)">
            <summary>
            swap the order of 2 tabbed pages
            </summary>
            <param name="ATabControl">parent control</param>
            <param name="ATabPage1">first tab page</param>
            <param name="ATabPage2">second tab page</param>
        </member>
        <member name="M:Ict.Common.Controls.ControlsUtilities.SwapTabPages(System.Windows.Forms.TabControl,System.Int32,System.Int32)">
            <summary>
            swap 2 tabbed pages, specified by their index
            </summary>
            <param name="ATabControl">parent control</param>
            <param name="ATabPageIndex1">index of first tabbed page</param>
            <param name="ATabPageIndex2">index of second tabbed page</param>
        </member>
        <member name="T:Ict.Common.Controls.TExtStatusBarHelp">
            <summary>
            This special statusbar will monitor the active control
            and displays the help text for the active control in the statusbar
            see also http://msdn.microsoft.com/en-us/library/ms229066.aspx
            and http://www.vb-helper.com/howto_net_focus_status.html
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TExtStatusBarHelp.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TExtStatusBarHelp.SetHelpText(System.Windows.Forms.Control,System.String)">
            <summary>
            add a control and the text that should be displayed in the statusbar when the control is focused
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Common.Controls.TExtStatusBarHelp.ShowMessage(System.String)">
            show a message in the status bar, independent of the selected control
        </member>
        <member name="T:Ict.Common.Controls.TGrpCollapsible">
            <summary>
            This class is a collapsible groupbox.
            there should be a tooltip for minimizing/maximizing control
            there should be a subcaption that can have different background color
            there should be a keyboard shortcut for maximizing/minimizing the groupbox
            This will be implemented later.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TGrpCollapsible.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TGrpCollapsible.Collapse">
            <summary>
            function that collapses the box
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TGrpCollapsible.Expand">
            expand the control
        </member>
        <member name="P:Ict.Common.Controls.TGrpCollapsible.Caption">
            set the caption for the control
        </member>
        <member name="P:Ict.Common.Controls.TGrpCollapsible.SubCaption">
            the sub caption can be highlighted
        </member>
        <member name="P:Ict.Common.Controls.TGrpCollapsible.SubCaptionHighlighted">
            <summary>
            define if sub caption should be highlighted
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TGrpCollapsible.IsCollapsed">
            <summary>
            is it collapsed
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TGrpCollapsible.CollapsingEvent">
            <summary>
            Event when box collapses or expands
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.CollapsingEventHandler">
            <summary>
            this event is triggered when the box collapses
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.CollapsibleEventArgs">
            <summary>
            dummy class for further implementation
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.CollapsibleEventArgs.Cancel">
            <summary>
            cancel the collapsing
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.CollapsibleEventArgs.WillCollapse">
            <summary>
            will it collapse or expand?
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TLblVarioText">
            <summary>
            This unit provides a Label that adjusts its width to the text it displays.
            The AdjustWidth property handles the behaviour of this Label. If the property
            is set to true then the Label adjusts its width to the text it displays. If it
            is set to false then it behaves like a normal Label.
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TLblVarioText.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TLblVarioText.FAdjustWidth">
            <summary>
            should the label adjust its width to the length of the text it displays
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TLblVarioText.InitializeComponent">
            <summary>
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> Properties itself Property stuff <summary> Required method for Designer support  do not modify the contents of this
            method with the code editor. </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TLblVarioText.#ctor">
             <summary>
             Private Declarations }
             The constructor of this class
             }{*******************************************************************************
             The constructor of this class
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TLblVarioText.AlterWidth">
             <summary>
             This procedure adjusts the width of the button.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TLblVarioText.Dispose(System.Boolean)">
             <summary>
             <summary> Clean up any resources being used. </summary>
             The destructor of this class
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TLblVarioText.OnTextChanged(System.EventArgs)">
             <summary>
             This event is called when the text of the button changes.
             }{*******************************************************************************
             This event is called when the text of the button changes.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TLblVarioText.AdjustWidth">
             <summary>
             Property Methods
             This property determines whether the button resizes to the text length or not.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TLblVarioText.Size">
             <summary>
             This property sets or gets the size of the control in pixels..
            
             </summary>
        </member>
        <member name="T:Ict.Common.Controls.TLstTasks">
            <summary>
            this class fills a ListView with tasks,
            and executes the tasks using reflection
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TLstTasks.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TLstTasks.#ctor(System.Xml.XmlNode)">
            <summary>
            constructor that generates several groups of tasks from an xml document
            </summary>
            <param name="ATaskGroups"></param>
        </member>
        <member name="M:Ict.Common.Controls.TLstTasks.ExecuteAction(System.Xml.XmlNode,System.IntPtr)">
            <summary>
            execute action from the navigation tree
            </summary>
            <returns>the error or status message</returns>
        </member>
        <member name="P:Ict.Common.Controls.TLstTasks.Statusbar">
            <summary>
            set the statusbar so that error messages can be displayed
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TPnlAccordion">
            <summary>
            This control contains several sub panels;
            each panel has a heading;
            a click on the heading collapses or extends the panel
            several panels can be expanded at the same time
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlAccordion.#ctor">
            constructor
        </member>
        <member name="F:Ict.Common.Controls.TPnlAccordion.FDashboard">
            <summary>
            this is the content panel which will host the task lists
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlAccordion.#ctor(System.Xml.XmlNode,Ict.Common.Controls.TDashboard,System.String)">
            create an accordion with several items for the given folder, with all sub menus
        </member>
        <member name="M:Ict.Common.Controls.TPnlAccordion.SelectFirstLink">
            <summary>
            make sure that the content panel is populated with the contents of the first link;
            this might be called when selecting a folder
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TPnlAccordion.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlAccordion.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ict.Common.Controls.TPnlAccordion.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TPnlAccordion.Statusbar">
            <summary>
            set the statusbar so that error messages can be displayed
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TPnlCollapsible">
            <summary>
            UserControl which acts as a 'Collapsible Panel'.
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TPnlCollapsible.COLLAPSEDHEIGHT">
            <summary>Hard-coded value of the collapsed height</summary>
        </member>
        <member name="F:Ict.Common.Controls.TPnlCollapsible.EXPANDEDHEIGHT">
            <summary>Hard-coded value of the expanded height</summary>
        </member>
        <member name="F:Ict.Common.Controls.TPnlCollapsible.FIsCollapsed">
            <summary>Keeps track of the collapsed/expanded state</summary>
        </member>
        <member name="F:Ict.Common.Controls.TPnlCollapsible.FToolTipText">
            <summary>Caches the translated text for several ToolTips</summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.Collapse">
            <summary>
            Causes the panel to collapse. Only the Title Panel will be visible after that.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.Expand">
            <summary>
            Causes the panel to expand. The Title Panel and the Content Panel will be visible after that.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.OnCollapsed">
            <summary>
            Raises the 'Collapsed' Event if something subscribed to it.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.OnExpanded">
            <summary>
            Raises the 'Expanded' Event if something subscribed to it.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.BtnToggleClick(System.Object,System.EventArgs)">
            <summary>
            Event is raised if the Toggle Button is clicked.
            </summary>
            <param name="sender">The Toggle Button.</param>
            <param name="e">Not evaluated.</param>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.BtnToggleMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Event is raised when the mouse enters the Toggle Button.
            </summary>
            <param name="sender">The Toggle Button.</param>
            <param name="e">Not evaluated.</param>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.BtnToggleMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Event is raised if the mouse leaves the Toggle Button.
            </summary>
            <param name="sender">The Toggle Button.</param>
            <param name="e">Not evaluated.</param>
        </member>
        <member name="F:Ict.Common.Controls.TPnlCollapsible.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the control.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ict.Common.Controls.TPnlCollapsible.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TPnlCollapsible.pnlContent">
            <summary>The Content Panel. This needs to become private again after this Control can dynamically instantiate UserControls!</summary>
        </member>
        <member name="E:Ict.Common.Controls.TPnlCollapsible.Collapsed">
            <summary>Event is fired after the panel has collapsed.</summary>
        </member>
        <member name="E:Ict.Common.Controls.TPnlCollapsible.Expanded">
            <summary>Event is fired after the panel has expanded.</summary>
        </member>
        <member name="P:Ict.Common.Controls.TPnlCollapsible.Text">
            <summary>
            Sets the Title Text.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TPnlCollapsible.IsCollapsed">
            <summary>True if the panel is collapsed, otherwise false.</summary>
        </member>
        <member name="T:Ict.Common.Controls.TDashboard">
            <summary>
            the Dashboard can host several other panels
            each panel has a caption, and can be minimized
            TODO: this is only implemented to host the tasklist at the moment, and does not host panels yet
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDashboard.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDashboard.ReplaceTaskList(Ict.Common.Controls.TLstTasks)">
            <summary>
            quick implementation of hosting task list
            TODO: this needs to support several panels etc
            </summary>
            <param name="ATaskList"></param>
        </member>
        <member name="T:Ict.Common.Controls.TPnlGradient">
            <summary>
            this panel has a gradient background
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TPnlGradient.GradientColorTop">
            see variable name
        </member>
        <member name="F:Ict.Common.Controls.TPnlGradient.GradientColorBottom">
            see variable name
        </member>
        <member name="F:Ict.Common.Controls.TPnlGradient.Border">
            <summary>
            color for the border; if transparent, no border is drawn
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TPnlGradient.DontDrawBottomLine">
            <summary>
            sometimes, when stacking several panels on top of each other, you don't want bottom and top line to result in 2 lines
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlGradient.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TPnlGradient.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            overwrite OnPaint for the gradient background color
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TRbtNavigationButton">
            <summary>
            this class shows a navigation button that can be checked, unchecked, and hovered over;
            it has an icon and a label;
            it has a gradient background
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TRbtNavigationButton.GradientColorTopUnchecked">
            see variable name
        </member>
        <member name="F:Ict.Common.Controls.TRbtNavigationButton.GradientColorBottomUnchecked">
            see variable name
        </member>
        <member name="F:Ict.Common.Controls.TRbtNavigationButton.GradientColorTopChecked">
            see variable name
        </member>
        <member name="F:Ict.Common.Controls.TRbtNavigationButton.GradientColorBottomChecked">
            see variable name
        </member>
        <member name="F:Ict.Common.Controls.TRbtNavigationButton.GradientColorTopHovering">
            see variable name
        </member>
        <member name="F:Ict.Common.Controls.TRbtNavigationButton.GradientColorBottomHovering">
            see variable name
        </member>
        <member name="M:Ict.Common.Controls.TRbtNavigationButton.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TRbtNavigationButton.CheckedChanged">
            <summary>
            is triggered if the checked state changes
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TRbtNavigationButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            overwrite OnPaint for the gradient background color
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TRbtNavigationButton.PanelEnter(System.Object,System.EventArgs)">
            mouse is hovering over button
        </member>
        <member name="M:Ict.Common.Controls.TRbtNavigationButton.PanelLeave(System.Object,System.EventArgs)">
            mouse moves away from button
        </member>
        <member name="M:Ict.Common.Controls.TRbtNavigationButton.PanelClick(System.Object,System.EventArgs)">
            mouse got clicked over button
        </member>
        <member name="F:Ict.Common.Controls.TRbtNavigationButton.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TRbtNavigationButton.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ict.Common.Controls.TRbtNavigationButton.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TRbtNavigationButton.Text">
            Caption of the button
        </member>
        <member name="P:Ict.Common.Controls.TRbtNavigationButton.Checked">
            <summary>
            checked state
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TRbtNavigationButton.Icon">
            <summary>
            set the path of the icon that should be displayed on this button
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TLstFolderNavigation">
            <summary>
            This control has a list of folders;
            each folder is represented as a radiobutton (TRbtNavigationButton)
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TLstFolderNavigation.ResourceDirectory">
            <summary>
            this is the path to the resource directory of the icons.
            this is public and static so that the TPnlAccordion can access it too.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TLstFolderNavigation.GetLabel(System.Xml.XmlNode)">
            <summary>
            this will get the proper label for any navigation node;
            this is public and static so that the TPnlAccordion can access it too.
            </summary>
            <param name="ANode"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Controls.TLstFolderNavigation.#ctor">
            constructor
        </member>
        <member name="M:Ict.Common.Controls.TLstFolderNavigation.AddFolder(System.Xml.XmlNode,System.String,Ict.Common.Controls.TLstFolderNavigation.CheckAccessPermissionDelegate)">
            <summary>
            add a folder to the list
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TLstFolderNavigation.SelectFolder(System.Int32)">
            <summary>
            Select the given folder, if it is enabled
            </summary>
            <param name="AIndex"></param>
        </member>
        <member name="M:Ict.Common.Controls.TLstFolderNavigation.SelectFirstAvailableFolder">
            <summary>
            select the first folder that is available (ie enabled)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Ict.Common.Controls.TLstFolderNavigation.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TLstFolderNavigation.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ict.Common.Controls.TLstFolderNavigation.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TLstFolderNavigation.Dashboard">
            <summary>
            set the dashboard so that the task lists can be displayed in the right place
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TLstFolderNavigation.Statusbar">
            <summary>
            set the statusbar so that error messages can be displayed
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TLstFolderNavigation.CheckAccessPermissionDelegate">
            <summary>
            this function checks if the user has access to the navigation node
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.DelegateGetImageForRow">
            <summary>Delegate forward declaration</summary>
        </member>
        <member name="T:Ict.Common.Controls.TSgrdTextColumn">
            <summary>
            This is a custom DataGridColumn for Text, for use with TSgrdDataGrid.
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdTextColumn.FGrid">
            <summary>
            the grid that this column belongs to
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdTextColumn.FDataCellSelected">
            <summary>
            the currently selected cell
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdTextColumn.#ctor(SourceGrid.DataGrid,System.Data.DataColumn,System.String,SourceGrid.Cells.ICellVirtual)">
            <summary>
            constructor
            </summary>
            <param name="ADataGrid"></param>
            <param name="ADataColumn"></param>
            <param name="ACaption"></param>
            <param name="ADataCell"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdTextColumn.#ctor(SourceGrid.DataGrid,System.Data.DataColumn,System.String,SourceGrid.Cells.ICellVirtual,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="ADataGrid"></param>
            <param name="ADataColumn"></param>
            <param name="ACaption"></param>
            <param name="ADataCell"></param>
            <param name="ASortableHeader"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdTextColumn.#ctor(SourceGrid.DataGrid,System.Data.DataColumn,System.String,SourceGrid.Cells.ICellVirtual,System.Int16,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="ADataGrid"></param>
            <param name="ADataColumn"></param>
            <param name="ACaption"></param>
            <param name="ADataCell"></param>
            <param name="AColumnWidth"></param>
            <param name="ASortableHeader"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdTextColumn.GetDataCell(System.Int32)">
            <summary>
            get the data cell of a row
            </summary>
            <param name="AGridRow"></param>
            <returns></returns>
        </member>
        <member name="T:Ict.Common.Controls.TSgrdImageColumn">
            <summary>
            This is a custom DataGridColumn for Images, for use with TSgrdDataGrid.
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdImageColumn.#ctor(SourceGrid.DataGrid,System.String,Ict.Common.Controls.DelegateGetImageForRow)">
            <summary>
            constructor
            </summary>
            <param name="ADataGrid"></param>
            <param name="ACaption"></param>
            <param name="AGetImage"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdImageColumn.GetDataCell(System.Int32)">
            <summary>
            get the data cell of a row
            </summary>
            <param name="AGridRow"></param>
            <returns></returns>
        </member>
        <member name="T:Ict.Common.Controls.TToolTipModel">
            <summary>
            tooltips for grid
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TToolTipModel.myDefault">
            default tooltip
        </member>
        <member name="M:Ict.Common.Controls.TToolTipModel.InitializeUnit">
            <summary>
            this needs to be called once for the whole application
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TToolTipModel.GetToolTipText(SourceGrid.CellContext)">
            <summary>
            get the correct tooltip for the current cell
            </summary>
            <param name="ACellContext"></param>
            <returns>tooltip text</returns>
        </member>
        <member name="T:Ict.Common.Controls.TAutoFindModeEnum">
            <summary>
            behaviour for typing a value and going to an appropriate row
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TAutoFindModeEnum.NoAutoFind">
            <summary>
            no auto find at all
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TAutoFindModeEnum.FirstCharacter">
            <summary>
            look for lines starting with a given character
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TAutoFindModeEnum.FullString">
            <summary>
            look for the full string (not implemented yet)
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDelegateGetToolTipText">
            <summary>
            delegate for tooltip
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TKeyPressedEventHandler">
            <summary>
            what happens when key has been pressed
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TClickCellEventHandler">
            <summary>
            cell has been clicked
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TClickHeaderCellEventHandler">
            <summary>
            header row has been clicked
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDoubleClickCellEventHandler">
            <summary>
            cell has been double clicked
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDoubleClickHeaderCellEventHandler">
            <summary>
            header cell has been double clicked
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDataGridInvalidAutoFindColumnException">
            <summary>
            cannot find
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridInvalidAutoFindColumnException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridInvalidAutoFindColumnException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Common.Controls.TDataGridAutoFindModeNotImplementedYetException">
            <summary>
            Auto Find not implemented yet
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridAutoFindModeNotImplementedYetException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridAutoFindModeNotImplementedYetException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Common.Controls.TSgrdDataGridPaged">
             <summary>
             Extends TsgrdDataGrid (an extension to SourceGrid3.DataGrid) with the ability
             to load only data that is actually viewed in the Grid, therefore reducing
             the data transfer from the Server to the Client.
            
             How it works:
             The Grid initially loads only a subset of the resultset that is held by the
             Server. The size (=number of rows) of this subset is called 'Page'. The size
             of a 'Page' of data is determined by the vertical size of the Grid at the
             time where the InitialiseGrid method is called and stays the same, whether
             the Grid gets resized or not.
             As the user tries to access a row of data that is not yet transferred from
             the Server, the Grid calls a Delegate function that returns a 'page' of data
             that holds this row. This is also done when the Grid is being resized and as
             a result of that would need to display a row that is not yet transferred from
             the Server.
            
             How to use:
             Execute method on the Server that executes the query that yields the rows
             that you later want to display (all rows are held on the Server, but none
             are transferred yet). There are no restrictions on how the DataTable and
             its DataColumns are to be made up (eg. there needs to be no PrimaryKey)!
             Call the LoadFirstDataPage method, specifying for the
             AGetDataPagedResultFunction parameter a delegate function that will get
             called when a Page of data needs to be retrieved. This returns a
             DataTable containing all data pages (also empty ones that are not
             retrieved yet!). (After a call to this method the PageSize property may
             be inquired.)
             Set the Grid's DataSource to the DefaultView of the returned DataTable.
             Do everything else you would do with a TsgrdDataGrid (or
             SourceGrid3.DataGrid) control (eg. create Columns, setup visual
             appearance...
             A call to the LoadAllDataPages method can be made to force the loading
             of all data pages (not recommended unless you really need it). After that,
             the PagedDataTable holds all records that are held on the Server.
            
             Note: Due to the fact that the programmer is responsible to call first a
             method on the Server that executes the query and then call the
             LoadFirstDataPage method to load the data, this Grid can be used even
             in multithreaded GUI scenarios (see MPartner.PartnerFind screen for an
             example!)
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FGridInitialised">
            <summary>Maintains a state that tells wheter the Grid has been intialised for loading data.</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FDataTransferDone">
            <summary>Maintains a state that tells wheter the Grid has already fetched data.</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FPageSize">
            <summary>Size of the Pages that are to be returned</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FTotalRecords">
            <summary>Number of records resulting from the query</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FTotalPages">
            <summary>Number of Pages resulting from the query</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FTransferredDataPages">
            <summary>ArrayList that keeps track of which pages of data have already been retrieved</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FPagedDataTable">
            <summary>DataTable that holds all Pages of data (also empty ones that are not retrieved yet!)</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FGetDataPagedResult">
            <summary>Delegate function that gets called when a Page of data needs to be retrieved</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FPerformFullLoadOnDataGridSort">
            <summary>Maintains a state that tells wheter all Pages of data have already been retrieved once because a sort operation was done on the Grid.</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FLastHeight">
            <summary>Stores the last height of the Grid control.</summary>
        </member>
        <member name="F:Ict.Common.Controls.TSgrdDataGridPaged.FIdleSet">
            <summary>Keeps track of whether the OnIdle Handler is already hooked up</summary>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.InitializeComponent">
            <summary>
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> <summary> Required method for Designer support  do not modify the contents of this method with the code editor.
            </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.Dispose(System.Boolean)">
            <summary>
            <summary> Clean up any resources being used. </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.DataTransferDone">
             <summary>
             Gets called as soon as the Server function has finished returning the first
             page of data.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.LoadFirstDataPage(Ict.Common.Controls.TDelegateGetDataPagedResult)">
             <summary>
             Needs to be called as soon as it is desired to display the first page of data.
            
             @comment All further pages are loaded by the control on demand.
            
             </summary>
             <param name="ADelegateGetDataPagedResultFunction">Delegate function that gets called
             when a Page of data needs to be retrieved.
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.LoadSingleDataPage(System.Int32)">
             <summary>
             Loads a single data page into the paged table.
            
             </summary>
             <param name="ANeededPage">Page number of the data page to retrieve.
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.LoadAllDataPages">
             <summary>
             Loads all data pages that are not yet loaded into the paged table.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.ResetPaging">
             <summary>
             Initialises or re-sets variables. Needed before (new) data pages can be
             loaded.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.DeterminePageSize">
            <summary>
            Determines the PageSize, that is the amount of rows that would fit into the
            Grid at its current horizontal size.
            Takes the height of a possible visible HScrollBar and the heigh of a possible
            visible DataRowHeader into consideration.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.OnSizeChanged(System.EventArgs)">
            <summary>
            size has changed (especially height); perhaps need to display more rows
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.OnResize(System.EventArgs)">
            <summary>
            Defers the Resize Event until Application.Idle Event fires.
            </summary>
            <remarks>Deferring the Resize Event makes for smooth resizing of the
            Grid. The Grid is still redrawing (and loading not-yet-loaded DataRows),
            but the time-consuming calculations that the Grid performs once OnResize
            is called (eg. calculating the scrollbar positions) are deferred.</remarks>
            <param name="e">Not evaluated.</param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.OnIdle(System.Object,System.EventArgs)">
            <summary>
            Raises the Resize Event once the Application isn't busy anymore.
            </summary>
            <param name="sender"></param>
            <param name="e">Not evaluated.</param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.OnDisposed(System.Object,System.EventArgs)">
            <summary>
            Prevents the Application.Idle Event from being fired
            after the Control has been disposed.
            </summary>
            <param name="sender">Not evaluated.</param>
            <param name="e">Not evaluated.</param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.OnSortingRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            when sorting
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TSgrdDataGridPaged.OnVScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            the grid has been scrolled vertically, different rows need to be displayed
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGridPaged.PageSize">
            <summary>Number of rows that would fit into the Grid at its current horizontal size.</summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGridPaged.TotalRecords">
            <summary>Number of records resulting from the query</summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGridPaged.TotalPages">
            <summary>Number of Pages resulting from the query</summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGridPaged.PagedDataTable">
            <summary>DataTable that holds all Pages of data (also empty ones that are not retrieved yet!)</summary>
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGridPaged.AutoFindMode">
             This property gets hidden because it doesn't work with sgrdDataGridPaged!
            
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGridPaged.AutoFindColumn">
             This property gets hidden because it doesn't work with sgrdDataGridPaged!
            
        </member>
        <member name="E:Ict.Common.Controls.TSgrdDataGridPaged.DataPageLoading">
             This Event is thrown when a data page is about to be loaded from the Server.
            
        </member>
        <member name="E:Ict.Common.Controls.TSgrdDataGridPaged.DataPageLoaded">
             This Event is thrown when a data page loaded from the Server.
            
        </member>
        <member name="P:Ict.Common.Controls.TSgrdDataGridPaged.InDesignMode">
            <summary>
            Special property to determine whether our code is running in the WinForms Designer.
            The result of this property is correct even if InitializeComponent() wasn't run yet
            (.NET's DesignMode property returns false in that case)!
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDataGridPagedNotInitialisedException">
            <summary>
            error when not initialised
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridPagedNotInitialisedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridPagedNotInitialisedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Common.Controls.TDataGridPagedNoDataLoadedYetException">
            <summary>
            no data available yet
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridPagedNoDataLoadedYetException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridPagedNoDataLoadedYetException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Common.Controls.TDataGridPagedDelegateFunctionNotSpecifiedException">
            <summary>
            no delegate
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridPagedDelegateFunctionNotSpecifiedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridPagedDelegateFunctionNotSpecifiedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Common.Controls.TDataGridPagedAutoFindNotSupportedException">
            <summary>
            auto find not supported
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridPagedAutoFindNotSupportedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TDataGridPagedAutoFindNotSupportedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Common.Controls.TDelegateGetDataPagedResult">
            <summary>Delegate declaration</summary>
        </member>
        <member name="T:Ict.Common.Controls.TDataPageLoadingEventHandler">
            <summary>Event handler declaration</summary>
        </member>
        <member name="T:Ict.Common.Controls.TDataPageLoadedEventHandler">
            <summary>Event handler declaration</summary>
        </member>
        <member name="T:Ict.Common.Controls.TDataPageLoadEventArgs">
            <summary>
            Event Arguments declaration
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TDataPageLoadEventArgs.DataPage">
            <summary>
            number of data page
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TSelectedIndexChangingEventHandler">
            <summary>Event handler declaration</summary>
        </member>
        <member name="T:Ict.Common.Controls.TSelectedIndexChangingEventArgs">
            <summary>
            Event Arguments declaration
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSelectedIndexChangingEventArgs.SelectedIndex">
            <summary>
            previously selected index
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TSelectedIndexChangingEventArgs.NewSelectedIndex">
            <summary>
            now this is selected
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TTabVersatile">
             <summary>
             TTabVersatile is an extension of System.Windows.Forms.TabControl that
             contains several extensions:
             drag'n'drop support for re-ordering of TabPages
             + can be cancelled by pressing ESC while dragging and by moving the
             mouse out of the area where the TabPage headers are shown.
             disabling of certain TabPages
             + TabPage header is OwnerDrawn to show 'disabled' text and 'disabled'
             icons.
             - done for all TabPages when the whole TabControl is disabled
             + Prevent selection of disabled TabPage
             - with Keyboard (CURSOR-LEFT, CURSOR-RIGHT, CURSOR-UP, CURSOR-DOWN,
             HOME, END, CTRL+TAB, CTRL+SHIFT+TAB)
             - with Mouse (WM_LBUTTONDOWN message is caught)
             disabling of all TabPages except the current one
             SelectedIndexChanging Event
             + tells SelectedIndex of the current page and SelectedIndex of the page
             that would be switched to.
             + is cancellable, which allows to prevent changing of current TabPage!
             allow Mnemonics in TabPage's text
             + show underlined character in TabPage's text
             + switch to TabPage with ALT+underlined character (only if TabPage is
             enabled!)
            
            
             Some of the web pages where I found useful information on how to achieve
             things:
             OnDrawItem + tracking Enabling/Disabling of TabPages
             http://bethmassi.blogspot.com/2005_01_01_bethmassi_archive.html
             Drag'n'Drop support
             http://www.codeproject.com/cs/miscctrl/draggabletabcontrol.asp
             Basic disabling of TabPages (without Windows API calls!)
             http://www.devnewsgroups.net/group/microsoft.public.dotnet.framework.windowsforms/topic4852.aspx
             Mnemonic support
             http://dotnetrix.co.uk/tabcontrols.html
            
            
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.WM_LBUTTONDOWN">
            <summary>Operating System Message: left MouseButton pressed</summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.FCustomDisabledPages">
            <summary>Maintains a list of TabPages that were disabled in EnableDisableAllOtherTabPages</summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.FSelectedTabPageBeforeDragging">
            <summary>Selected TabPage before dragging operation began</summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.FTabPageIsDragging">
            <summary>Tells whether a TabPage is beeing dragged</summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.FDraggedTabPageIndex">
            <summary>TabControl.TabPages index of the TabPage that is beeing dragged</summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.FDragDestinationTabPageIndex">
            <summary>TabControl.TabPages index of the TabPage where the dragged TabPage is beeing dragged over</summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.FRectDragBoxFromMouseDown">
            <summary>DragBox</summary>
        </member>
        <member name="F:Ict.Common.Controls.TTabVersatile.FSelectedTabHeaderRectangle">
            <summary>
            area selected
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.InitializeComponent">
            <summary>
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> <summary> Required method for Designer support  do not modify the contents of this method with the code editor.
            </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.Dispose(System.Boolean)">
            <summary>
            destructor
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.Set_DefaultProperties">
             <summary>
             This procedure sets the default properties.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.EnableDisableAllOtherTabPages(System.Boolean)">
             <summary>
             Disables and re-enables again all TabPages except the current TabPage.
            
             @comment When re-enabling the TabPages, only those TabPages are enabled that
             were not disabled at the time when this method was called to disable all
             other TabPages!
            
             </summary>
             <param name="AEnable">Set to false to disable, to true to re-enable
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            process new control that has been added
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            react to removal of a control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            what happens if tab pages are dragged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.OnDragLeave(System.EventArgs)">
            <summary>
            what happens when a tab page is dragged away
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            drawing the tab page
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            deal with keys being pressed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            what happens when mouse is clicked
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            moving the mouse
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.WndProc(System.Windows.Forms.Message@)">
             <summary>
             Prevents changing to a TabPage by MouseClick if the TabPage is disabled.
            
             </summary>
             <param name="AMessage">Operating System Message
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.ProcessMnemonic(System.Char)">
             <summary>
             Switches to a TabPage whose Mnemonic Character is pressed - but only if the
             TabPage is enabled.
            
             </summary>
             <param name="ACharCode">Character Code to evaluate.</param>
             <returns>true if pressing the Mnemonic Character caused a switch to the
             associated TabPage, false if not or the ACharcode is not associated with any
             TabPage.
             </returns>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.FireSelectedIndexChanging(System.Int32)">
             <summary>
             Builds the Arguments for and fires the SelectedIndexChanging Event.
            
             </summary>
             <param name="ANewSelectedIndex">Index of the TabPage to which the TabControl will
             change</param>
             <returns>true if the change is allowed, false if the Event was cancelled by
             the System.Object that was listening to it.
             </returns>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.InvalidateTabHeader(System.Object,System.EventArgs)">
             <summary>
             Forces a repainting of the TabHeader.
            
             </summary>
             <param name="sender">A TabPage</param>
             <param name="e">EventArgs (Ignored!)
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.GetTabPageByPointInTabHeader(System.Drawing.Point,System.Int32@)">
             <summary>
             Determines the TabPage that contains the Point in the TabHeader.
            
             </summary>
             <param name="APointInTabHeader">A Point in one of the TabHeaders</param>
             <param name="ATabPageIndex">Index of the TabPage that contains the Point in the
             TabHeader</param>
             <returns>TabPage that contains the Point in the TabHeader
             </returns>
        </member>
        <member name="M:Ict.Common.Controls.TTabVersatile.CalcRectDragBox(System.Int32,System.Int32)">
             <summary>
             Remember the point where the mouse down occurred.
            
             </summary>
             <param name="AXCoordinate">X coordinate</param>
             <param name="AYCoordinate">Y coordinate
             </param>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TTabVersatile.SelectedIndex">
            <summary>Overridden property to prevent Selection of disabled TabPage</summary>
        </member>
        <member name="P:Ict.Common.Controls.TTabVersatile.SelectedTab">
            <summary>Overridden property to prevent Selection of disabled TabPage</summary>
        </member>
        <member name="P:Ict.Common.Controls.TTabVersatile.DrawMode">
             <summary>
             / Overridden properties follow
             Specifies whether the tabs in a tab control are owner-drawn (drawn by the
             parent window), or drawn by the operating system.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTabVersatile.HotTrack">
             <summary>
             Specifies whether the tabs in a tab control are owner-drawn (drawn by the
             parent window), or drawn by the operating system.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTabVersatile.SelectedTabHeaderRectangle">
             <summary>
             Returns the Rectangle of the TabHeader of the selected Tab.
            
             </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTabVersatile.SelectedIndexChanging">
             <summary>
             / Custom Events follow
             This Event is thrown whenever the 'SelectedIndex' property for this control
             is about to change.
            
             </summary>
        </member>
        <member name="T:Ict.Common.Controls.TSelectedIndexChangeDisallowedTabPagedIsDisabledException">
            <summary>
            tab page is disabled and therefore cannot be selected
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TSelectedIndexChangeDisallowedTabPagedIsDisabledException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TSelectedIndexChangeDisallowedTabPagedIsDisabledException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Common.Controls.TTrvTreeView">
             <summary>
             This tree view provides "common features"
            
             1. If the tree losts the focus, the left node will stay marked as "has had focus"
            
             If you think that you can optimize the code feel free to do it but be careful. It
             shall run ether in the client an in NUnit ...
             </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTrvTreeView.#ctor">
            <summary>
            The constructor only installs two Eventhandlers.
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TTxtButtonLabel">
             <summary>
             This class is the base class for the txtAutopopulatedButtonLabel. It provides
             basic features for a Button, a TextBox and a Label. The Button is used to pull
             up another window to which is to provide contents for the TextBox and the
             Label.
            
             Currently there are two different control modes for the txtButtonLabel
             class: TwoTableMode, FunctionMode.
             TwoTableMode:
             This mode is used when the TextBox has a look up table. The databound
             table is responsible for the TextBox Text. The look up table denotes the
             Label Text.
            
             FunctionMode:
             This mode is used then the Label Text comes directly from a different
             function. The developer is responsible for implementing the "SetLabel"
             delegate function.
            
             Important:
             In all modes this (txtButtonLabel) class is databound by using this function:
               PerformDataBinding(ADataSource: System.Data.DataView; ADataMember: System.String; AControlMode: TButtonLabelControlMode): System.Boolean;
            
             Usage:
             Please make sure that the following Properties of the txtButtonLabel
             class have the following values according the control mode used:
             | Property            | TwoTableMode                      | FunctionMode    |
             |---------------------|-----------------------------------|-----------------|
             | ADataSource         | A DataView                        | A DataView      |
             | ATextBoxDataMember  | A Column Name                     | A Column Name   |
             | TextBoxLookUpMember | A Column Name of LookUpDataSource | null / ''       |
             | LabelLookUpMember   | A Column Name of LookUpDataSource | null / ''       |
             | LookUpDataSource    | A DataView                        | null / ''       |
             | SetLabel            | null                              | A Function Name |
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_SEPARATOR">
            <summary>
            space between find button and textbox
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_LABEL_SEPARATOR">
            <summary>
            space between textbox and label
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_DEFAULT_HEIGHT">
            <summary>
            default height
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_BUTTON_X_START_COORD">
            <summary>
            x position for button
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_TEXTBOX_HEIGHT_OFFSET">
            <summary>
            y position of textbox
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_TEXTBOX_HEIGHT">
            <summary>
            height of textbox
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_LABEL_HEIGHT_OFFSET">
            <summary>
            label y pos
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_LABEL_HEIGHT">
            <summary>
            label height
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.UNIT_NO_DATA_MESSAGE">
            <summary>
            no data available
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.EXCEPTION_DATA_BINDING">
            <summary>
            error message
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.EXCEPTION_DATA_BIND_LABEL">
            <summary>
            error message
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.EXCEPTION_DATA_BIND_TEXTBOX">
            <summary>
            error message
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.EXCEPTION_LABEL_STRING">
            <summary>
            error message
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.EXCEPTION_TEXTBOX_STRING">
            <summary>
            error message
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.EXCEPTION_BUTTON_CLICK">
            <summary>
            error message
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.EXCEPTION_WRONG_DATATYPE">
            <summary>
            error message
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.txtTextBox">
            <summary>
            the textbox that is used in this user control
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.lblLabel">
            <summary>
            the label that is used in this user control
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FSeparatorWidth">
            <summary>
            space between find button and text box
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FKeyValues">
            <summary>
            this text box allows this types of keys
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FLabelSeparatorWidth">
            <summary>
            space between textbox and label
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FBindLabelToTextBox">
            <summary>
            do we want data binding of label to textbox
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FShowLabel">
            <summary>
            should the label be displayed
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FLookUpDataSource">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FDataBoundView">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FLookUpDataSourceTable">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FLookUpDataSourceDataSet">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FTextBoxLookUpMember">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FLabelLookUpMember">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FTextChangedAlreadyCalled">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FTextBoxSelectionStart">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FTextBoxSelectionLength">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FControlMode">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FDataBound">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FCaseSensitive">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtButtonLabel.FAutomaticallyUpdateDataSource">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.InitializeComponent">
            <summary>
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> <summary> Required method for Designer support  do not modify the contents of this method with the code editor.
            </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.#ctor">
            <summary>
            Private Declarations
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.Dispose(System.Boolean)">
            <summary>
            <summary> Clean up any resources being used. </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.InitializeLabel">
             <summary>
             This procedure initializes the label. The label is faked by a textbox control.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.GetXCoordStartLabel">
             <summary>
             This function gets the start X - coordinate for the Label.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.GetYCoordStartLabel">
             <summary>
             This function gets the start Y - Coordinate for the Label.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.GetXCoordStartTextbox">
             <summary>
             This function gets the start X - coordinate for the TextBox.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.RelocateLabel">
             <summary>
             This function relocates the TextBox control.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.RelocateTextBox">
             <summary>
             This function relocates the TextBox control.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.LblLabel_Resize(System.Object,System.EventArgs)">
             <summary>
             This procedure adjusts the labels width
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.HasAControlCharBeenPressed(System.Char)">
            <summary>
            check for keys being pressed with special functions
            </summary>
            <param name="AChar"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.OnCreateControl">
            <summary>
            TodoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.TxtTextBox_Leave(System.Object,System.EventArgs)">
            <summary>
            leaving the textbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.OnLeave(System.EventArgs)">
            <summary>
            leaving the user control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.OnLostFocus(System.EventArgs)">
            <summary>
            lost focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.TxtTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            text has been changed in the textbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.OnLayout(System.Object,System.Windows.Forms.LayoutEventArgs)">
            <summary>
            layout of user control needs to be rearranged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.OnResize(System.EventArgs)">
            <summary>
            resizing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.BtnFindScreen_Click(System.Object,System.EventArgs)">
            <summary>
            Find Button has been clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.GetLookUpRow(System.String,System.String,System.Boolean)">
            <summary>
            This procedure updates the text of the label within this control. This
            procedure is called, when the text of the textbox changes
            }{***************************************************************************
            This function gets a DataRow from a LookUpTable in which the search string is
            found. This function is needed in order to provide the control with the right
            column to look up the typed in value in the textbox.
            </summary>
            <param name="ALookUpMember">The column of the LookUptable where the string should be found.</param>
            <param name="ASearchString">The search string;</param>
            <param name="ACaseSensitive">Determines whether the search is case sensitive;
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.PerformDataBinding(System.Data.DataView,System.String,Ict.Common.Controls.TButtonLabelControlMode)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the Label.
            </summary>
            <param name="ADataSource">The source to which the label and the textbox is to bind to.</param>
            <param name="ADataMember">The name of the data member needed for the control to databind.</param>
            <param name="AControlMode">The name of the mode the control is currently in.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.PerformDataBindingTwoTableMode(System.Data.DataView,System.String)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the TextBox for the TwoTableMode.
            </summary>
            <param name="ADataSource">The source to which the TextBox is to bind to.</param>
            <param name="ADataMember">The name of the data member needed for the binding.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.PerformDataBindingFunctionMode(System.Data.DataView,System.String)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the TextBox for the FunctionMode.
            </summary>
            <param name="ADataSource">The source to which the TextBox is to bind to.</param>
            <param name="ADataMember">The name of the data member needed for the binding.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.UpdateLabelText">
            <summary>
            update the label
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.UpdateLabelTextFromLookUpTable">
             <summary>
             This procedure updates the text of the label within this control using
             a LookUpTable. If the text could be changed successful the return value
             is true, otherwise it is false. In the latter case the ErrorString will
             give more information about any causes.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.VerifyLookUpValue(System.String,System.String,System.Boolean)">
            <summary>
            This function verifies that the value entered in the TextBox is actually
            in the LookUpTable.
            </summary>
            <param name="ALookUpMember">The column of the LookUptable where the string should be found.</param>
            <param name="ASearchString">The search string;</param>
            <param name="ACaseSensitive">If set to true it searches casesensitive = less hits
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.CallDelegateEvaluateText(System.String,System.String@,System.Boolean@)">
             <summary>
             This procedure calls the DelegateEvaluateText. This function is needed in
             the function mode of the control.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.CallDelegateEvaluationFault(System.String,System.String,System.Boolean)">
             <summary>
             This procedure calls the DelegateEvaluationFault. This way the hosting control
             gets informed when the textbox contains a string which is not valid.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.CheckControlMode">
             <summary>
             This procedure checks in which DataBinding mode the control is. In sum
             there are three different databinding modes:
             - TwoTableMode
             - FunctionMode
             The function returns the appropriate mode. Below the criteria is listed
             with which
            
             Properties / Modes | TwoTableMode  | FunctionMode
             ------------------------------------------------------
             ADataSource        | A DataView    | A DataView      |
             ADataMember        | A column name | A column name   |
             TextBoxDataMember  | A column name | nil             |
             LabelDataMember    | A column name | nil             |
             ALookUpTable       | A DataView    | nil             |
             ADelegateFunction  | nil           | A function name |
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.CheckFunctionModeRequirements(System.String@)">
             <summary>
             This function checks whether all requirements of the TwoTableMode do
             exist.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.CheckOneTableModeRequirements(System.String@)">
             <summary>
             This function checks whether all requirements of the TwoTableMode do
             exist.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtButtonLabel.CheckTwoTableModeRequirements(System.String@)">
             <summary>
             This function checks whether all requirements of the TwoTableMode do
             exist.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.AdjustButtonWidth">
             <summary>
             This property determines whether the button resizes to the text length or not.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.BindLabelToTextBox">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.ButtonTextAlign">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtButtonLabel.FormatText">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.LookUpDataSource">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.ControlMode">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.MaxLength">
             <summary>
             This property gets or sets the maximum number of characters the user can
             type or paste into the text box control.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.ReadOnly">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.TextBoxLookUpMember">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.KeyValues">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.CaseSensitive">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.LabelLookUpMember">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.ShowLabel">
             <summary>
             This property determines whether the label is blank or not.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.ButtonText">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.ButtonWidth">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtButtonLabel.ButtonClick">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.LabelText">
             <summary>
             This property sets or gets the Text property of the TextBox in this control.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.TextBoxText">
             <summary>
             This property sets or gets the Text property of the TextBox in this control.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.AutomaticallyUpdateDataSource">
             <summary>
             This Property allows the control to automatically update the datasource. You normally DONT want this!
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.SeparatorWidth">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.LabelSeparatorWidth">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.TextBoxWidth">
             <summary>
             This property sets or gets the width property of the TextBox in this control.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtButtonLabel.BorderStyle">
            <summary>
            Sets the BorderStyle of the underlying TextBox.
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtButtonLabel.SetLabel">
             <summary>
             Here the hosting form may provide a routine for setting the label without verification..
            
             </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtButtonLabel.EvaluationFault">
             <summary>
             This event will notify the hosting form of any faults while evaluating the content of the TextBox.
            
             </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtButtonLabel.EvaluateText">
             <summary>
             This event will let the hosing control evaluate the textbox string.
            
             </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtButtonLabel.ButtonLabelKeyDown">
             <summary>
             This property occurs when a key is first pressed.
            
             </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtButtonLabel.ButtonLabelKeyPress">
             <summary>
             This property occurs after the user is finished pressing a key.
            
             </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtButtonLabel.ButtonLabelKeyUp">
             <summary>
             This property occurs after the user is finished pressing a key.
            
             </summary>
        </member>
        <member name="T:Ict.Common.Controls.TKeyValuesEnum">
            <summary>
            which values are allowed in the textbox
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TKeyValuesEnum.OnlyDigits">
            <summary>
            digits
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TKeyValuesEnum.OnlyNumbers">
            <summary>
            numbers
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TKeyValuesEnum.OnlyLetters">
            <summary>
            letters
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TKeyValuesEnum.OnlyLettersOrDigits">
            <summary>
            letters or digits
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TKeyValuesEnum.OnlyPrintables">
            <summary>
            printable
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TKeyValuesEnum.AllKeys">
            <summary>
             all keys
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TButtonLabelControlMode">
            <summary>
            TODOCOMMENT
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TButtonLabelControlMode.None">
            <summary>
            TODOCOMMENT
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TButtonLabelControlMode.TwoTableMode">
            <summary>
            TODOCOMMENT
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TButtonLabelControlMode.FunctionMode">
            <summary>
            TODOCOMMENT
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDelegateButtonClick">
             <summary>
             Here the hosting form has to provide a function which sets the Label's and
             TextBoxes Texts after the button is clicked.
             </summary>
             <param name="LabelStringIn">Current Label text</param>
             <param name="TextBoxStringIn">Current TextBox text</param>
             <param name="LabelStringOut">Updated Label text
             <param name="TextBoxStringOut">Updated TextBox text</param>
             </param>
            
        </member>
        <member name="T:Ict.Common.Controls.TDelegateSetLabel">
            <summary>
            Here the hosting form has to provide a text for the label
            </summary>
            <param name="ALookupText">A lookup text goes here</param>
            <param name="ALabelText">Updated Label text
            </param>
        </member>
        <member name="T:Ict.Common.Controls.TDelegateFormatText">
            <summary>
            Here the hosting form has to provide means for formating the textbox text.
            </summary>
            <param name="TextToFormat">Text which needs formating</param>
            <param name="TextFormated">Text which has been formated</param>
            <param name="SelectionStart">Start of the selection in the textbox</param>
            <param name="SelectionLength">Length of the selection in the textbox
            </param>
        </member>
        <member name="T:Ict.Common.Controls.TDelegateEvaluationFault">
            <summary>
            This delegate is used to notify the hosting control of an error.
            </summary>
            <param name="ATextBoxText">The text in the textbox</param>
            <param name="AErrorMessage">An error message</param>
            <param name="AEvaluationResult">true if there is no error
            </param>
        </member>
        <member name="T:Ict.Common.Controls.TDelegateEvaluateText">
            <summary>
            This event will let the hosing control evaluate the textbox string.
            </summary>
            <param name="ATextBoxText">The text in the textbox</param>
            <param name="ALabelString">A String the label should display</param>
            <param name="ATextValid">true if the text of the textbox is valid otherwise false.
            </param>
        </member>
        <member name="T:Ict.Common.Controls.TButtonLabelKeyDown">
            <summary>
            This is the declaration of the KeyDown event for the ButtonLabel TextBox.
            This event is the first to be thrown after a key stroke
            </summary>
            <param name="sender">The sender of the event: Here TtxtButtonLabel</param>
            <param name="e">Event Arguments
            </param>
        </member>
        <member name="T:Ict.Common.Controls.TButtonLabelKeyPress">
            <summary>
            This is the declaration of the KeyPress event for the ButtonLabel TextBox
            This event is the second to be thrown after a key stroke
            </summary>
            <param name="sender">The sender of the event: Here TtxtButtonLabel</param>
            <param name="e">Event Arguments
            </param>
        </member>
        <member name="T:Ict.Common.Controls.TButtonLabelKeyUp">
            <summary>
            This is the declaration of the KeyUp event for the ButtonLabel TextBox
            This event is the third to be thrown after a key stroke
            </summary>
            <param name="sender">The sender of the event: Here TtxtButtonLabel</param>
            <param name="e">Event Arguments
            </param>
        </member>
        <member name="T:Ict.Common.Controls.EDataBindingFailure">
            <summary>
            problem with data binding
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindingFailure.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindingFailure.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="AMessage"></param>
        </member>
        <member name="T:Ict.Common.Controls.EButtonClick">
            <summary>
            exception for button click
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EButtonClick.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EButtonClick.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="AMessage"></param>
        </member>
        <member name="T:Ict.Common.Controls.TDelegateLabelString">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TDelegateTextBoxString">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TTxtLabelledTextBox">
             <summary>
             This class provides a labelled TextBox
            
             Short description:
             The TTxtLabelledTextBox is a TextBox with a label next to it. It has the
             following custom properties:
             - DelegateFallbackLabel:   If this property is set to true the control calls a
                                        delegate routine after databinding which could provide
                                        a value for the label.
             - DelegateFallbackTextBox: If this property is set to true the control calls a
                                        delegate routine after databinding which could provide
                                        a value for the textbox.
             - LabelDelegate:           Here a delegate function is used to provide a string.
                                        The host of the txtLabelledTextBox has to provide the
                                        delegate.
             - LabelText:               Here a text can be entered which the label displays if
                                        it is not bound to the textbox.
             - ShowLabel:               This controls whether the label is active or not.
             - TextBoxReadOnly:         This controls whether the textbox is in ReadOnly mode
                                        or not.
             - TextBoxDelegate:         Here a delegate function is used to provide a string.
                                        The host of the txtLabelledTextBox has to provide the
                                        delegate.
             - TextBoxWidth:            This sets the width of the textbox.
             This control features also 6 different procedures to do the databinding.
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.EXCEPTION_DATA_BIND_LABEL">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.EXCEPTION_DATA_BIND_TEXTBOX">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.EXCEPTION_LABEL_STRING">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.EXCEPTION_TEXTBOX_STRING">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.UNIT_HEIGHT">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.UNIT_LABEL_FONT">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.UNIT_LABEL_LEFT_OFFSET">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.UNIT_LABEL_TOP_OFFSET">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.txtTextBox">
            <summary>
            text box in the user control
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.components">
            <summary> Required designer variable. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.lblDescription">
            <summary> Clean up any resources being used. </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.FShowLabel">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.FLabelString">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.FDelegateFallbackLabel">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtLabelledTextBox.FDelegateFallbackTextBox">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.PerformDataBinding(System.Object,System.Object,System.String,System.String)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the Label.
            </summary>
            <param name="ALabelDataSource">The source to which the label is to bind to.</param>
            <param name="ATextBoxDataSource">The source to which the textbox is to bind to.</param>
            <param name="ALabelDataMember">The name of the data member needed for the label to databind.</param>
            <param name="ATextBoxDataMember">The name of the data member needed for the textbox to databind.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.PerformDataBinding(System.Object,System.Object,System.String)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the Label.
            </summary>
            <param name="ALabelDataSource">The source to which the label is to bind to.</param>
            <param name="ATextBoxDataSource">The source to which the textbox is to bind to.</param>
            <param name="ADataMember">The name of the data member needed for the label and the textbox to databind.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.PerformDataBinding(System.Object,System.String,System.String)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the Label.
            </summary>
            <param name="ADataSource">The source to which the label and the textbox is to bind to.</param>
            <param name="ALabelDataMember">The name of the data member needed for the label to databind.</param>
            <param name="ATextBoxDataMember">The name of the data member needed for the textbox to databind.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.PerformDataBinding(System.Object,System.String)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the Label.
            </summary>
            <param name="ADataSource">The source to which the label and the textbox is to bind to.</param>
            <param name="ADataMember">The name of the data member needed for the label and the textbox to databind.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.InitializeComponent">
            <summary>
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> <summary> Required method for Designer support  do not modify the contents of this method with the code editor.
            </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.#ctor">
            <summary>
            Private Declarations
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.InitializeTextBox">
             <summary>
             This procedure initializes the TextBox of this control. This procedure has
             to be called before calling the procedure InitializeComponent.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.Dispose(System.Boolean)">
            <summary>
            This procedure processes the disposing of this class.
            </summary>
            <param name="Disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.GetLabelRectangleF">
            <summary>
            This function calculates the area of the label.
            </summary>
            <returns>The RectangleF of the label.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.GetLabelWidth">
            <summary>
            This function calculates the width of the label.
            </summary>
            <returns>The width of the label.
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.Get_LabelXStartCoord">
            <summary>
            This function gets the X start coordinate of the location of the label.
            </summary>
            <returns>The X start coordinate of the location of the label
            </returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.SetDefaultHeight">
             <summary>
             This procedure sets the default height for this UserControl.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.SetDefaultProperties">
             <summary>
             This procedure sets the default properties for this UserControl.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.SetLabelFont">
             <summary>
             This procedure sets the font of the Label.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.SetLabelLocation">
             <summary>
             This procedure sets the location of the label. It automatically gets the
             width of the textbox and then calculates the appropriate location for the
             label.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.Set_LabelWidth">
             <summary>
             This procedure writes the width of the Label.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.OnCreateControl">
             <summary>
             This event occurs when the control is created.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.OnResize(System.EventArgs)">
            <summary>
            This event ensures that the height of the control cannot be changed.
            </summary>
            <param name="e">Event Arguments
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.PerformDataBindingLabel(System.Object,System.String)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the Label.
            </summary>
            <param name="ADataSource">The source to which the label is to bind to.</param>
            <param name="ADataMember">The name of the data member needed for the binding.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.PerformDataBindingTextBox(System.Object,System.String)">
            <summary>
            This procedure databinds a DataSource, which may be either a DataTable or
            a DataView to the TextBox.
            </summary>
            <param name="ADataSource">The source to which the TextBox is to bind to.</param>
            <param name="ADataMember">The name of the data member needed for the binding.
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.LoadLabelString">
             <summary>
             This procedure loads the Label's Text field with a certain value. If the
             control is used this method should be used only in the OnCreate event.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtLabelledTextBox.LoadTextBoxString">
             <summary>
             This procedure loads the TextBox's Text field with a certain value. If the
             control is used this method should be used only in the OnCreate event.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TTxtLabelledTextBox.TextBoxWidth">
             <summary>
             This property may be used to influence the width of the ComboBox.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtLabelledTextBox.LabelText">
            <summary>
            the text of the label
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtLabelledTextBox.MaxLength">
             <summary>
             This property gets or sets the maximum number of characters the user can
             type or paste into the text box control.
            
             </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtLabelledTextBox.ShowLabel">
            <summary>
            should the label be displayed
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtLabelledTextBox.TextBoxReadOnly">
            <summary>
            is the text box read only
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtLabelledTextBox.LabelDelegate">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="E:Ict.Common.Controls.TTxtLabelledTextBox.TextBoxDelegate">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtLabelledTextBox.DelegateFallbackLabel">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtLabelledTextBox.DelegateFallbackTextBox">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.ENoLabelString">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ENoLabelString.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ENoLabelString.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="AMessage"></param>
        </member>
        <member name="T:Ict.Common.Controls.ENoTextBoxString">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ENoTextBoxString.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ENoTextBoxString.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.EDataBindLabel">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindLabel.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindLabel.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.EDataBindTextBox">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindTextBox.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindTextBox.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TTxtMaskedTextBox">
             <summary>
             Extends a normal textbox and adds mask functions
             Can be used as a normal textbox, a masked textbox, or a partnerkey textbox
             by setting the ControlMode property
            
             There are three ways this control can operate, determined by the ControlMode property
             ControlMode.NormalTextBox  - Behave as a completely normal textbox
             ControlMode.Masked         - Format the text according to the Mask property
                                          this consists of # - Digit
                                                           &amp; - Letter
                                                           ! - Lettor or Digit
             ControlMode.PartnerKey     - This is essentially Masked,
                                          but presets the mask and the default text
            
             This control is used as part of txtButtonLabel
             </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtMaskedTextBox.CONTROL_CHARS_BACKSPACE">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtMaskedTextBox.ProcessChangedText(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtMaskedTextBox.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtMaskedTextBox.#ctor(System.ComponentModel.IContainer)">
            <summary>
            constructor
            </summary>
            <param name="Container"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtMaskedTextBox.Dispose(System.Boolean)">
            <summary>
            destructor
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtMaskedTextBox.ClearBox">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtMaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtMaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            key has been pressed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtMaskedTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This procedure captures WndProc Windows Messages. It is used here to
            intercept the commands from the default context menu that is present
            for a TextBox.
            </summary>
            <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TTxtMaskedTextBox.UnformattedText">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtMaskedTextBox.PlaceHolder">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtMaskedTextBox.Mask">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtMaskedTextBox.ControlMode">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtMaskedTextBox.Text">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TMaskedTextBoxMode">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TMaskedTextBoxMode.NormalTextBox">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TMaskedTextBoxMode.PartnerKey">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TMaskedTextBoxMode.Masked">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TMaskedTextBoxMode.Extract">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TTxtNumericTextBox">
             <summary>
             Extends a normal textbox and restricts text to numbers.
             Can be used as a normal textbox or as a textbox that restricts text to certain type of numbers
             by setting the ControlMode property.
            
             There are three ways this control can operate, determined by the ControlMode property
             ControlMode.NormalTextBox  - Behave as a completely normal textbox
             ControlMode.Integer        - accepts only numbers without digits
             ControlMode.Decimal        - accepts only numbers including digits and formats the number
                                          according to the DecimalPlaces Property.
             ControlMode.Currency       - accepts only numbers including digits and formats the number
                                          according to the DecimalPlaces Property, plus adds the Currency Symbol
                                          as specified with the CurrencySymbol Property.
             </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtNumericTextBox.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtNumericTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtNumericTextBox.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtNumericTextBox.ClearBox">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtNumericTextBox.OnLeave(System.Object,System.EventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ict.Common.Controls.TTxtNumericTextBox.OnEntering(System.Object,System.EventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.Text">
            <summary>
            This Property is ignored (!) unless ControlMode is 'NormalTextMode'! For all other cases, the value to be displayed needs to be set programmatically through the 'NumberValueDecimal' or 'NumberValueInt' Properties.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.ControlMode">
            <summary>
            Determines what input the Control accepts and how it formats it.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.DecimalPlaces">
            <summary>
            Determines the number of decimal places (valid only for Decimal and Currency ControlModes).
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.CurrencySymbol">
            <summary>
            Determines the currency symbol. Will only be shown if ControlMode is 'Currency'.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.CurrencySymbolRightAligned">
            <summary>
            Determines where the currency symbol is shown in relation to the value of the control. Only has an effect if ControlMode is 'Currency'.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.NullValueAllowed">
            <summary>
            Determines whether the control allows a null value, or not.
            </summary>
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.NumberValueDecimal">
            This property gets hidden because it doesn't make sense in the Designer!
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.NumberValueDouble">
            This property gets hidden because it doesn't make sense in the Designer!
        </member>
        <member name="P:Ict.Common.Controls.TTxtNumericTextBox.NumberValueInt">
            This property gets hidden because it doesn't make sense in the Designer!
        </member>
        <member name="T:Ict.Common.Controls.TTxtNumericTextBox.TNumberPrecision">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtNumericTextBox.TNumberPrecision.Decimal">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtNumericTextBox.TNumberPrecision.Double">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TTxtNumericTextBox.TNumericTextBoxMode">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtNumericTextBox.TNumericTextBoxMode.NormalTextBox">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtNumericTextBox.TNumericTextBoxMode.Integer">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtNumericTextBox.TNumericTextBoxMode.Decimal">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtNumericTextBox.TNumericTextBoxMode.Currency">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.TTxtPartnerKeyTextBox">
            <summary>
            The TTxtPartnerKeyTextBox is a TextBox with a label next to it,
            and it has a partner find button
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.EXCEPTION_DATA_BIND_SHORT_NAME">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.EXCEPTION_DATA_BIND_PARTNER_KEY">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.EXCEPTION_SHORT_NAME_STRING">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.EXCEPTION_PARTNER_KEY_STRING">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.WM_FONTCHANGE">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.UNIT_SHORT_NAME_FONT">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.UNIT_PARTNER_KEY_FONT">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.UNIT_DEFAULT_PARTNER_KEY_STRING">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.FPartnerKey">
            <summary> Required designer variable. </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.InitializeComponent">
            <summary>
            <summary> Required method for Designer support  do not modify the contents of this method with the code editor. </summary> <summary> Required method for Designer support  do not modify the contents of this method with the code editor.
            </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.#ctor">
            <summary>
            Private Declarations
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.Dispose(System.Boolean)">
            <summary>
            <summary> Clean up any resources being used. </summary>
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.ObtainPartnerKey">
            <summary>
            get the partner key
            </summary>
        </member>
        <member name="F:Ict.Common.Controls.TTxtPartnerKeyTextBox.FSettingDefaultFont">
            <summary>
            avoid recursion / stack overflow in Mono
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.SetDefaultFont">
             <summary>
             This procedure sets the default font for this control.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.SetTextBoxDefaultWidth">
            <summary>
            This procedure sets the default width of the TextBox within this control.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.OnFontChanged(System.EventArgs)">
            <summary>
            This event gets fired if the font is changed. Here it is used to ensure
            that the font of the textbox and the control in a whole are nothing else
            than Courier New 9.25 Bold.
            </summary>
            <param name="e">event arguments.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.OnGotFocus(System.EventArgs)">
            <summary>
            This event gets fired if the font is changed. Here it is used to ensure
            that the font of the textbox and the control in a whole are nothing else
            than Courier New 9.25 Bold.
            </summary>
            <param name="e">event arguments.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.TxtPartnerKeyTextBox_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            This event gets fired when the control is painted.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.TxtTextBox_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This event gets fired in order to validate the input in the textbox.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.TxtTextBox_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            This event gets fired in order to validate the input in the textbox.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Controls.TTxtPartnerKeyTextBox.TxtTextBox_Leave(System.Object,System.EventArgs)">
            <summary>
            This event gets fired if the text in the TextBox is left. If the
            PartnerKey is '0' ten zeros get displayed.
            </summary>
            <param name="sender"></param>
            <param name="e">The event arguments.</param>
            <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Controls.TTxtPartnerKeyTextBox.MaxLength">
            This property gets or sets the maximum number of characters the user can
            type or paste into the text box control.
        </member>
        <member name="P:Ict.Common.Controls.TTxtPartnerKeyTextBox.PartnerKey">
            This property gets or sets the PartnerKey of the control.
        </member>
        <member name="P:Ict.Common.Controls.TTxtPartnerKeyTextBox.TextBoxWidth">
            This property gets or sets the width of the TextBox within this control.
        </member>
        <member name="P:Ict.Common.Controls.TTxtPartnerKeyTextBox.ReadOnly">
            This property gets or sets whether the text in the edit control can be changed or not.
        </member>
        <member name="E:Ict.Common.Controls.TTxtPartnerKeyTextBox.TextBoxDelegate">
            This property is currently not functional!!!
        </member>
        <member name="P:Ict.Common.Controls.TTxtPartnerKeyTextBox.DelegateFallbackTextBox">
            This property gets the DelegateFallbackTextBox value. This value determines
            whether a delegate function is called after the data binding failed.
        </member>
        <member name="T:Ict.Common.Controls.ENoShortNameString">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ENoShortNameString.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ENoShortNameString.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.ENoPartnerKeyString">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ENoPartnerKeyString.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.ENoPartnerKeyString.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.EDataBindShortName">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindShortName.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindShortName.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:Ict.Common.Controls.EDataBindPartnerKey">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindPartnerKey.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Controls.EDataBindPartnerKey.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
    </members>
</doc>
