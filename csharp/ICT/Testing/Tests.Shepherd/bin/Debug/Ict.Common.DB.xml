<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Common.DB</name>
    </assembly>
    <members>
        <member name="T:Ict.Common.DB.EDBConnectionNotEstablishedException">
            <summary>
            Thrown if an attempt to create a DB connection failed.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotEstablishedException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotEstablishedException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="msg">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotEstablishedException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on the ConnectionString with the Exception and to log the Exception
            </summary>
            <param name="AConnectionString">ODBC connection string</param>
            <param name="AException">Original exception
            </param>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotEstablishedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotEstablishedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.EDBConnectionNotAvailableException">
            <summary>
            Thrown if the DB connection is not able to execute any SQL commands.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotAvailableException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotAvailableException.#ctor(System.String)">
            <summary>
            Use this to pass on information about the Connection with the Exception
            </summary>
            <param name="AConnectionInfo">ConnectionState (as String) of the Database
            connection.
            </param>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on information about the Connection with the Exception
            </summary>
            <param name="AConnectionInfo">ConnectionState (as String) of the Database
            connection.
            </param>
            <param name="AException">Original exception
            </param>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionNotAvailableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.EDBExecuteNonQueryBatchException">
            <summary>
            Thrown by ExecuteNonQueryBatch if an DB Exception occurs while executing SQL
            commands.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBExecuteNonQueryBatchException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBExecuteNonQueryBatchException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBExecuteNonQueryBatchException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on Batch Command Information with the Exception
            </summary>
            <param name="ABatchCommandInfo">SQL statement and batch entry number where the
            error occured</param>
            <param name="AException">Original exception
            </param>
        </member>
        <member name="M:Ict.Common.DB.EDBExecuteNonQueryBatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBExecuteNonQueryBatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.EDBParameterisedQueryMissingParameterPlaceholdersException">
            <summary>
            Thrown if a SQL command should execute a parameterised query, but parameter
            placeholders were missing in the query string.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBParameterisedQueryMissingParameterPlaceholdersException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBParameterisedQueryMissingParameterPlaceholdersException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBParameterisedQueryMissingParameterPlaceholdersException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
            <param name="AException">Original exception</param>
        </member>
        <member name="M:Ict.Common.DB.EDBParameterisedQueryMissingParameterPlaceholdersException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBParameterisedQueryMissingParameterPlaceholdersException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.EDBTransactionIsolationLevelTooLowException">
            <summary>
            Can be thrown if code wants to use a Transaction with a certain <see cref="T:System.Data.IsolationLevel"/>,
            but the Transaction it is using has an <see cref="T:System.Data.IsolationLevel"/> that is lower than it
            expects.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelTooLowException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelTooLowException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelTooLowException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
            <param name="AException">Original exception</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelTooLowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelTooLowException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.EDBTransactionIsolationLevelWrongException">
            <summary>
            Can be thrown if code wants to use a Transaction with a certain <see cref="T:System.Data.IsolationLevel"/>,
            but the Transaction it is using has a different <see cref="T:System.Data.IsolationLevel"/> than it expects.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelWrongException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelWrongException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelWrongException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
            <param name="AException">Original exception</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelWrongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionIsolationLevelWrongException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.EDBTransactionMissingException">
            <summary>
            Can be thrown if code wants to run an SQL query without a transaction.
            This would give problems with the Progress SQL engine, with locking.
            Progress SQL requires all SQL queries to be in a transaction.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionMissingException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionMissingException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
            <param name="AException">Original exception</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.EDBTransactionBusyException">
            <summary>
            Is thrown if a caller wants to start a new Transaction by calling
            BeginTransaction, but a Transaction is currently executing (parallel
            Transactions are not supported by ADO.NET!).
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionBusyException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionBusyException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionBusyException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
            <param name="AException">Original exception</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBTransactionBusyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.EDBSyncUnknownParameterTypeException">
            <summary>
            Is thrown during the write to the Sync table, where the ODBC parameters need to be written to a string for the PostgreSQL database
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBSyncUnknownParameterTypeException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBSyncUnknownParameterTypeException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBSyncUnknownParameterTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
            <param name="AException">Original exception</param>
        </member>
        <member name="M:Ict.Common.DB.EDBSyncUnknownParameterTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBSyncUnknownParameterTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.TEnforceIsolationLevel">
            <summary>
            <see cref="T:System.Data.IsolationLevel"/> that needs to be enforced when requesting a
            DB Transaction with Methods
            <see cref="M:DB.TDataBase.GetNewOrExistingTransaction(IsolationLevel, out Boolean)"/> and
            <see cref="M:DB.TDataBase.GetNewOrExistingTransaction(IsolationLevel, TEnforceIsolationLevel, out Boolean)"/>.
            </summary>
        </member>
        <member name="F:Ict.Common.DB.TEnforceIsolationLevel.eilExact">
            <summary>
            <see cref="T:System.Data.IsolationLevel"/> of current Transaction must match the
            specified <see cref="T:System.Data.IsolationLevel"/>  <em>exactly</em>.
            </summary>
        </member>
        <member name="F:Ict.Common.DB.TEnforceIsolationLevel.eilMinimum">
            <summary>
            <see cref="T:System.Data.IsolationLevel"/> of current Transaction must match or
            exceed the specified <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
        </member>
        <member name="T:Ict.Common.DB.DBAccess">
            <summary>
            Contains some Constants and a Global Variable for use with Database Access.
            </summary>
        </member>
        <member name="F:Ict.Common.DB.DBAccess.DB_DEBUGLEVEL_QUERY">
            <summary>DebugLevel for logging the SQL code from DB queries</summary>
        </member>
        <member name="F:Ict.Common.DB.DBAccess.DB_DEBUGLEVEL_RESULT">
            <summary>DebugLevel for logging results from DB queries: is 10 (was 4 before)</summary>
        </member>
        <member name="F:Ict.Common.DB.DBAccess.DB_DEBUGLEVEL_TRACE">
            <summary>DebugLevel for tracing (most verbose log output): is 10 (was 4 before)</summary>
        </member>
        <member name="F:Ict.Common.DB.DBAccess.MGDBAccessObj">
            <summary>
            this is the object that is used in the non ASP environment
            </summary>
        </member>
        <member name="P:Ict.Common.DB.DBAccess.GDBAccessObj">
            <summary>Global Object in which the Application can store a reference to an Instance of
            <see cref="T:Ict.Common.DB.TDataBase"/></summary>
        </member>
        <member name="T:Ict.Common.DB.IDataBaseRDBMS">
            <summary>
            every database system that works for OpenPetra has to implement this functions
            </summary>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.GetConnection(System.String,System.String,System.String,System.String,System.String@,System.String@,System.Data.StateChangeEventHandler)">
            <summary>
            Create a connection, but not opening it yet
            </summary>
            <param name="AServer"></param>
            <param name="APort"></param>
            <param name="ADatabaseName"></param>
            <param name="AUsername"></param>
            <param name="APassword"></param>
            <param name="AConnectionString"></param>
            <param name="AStateChangeEventHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.LogException(System.Exception,System.String@)">
            <summary>
            this is for special Exceptions that are specific to the database
            they are converted to a string message for logging
            </summary>
            <param name="AException"></param>
            <param name="AErrorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.FormatQueryRDBMSSpecific(System.String)">
            <summary>
            Formats a SQL query for a specific RDBMS.
            Put the Schema specifier in front of table names! Format: PUB_*
            (eg. PUB_p_partner).
            </summary>
            <remarks>
            Always use ANSI SQL-92 commands that are understood by all RDBMS
            systems that should be supported - this does no 'translation' of the
            SQL commands!
            </remarks>
            <param name="ASqlQuery">SQL query</param>
            <returns>SQL query that is formatted for a specific RDBMS.
            </returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.ConvertOdbcParameters(System.Data.Common.DbParameter[],System.String@)">
            <summary>
            convert the ODBC
            </summary>
            <param name="AParameterArray"></param>
            <param name="ASqlStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.NewCommand(System.String@,System.Data.IDbConnection,System.Data.Common.DbParameter[],Ict.Common.DB.TDBTransaction)">
            <summary>
            create a IDbCommand object
            this formats the sql query for the database, and transforms the parameters
            </summary>
            <param name="ACommandText"></param>
            <param name="AConnection"></param>
            <param name="AParametersArray"></param>
            <param name="ATransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.NewAdapter">
            <summary>
            create an IDbDataAdapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataSet@,System.Int32,System.Int32,System.String)">
            <summary>
            fill an IDbDataAdapter that was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataSet"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
            <param name="ADataTableName"></param>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            fill an IDbDataAdapter that was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataTable"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.AdjustIsolationLevel(System.Data.IsolationLevel@)">
            <summary>
            some databases have some problems with certain Isolation levels
            </summary>
            <param name="AIsolationLevel"></param>
            <returns>true if isolation level was modified</returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.GetNextSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the next sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.GetCurrentSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the current sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.IDataBaseRDBMS.RestartSequence(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection,System.Int64)">
            <summary>
            restart a sequence with the given value
            </summary>
        </member>
        <member name="T:Ict.Common.DB.TDataBase">
             <summary>
             Contains functions that open and close the connection to the DB, allow
             execution of SQL statements and creation of DB Transactions.
             It is designed to support connections to different kinds of databases;
             there needs to be an implementation of the interface IDataBaseRDBMS to support an RDBMS.
            
             Always use ANSI SQL-92 commands that are understood by all RDBMS
               systems that should be supported - TDataBase does no 'translation' of the
               SQL commands!
               The TDataBase class is the only Class that a developer needs to deal with
               when accessing DB's! (The TDBConnection class is a 'low-level' class that
               is intended to be used only by the TDataBase class.)
               Due to the limitations of native ODBC drivers, only one DataTable is ever
               returned when you call IDbDataAdapter.FillSchema. This is true even when
               executing SQL batch statements from which multiple DataTable objects would
               be expected! TODO: this comment needs revising, with native drivers
             </summary>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FDBConnectionInstance">
            <summary>References the DBConnection instance</summary>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FSqlConnection">
            <summary>References an open DB connection</summary>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FDbType">
            <summary>References the type of RDBMS that we are currently connected to</summary>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FDsnOrServer">
            store credentials to be able to login again after closed db connection
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FDBPort">
            store credentials to be able to login again after closed db connection
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FDatabaseName">
            store credentials to be able to login again after closed db connection
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FUsername">
            store credentials to be able to login again after closed db connection
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FPassword">
            store credentials to be able to login again after closed db connection
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FConnectionString">
            store credentials to be able to login again after closed db connection
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FDataBaseRDBMS">
            <summary> this is a reference to the specific database functions which can be different for each RDBMS</summary>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FDebugLevel">
            <summary>For logging purposes.</summary>
            <remarks>See <see cref="P:Ict.Common.DB.TDataBase.DebugLevel"/> for details.</remarks>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FLastDBAction">
            <summary>Tracks the last DB action; is updated with every creation of a Command.</summary>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FTransaction">
            <summary>References the current Transaction, if there is any.</summary>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FPrepareNextCommand">
            <summary>Tells whether the next Command that is sent to the DB should be a 'prepared' Command.</summary>
            <remarks>Automatically reset to false once the Command has been executed against the DB!</remarks>
        </member>
        <member name="F:Ict.Common.DB.TDataBase.FTimeoutForNextCommand">
            <summary>Sets a timeout (in seconds) for the next Command that is sent to the
            DB that is different from the default timeout for a Command (eg. 20s for a
            NpgsqlCommand).</summary>
            <remarks>Automatically reset to -1 once the Command has been executed against the DB!</remarks>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.#ctor">
            <summary>
            Default Constructor.
            The Database type will be specified only when one of the <c>EstablishDBConnection</c>
            Methods gets called
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.#ctor(Ict.Common.TDBType)">
            <summary>
            Constructor that specifies which Database type will be used with
            this Instance of <see cref="T:Ict.Common.DB.TDataBase"/>.
            </summary>
            <param name="ADBType">Type of RDBMS (Relational Database Management System)</param>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.EstablishDBConnection(Ict.Common.TDBType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Establishes (opens) a DB connection to a specified RDBMS.
            </summary>
            <param name="ADataBaseType">Type of the RDBMS to connect to. At the moment only PostgreSQL is officially supported.</param>
            <param name="ADsnOrServer">In case of an ODBC Connection: DSN (Data Source Name). In case of a PostgreSQL connection: Server.</param>
            <param name="ADBPort">In case of a PostgreSQL connection: port that the db server is running on.</param>
            <param name="ADatabaseName">the database to connect to</param>
            <param name="AUsername">User which should be used for connecting to the DB server</param>
            <param name="APassword">Password of the User which should be used for connecting to the DB server</param>
            <param name="AConnectionString">If this is not empty, it is prefered over the Dsn and Username and Password</param>
            <returns>void</returns>
            <exception cref="T:Ict.Common.DB.EDBConnectionNotEstablishedException">Thrown when a connection cannot be established</exception>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.CloseDBConnection">
            <summary>
            Closes the DB connection.
            </summary>
            <returns>void</returns>
            <exception cref="T:Ict.Common.DB.EDBConnectionNotEstablishedException">Thrown if an attempt is made to close an
            already/still closed connection.</exception>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.CloseDBConnectionInternal(Ict.Common.TDBType)">
            <summary>
            Closes the DB connection.
            </summary>
            <param name="ADbType">The Type of DB whose Connection should be closed</param>
            <returns>void</returns>
            <exception cref="T:Ict.Common.DB.EDBConnectionNotEstablishedException">Thrown if an attempt is made to close an
            already/still closed connection.</exception>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.PrepareNextCommand">
            <summary>
            Call this Method to make the next Command that is sent to the DB
            a 'Prepared' command.
            </summary>
            <remarks><see cref="M:Ict.Common.DB.TDataBase.PrepareNextCommand"/> lets you optimise the performance of
            frequently used queries. What a RDBMS basically does with a 'Prepared' SQL Command is
            that it 'caches' the query plan so that it's used in subsequent calls.
            Not supported by all RDBMS, but should just silently fail in case a RDBMS doesn't
            support it. PostgreSQL definitely supports it.</remarks>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.SetTimeoutForNextCommand(System.Int32)">
            <summary>
            Call this Method to set a timeout (in seconds) for the next Command that is sent to the
            DB that is different from the default timeout for a Command (eg. 20s for a
            NpgsqlCommand).
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.GetCache">
            <summary>
            Means of getting Cache objects.
            </summary>
            <returns>A new Instance of an <see cref="T:Ict.Common.DB.DBCaching.TSQLCache"/> Object.</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Command(System.String,Ict.Common.DB.TDBTransaction)">
            <summary>
            Returns an IDbCommand for a given command text in the context of a
            DB transaction. Not suitable for parameterised SQL statements.
            </summary>
            <remarks>This function does not execute the Command, it just creates it!</remarks>
            <param name="ACommandText">Command Text</param>
            <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/>, or nil if the command
            should not be enlisted in a transaction.</param>
            <returns>Instantiated IDbCommand
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Command(System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[])">
            <summary>
            Returns an IDbCommand for a given command text in the context of a
            DB transaction. Suitable for parameterised SQL statements.
            Allows the passing in of Parameters for the SQL statement
            </summary>
            <remarks>This function does not execute the Command, it just creates it!</remarks>
            <param name="ACommandText">Command Text</param>
            <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/>, or nil if the command
            should not be enlisted in a transaction.</param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameter
            (including Parameter Value)</param>
            <returns>Instantiated IDbCommand
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Select(System.String,System.String,Ict.Common.DB.TDBTransaction)">
            <summary>
            Returns a <see cref="T:System.Data.DataSet"/> containing a <see cref="T:System.Data.DataTable"/> with the result of a given SQL
            statement.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Not suitable for parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <returns>Instantiated <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Select(System.String,System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[])">
            <summary>
            Returns a <see cref="T:System.Data.DataSet"/> containing a <see cref="T:System.Data.DataTable"/> with the result of a given SQL
            statement.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Suitable for parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
            (including parameter Value)</param>
            <returns>Instantiated <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Select(System.Data.DataSet,System.String,System.String,Ict.Common.DB.TDBTransaction,System.Int32,System.Int32)">
            <summary>
            Puts a <see cref="T:System.Data.DataTable"/> with the result of a  given SQL statement into an existing
            <see cref="T:System.Data.DataSet"/>.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Not suitable for parameterised SQL statements.
            </summary>
            <param name="AFillDataSet">Existing <see cref="T:System.Data.DataSet"/></param>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="AStartRecord">Start record that should be returned</param>
            <param name="AMaxRecords">Maximum number of records that should be returned</param>
            <returns>Existing <see cref="T:System.Data.DataSet"/>, additionally containing the new <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Select(System.Data.DataSet,System.String,System.String,Ict.Common.DB.TDBTransaction,System.Int32)">
            <summary>
            Puts a <see cref="T:System.Data.DataTable"/> with the result of a  given SQL statement into an existing
            <see cref="T:System.Data.DataSet"/>.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Not suitable for parameterised SQL statements.
            </summary>
            <param name="AFillDataSet">Existing <see cref="T:System.Data.DataSet"/></param>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="AStartRecord">Start record that should be returned</param>
            <returns>Existing <see cref="T:System.Data.DataSet"/>, additionally containing the new <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Select(System.Data.DataSet,System.String,System.String,Ict.Common.DB.TDBTransaction)">
            <summary>
            Puts a <see cref="T:System.Data.DataTable"/> with the result of a  given SQL statement into an existing
            <see cref="T:System.Data.DataSet"/>.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Not suitable for parameterised SQL statements.
            </summary>
            <param name="AFillDataSet">Existing <see cref="T:System.Data.DataSet"/>.</param>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <returns>Existing <see cref="T:System.Data.DataSet"/>, additionally containing the new <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Select(System.Data.DataSet,System.String,System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[],System.Int32,System.Int32)">
            <summary>
            Puts a <see cref="T:System.Data.DataTable"/> with the result of a given SQL statement into an existing
            <see cref="T:System.Data.DataSet"/>.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Suitable for parameterised SQL statements.
            </summary>
            <param name="AFillDataSet">Existing <see cref="T:System.Data.DataSet"/></param>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
            (including parameter Value)</param>
            <param name="AStartRecord">Start record that should be returned</param>
            <param name="AMaxRecords">Maximum number of records that should be returned</param>
            <returns>Existing <see cref="T:System.Data.DataSet"/>, additionally containing the new <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Select(System.Data.DataSet,System.String,System.String,Ict.Common.DB.TDBTransaction,System.Data.Odbc.OdbcParameter[],System.Int32)">
            <summary>
            Puts a <see cref="T:System.Data.DataTable"/> with the result of a  given SQL statement into an existing
            <see cref="T:System.Data.DataSet"/>.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Suitable for parameterised SQL statements.
            </summary>
            <param name="AFillDataSet">Existing <see cref="T:System.Data.DataSet"/></param>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="AParametersArray">An array holding 1..n instantiated OdbcParameters
            (including parameter Value)</param>
            <param name="AStartRecord">Start record that should be returned</param>
            <returns>Existing <see cref="T:System.Data.DataSet"/>, additionally containing the new <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.Select(System.Data.DataSet,System.String,System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[])">
            <summary>
            Puts a <see cref="T:System.Data.DataTable"/> with the result of a  given SQL statement into an existing
            <see cref="T:System.Data.DataSet"/>.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Suitable for parameterised SQL statements.
            </summary>
            <param name="AFillDataSet">Existing <see cref="T:System.Data.DataSet"/></param>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
            (including parameter Value)</param>
            <returns>Existing <see cref="T:System.Data.DataSet"/>, additionally containing the new <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.SelectDA(System.String,Ict.Common.DB.TDBTransaction)">
             <summary>
             Returns an <see cref="T:System.Data.IDbDataAdapter"/> (eg. <see cref="T:System.Data.Odbc.OdbcDataAdapter"/>, NpgsqlDataAdapter) for a given SQL statement.
             The SQL statement is executed in the given transaction context (which should
             have the desired <see cref="T:System.Data.IsolationLevel"/>). Not suitable for parameterised SQL statements.
            
             </summary>
             <param name="ASqlStatement">SQL statement</param>
             <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
             <see cref="T:System.Data.IsolationLevel"/></param>
             <returns>Instantiated <see cref="T:System.Data.IDbDataAdapter"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.SelectDA(System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[])">
             <summary>
             Returns an <see cref="T:System.Data.IDbDataAdapter"/> (eg. <see cref="T:System.Data.Odbc.OdbcDataAdapter"/>, NpgsqlDataAdapter) for a given SQL statement.
             The SQL statement is executed in the given transaction context (which should
             have the desired <see cref="T:System.Data.IsolationLevel"/>). Suitable for parameterised SQL statements.
            
             </summary>
             <param name="ASqlStatement">SQL statement</param>
             <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
             <see cref="T:System.Data.IsolationLevel"/></param>
             <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
             (including parameter Value)</param>
             <returns>Instantiated <see cref="T:System.Data.IDbDataAdapter"/>
             </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.SelectDT(System.String,System.String,Ict.Common.DB.TDBTransaction)">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> filled with the result of a given SQL statement.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Not suitable for parameterised SQL
            statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <returns>Instantiated DataTable</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.SelectDT(System.String,System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[])">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> filled with the result of a given SQL statement.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Not suitable for parameterised SQL
            statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
            (including parameter Value)</param>
            <returns>Instantiated <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.SelectDTInternal(System.String,System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[])">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> filled with the result of a given SQL statement.
            The SQL statement is executed in the given transaction context (which should
            have the desired <see cref="T:System.Data.IsolationLevel"/>). Suitable for parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ADataTableName">Name that the <see cref="T:System.Data.DataTable"/> should get</param>
            <param name="AReadTransaction">Instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/> with the desired
            <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
            (including parameter Value)</param>
            <returns>Instantiated <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.SelectDT(System.Data.DataTable,System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[],System.Int32,System.Int32)">
            <summary>
            this loads the result into a typed datatable
            </summary>
            <param name="ATypedDataTable">this needs to be an object of the typed datatable</param>
            <param name="ASqlStatement"></param>
            <param name="AReadTransaction"></param>
            <param name="AParametersArray"></param>
            <param name="AStartRecord">does not have any effect yet</param>
            <param name="AMaxRecords">not implemented yet</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.BeginTransaction(System.Int16)">
            <summary>
            Starts a Transaction on the current DB connection.
            Allows a retry timeout to be specified.
            </summary>
            <param name="ARetryAfterXSecWhenUnsuccessful">Allows a retry timeout to be specified.
            This is to be able to mitigate the problem of wanting to start a DB
            Transaction while another one is still running (gives time for the
            currently running DB Transaction to be finished).</param>
            <returns>Started Transaction (null if an error occured)
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.BeginTransaction">
            <summary>
            Starts a Transaction on the current DB connection.
            </summary>
            <returns>Started Transaction (null if an error occured)</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.BeginTransaction(System.Data.IsolationLevel,System.Int16)">
            <summary>
            Starts a Transaction with a defined <see cref="T:System.Data.IsolationLevel"/> on the current DB
            connection. Allows a retry timeout to be specified.
            </summary>
            <param name="AIsolationLevel">Desired <see cref="T:System.Data.IsolationLevel"/></param>
            <param name="ARetryAfterXSecWhenUnsuccessful">Allows a retry timeout to be specified.
            This is to be able to mitigate the problem of wanting to start a DB
            Transaction while another one is still running (gives time for the
            currently running DB Transaction to be finished).</param>
            <returns>Started Transaction (null if an error occured)</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a Transaction with a defined <see cref="T:System.Data.IsolationLevel"/> on the current DB
            connection.
            </summary>
            <param name="AIsolationLevel">Desired <see cref="T:System.Data.IsolationLevel"/></param>
            <returns>Started Transaction (null if an error occured)</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.CommitTransaction">
            <summary>
            Commits a running Transaction on the current DB connection.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.RollbackTransaction">
            <summary>
            Rolls back a running Transaction on the current DB connection.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.GetNewOrExistingTransaction(System.Data.IsolationLevel,System.Boolean@)">
            <summary>
            Either starts a new Transaction on the current DB connection or returns
            a existing <see cref="T:Ict.Common.DB.TDBTransaction"/>. What it does depends on two factors: whether a Transaction
            is currently running or not, and if so, whether it meets the specified
            <paramref name="ADesiredIsolationLevel"/>.
            <para>If there is a current Transaction but it has a different <see cref="T:System.Data.IsolationLevel"/>,
            <see cref="T:Ict.Common.DB.EDBTransactionIsolationLevelWrongException"/>
            is thrown.</para>
            <para>If there is no current Transaction, a new Transaction with the specified <see cref="T:System.Data.IsolationLevel"/>
            is started.</para>
            </summary>
            <param name="ADesiredIsolationLevel"><see cref="T:System.Data.IsolationLevel"/> that is desired</param>
            <param name="ANewTransaction">True if a new Transaction was started and is returned,
            false if an already existing Transaction is returned</param>
            <returns>Either an existing or a new Transaction that exactly meets the specified <see cref="T:System.Data.IsolationLevel"/></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.GetNewOrExistingTransaction(System.Data.IsolationLevel,Ict.Common.DB.TEnforceIsolationLevel,System.Boolean@)">
            <summary>
            Either starts a new Transaction on the current DB connection or returns
            a existing <see cref="T:Ict.Common.DB.TDBTransaction"/>. What it does depends on two factors: whether a Transaction
            is currently running or not, and if so, whether it meets the specified
            <paramref name="ADesiredIsolationLevel"/>.
            <para>If there is a current Transaction but it has a different <see cref="T:System.Data.IsolationLevel"/>, the result
            depends on the value of the <paramref name="ATryToEnforceIsolationLevel"/>
            parameter.</para>
            <para>If there is no current Transaction, a new Transaction with the specified <see cref="T:System.Data.IsolationLevel"/>
            is started.</para>
            </summary>
            <param name="ADesiredIsolationLevel"><see cref="T:System.Data.IsolationLevel"/> that is desired</param>
            <param name="ATryToEnforceIsolationLevel">Only has an effect if there is an already
            existing Transaction. See the 'Exceptions' section for possible Exceptions that may be thrown.
            </param>
            <param name="ANewTransaction">True if a new Transaction was started and is returned,
            false if an already existing Transaction is returned</param>
            <returns>Either an existing or a new Transaction that exactly meets the specified <see cref="T:System.Data.IsolationLevel"/></returns>
            <exception cref="T:Ict.Common.DB.EDBTransactionIsolationLevelWrongException">Thrown if the
            <paramref name="ATryToEnforceIsolationLevel"/> Argument is set to
            <see cref="F:Ict.Common.DB.TEnforceIsolationLevel.eilExact"/> and the existing Transactions' <see cref="T:System.Data.IsolationLevel"/> does not
            exactly match the <see cref="T:System.Data.IsolationLevel"/> specified with Argument  <paramref name="ADesiredIsolationLevel"/>,
            <see cref="T:Ict.Common.DB.EDBTransactionIsolationLevelWrongException"/></exception>
            <exception cref="T:Ict.Common.DB.EDBTransactionIsolationLevelTooLowException">Thrown if the
            <paramref name="ATryToEnforceIsolationLevel"/> Argument is set to
            <see cref="F:Ict.Common.DB.TEnforceIsolationLevel.eilExact"/> and the existing Transactions' <see cref="T:System.Data.IsolationLevel"/> does not
            exactly match the <see cref="T:System.Data.IsolationLevel"/> specified with Argument  <paramref name="ADesiredIsolationLevel"/>,
            <see cref="T:Ict.Common.DB.EDBTransactionIsolationLevelWrongException"/>Thrown if the
            <paramref name="ATryToEnforceIsolationLevel"/> Argument is set to
            <see cref="F:Ict.Common.DB.TEnforceIsolationLevel.eilMinimum"/> and the existing Transactions' <see cref="T:System.Data.IsolationLevel"/>
            hasn't got at least the <see cref="T:System.Data.IsolationLevel"/> specified with Argument
            <paramref name="ADesiredIsolationLevel"/>.</exception>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.GetNextSequenceValue(System.String,Ict.Common.DB.TDBTransaction)">
            <summary>
            Returns the next sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.GetCurrentSequenceValue(System.String,Ict.Common.DB.TDBTransaction)">
            <summary>
            Returns the current sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.RestartSequence(System.String,Ict.Common.DB.TDBTransaction,System.Int64)">
            <summary>
            restart a sequence with the given value
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteNonQuery(System.String,Ict.Common.DB.TDBTransaction)">
             <summary>
             Executes a SQL statement that does not give back any results (eg. an UPDATE
             SQL command). The statement is executed in a transaction; the transaction is
             automatically committed. Not suitable for parameterised SQL statements.
            
             </summary>
             <param name="ASqlStatement">SQL statement</param>
             <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/>.
             The transaction is automatically committed! Can be null.
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteNonQuery(System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[])">
             <summary>
             Executes a SQL statement that does not give back any results (eg. an UPDATE
             SQL command). The statement is executed in a transaction; the transaction is
             automatically committed. Suitable for parameterised SQL statements.
            
             </summary>
             <param name="ASqlStatement">SQL statement</param>
             <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/>.
             The transaction is automatically committed!</param>
             <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
             (including parameter Value)
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteNonQuery(System.String,Ict.Common.DB.TDBTransaction,System.Boolean)">
             <summary>
             Executes a SQL statement that does not give back any results (eg. an UPDATE
             SQL command). The statement is executed in a transaction. Not suitable for
             parameterised SQL statements.
            
             </summary>
             <param name="ASqlStatement">SQL statement</param>
             <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/></param>
             <param name="ACommitTransaction">The transaction is committed if set to true,
             otherwise the transaction is not committed (useful when the caller wants to
             do further things in the same transaction).
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteNonQuery(System.String,Ict.Common.DB.TDBTransaction,System.Boolean,System.Data.Common.DbParameter[])">
             <summary>
             Executes a SQL statement that does not give back any results (eg. an UPDATE
             SQL command). The statement is executed in a transaction. Suitable for
             parameterised SQL statements.
            
             </summary>
             <param name="ASqlStatement">SQL statement</param>
             <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/></param>
             <param name="ACommitTransaction">The transaction is committed if set to true,
             otherwise the transaction is not committed (useful when the caller wants to
             do further things in the same transaction).</param>
             <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
             (including parameter Value)
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteNonQueryBatch(System.Collections.Hashtable)">
            <summary>
            Executes 1..n SQL statements in a batch (in one go). The statements are
            executed in a transaction - if one statement results in an Exception, all
            statements executed so far are rolled back. The transaction's <see cref="T:System.Data.IsolationLevel"/>
            will be <see cref="F:System.Data.IsolationLevel.ReadCommitted"/>.
            Suitable for parameterised SQL statements.
            </summary>
            <param name="AStatementHashTable">A HashTable. Key: a unique identifier;
            Value: an instantiated <see cref="T:Ict.Common.DB.TSQLBatchStatementEntry"/> object
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteNonQueryBatch(System.Collections.Hashtable,System.Data.IsolationLevel)">
            <summary>
            Executes 1..n SQL statements in a batch (in one go). The statements are
            executed in a transaction - if one statement results in an Exception, all
            statements executed so far are rolled back. A Transaction with the desired
            <see cref="T:System.Data.IsolationLevel"/> is automatically created and committed/rolled back.
            Suitable for parameterised SQL statements.
            </summary>
            <param name="AStatementHashTable">A HashTable. Key: a unique identifier;
            Value: an instantiated <see cref="T:Ict.Common.DB.TSQLBatchStatementEntry"/> object</param>
            <param name="AIsolationLevel">Desired <see cref="T:System.Data.IsolationLevel"/>  of the transaction
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteNonQueryBatch(System.Collections.Hashtable,Ict.Common.DB.TDBTransaction)">
             <summary>
             Executes 1..n SQL statements in a batch (in one go). The statements are
             executed in a transaction - if one statement results in an Exception, all
             statements executed so far are rolled back. The transaction is automatically
             committed if all statements could be executed without error. Suitable for
             parameterised SQL statements.
            
             </summary>
             <param name="AStatementHashTable">A HashTable. Key: a unique identifier;
             Value: an instantiated <see cref="T:Ict.Common.DB.TSQLBatchStatementEntry"/> object</param>
             <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/>
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteNonQueryBatch(System.Collections.Hashtable,Ict.Common.DB.TDBTransaction,System.Boolean)">
             <summary>
             Executes 1..n SQL statements in a batch (in one go). The statements are
             executed in a transaction - if one statement results in an Exception, all
             statements executed so far are rolled back. Suitable for parameterised SQL
             statements.
            
             </summary>
             <param name="AStatementHashTable">A HashTable. Key: a unique identifier;
             Value: an instantiated <see cref="T:Ict.Common.DB.TSQLBatchStatementEntry"/> object</param>
             <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/></param>
             <param name="ACommitTransaction">On successful execution of all statements the
             transaction is committed if set to true, otherwise the transaction is not
             committed (useful when the caller wants to do further things in the same
             transaction).
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteScalar(System.String,System.Data.IsolationLevel)">
            <summary>
            Executes a SQL statement that returns a single result (eg. an SELECT COUNT(*)
            SQL command or a call to a Stored Procedure that inserts data and returns
            the value of a auto-numbered field). The statement is executed in a
            transaction with the desired <see cref="T:System.Data.IsolationLevel"/> and
            the transaction is automatically committed. Not suitable for
            parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="AIsolationLevel">Desired <see cref="T:System.Data.IsolationLevel"/> of the transaction</param>
            <returns>Single result as object
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteScalar(System.String,System.Data.IsolationLevel,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement that returns a single result (eg. an SELECT COUNT(*)
            SQL command or a call to a Stored Procedure that inserts data and returns
            the value of a auto-numbered field). The statement is executed in a
            transaction with the desired <see cref="T:System.Data.IsolationLevel"/> and
            the transaction is automatically committed. Suitable for
            parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="AIsolationLevel">Desired <see cref="T:System.Data.IsolationLevel"/> of the transaction</param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
            (including parameter Value)</param>
            <returns>Single result as object
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteScalar(System.String,Ict.Common.DB.TDBTransaction)">
            <summary>
            Executes a SQL statement that returns a single result (eg. an SELECT COUNT(*)
            SQL command or a call to a Stored Procedure that inserts data and returns
            the value of a auto-numbered field). The statement is executed in a
            transaction; the transaction is automatically committed. Not suitable for
            parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/></param>
            <returns>Single result as object
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteScalar(System.String,Ict.Common.DB.TDBTransaction,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement that returns a single result (eg. an SELECT COUNT(*)
            SQL command or a call to a Stored Procedure that inserts data and returns
            the value of a auto-numbered field). The statement is executed in a
            transaction; the transaction is automatically committed. Suitable for
            parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/></param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
            (including parameter Value)</param>
            <returns>Single result as object
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteScalar(System.String,Ict.Common.DB.TDBTransaction,System.Boolean)">
            <summary>
            Executes a SQL statement that returns a single result (eg. an SELECT COUNT(*)
            SQL command or a call to a Stored Procedure that inserts data and returns
            the value of a auto-numbered field). The statement is executed in a
            transaction. Not suitable for parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/></param>
            <param name="ACommitTransaction">The transaction is committed if set to true,
            otherwise the transaction is not committed (useful when the caller wants to
            do further things in the same transaction).</param>
            <returns>Single result as TObject
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ExecuteScalar(System.String,Ict.Common.DB.TDBTransaction,System.Boolean,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement that returns a single result (eg. an SELECT COUNT(*)
            SQL command or a call to a Stored Procedure that inserts data and returns
            the value of a auto-numbered field). The statement is executed in a
            transaction. Suitable for parameterised SQL statements.
            </summary>
            <param name="ASqlStatement">SQL statement</param>
            <param name="ATransaction">An instantiated <see cref="T:Ict.Common.DB.TDBTransaction"/></param>
            <param name="ACommitTransaction">The transaction is committed if set to true,
            otherwise the transaction is not committed (useful when the caller wants to
            do further things in the same transaction).</param>
            <param name="AParametersArray">An array holding 1..n instantiated DbParameters (eg. OdbcParameters)
            (including parameter Value)</param>
            <returns>Single result as TObject
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ReadSqlFile(System.String)">
            <summary>
            read an sql statement from file and remove the comments
            </summary>
            <param name="ASqlFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.ConnectionReady">
            <summary>
            Tells whether the DB connection is ready to accept commands
            or whether it is busy.
            </summary>
            <returns>True if DB connection can accept commands, false if
            it is busy</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.OnStateChangedHandler(System.Object,System.Data.StateChangeEventArgs)">
            <summary>
            Updates the FConnectionReady variable with the current ConnectionState.
            </summary>
            <remarks>
            <em>WARNING:</em> This doesn't work with NpgsqlConnection because it never raises the
            Event. Therefore the FConnectionReady variable must
            never be inquired directly, but only through calling ConnectionReady()!
            TODO: revise this comment with more recent Npgsql release
            </remarks>
            <param name="ASender">Sending object</param>
            <param name="AArgs">StateChange EventArgs</param>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.DataTableToXml(System.Data.DataTable)">
            <summary>
            for debugging, export data table to xml (which can be saved as xml, yml, csv)
            </summary>
            <param name="ATable"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.LogTable(System.Data.DataTable)">
            <summary>
            For debugging purposes only.
            Logs the contents of a DataTable
            </summary>
            <param name="tab">The DataTable whose contents should be logged
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.FormatSQLStatement(System.String)">
             <summary>
             For debugging purposes.
             Formats the sql query so that it is easily readable
             (mainly inserting line breaks before AND)
            
             </summary>
             <param name="s">the sql statement that should be formatted</param>
             <returns>s the formatted sql statement
             </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.HasAccess(System.String)">
            <summary>
            This Method checks if the current user has enough access rights to execute the query
            passed in in Argument <paramref name="ASQLStatement" />.
            <para>This Method needs to be implemented by a derived Class, that knows about the
            users' access rights. The implementation here simply returns true...</para>
            </summary>
            <returns>True if the user has access, false if access is denied.
            The implementation here simply returns true, though!
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.LogSqlStatement(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Logs the SQL statement and the parameters; should only be called in Debugmode;
            use DebugLevel to define behaviour.
            </summary>
            <param name="ASqlStatement">SQL Statement that should be logged.</param>
            <param name="AParametersArray">Parameters for the SQL Statement. Can be null.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.LogSqlStatement(System.String,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Logs the SQL statement and the parameters; should only be called in Debugmode;
            use DebugLevel to define behaviour.
            </summary>
            <param name="AContext">Context in which the logging takes place (eg. Method name).</param>
            <param name="ASqlStatement">SQL Statement that should be logged.</param>
            <param name="AParametersArray">Parameters for the SQL Statement. Can be null.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.LogExceptionAndThrow(System.Exception,System.String)">
            <summary>
            Logs an Exception and re-throws it afterwards.
            <para>Custom handling of OdbcException and NpgsqlException ensure that
            the maximum of information that is available from the DB's is logged.</para>
            </summary>
            <param name="AException">Exception that should be logged.</param>
            <param name="AContext">Context where the Exception happened
            (will be logged). Can be empty.</param>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.LogExceptionAndThrow(System.Exception,System.String,System.Data.Common.DbParameter[],System.String)">
            <summary>
            Logs an Exception and re-throws it afterwards.
            <para>Custom handling of OdbcException and NpgsqlException ensure that
            the maximum of information that is available from the DB's is logged.</para>
            </summary>
            <param name="AException">Exception that should be logged.</param>
            <param name="ASqlStatement">SQL Statement that caused the Exception (will be logged).</param>
            <param name="AParametersArray">the parameters for the query</param>
            <param name="AContext">Context where the Exception happened
            (will be logged). Can be empty.</param>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.LogException(System.Exception,System.String)">
            <summary>
            Logs an Exception.
            <para>Custom handling of OdbcException and NpgsqlException ensure that
            the maximum of information that is available from the DB's is logged.</para>
            </summary>
            <param name="AException">Exception that should be logged.</param>
            <param name="AContext">Context where the Exception happened
            (will be logged). Can be empty.</param>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.LogException(System.Exception,System.String,System.Data.Common.DbParameter[],System.String)">
            <summary>
            Logs an Exception.
            <para>Custom handling of OdbcException and NpgsqlException ensure that
            the maximum of information that is available from the DB's is logged.</para>
            </summary>
            <param name="AException">Exception that should be logged.</param>
            <param name="ASqlStatement">SQL Statement that caused the Exception (will be logged).</param>
            <param name="AParametersArray">the parameters for the query</param>
            <param name="AContext">Context where the Exception happened
            (will be logged). Can be empty.</param>
        </member>
        <member name="M:Ict.Common.DB.TDataBase.LogException(System.Exception,System.String,System.Data.Common.DbParameter[],System.String,System.Boolean)">
            <summary>
            Logs an Exception.
            <para>Custom handling of OdbcException and NpgsqlException ensure that
            the maximum of information that is available from the DB's is logged.</para>
            </summary>
            <param name="AException">Exception that should be logged.</param>
            <param name="ASqlStatement">SQL Statement that caused the Exception (will be logged).</param>
            <param name="AParametersArray">the parameters for the query</param>
            <param name="AContext">Context where the Exception happened
            (will be logged). Can be empty.</param>
            <param name="AThrowExceptionAfterLogging">If set to true, the Exception that is passed in in Argument
            <paramref name="AException"/> will be re-thrown.</param>
            <exception cref="T:System.Exception">Re-throws the Exception that is passed in in Argument
            <paramref name="AException"/> if <paramref name="AThrowExceptionAfterLogging"/> is set to true.</exception>
        </member>
        <member name="P:Ict.Common.DB.TDataBase.DBType">
            <summary>Returns the type of the RDBMS that the current Instance of
            <see cref="T:Ict.Common.DB.TDataBase"/> is connect to.</summary>
        </member>
        <member name="P:Ict.Common.DB.TDataBase.DebugLevel">
            <summary>
            Sets the DebugLevel (for logging purposes).
            </summary>
            <remarks>
            <list type="table">
            <item>
                <term><b>Level DB_DEBUGLEVEL_QUERY</b></term>
                <description>Prints the SQL Query Level</description>
            </item>
            <item>
                <term><b>Level DB_DEBUGLEVEL_RESULT</b></term>
                <description>Prints the results Level</description>
            </item>
            <item>
                <term><b>Level DB_DEBUGLEVEL_TRACE</b></term>
                <description>Prints a trace of all database activities (very verbose!)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Ict.Common.DB.TDataBase.ConnectionOK">
            <summary>Tells whether it's save to execute any SQL command on the DB. It is
            updated when the DB connection's State changes.</summary>
        </member>
        <member name="P:Ict.Common.DB.TDataBase.LastDBAction">
            <summary>Tells when the last Database action was carried out by the caller.</summary>
        </member>
        <member name="P:Ict.Common.DB.TDataBase.Transaction">
            <summary>
            The current Transaction, if there is any.
            </summary>
        </member>
        <member name="T:Ict.Common.DB.TSQLBatchStatementEntry">
            <summary>
            Represents the Value of an entry in a HashTable for use in calls to one of the
            <c>ExecuteNonQueryBatch</c> Methods.
            </summary>
            <remarks>Once instantiated, Batch Statment Entry values can
            only be read!</remarks>
        </member>
        <member name="F:Ict.Common.DB.TSQLBatchStatementEntry.FSQLStatement">
            <summary>Holds the SQL Statement for one Batch Statement Entry</summary>
        </member>
        <member name="F:Ict.Common.DB.TSQLBatchStatementEntry.FParametersArray">
            <summary>Holds the Parameters for a Batch Entry (optional)</summary>
        </member>
        <member name="M:Ict.Common.DB.TSQLBatchStatementEntry.#ctor(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Initialises the internal variables that hold the Batch Statment Entry
            parameters.
            </summary>
            <param name="ASQLStatement">SQL Statement for one Batch Entry</param>
            <param name="AParametersArray">Parameters for the SQL Statement (can be null)</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLBatchStatementEntry.GetWholeParameterArray(System.Data.Common.DbParameter[]@)">
             <summary>
             Returns the ParameterArray.
            
             </summary>
             <param name="AParametersArray">ParameterArray
             </param>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Common.DB.TSQLBatchStatementEntry.SQLStatement">
            <summary>
            SQL Statement for one Batch Entry
            </summary>
        </member>
        <member name="P:Ict.Common.DB.TSQLBatchStatementEntry.Parameters">
            <summary>
            Parameters for a Batch Entry (optional)
            </summary>
        </member>
        <member name="T:Ict.Common.DB.TDBTransaction">
            <summary>
            A generic Class for managing all kinds of ADO.NET Database Transactions -
            to be used instead of concrete ADO.NET Transaction objects, eg. <see cref="T:System.Data.Odbc.OdbcTransaction"/>
            or NpgsqlTransaction.
            </summary>
            <remarks>
            <em>IMPORTANT:</em> This Transaction Class does not have Commit or
            Rollback methods! This is so that the programmers are forced to use the
            CommitTransaction and RollbackTransaction methods of the <see cref="T:Ict.Common.DB.TDataBase"/> Class.
            <para>
            The reasons for this:
            <list type="bullet">
            <item><see cref="T:Ict.Common.DB.TDataBase"/> can know whether a Transaction is
            running (unbelievably, there is no way to find this out through ADO.NET!)</item>
            <item><see cref="T:Ict.Common.DB.TDataBase"/> can log Commits and Rollbacks. Another benefit of using this
            Class instead of a concrete implementation of ADO.NET Transaction Classes
            (eg. <see cref="T:System.Data.Odbc.OdbcTransaction"/>) is that it is not tied to a specific ADO.NET
            provider, therefore making it easier to use a different ADO.NET provider than ODBC.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Ict.Common.DB.TDBTransaction.FIsolationLevel">
            <summary>Holds the <see cref="P:Ict.Common.DB.TDBTransaction.IsolationLevel"/> of the Transaction</summary>
        </member>
        <member name="F:Ict.Common.DB.TDBTransaction.FConnection">
            <summary>Holds the Database connection to which the Transaction belongs.</summary>
        </member>
        <member name="F:Ict.Common.DB.TDBTransaction.FWrappedTransaction">
            <summary>Holds the actual IDbTransaction.</summary>
        </member>
        <member name="M:Ict.Common.DB.TDBTransaction.#ctor(System.Data.IDbTransaction,System.Data.IDbConnection)">
            <summary>
            Constructor for a <see cref="T:Ict.Common.DB.TDBTransaction"/> Object.
            </summary>
            <param name="ATransaction">The concrete IDbTransaction Object that <see cref="T:Ict.Common.DB.TDBTransaction"/> should represent</param>
            <param name="AConnection"></param>
        </member>
        <member name="P:Ict.Common.DB.TDBTransaction.Connection">
            <summary>
            Database connection to which the Transaction belongs
            </summary>
        </member>
        <member name="P:Ict.Common.DB.TDBTransaction.IsolationLevel">
            <summary>
            <see cref="P:Ict.Common.DB.TDBTransaction.IsolationLevel"/> of the Transaction
            </summary>
        </member>
        <member name="P:Ict.Common.DB.TDBTransaction.WrappedTransaction">
            <summary>
            The actual IDbTransaction.
            <para><em><b>WARNING:</b> do not do anything
            with this Object other than inspecting it; the correct
            working of Transactions in the <see cref="T:Ict.Common.DB.TDataBase"/>
            Object relies on the fact that it manages everything about
            a Transaction!!!</em>
            </para>
            </summary>
        </member>
        <member name="T:Ict.Common.DB.DBCaching.TSQLCache">
            <summary>
            This class allows to cache common SQL queries
            </summary>
            <remarks>
            The queries are just stored as strings and compared as strings.
            </remarks>
        </member>
        <member name="M:Ict.Common.DB.DBCaching.TSQLCache.#ctor">
            <summary>
            Provides a simple method for caching datasets for queries that are
            called again and again.
            </summary>
            <remarks>The queries are just stored as strings and compared as strings.</remarks>
        </member>
        <member name="M:Ict.Common.DB.DBCaching.TSQLCache.GetDataSet(Ict.Common.DB.TDataBase,System.String,System.Data.DataTable)">
            <summary>
            checks if the result for this query is already cached.
            If not, the result is retrieved from the database.
            The result is added to the cache, and the result is returned
            as a DataSet from the cache.
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="ATable">can already have some prepared columns; optional parameter, can be nil
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.DBCaching.TSQLCache.GetDataSet(Ict.Common.DB.TDataBase,System.String)">
            <summary>
            checks if the result for this query is already cached.
            If not, the result is retrieved from the database.
            The result is added to the cache, and the result is returned
            as a DataSet from the cache.
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.DBCaching.TSQLCache.GetDataTable(Ict.Common.DB.TDataBase,System.String,System.Data.DataTable)">
            <summary>
            checks if the result for this query is already cached.
            If not, the result is retrieved from the database.
            The result is added to the cache, and the result is returned
            as a DataTable from the cache.
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="ATable">can already have some prepared columns; optional parameter, can be nil
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.DBCaching.TSQLCache.GetDataTable(Ict.Common.DB.TDataBase,System.String)">
            <summary>
            checks if the result for this query is already cached.
            If not, the result is retrieved from the database.
            The result is added to the cache, and the result is returned
            as a DataTable from the cache.
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.DBCaching.TSQLCache.GetStringList(Ict.Common.DB.TDataBase,System.String)">
             <summary>
             checks if the result for this query is already cached.
             If not, the result is retrieved from the database.
             The result is added to the cache, and the result is returned
             as a ArrayList from the cache.
             The ArrayList consists of the strings
             of the first column of the first table in the dataset.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.DBCaching.TSQLCache.InvalidateTable(System.String)">
             <summary>
             remove all cached resultsets which have the table in their sql statement.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.DBCaching.TSQLCache.Invalidate">
             <summary>
             remove all cached resultsets
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Common.DB.TDBConnection">
            <summary>
            Contains functions that handle the creation of a DB connection.
            </summary>
            <remarks>
            This is a sealed class so that inheritance of the TDBConnection class
            can be prevented (to avoid Class inheritance). Call <see cref="M:Ict.Common.DB.TDBConnection.GetInstance"/>
            to get an Instance of this Class!
            This class is kind of 'low-level' - it is not intended to be
            instantiated except through the TDataBase.EstablishDBConnection procedures!!!
            The TDataBase class is the only class that a developer needs to deal with
            when accessing DB's!
            </remarks>
        </member>
        <member name="F:Ict.Common.DB.TDBConnection.FDsnOrServer">
            <summary>The ODBC DSN (Data Source Name), or the PosgreSQL DB Server Name
            when connecting to PostgreSQL using the Npgsql .NET Data Provider.</summary>
        </member>
        <member name="F:Ict.Common.DB.TDBConnection.FUsername">
            <summary>Username with which the connection gets established.</summary>
        </member>
        <member name="F:Ict.Common.DB.TDBConnection.FSingletonConnector">
            <summary>Used internally to make sure that only one instance of
            <see cref="T:Ict.Common.DB.TDBConnection"/> is created.</summary>
            <seealso cref="M:Ict.Common.DB.TDBConnection.GetInstance"/>
        </member>
        <member name="F:Ict.Common.DB.TDBConnection.FConnectionString">
            <summary>Used internally to build the Connection String.</summary>
        </member>
        <member name="M:Ict.Common.DB.TDBConnection.GetInstance">
            <summary>
            Returns an instance of <see cref="T:Ict.Common.DB.TDBConnection"/>.
            <para>
            <em>This method is the only way to get an Instance of
            <see cref="T:Ict.Common.DB.TDBConnection"/> because the Class is <b>sealed</b>
            (therefore not allowing the creation of an Instance of it using a Constructor!)</em>
            </para>
            </summary>
            <remarks>
            Before an Instance of <see cref="T:Ict.Common.DB.TDBConnection"/> is created,
            a check is performed whether an instance has already been created by
            the calling class. If this is the case, then the the same instance is returned,
            otherwise a new instance of <see cref="T:Ict.Common.DB.TDBConnection"/> is created and returned.
            </remarks>
            <returns>An instance of the <see cref="T:Ict.Common.DB.TDBConnection"/> Class.
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDBConnection.GetConnection(Ict.Common.DB.IDataBaseRDBMS,System.String,System.String,System.String,System.String,System.String@,System.String,System.Data.StateChangeEventHandler)">
            <summary>
            Opens a connection to the specified database
            </summary>
            <param name="ADataBaseRDBMS">the database functions for the selected type of database</param>
            <param name="AServer">The Database Server</param>
            <param name="APort">the port that the db server is running on</param>
            <param name="ADatabaseName">the database to connect to</param>
            <param name="AUsername">The username for opening the connection</param>
            <param name="APassword">The password for opening the connection</param>
            <param name="AConnectionString">The connection string; if it is not empty, it will overrule the previous parameters</param>
            <param name="AStateChangeEventHandler">for connection state changes</param>
            <returns>Opened Connection (null if connection could not be established).
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TDBConnection.CloseDBConnection(System.Data.IDbConnection)">
            <summary>
            Closes a DB connection.
            </summary>
            <remarks>
            Although the .NET FCL allows the <see cref="M:System.Data.IDbConnection.Close"/> method to be
            called even on already closed connections without causing an error,
            for the purposes of cleaner application development this method throws
            an exception when the caller tries to close an already/still closed
            connection.
            </remarks>
            <param name="AConnection">Open Database connection</param>
            <returns>void</returns>
            <exception cref="T:Ict.Common.DB.EDBConnectionAlreadyClosedException">When trying to close an
            already/still closed DB connection.</exception>
        </member>
        <member name="M:Ict.Common.DB.TDBConnection.GetConnectionString">
            <summary>
            Returns the Connection String that is used to connect to the DataBase that
            TDBConnection is pointing to.
            </summary>
            <returns>Connection string - including Password marked as hidden
            </returns>
        </member>
        <member name="T:Ict.Common.DB.EDBConnectionAlreadyClosedException">
            <summary>
            Thrown if an attempt is made to close an already/still closed DB Connection.
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionAlreadyClosedException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionAlreadyClosedException.#ctor(System.String)">
            <summary>
            Use this to pass on a message with the Exception
            </summary>
            <param name="AInfo">Exception message</param>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionAlreadyClosedException.#ctor(System.String,System.Exception)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionAlreadyClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Ict.Common.DB.EDBConnectionAlreadyClosedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only to be used by the .NET Serialization system (eg within .NET Remoting).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ict.Common.DB.TMySQL">
            <summary>
            this class allows access to MySQL databases
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.GetConnection(System.String,System.String,System.String,System.String,System.String@,System.String@,System.Data.StateChangeEventHandler)">
            <summary>
            connect to the database
            </summary>
            <param name="AServer"></param>
            <param name="APort"></param>
            <param name="ADatabaseName"></param>
            <param name="AUsername"></param>
            <param name="APassword"></param>
            <param name="AConnectionString"></param>
            <param name="AStateChangeEventHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.LogException(System.Exception,System.String@)">
            <summary>
            format an error message if the exception is of type MySqlException
            </summary>
            <param name="AException"></param>
            <param name="AErrorMessage"></param>
            <returns>true if this is an NpgsqlException</returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.FormatQueryRDBMSSpecific(System.String)">
            <summary>
            format the sql query so that it works for MySQL
            see also the comments for TDataBase.FormatQueryRDBMSSpecific
            </summary>
            <param name="ASqlQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.ConvertOdbcParameters(System.Data.Common.DbParameter[],System.String@)">
            <summary>
            TODOComment
            </summary>
            <param name="AParameterArray">Array of DbParameter that is to be converted.</param>
            <param name="ASqlStatement">SQL Statement that is to be converted.</param>
            <returns>Array of MysqlParameter (converted from <paramref name="AParameterArray" />.</returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.NewCommand(System.String@,System.Data.IDbConnection,System.Data.Common.DbParameter[],Ict.Common.DB.TDBTransaction)">
            <summary>
            create a IDbCommand object
            this formats the sql query for MySQL, and transforms the parameters
            </summary>
            <param name="ACommandText"></param>
            <param name="AConnection"></param>
            <param name="AParametersArray"></param>
            <param name="ATransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.NewAdapter">
            <summary>
            create an IDbDataAdapter for MySQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataSet@,System.Int32,System.Int32,System.String)">
            <summary>
            fill an IDbDataAdapter that was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataSet"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
            <param name="ADataTableName"></param>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            overload of FillAdapter, just for one table
            IDbDataAdapter was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataTable"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.AdjustIsolationLevel(System.Data.IsolationLevel@)">
            <summary>
            some databases have some problems with certain Isolation levels
            </summary>
            <param name="AIsolationLevel"></param>
            <returns>true if isolation level was modified</returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.GetNextSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the next sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.GetCurrentSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the current sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.RestartSequence(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection,System.Int64)">
            <summary>
            restart a sequence with the given value
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TMySQL.ReplaceDayOfYear(System.String)">
            <summary>
            Replace DAYOFYEAR(p_param) with DATE_FORMAT(p_param, %j)
            </summary>
            <param name="ASqlCommand"></param>
            <returns></returns>
        </member>
        <member name="T:Ict.Common.DB.TPostgreSQL">
            <summary>
            this class allows access to PostgreSQL databases
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.GetConnection(System.String,System.String,System.String,System.String,System.String@,System.String@,System.Data.StateChangeEventHandler)">
            <summary>
            Create a PostgreSQL connection using the Npgsql .NET Data Provider.
            </summary>
            <param name="AServer">The Database Server</param>
            <param name="APort">the port that the db server is running on</param>
            <param name="ADatabaseName">the database that we want to connect to</param>
            <param name="AUsername">The username for opening the PostgreSQL connection</param>
            <param name="APassword">The password for opening the PostgreSQL connection</param>
            <param name="AConnectionString">The connection string; if it is not empty, it will overrule the previous parameters</param>
            <param name="AStateChangeEventHandler">for connection state changes</param>
            <returns>NpgsqlConnection, but not opened yet (null if connection could not be established).
            </returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.LogException(System.Exception,System.String@)">
            <summary>
            format an error message if the exception is of type NpgsqlException
            </summary>
            <param name="AException"></param>
            <param name="AErrorMessage"></param>
            <returns>true if this is an NpgsqlException</returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.FormatQueryRDBMSSpecific(System.String)">
            <summary>
            format the sql query so that it works for PostgreSQL
            see also the comments for TDataBase.FormatQueryRDBMSSpecific
            </summary>
            <param name="ASqlQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.ConvertOdbcParameters(System.Data.Common.DbParameter[],System.String@)">
            <summary>
            Converts an Array of DbParameter (eg. OdbcParameter) to an Array
            of NpgsqlParameter. If the Parameters don't have a name yet, they
            are given one because PostgreSQL needs named Parameters.
            <para>Furthermore, the parameter placeholders '?' in the the passed in
            <paramref name="ASqlStatement" /> are replaced with PostgreSQL
            ':paramX' placeholders (where 'paramX' is the name of the Parameter).</para>
            </summary>
            <param name="AParameterArray">Array of DbParameter that is to be converted.</param>
            <param name="ASqlStatement">SQL Statement that is to be converted.</param>
            <returns>Array of NpgsqlParameter (converted from <paramref name="AParameterArray" />.</returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.NewCommand(System.String@,System.Data.IDbConnection,System.Data.Common.DbParameter[],Ict.Common.DB.TDBTransaction)">
            <summary>
            create a IDbCommand object
            this formats the sql query for PostgreSQL, and transforms the parameters
            </summary>
            <param name="ACommandText"></param>
            <param name="AConnection"></param>
            <param name="AParametersArray"></param>
            <param name="ATransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.NewAdapter">
            <summary>
            create an IDbDataAdapter for PostgreSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataSet@,System.Int32,System.Int32,System.String)">
            <summary>
            fill an IDbDataAdapter that was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataSet"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
            <param name="ADataTableName"></param>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            overload of FillAdapter, just for one table
            IDbDataAdapter was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataTable"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.AdjustIsolationLevel(System.Data.IsolationLevel@)">
            <summary>
            some databases have some problems with certain Isolation levels
            </summary>
            <param name="AIsolationLevel"></param>
            <returns>true if isolation level was modified</returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.GetNextSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the next sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.GetCurrentSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the current sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.RestartSequence(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection,System.Int64)">
            <summary>
            restart a sequence with the given value
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TPostgreSQL.ReplaceDayOfYear(System.String)">
            <summary>
            Replace DAYOFYEAR(p_param) with to_char(p_param, 'DDD')
            Replace DAYOFYEAR('2010-01-30') with to_char(to_date('2010-01-30', 'YYYY-MM-DD'), 'DDD')
            </summary>
            <param name="ASqlCommand"></param>
            <returns></returns>
        </member>
        <member name="T:Ict.Common.DB.TProgressODBC">
            <summary>
            this class allows access to Progress databases via ODBC
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.GetConnection(System.String,System.String,System.String,System.String,System.String@,System.String@,System.Data.StateChangeEventHandler)">
            <summary>
            Create an ODBC connection
            </summary>
            <param name="ADSN">The DSN defining the connection to the database server</param>
            <param name="APort">not in use</param>
            <param name="ADatabaseName">not in use</param>
            <param name="AUsername">odbc user name</param>
            <param name="APassword">The password for opening the database</param>
            <param name="AConnectionString">not in use</param>
            <param name="AStateChangeEventHandler">for connection state changes</param>
            <returns>the connection</returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.LogException(System.Exception,System.String@)">
            <summary>
            format an error message for exception of type OdbcException
            </summary>
            <param name="AException"></param>
            <param name="AErrorMessage"></param>
            <returns>true if this is an OdbcException</returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.FormatQueryRDBMSSpecific(System.String)">
            <summary>
            format the sql query so that it works for Progress ODBC
            see also the comments for TDataBase.FormatQueryRDBMSSpecific
            </summary>
            <param name="ASqlQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.ConvertOdbcParameters(System.Data.Common.DbParameter[],System.String@)">
            <summary>
            copy the ODBC parameters, but apply unicode conversion
            </summary>
            <param name="AParameterArray">Array of DbParameter that is to be converted.</param>
            <param name="ASqlStatement">SQL Statement will stay the same.</param>
            <returns>modified array of ODBCParameters (unicode)</returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.NewCommand(System.String@,System.Data.IDbConnection,System.Data.Common.DbParameter[],Ict.Common.DB.TDBTransaction)">
            <summary>
            create a IDbCommand object
            this formats the sql query for Progress ODBC, and transforms the parameters
            </summary>
            <param name="ACommandText"></param>
            <param name="AConnection"></param>
            <param name="AParametersArray"></param>
            <param name="ATransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.NewAdapter">
            <summary>
            create an IDbDataAdapter for ODBC
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataSet@,System.Int32,System.Int32,System.String)">
            <summary>
            fill an IDbDataAdapter that was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataSet"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
            <param name="ADataTableName"></param>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            overload of FillAdapter, just for one table
            IDbDataAdapter was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
            <param name="AFillDataTable"></param>
        </member>
        <member name="F:Ict.Common.DB.TProgressODBC.FDBEncoding">
            <summary>Is used to know the codepage of the database; is retrieved from the environment variable SQL_CLIENT_CHARSET</summary>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.ConvertToUnicode(System.String)">
             <summary>
             Convert string from the codepage of the database to proper Unicode
             using the SQL_CLIENT_CHARSET environment variable, or the default Windows ANSI codepage
            
             </summary>
             <param name="s">the original string, as it is retrieved from the database</param>
             <returns>the string correctly converted to Unicode
             </returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.ConvertFromUnicode(System.String)">
             <summary>
             Convert string from proper Unicode to the codepage of the database
             using the SQL_CLIENT_CHARSET environment variable, or the default Windows ANSI codepage
            
             </summary>
             <param name="s">the Unicode string from the GUI</param>
             <returns>string to be stored in the database
             </returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.ConvertToUnicode(System.Data.DataRowCollection)">
            <summary>
            Convert all the string values in a result set from the codepage of the database to proper Unicode
            using the SQL_CLIENT_CHARSET environment variable, or the default Windows ANSI codepage
            </summary>
            <param name="rows">The DataRowCollection that needs to be converted
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.AdjustIsolationLevel(System.Data.IsolationLevel@)">
            <summary>
            some databases have some problems with certain Isolation levels
            </summary>
            <param name="AIsolationLevel"></param>
            <returns>true if isolation level was modified</returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.GetNextSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the next sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.GetCurrentSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the current sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TProgressODBC.RestartSequence(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection,System.Int64)">
            <summary>
            restart a sequence with the given value has not been implemented
            </summary>
        </member>
        <member name="T:Ict.Common.DB.TSQLite">
            <summary>
            this class allows access to SQLite databases
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.GetConnection(System.String,System.String,System.String,System.String,System.String@,System.String@,System.Data.StateChangeEventHandler)">
            <summary>
            Create a SQLite connection using
            the ADO.NET 2.0 Provider for SQLite
            from http://sourceforge.net/projects/sqlite-dotnet2
            </summary>
            <param name="AServer">The Database file</param>
            <param name="APort">the port that the db server is running on</param>
            <param name="ADatabaseName">not in use</param>
            <param name="AUsername">not in use</param>
            <param name="APassword">The password for opening the database</param>
            <param name="AConnectionString">not in use</param>
            <param name="AStateChangeEventHandler">for connection state changes</param>
            <returns>the connection</returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.LogException(System.Exception,System.String@)">
            <summary>
            format an error message for exception of type SQLiteException
            </summary>
            <param name="AException"></param>
            <param name="AErrorMessage"></param>
            <returns>true if this is an SQLiteException</returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.FormatQueryRDBMSSpecific(System.String)">
            <summary>
            format the sql query so that it works for SQLite
            see also the comments for TDataBase.FormatQueryRDBMSSpecific
            </summary>
            <param name="ASqlQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.ConvertOdbcParameters(System.Data.Common.DbParameter[],System.String@)">
            <summary>
            Converts an Array of DbParameter (eg. OdbcParameter) to an Array
            of SQLiteParameter.
            </summary>
            <param name="AParameterArray">Array of DbParameter that is to be converted.</param>
            <param name="ASqlStatement">SQL Statement will stay the same.</param>
            <returns>Array of SQLiteParameter (converted from <paramref name="AParameterArray" />.</returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.NewCommand(System.String@,System.Data.IDbConnection,System.Data.Common.DbParameter[],Ict.Common.DB.TDBTransaction)">
            <summary>
            create a IDbCommand object
            this formats the sql query for SQLite, and transforms the parameters
            </summary>
            <param name="ACommandText"></param>
            <param name="AConnection"></param>
            <param name="AParametersArray"></param>
            <param name="ATransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.NewAdapter">
            <summary>
            create an IDbDataAdapter for SQLite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataSet@,System.Int32,System.Int32,System.String)">
            <summary>
            fill an IDbDataAdapter that was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataSet"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
            <param name="ADataTableName"></param>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.FillAdapter(System.Data.IDbDataAdapter,System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            overload of FillAdapter, just for one table
            IDbDataAdapter was created with NewAdapter
            </summary>
            <param name="TheAdapter"></param>
            <param name="AFillDataTable"></param>
            <param name="AStartRecord"></param>
            <param name="AMaxRecords"></param>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.AdjustIsolationLevel(System.Data.IsolationLevel@)">
            <summary>
            some databases have some problems with certain Isolation levels
            </summary>
            <param name="AIsolationLevel"></param>
            <returns>true if isolation level was modified</returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.GetNextSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the next sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.GetCurrentSequenceValue(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection)">
            <summary>
            Returns the current sequence value for the given Sequence from the DB.
            </summary>
            <param name="ASequenceName">Name of the Sequence.</param>
            <param name="ATransaction">An instantiated Transaction in which the Query
            to the DB will be enlisted.</param>
            <param name="ADatabase">the database object that can be used for querying</param>
            <param name="AConnection"></param>
            <returns>Sequence Value.</returns>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.RestartSequence(System.String,Ict.Common.DB.TDBTransaction,Ict.Common.DB.TDataBase,System.Data.IDbConnection,System.Int64)">
            <summary>
            restart a sequence with the given value
            </summary>
        </member>
        <member name="M:Ict.Common.DB.TSQLite.ReplaceDayOfYear(System.String)">
            <summary>
            Replace DAYOFYEAR(p_param) with strftime(%j, p_param)
            </summary>
            <param name="ASqlCommand"></param>
            <returns></returns>
        </member>
    </members>
</doc>
