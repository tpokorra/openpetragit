<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Petra.Client.MReporting.Logic</name>
    </assembly>
    <members>
        <member name="T:Ict.Petra.Client.MReporting.Logic.TRptCalculator">
            <summary>
            this provides the calculation to the client;
            connects to the server to prepare the report
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TRptCalculator.Parameters">
            <summary>the settings and parameters for the report</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TRptCalculator.Results">
            <summary>this will contain the data returned from the server</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TRptCalculator.NewTempColumn">
            <summary>will be set by SetMaxDisplayColumns; is needed for temporary columns, e.g. for sums of ledgers</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TRptCalculator.MaxDisplayColumns">
            <summary>will be set by SetMaxDisplayColumns;</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TRptCalculator.Duration">
            <summary>how long did it take to calculate the report</summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.SetupSorting">
             <summary>
             Setup the sorting.
             Uses the param_sortby_readable, and adds missing columns to be calculated, but not displayed
             builds param_sortby_columns, which is a list of the column numbers
             based on these numbers the rows should be sorted, starting with the last number
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddColumnCalculation(System.Int32,System.String)">
             <summary>
             Add a column that uses a calculation defined in the xml file
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddColumnFinancial(System.Int32,System.Int32,System.String,System.Boolean)">
             <summary>
             Add a column containing financial data
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddColumnFunctionLedgers(System.Int32,System.String,System.Collections.Specialized.StringCollection,System.String,System.Boolean)">
            <summary>
            add a column that calculates the sum of several ledgers
            makes automatically use of other columns that already provide data of some of the ledgers
            make sure you have called SetMaxDisplayColumns before!
            </summary>
            <param name="AColumn"></param>
            <param name="f">the function that should be applied on the values, e.g. add</param>
            <param name="ledgerList"></param>
            <param name="calculation"></param>
            <param name="ytd"></param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddColumnFunction(System.Int32,System.String)">
            <summary>
            add a column that calculates something based on other columns
            </summary>
            <param name="column"></param>
            <param name="f">the function that should be applied, containing the column number</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddColumnLayout(System.Int32,System.Double,System.Double,System.Double)">
             <summary>
             Set the layout for a column for printing
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.WriteResultToFile(System.String)">
            <summary>
            the generated report will be written to an CSV file
            the separator can be defined in the parameter CSV_separator
            </summary>
            <param name="filename">the path that the results should be written to</param>
            <returns>s false if file could not be written
            </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.SetMaxDisplayColumns(System.Int32)">
            <summary>
            needs to be called before adding any columns that could require temporary columns
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.ResetParameters">
            <summary>
            for creating a new report;
            needs to be called when the reportMain Object
            is reused for a second report generation
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddParameter(System.String,System.String,System.Int32)">
            <summary>
            manually add parameters before the report generation stage
            </summary>
            <param name="parameterId">name of the parameter</param>
            <param name="value">the value of the parameter, converted to a string</param>
            <param name="column">additional descriptor where this variable applies
            </param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddParameter(System.String,System.String)">
            <summary>
            overload
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddParameter(System.String,System.Object,System.Int32)">
            <summary>
            overload
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
            <param name="column"></param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddParameter(System.String,System.Object)">
            <summary>
            overload
            </summary>
            <param name="parameterId"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.AddStringParameter(System.String,System.String)">
            <summary>
            Add explicit a string parameter before the report calculation
            </summary>
            <param name="paramederId">name of the parameter</param>
            <param name="value">the value of the parameter</param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.RemoveParameter(System.String)">
            <summary>
            Removes one parameter from the parameter list
            </summary>
            <param name="parameterId">name of the parameter</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.GetParameters">
            <summary>
            get the settings and formatting information for the report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.GetResults">
            <summary>
            get the result data of the report
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.GetDuration">
            <summary>
            get the duration of the calculation of the report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.CancelReportCalculation">
            <summary>
            cancel the calculation of the report
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TRptCalculator.GenerateResultRemoteClient">
            <summary>
            this is where all the calculations take place
            </summary>
            <returns>s true if the report was successfully generated
            </returns>
        </member>
        <member name="T:Ict.Petra.Client.MReporting.Logic.TReportExcel">
            <summary>
            special logic for exporting report to Excel for graphs etc
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportExcel.#ctor(Ict.Petra.Shared.MReporting.TResultList,Ict.Petra.Shared.MReporting.TParameterList)">
            <summary>
            constructor
            </summary>
            <param name="AResultList"></param>
            <param name="AParameters"></param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportExcel.DrawChartPieAccountBreakdown(System.Int16,System.String,System.String)">
             <summary>
             Draw one chart in form of a pie on the current sheet, with the grand child lines of the given line as the parts of the pie
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportExcel.DrawChartPieCostCentreBreakdown(System.String,System.Collections.ArrayList,System.String)">
            <summary>
            todoComment
            </summary>
            <param name="accountCode"></param>
            <param name="costCentreCodeList"></param>
            <param name="chartSheetName"></param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportExcel.DrawChartLineCompareAccounts(System.String,System.Collections.ArrayList,System.String)">
             <summary>
             Draw one chart in form of a line diagram, each line for one of the given account codes
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportExcel.DrawChartLineCompareCostCentres(System.String,System.Collections.ArrayList,System.String)">
             <summary>
             Draw one chart in form of a line diagram, each line for one of the given costcentre codes
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportExcel.ExportResult">
             <summary>
             Export the full result to Excel
             it is a modification of TResult.writeCSV
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon">
             <summary>
             Functions that deal with getting the right rows from the result;
             Accessing common parameters;
             keep track of the current row to be printed, and therefore cope with page breaks
            
             This class deals with the hierarchy of the results;
             it is able to walk through the master/child line,
             and to deal with page breaks.
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FParameters">
            <summary>the settings for this report</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FResultList">
            <summary>the data for this report</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FResults">
            <summary>direct access to the results (data for report)</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FPrinter">
            <summary>where to print; can be graphics or text</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FNextElementToPrint">
            <summary>this is the index of the Row that has to be printed on the next page;</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FNextElementToPrintBackup">
            <summary>used for simulating</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FNextElementLineToPrint">
            <summary>list of TStageElementPrinting for each level; this tells the next part of the element that needs to be printed</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FNextElementLineToPrintBackup">
            <summary>used for simulating</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FLowestLevel">
            <summary>what is the level of the deepest level</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FNumberColumns">
            <summary>number of columns for the report</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FTimePrinted">
            <summary>the time the document was printed</summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintColumn(System.Int32,System.Int32,Ict.Common.TVariant)">
            <summary>
            </summary>
            <returns>s true if any value was printed
            </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintLowestLevel(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            print the lowest level (no children)
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintNormalLevelHeader(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            print the header for a normal level (not deepest level)
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintNormalLevelFooter(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            can either print or simulate
            </summary>
            <returns>s the current y position after printing or simulating
            </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintColumnCaptions">
             <summary>
             prints the captions of the columns;
             prepare the footer lines for long captions;
             is called by PrintPageHeader
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.#ctor(Ict.Petra.Shared.MReporting.TResultList,Ict.Petra.Shared.MReporting.TParameterList,Ict.Common.Printing.TPrinter)">
            <summary>
            constructor
            </summary>
            <param name="AResult"></param>
            <param name="AParameters"></param>
            <param name="APrinter"></param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.StartPrintDocument">
            <summary>
            prepare printing the document
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FindRow(System.Int32)">
             <summary>
             the rows have a unique child number, even if they have different master rows
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FindFirstChild(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            find first row that is in the hierarchy below the current row
            </summary>
            <param name="currentRow"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FindNextSibling(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            find the next row on the same level
            </summary>
            <param name="currentRow"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FindNextUncle(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            find the next sibling of the parent row
            </summary>
            <param name="currentRow"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.FindNextRow(Ict.Petra.Shared.MReporting.TResult)">
             <summary>
             find the next sibling of currentRow.
             if there is none, then try to find the next row up one hierarchy
             if currentRow is the last row, return nil
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.Get(System.String,System.Int32,System.Int32,Ict.Petra.Shared.MReporting.eParameterFit)">
            <summary>
            Get the value of a parameter
            </summary>
            <param name="parameterId"></param>
            <param name="column"></param>
            <param name="depth"></param>
            <param name="exact"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.Get(System.String,System.Int32,System.Int32)">
            <summary>
            overload
            </summary>
            <param name="parameterId"></param>
            <param name="column"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.Get(System.String,System.Int32)">
            <summary>
            overload
            </summary>
            <param name="parameterId"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.Get(System.String)">
            <summary>
            overload
            </summary>
            <param name="parameterId"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.GetPosition(System.Int32,System.Int32,System.Single)">
             <summary>
             This function returns the position of the column in the current measurement unit
             (ie. letter for textmode, or inch for graphics; see implementation of function FPrinter.Cm);
             using ColumnPosition and ColumnPositionIndented from the FParameters
            
             </summary>
             <param name="columnNr"></param>
             <param name="level"></param>
             <param name="ADefault">in cm</param>
             <returns>the position in cm
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.GetWidth(System.Int32,System.Int32,System.Single)">
             <summary>
             This function returns the width of the column in in the current measurement unit;
             (ie. letter for textmode, or inch for graphics; see implementation of function FPrinter.Cm);
             using ColumnWidth and ColumnPositionIndented from the FParameters
            
             </summary>
             <param name="columnNr"></param>
             <param name="level"></param>
             <param name="ADefault">in cm</param>
             <returns>the width in cm
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.GetAlignment(System.Int32,System.Int32,Ict.Common.Printing.eAlignment)">
            <summary>
            get the alignment for the current level (left, centered, right)
            </summary>
            <param name="columnNr"></param>
            <param name="level"></param>
            <param name="ADefault"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintNormalLevelDetails(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            print the details of a normal level (not lowest level)
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintNormalLevel(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            print a normal level
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintRow(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            prints the current Row
            </summary>
            <returns>s true if all were printed; false if page was full
            side effects: will set the NextElementToPrint
            </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterCommon.PrintPageBody">
            <summary>
            print the main part of the page
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout">
            <summary>
            Here the specific layout of the report is defined.
            It is independent of the printer, so it works both for graphics and text.
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.HEADERPAGELEFT1_POS">
            <summary>default value for position; they can be overwritten by the report definition</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.HEADERPAGELEFT2_POS">
            <summary>default value for position; they can be overwritten by the report definition</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.COLUMNDATASTART_POS">
            <summary>default value for position; they can be overwritten by the report definition</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.COLUMN_WIDTH">
            <summary>default value for position; they can be overwritten by the report definition</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.COLUMNLEFT1_POS">
            <summary>default value for position; they can be overwritten by the report definition</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.COLUMNLEFT2_POS">
            <summary>default value for position; they can be overwritten by the report definition</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.FWrapColumn">
            <summary>True: Wrap the text in a column if it is to long. Otherwise cut it </summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.#ctor(Ict.Petra.Shared.MReporting.TResultList,Ict.Petra.Shared.MReporting.TParameterList,Ict.Common.Printing.TPrinter,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="AResult"></param>
            <param name="AParameters"></param>
            <param name="APrinter"></param>
            <param name="AWrapColumn">True: Wrap text in the column if it is to long. Otherwise cut it</param>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintReport">
             <summary>
             Print a report, initialise the page numbers, print header, body and footer;
             At the moment, this is only used for the TxtPrinter.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintPageHeader">
            <summary>
            print the page header
            </summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintColumnCaptions">
             <summary>
             prints the captions of the columns;
             prepare the footer lines for long captions;
             is called by PrintPageHeader
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintColumn(System.Int32,System.Int32,Ict.Common.TVariant)">
            <summary>
            print one value, into the given column
            </summary>
            <param name="columnNr"></param>
            <param name="level"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintColumns(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            print all columns of a given row
            </summary>
            <param name="ARow"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintLowestLevel(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            print the lowest level (has no child levels)
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintNormalLevelHeader(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            print the header of a normal level
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintNormalLevelFooter(Ict.Petra.Shared.MReporting.TResult)">
            <summary>
            can either print or simulate
            </summary>
            <returns>s the current y position after printing or simulating
            </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TReportPrinterLayout.PrintPageFooter">
            <summary>
            print the footer of the page;
            can contain eg. long caption lines that did not fit at top of the columns
            </summary>
        </member>
        <member name="T:Ict.Petra.Client.MReporting.Logic.TStoredSettings">
            <summary>
            provides methods to deal with stored settings from the reports
            </summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TStoredSettings.MAX_NUMBER_OF_RECENT_SETTINGS">
            <summary>constant for the number of how many settings should be in the menu</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TStoredSettings.FApplicationDirectory">
            <summary>the path where the application is started from.</summary>
        </member>
        <member name="F:Ict.Petra.Client.MReporting.Logic.TStoredSettings.FReportName">
            <summary>Private Declarations</summary>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.#ctor(System.String,System.String,System.String)">
             <summary>
             The constructor sets the name of the report and the name of the user
            
             </summary>
             <param name="AReportName">the name of the report (to know where to search/store settings)</param>
             <param name="ASettingsDirectory">this is where the default settings are stored (in subdirectories for each report type)</param>
             <param name="AUserSettingsDirectory">this is where the user settings are stored (in subdirectories for each report type)</param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.GetAvailableSettings">
             <summary>
             This returns a StringCollection with the names of available settings
             for the given report
            
             </summary>
             <returns>the list of names of settings, which exist at the moment
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.GetRecentlyUsedSettings">
             <summary>
             This returns a StringCollection with the names of recently used settings
             for the given report
            
             </summary>
             <returns>the list of names of recently used settings, which exist at the moment
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.UpdateRecentlyUsedSettings(System.String)">
             <summary>
             This adds a setting to the top of the list of recently used settings.
            
             </summary>
             <param name="ASettingsName">the name of the setting, which should be most recent</param>
             <returns>the list of names of recently used settings, which exist at the moment
             </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.IsSystemSettings(System.String)">
            <summary>
            This will check, if the set of settings with the given name is already existing
            and if it is a system settings; ie. it is provided by the organisation/OpenPetra.org and should not be overwritten.
            all settings in the user directory are non system settings, all in the {app}/reports30/Settings are system settings
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.SaveSettings(System.String,Ict.Petra.Shared.MReporting.TParameterList)">
            <summary>
            Save the currently selected options and parameters to a file;
            this will automatically make this setting the most recent
            </summary>
            <returns>null if something went wrong (eg. overwrite a system settings file);
            otherwise a collection with the recently used settings, including the settings just saved
            </returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.LoadSettings(System.String@,Ict.Petra.Shared.MReporting.TParameterList@)">
             <summary>
             Load stored options and parameters from a file;
             this will automatically make this setting the most recent
             if the setting does not exist, it is removed from the list of recent settings, and ASettingsName is cleared
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.DeleteSettings(System.String)">
             <summary>
             Delete a setting
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.RenameSettings(System.String,System.String)">
             <summary>
             Rename a setting
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.GetWrapOption">
            <summary>
            Get the user default if the Menu Item "Wrap Column" is checked
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Client.MReporting.Logic.TStoredSettings.SaveWrapOption(System.Boolean)">
            <summary>
            Set the user default if the Menu Item "Wrap Column" is checked
            </summary>
            <param name="AWrap"></param>
        </member>
    </members>
</doc>
