<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Common.Printing</name>
    </assembly>
    <members>
        <member name="T:Ict.Common.Printing.TPdfPrinter">
            <summary>
            this printer uses PdfSharp to print to PDF.
            we need to overwrite the graphics functions, otherwise we use the same layout/text wrapping functions like TGfxPrinter
            </summary>
        </member>
        <member name="T:Ict.Common.Printing.TGfxPrinter">
             <summary>
             The TGfxPrinter class helps to print to a System.Drawing.Printing.PrintDocument.
            
             This means you can use several fonts, etc.
            
             see also
             http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnwinforms/html/printwinforms.asp
             http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnadvnet/html/vbnet01282003.asp
             </summary>
        </member>
        <member name="T:Ict.Common.Printing.TPrinter">
             <summary>
             The TPrinter class helps to print.
            
             This is a generic class for printing.
             Most of the functions are abstract and need to be implemented by a derived class.
             This is TxtPrinter and GfxPrinter, that are derived from TPrinter
             </summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FOrientation">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FMarginType">
            <summary>use printable area or default margins</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FNumberOfPages">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FPageFooterSpace">
            <summary>how much space is needed for the footer lines; footerspace = font.height  number of lines</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FLeftMargin">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FTopMargin">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FRightMargin">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FBottomMargin">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FWidth">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FHeight">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FPrinterLayout">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinter.FCurrentState">
            current state of printer
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.LineFeed(Ict.Common.Printing.eFont)">
            <summary>
            Line Feed; increases the current y position by the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.LineFeed">
            <summary>
            Line Feed; increases the current y position by the height of the biggest last used font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.LineFeed(System.Single)">
            <summary>
            Line Feed; increases the current y position by the given height
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.LineSpaceFeed(Ict.Common.Printing.eFont)">
            <summary>
            Line Feed, but not full line; increases the current y position by half the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.LineUnFeed(Ict.Common.Printing.eFont)">
            <summary>
            Reverse Line Feed; decreases the current y position by the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.ValidXPos(System.Single)">
             <summary>
             Is the given position still on the page?
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.ValidYPos">
             <summary>
             Is the current line still on the page?
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.LineFeedToPageFooter">
             <summary>
             Jump to the position where the page footer starts.
             SetPageFooterSpace is used to define the space reserved for the footer.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.SetPageFooterSpace(System.Int32,Ict.Common.Printing.eFont)">
             <summary>
             Set the space that is required by the page footer.
             ValidYPos will consider this value.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.SetHasMorePages(System.Boolean)">
             <summary>
             Tell the printer, that there are more pages coming
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.HasMorePages">
            <summary>
            more pages are coming
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.Cm(System.Single)">
             <summary>
             Converts the given value in cm to the currently used measurement unit
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PrintString(System.String,Ict.Common.Printing.eFont,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, aligned x position
            </summary>
            <returns>true if something was printed
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PrintString(System.String,Ict.Common.Printing.eFont,System.Single)">
            <summary>
            prints into the current line, absolute x position
            </summary>
            <returns>true if something was printed
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PrintString(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, absolute x position with width and alignment
            </summary>
            <returns>true if something was printed
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PrintStringWrap(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, absolute x position with width and alignment
            this method uses FCurrentXPos and FCurrentYPos to be able to continue a paragraph
            uses FCurrentXPos and FCurrentYPos to know where to start to print, and also sets
            valid values in those member variables
            </summary>
            <returns>s bool true if any text was printed</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PrintStringAndFits(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            This function uses the normal DrawString function to print into a given space.
            </summary>
            <returns>whether the text did fit that space or not.
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.GetWidthString(System.String,Ict.Common.Printing.eFont)">
             <summary>
             Return the width of the string, if it was printed in one line, using the given Font
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.DrawLine(System.Single,System.Single,Ict.Common.Printing.eLinePosition,Ict.Common.Printing.eFont)">
             <summary>
             Draws a line, either above or below the current text line
             the font is required to get the height of the row
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.DrawRectangle(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            draws a rectangle
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.DrawBitmap(System.String,System.Single,System.Single)">
            <summary>
            todoComment
            </summary>
            <param name="APath"></param>
            <param name="AXPos"></param>
            <param name="AYPos"></param>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.DrawBitmap(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Draw a bitmap.
            
             Either Width or WidthPercentage should be unequals 0, but only one should have a value.
             Same applies to Height
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.#ctor">
             <summary>
             constructor
            
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.Init(Ict.Common.Printing.eOrientation,Ict.Common.Printing.TPrinterLayout,Ict.Common.Printing.eMarginType)">
            <summary>
            sets the orientation of the page
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.StartSimulatePrinting">
             <summary>
             start the simulation of printing; nothing is actually printed, but the CurrentYPos is increased
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.FinishSimulatePrinting">
             <summary>
             finish the simulation of printing; the actual CurrentYPos is restored
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PushCurrentState">
            <summary>
            store the current printer state (font size etc)
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PopCurrentState">
            <summary>
            return to previous printer state;
            this is used for printing table cells
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PopCurrentStateApartFromYPosition">
            <summary>
            return to previous printer state; but keep the new y position (used eg. for printing the page header)
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.Cm2Inch(System.Single)">
             <summary>
             Converts the given value in cm to the equivalent value in inches
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.Inch2Cm(System.Single)">
             <summary>
             Converts the given value in inches to the equivalent value in centimeters
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.Inch(System.Single)">
             <summary>
             Converts the given value in inch to the currently used measurement unit;
             uses Inch2Cm and Cm
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinter.PrintTable(System.Single,System.Single,System.Collections.Generic.List{Ict.Common.Printing.TTableRowGfx},System.Int32@)">
            <summary>
            renders a table at the current FCurrentYPos
            does not support rowspan at the moment
            colspan might be implemented in the generation of the TTableRowGfx structure
            does not care about fitting on page etc.
            </summary>
            <param name="AXPos">the X position to start the table</param>
            <param name="AWidthAvailable">AWidthAvailable</param>
            <param name="rows"></param>
            <param name="ARowsFittingOnPage">number of rows that fitted on the page</param>
            <returns>height of table</returns>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.CurrentPageNr">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.CurrentDocumentNr">
            <summary>a document can consist of several pages;
            a document is one body element</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.NumberOfPages">
            <summary>this only has a valid value after the first rendering of the report</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.CurrentYPos">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.CurrentXPos">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.LeftMargin">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.RightMargin">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.CurrentFont">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.CurrentRelativeFontSize">
            <summary>
            the relative font size; 0 is default size
            </summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.CurrentAlignment">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.PrintingMode">
            this is about simulation or printing
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.Width">
            <summary>todoComment</summary>
        </member>
        <member name="P:Ict.Common.Printing.TPrinter.PageFooterSpace">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FPrinterBehaviour">
            <summary>
            we have some different behaviour when printing the columns of a report (can make text fit) and when printing a form letter
            </summary>
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FPageXPos">
            printing should be started at this position for each line
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FPageWidthAvailable">
            space available for printing
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FDefaultFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FDefaultBoldFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FHeadingFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FSmallPrintFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FBiggestLastUsedFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FLinesPerPage">
            <summary>these values are set by PrintPage</summary>
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.FEv">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.#ctor(System.Drawing.Printing.PrintDocument,Ict.Common.Printing.TGfxPrinter.ePrinterBehaviour)">
             <summary>
             sets the orientation of the page
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.Init(Ict.Common.Printing.eOrientation,Ict.Common.Printing.TPrinterLayout,Ict.Common.Printing.eMarginType)">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.EndPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            todoComment
            </summary>
            <param name="ASender"></param>
            <param name="AEv"></param>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.GetFont(Ict.Common.Printing.eFont)">
            <summary>
            get the font that is associated with the enum value.
            this way we do not need to create a new font each time
            </summary>
            <param name="AFont"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.UpdateBiggestLastUsedFont(Ict.Common.Printing.eFont)">
            <summary>
            update the biggest last used font for the next line feed
            </summary>
            <param name="AFont"></param>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.PrintString(System.String,Ict.Common.Printing.eFont,Ict.Common.Printing.eAlignment)">
             <summary>
             prints into the current line, aligned x position
            
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.PrintString(System.String,Ict.Common.Printing.eFont,System.Single)">
             <summary>
             prints into the current line, absolute x position
            
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.PrintString(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, absolute x position with width and alignment
            </summary>
            <returns>true if something was printed</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.GetFittedText(System.String,Ict.Common.Printing.eFont,System.Single)">
            <summary>
            Check if the text will fit into the given width. If yes, the text will be returned.
            If no, the text will be shortened and a "..." will be added to indicate that some text is missing.
            </summary>
            <param name="ATxt">the original text</param>
            <param name="AFont">the font</param>
            <param name="AWidth">the space available for the text in cm</param>
            <returns>The input text. Either unmodified or shortened.</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.CutTextToLength(System.String,Ict.Common.Printing.eFont,System.Single)">
            <summary>
            Cuts a given text so it will not extend the given width.
            </summary>
            <param name="ATxt">The text to cut</param>
            <param name="AFont">The font used</param>
            <param name="AWidth">The available length for the text in cm.</param>
            <returns>The maximum part of the text that will not extend the width.</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.GetTextLengthThatWillFit(System.String,Ict.Common.Printing.eFont,System.Single)">
            <summary>
            word wrap text, return the number of characters that fit the line width;
            if the first word does not fit the space available, wrap the word in itself
            </summary>
            <param name="ATxt"></param>
            <param name="AFont"></param>
            <param name="AWidth"></param>
            <returns>returns the length of the first word; this is needed if even the first word does not fit</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.PrintStringWrap(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, absolute x position with width and alignment
            this method uses FCurrentXPos and FCurrentYPos to be able to continue a paragraph
            uses FCurrentXPos and FCurrentYPos to know where to start to print, and also sets
            valid values in those member variables
            </summary>
            <returns>true if any text was printed</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.PrintStringAndFits(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
             <summary>
             This function uses the normal DrawString function to print into a given space.
             It will return whether the text did fit that space or not.
            
             </summary>
             <param name="ATxt"></param>
             <param name="AFont"></param>
             <param name="AXPos"></param>
             <param name="AWidth"></param>
             <param name="AAlign"></param>
             <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.GetWidthString(System.String,Ict.Common.Printing.eFont)">
            <summary>
            prints into the current line, into the given column
            </summary>
            <param name="ATxt"></param>
            <param name="AFont"></param>
            <returns>Return the width of the string, if it was printed in one line, using the given Font</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.DrawLine(System.Single,System.Single,Ict.Common.Printing.eLinePosition,Ict.Common.Printing.eFont)">
            <summary>
            Draws a line, either above or below the current text line
            the font is required to get the height of the row
            </summary>
            <param name="AXPos1"></param>
            <param name="AXPos2"></param>
            <param name="ALinePosition"></param>
            <param name="AFont"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.DrawRectangle(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            draw a rectangle
            </summary>
            <param name="APenPixels"></param>
            <param name="AXPos"></param>
            <param name="AYPos"></param>
            <param name="AWidth"></param>
            <param name="AHeight"></param>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.DrawBitmap(System.String,System.Single,System.Single)">
            <summary>
            draw a bitmap at the given position;
            the current position is moved
            </summary>
            <param name="APath"></param>
            <param name="AXPos"></param>
            <param name="AYPos"></param>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.DrawBitmap(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             draw a bitmap at the given position;
             the current position is moved
            
             Either Width or WidthPercentage should be unequals 0, but only one should have a value.
             Same applies to Height
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.LineFeed(Ict.Common.Printing.eFont)">
            <summary>
            Line Feed; increases the current y position by the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.LineFeed">
            <summary>
            Line Feed; increases the current y position by the height of the biggest last used font
            </summary>
            <returns>the new current line</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.LineSpaceFeed(Ict.Common.Printing.eFont)">
            <summary>
            Line Feed, but not full line; increases the current y position by half the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.LineUnFeed(Ict.Common.Printing.eFont)">
            <summary>
            Reverse Line Feed; decreases the current y position by the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.SetPageFooterSpace(System.Int32,Ict.Common.Printing.eFont)">
             <summary>
             Set the space that is required by the page footer.
             ValidYPos will consider this value.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.LineFeedToPageFooter">
             <summary>
             Jump to the position where the page footer starts.
             SetPageFooterSpace is used to define the space reserved for the footer.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.ValidXPos(System.Single)">
             <summary>
             Is the given position still on the page?
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.ValidYPos">
             <summary>
             Is the current line still on the page?
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.SetHasMorePages(System.Boolean)">
             <summary>
             Tell the printer, that there are more pages coming
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.HasMorePages">
            <summary>
            more pages are coming
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.Cm(System.Single)">
             <summary>
             Converts the given value in cm to the currently used measurement unit
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.Point(System.Single)">
             <summary>
             Converts the given value in Point/Pixel to the currently used measurement unit
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.Cm2Twips(System.Single)">
             <summary>
             1440 TWIPS = 1 inch = 2.54 cm
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.Inch2Twips(System.Single)">
             <summary>
             1440 TWIPS = 1 inch = 2.54 cm
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TGfxPrinter.PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            The PrintPage event is raised for each page to be printed.
            </summary>
            <returns>void</returns>
        </member>
        <member name="P:Ict.Common.Printing.TGfxPrinter.Document">
            <summary>the document to print into</summary>
        </member>
        <member name="T:Ict.Common.Printing.TGfxPrinter.ePrinterBehaviour">
            we have some different behaviour when printing the columns of a report and when printing a form letter
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.ePrinterBehaviour.eReport">
            printing the columns of a report, we can make text fit
        </member>
        <member name="F:Ict.Common.Printing.TGfxPrinter.ePrinterBehaviour.eFormLetter">
            printing a form letter, we need to print everything, comma is not a whitespace
        </member>
        <member name="F:Ict.Common.Printing.TPdfPrinter.XFONTSIZE">
            the fonts need to be a little bit bigger so that they have the same size as the GfxPrinter?
        </member>
        <member name="F:Ict.Common.Printing.TPdfPrinter.FXDefaultFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TPdfPrinter.FXDefaultBoldFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TPdfPrinter.FXHeadingFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TPdfPrinter.FXSmallPrintFont">
            todoComment
        </member>
        <member name="F:Ict.Common.Printing.TPdfPrinter.FXBiggestLastUsedFont">
            todoComment
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.#ctor(System.Drawing.Printing.PrintDocument,Ict.Common.Printing.TGfxPrinter.ePrinterBehaviour)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.InitFontsAndPens">
            <summary>
            initialise the fonts and pens.
            this can only happen when the Graphics and GraphicsUnit are known.
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.UpdateBiggestLastUsedFont(Ict.Common.Printing.eFont)">
            <summary>
            update the biggest last used font for the next line feed
            </summary>
            <param name="AFont"></param>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.PrintString(System.String,Ict.Common.Printing.eFont,Ict.Common.Printing.eAlignment)">
             <summary>
             prints into the current line, aligned x position
            
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.PrintString(System.String,Ict.Common.Printing.eFont,System.Single)">
             <summary>
             prints into the current line, absolute x position
            
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.PrintString(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, absolute x position with width and alignment
            </summary>
            <returns>true if something was printed</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.DrawLine(System.Single,System.Single,Ict.Common.Printing.eLinePosition,Ict.Common.Printing.eFont)">
            <summary>
            Draws a line, either above or below the current text line
            the font is required to get the height of the row
            </summary>
            <param name="AXPos1"></param>
            <param name="AXPos2"></param>
            <param name="ALinePosition"></param>
            <param name="AFont"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.DrawRectangle(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            draw a rectangle
            </summary>
            <param name="APenPixels"></param>
            <param name="AXPos"></param>
            <param name="AYPos"></param>
            <param name="AWidth"></param>
            <param name="AHeight"></param>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.DrawBitmap(System.String,System.Single,System.Single)">
            <summary>
            draw a bitmap at the given position;
            the current position is moved
            </summary>
            <param name="APath"></param>
            <param name="AXPos"></param>
            <param name="AYPos"></param>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.DrawBitmap(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             draw a bitmap at the given position;
             the current position is moved
            
             Either Width or WidthPercentage should be unequals 0, but only one should have a value.
             Same applies to Height
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.LineFeed(Ict.Common.Printing.eFont)">
            <summary>
            Line Feed; increases the current y position by the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.LineFeed">
            <summary>
            Line Feed; increases the current y position by the height of the biggest last used font
            </summary>
            <returns>the new current line</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.LineSpaceFeed(Ict.Common.Printing.eFont)">
            <summary>
            Line Feed, but not full line; increases the current y position by half the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.LineUnFeed(Ict.Common.Printing.eFont)">
            <summary>
            Reverse Line Feed; decreases the current y position by the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            print the page, either to PDF or to the screen
            </summary>
            <param name="ASender"></param>
            <param name="AEv"></param>
        </member>
        <member name="M:Ict.Common.Printing.TPdfPrinter.SavePDF(System.String)">
            <summary>
            store a pdf to a file. will call PrintPage automatically
            </summary>
            <param name="AFilename"></param>
        </member>
        <member name="T:Ict.Common.Printing.TPrinterHtml">
            <summary>
            a class that renders HTML, ie. prints HTML to Screen or PDF
            </summary>
        </member>
        <member name="T:Ict.Common.Printing.TPrinterLayout">
            A helper class, to enable the GfxPrinter to call the functions that will be
            provided by TReportPrinter, which is derived from this class.
        </member>
        <member name="M:Ict.Common.Printing.TPrinterLayout.StartPrintDocument">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterLayout.PrintPageHeader">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterLayout.PrintPageBody">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterLayout.PrintPageFooter">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterLayout.RenderContent(System.Single,System.Single,System.Xml.XmlNode@)">
            <summary>
            this should be overwritten e.g. by a function that knows to interpret HTML etc
            </summary>
            <param name="AXPos">the X position to start the content</param>
            <param name="AWidthAvailable">AWidthAvailable</param>
            <param name="content"></param>
            <returns>s the height of the content</returns>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterHtml.FPrinter">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterHtml.FHtmlDoc">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterHtml.FCurrentNodeNextPage">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterHtml.FPath">
            <summary>path for embedded images</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterHtml.FHasMorePages">
            local version used for preprinting HTML to discover total number of pages
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.#ctor(System.String,System.String,Ict.Common.Printing.TPrinter)">
            <summary>
            constructor
            </summary>
            <param name="AHtmlDocument"></param>
            <param name="APath">is required for embedded images</param>
            <param name="APrinter"></param>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.#ctor(System.String,Ict.Common.Printing.TPrinter)">
            <summary>
            constructor
            </summary>
            <param name="AHtmlFile"></param>
            <param name="APrinter"></param>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.ParseHtml(System.String)">
            try to parse HTML document
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.StartPrintDocument">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.GetDocumentNode(System.Int32)">
            <summary>
            get the xmlnode for the given page
            </summary>
            <param name="ADocumentNr">starting with 1</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.PrintPageHeader">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.PrintPageBody">
            <summary>
            print one page of the HTML, one body tag per page???
            TODO: or until div with page break?
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.PrintPageFooter">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.HtmlToText(System.String)">
            <summary>
            todoComment
            </summary>
            <param name="sOrig"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.Pixel2Inch(System.Int32)">
            <summary>
            the px value from an HTML document is converted to an inch value for printing
            </summary>
            <param name="APixel"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.RenderContent(System.Single,System.Single,System.Xml.XmlNode@)">
            <summary>
            interpret HTML code
            </summary>
            <param name="AXPos">the X position to start the content</param>
            <param name="AWidthAvailable">AWidthAvailable</param>
            <param name="curNode"></param>
            <returns>the height of the content</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.PrintTable(System.Single,System.Single,System.Xml.XmlNode@)">
            <summary>
            print an html table
            </summary>
            <returns>the height of the table</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.GetTableRow(System.String,System.String,System.String@)">
            <summary>
            find the &lt;tr&gt; tag that contains the ASearchFor, and return the full tr tag and contents
            </summary>
            <param name="ATemplate"></param>
            <param name="ASearchFor"></param>
            <param name="ATemplateRow">template for one row</param>
            <returns>modified template, replace tr tag with #ROWTEMPLATE</returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.GetTitle(System.String)">
            <summary>
            returns the title of the html document
            </summary>
            <param name="AHtmlMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.RemoveDivWithName(System.String,System.String)">
            <summary>
            remove a div with the given name
            </summary>
            <param name="AHtmlMessage"></param>
            <param name="ADivName"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.RemoveDivWithClass(System.String,System.String)">
            remove all divs of the given class
        </member>
        <member name="M:Ict.Common.Printing.TPrinterHtml.RemoveElement(System.String,System.String,System.String,System.String,System.String@)">
            remove all elments with given name or class
        </member>
        <member name="T:Ict.Common.Printing.eOrientation">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eOrientation.eLandscape">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eOrientation.ePortrait">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Common.Printing.eMarginType">
            <summary>which margins to use when printing</summary>
        </member>
        <member name="F:Ict.Common.Printing.eMarginType.eDefaultMargins">
            <summary>use the default margins of the printer</summary>
        </member>
        <member name="F:Ict.Common.Printing.eMarginType.ePrintableArea">
            <summary>use the full printable area. the margins are managed by the rendering method, eg HTML renderer</summary>
        </member>
        <member name="T:Ict.Common.Printing.eAlignment">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eAlignment.eDefault">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eAlignment.eCenter">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eAlignment.eLeft">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eAlignment.eRight">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Common.Printing.eLinePosition">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eLinePosition.eAbove">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eLinePosition.eBelow">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Common.Printing.ePrintingMode">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.ePrintingMode.eDoPrint">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.ePrintingMode.eDoSimulate">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Common.Printing.eFont">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eFont.eDefaultFont">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eFont.eDefaultBoldFont">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eFont.eHeadingFont">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eFont.eSmallPrintFont">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Common.Printing.eStageElementPrinting">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eStageElementPrinting.eAnything">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eStageElementPrinting.eHeader">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eStageElementPrinting.eDetails">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eStageElementPrinting.eFooter">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.eStageElementPrinting.eFinished">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Common.Printing.TPrinterState">
            definition for current state of printer; useful with the stack
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FPrintingMode">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FCurrentPageNr">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FCurrentDocumentNr">
            <summary>several documents are printed from one html file with different body elements</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FCurrentXPos">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FCurrentYPos">
            <summary>current y Position on page, in current display unit</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FCurrentFont">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FCurrentRelativeFontSize">
            relative number; 0 is normal size
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FCurrentAlignment">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TPrinterState.FNoWrap">
            avoid wrapping, cut off text if it does not fit
        </member>
        <member name="M:Ict.Common.Printing.TPrinterState.Copy">
            create a copy of this state
        </member>
        <member name="T:Ict.Common.Printing.TTableCellGfx">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTableCellGfx.content">
            <summary>can be html code</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTableCellGfx.bold">
            needed for table headers (th)
        </member>
        <member name="F:Ict.Common.Printing.TTableCellGfx.nowrap">
            avoid wrapping in cell
        </member>
        <member name="F:Ict.Common.Printing.TTableCellGfx.align">
            align the content of the cell
        </member>
        <member name="F:Ict.Common.Printing.TTableCellGfx.borderWidth">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTableCellGfx.contentHeight">
            <summary>this height has been calculated while printing the content</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTableCellGfx.contentWidth">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Common.Printing.TTableRowGfx">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTableRowGfx.cells">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTableRowGfx.contentHeight">
            <summary>todoComment</summary>
        </member>
        <member name="T:Ict.Common.Printing.TTxtPrinter">
             <summary>
             The TTxtPrinter class allows to freely position text in a file.
            
             The printing is done in memory, and in the end the result is written to a file.
             That way the centering and aligning is possible,
             and jumping between lines is possible as well.
            
             @todo addline, which tests if page break is necessary
                   callback function printPageHeader(pagenumber: Integer);
             </summary>
        </member>
        <member name="F:Ict.Common.Printing.TTxtPrinter.NumberOfCharactersPerLineLandscape">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTxtPrinter.NumberOfCharactersPerLinePortrait">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTxtPrinter.DEFAULT_LENGTH_LINE">
            <summary>todoComment</summary>
        </member>
        <member name="F:Ict.Common.Printing.TTxtPrinter.FACTOR_CM_2_LETTER">
            <summary>todoComment</summary>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.#ctor">
             <summary>
             constructor
            
             </summary>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.Init(Ict.Common.Printing.eOrientation,Ict.Common.Printing.TPrinterLayout,Ict.Common.Printing.eMarginType)">
            <summary>
            set the orientation of the page
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.LineFeed">
            <summary>
            Line Feed; increases the current y position by one
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.LineFeed(Ict.Common.Printing.eFont)">
            <summary>
            Line Feed; increases the current y position by one
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.LineSpaceFeed(Ict.Common.Printing.eFont)">
            <summary>
            Line Feed, but not full line; increases the current y position by half the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.LineUnFeed(Ict.Common.Printing.eFont)">
            <summary>
            Reverse Line Feed; decreases the current y position by the height of the given font
            </summary>
            <returns>the new current line
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.ValidXPos(System.Single)">
             <summary>
             Is the given position still on the page?
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.ValidYPos">
             <summary>
             Is the current line still on the page?
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.LineFeedToPageFooter">
             <summary>
             Jump to the position where the page footer starts.
             SetPageFooterSpace is used to define the space reserved for the footer.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.SetPageFooterSpace(System.Int32,Ict.Common.Printing.eFont)">
             <summary>
             Set the space that is required by the page footer.
             ValidYPos will consider this value.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.SetHasMorePages(System.Boolean)">
             <summary>
             Tell the printer, that there are more pages coming
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.HasMorePages">
            <summary>
            not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.Cm(System.Single)">
             <summary>
             Converts the given value in cm to the currently used measurement unit (here only letters)
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.GetLine(System.Int32)">
             <summary>
             retrieve a complete line from the text in memory
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.SetLine(System.Int32,System.String)">
             <summary>
             write a complete line; overwrites any existing line
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.InsertLineForMarkingLine(System.Single)">
             <summary>
             Insert a line that can be used for lines, ie. ======
            
             If a line has already been inserted in that position, don't do anything.
             Otherwise move the text down, and create a new empty line in the given place AYPos
             </summary>
             <returns>true if a line has been inserted
             </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.Print(System.Int32,System.Int32,System.String)">
             <summary>
             write text to a specified position
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.CalculateXPos(System.Single,System.Single,System.String,Ict.Common.Printing.eAlignment)">
            <summary>
            Calculate the x position for a text, considering the width of the space and the width of the text, and the alignment
            </summary>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.PrintString(System.String,Ict.Common.Printing.eFont,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, aligned x position
            </summary>
            <returns>true if something was printed
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.PrintString(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, absolute x position with width and alignment
            </summary>
            <returns>true if something was printed
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.PrintString(System.String,Ict.Common.Printing.eFont,System.Single)">
            <summary>
            prints into the current line, absolute x position
            </summary>
            <returns>true if something was printed
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.PrintStringWrap(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            prints into the current line, absolute x position with width and alignment
            this method uses FCurrentXPos and FCurrentYPos to be able to continue a paragraph
            uses FCurrentXPos and FCurrentYPos to know where to start to print, and also sets
            valid values in those member variables
            </summary>
            <returns>s bool true if any text was printed</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.GetFittedText(System.String,Ict.Common.Printing.eFont,System.Single)">
            <summary>
            Check if the text will fit into the given width. If yes, the text will be returned.
            If no, the text will be shortened and a "..." will be added to indicate that some text is missing.
            </summary>
            <param name="ATxt">the original text</param>
            <param name="AFont">the font</param>
            <param name="AWidth">the space available for the text in cm</param>
            <returns>The input text. Either unmodified or shortened.</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.CutTextToLength(System.String,Ict.Common.Printing.eFont,System.Single)">
            <summary>
            Cuts a given text so it will not extend the given width.
            </summary>
            <param name="ATxt">The text to cut</param>
            <param name="AFont">The font used</param>
            <param name="AWidth">The available length for the text in cm.</param>
            <returns>The maximum part of the text that will not extend the width.</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.GetTextLengthThatWillFit(System.String,Ict.Common.Printing.eFont,System.Single,System.Int32@)">
            <summary>
            word wrap text, return the number of characters that fit the line width
            </summary>
            <param name="ATxt"></param>
            <param name="AFont"></param>
            <param name="AWidth"></param>
            <param name="firstWordLength">returns the length of the first word; this is needed if even the first word does not fit</param>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.PrintStringAndFits(System.String,Ict.Common.Printing.eFont,System.Single,System.Single,Ict.Common.Printing.eAlignment)">
            <summary>
            This function uses the normal PrintString function to print into a given space.
            </summary>
            <returns>whether the text did fit that space or not.
            </returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.GetWidthString(System.String,Ict.Common.Printing.eFont)">
             <summary>
             Return the width of the string, if it was printed in one line, using the given Font
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.DrawLine(System.Single,System.Single,Ict.Common.Printing.eLinePosition,Ict.Common.Printing.eFont)">
             <summary>
             Draws a line, either above or below the current text line
             the font is required to get the height of the row
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.FinishText">
             <summary>
             This will cut the long separator lines, e.g. ----
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.WriteToFile(System.String)">
             <summary>
             finally write the text from memory into a file
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Printing.TTxtPrinter.GetArrayOfString">
            <summary>
            copies the generated report into an array of strings.
            </summary>
            <returns>the array of strings
            </returns>
        </member>
    </members>
</doc>
