<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Petra.Shared</name>
    </assembly>
    <members>
        <member name="T:Ict.Petra.Shared.TDelegateSendClientTask">
            <summary>
            This Delegate is used for sending a ClientTask to all other Clients to tell
            them to reload a certain Cacheable DataTable (used only if the
            TCacheableTablesManager is instantiated by PetraServer, but not if it is
            instantiated by the PetraClient).
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.TCacheableTablesManager">
             <summary>
             ------------------------------------------------------------------------------
             Contains methods that allow managing a Cache that can contain arbitrary
             DataTables (typed and untyped DataTables).
            
             This Class is an implementation of a Cache Manager. It gets used by *both*
             PetraServer and PetraClient to manage a Cache of DataTables (that would
             usually be lookup tables for ComboBoxes, etc.).
             When it is used by the PetraServer, it is instantiated only once in the main
             AppDomain of the PetraServer. Each time a Client requests a Cacheable
             DataTable from the PetraServer, a cross-AppDomain call from the Client's
             AppDomain to methods of the Object of this Class that is instantiated in the
             main AppDomain is made.
             When it is used by the PetraClient, it is instantiated only once by the
             TDataCache Class in Ict.Petra.Client.App.Core.Cache, which is the only Class
             that programmers need to use on the Client side.
            
             @comment This class is thread save. It protects *two* resources,
             UDataCacheDataSet and UDataCacheContentsDT with the same ReaderWriterLock
             (not with a Monitor - for performance). The DataTables that are handed out
             of TCacheableTablesManager are *copies* of the DataTables in the Cache.
             This is done to get around multi-threading reading/writing issues that
             might occur when the caller performs read or write operations on the
             DataTable - which are out of control of this class.
            
             @comment Several of the Methods are declared as 'virtual'. This is necessary
             for all Methods that are called cross-AppDomain. Explanation for this:
             mono can't cope with method calls into different AppDomains if these
             methods are not marked virtual (see answer of Lluis Sanchez for the filed
             bug #76752 in mono's bugzilla). Apparently, C# code automatically marks
             such methods virtual when it is JITted, but Delphi.NET code doesn't do this.
            
             @TODO Test some cache management functions (enabled by setting Properties
             MaxCacheSize and MaxTimeInCache) - the implementation of adhering to these
             settings is probably not quite finished yet (due to time constraints).
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TCacheableTablesManager.UDataCacheDataSet">
            <summary>Holds all cached tables (typed/untyped DataTable), plus one Typed DataTable for the 'Table of Contents' of the Cache</summary>
        </member>
        <member name="F:Ict.Petra.Shared.TCacheableTablesManager.UDataCacheContentsDT">
            <summary>'Table of Contents' of the Cache, used for managing the state of cached  DataTables</summary>
        </member>
        <member name="F:Ict.Petra.Shared.TCacheableTablesManager.UMaxCacheSize">
            <summary>Maximum size that the Cache shouldn't exceed</summary>
        </member>
        <member name="F:Ict.Petra.Shared.TCacheableTablesManager.UMaxTimeInCache">
            <summary>Maximum time that a DataTable in the Cache should be cached</summary>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.InitializeUnit">
            <summary>
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TCacheableTablesManager.FDelegateSendClientTask">
            <summary>Reference to a Delegate that is used for sending a ClientTask to all other Clients</summary>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.#ctor(Ict.Petra.Shared.TDelegateSendClientTask)">
             <summary>
             Constructor
            
             </summary>
             <param name="ADelegateSendClientTask">Delegate that is used for sending a ClientTask
             to all other Clients to tell them to reload a certain Cacheable DataTable
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.InitializeLifetimeService">
             <summary>
             Ensures that TCacheableTablesManager exists until this AppDomain is unloaded.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.Get_CachedTablesCount">
            <summary>
            Property accessor
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.Get_CacheSize">
            <summary>
            Property accessor
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.Get_MaxCacheSize">
            <summary>
            Property accessor
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.Set_MaxCacheSize(System.Int32)">
            <summary>
            Property accessor
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.Get_MaxTimeInCache">
            <summary>
            Property accessor
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.Set_MaxTimeInCache(System.TimeSpan)">
            <summary>
            Property accessor
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddCachedTable(System.Data.DataTable)">
             <summary>
             Adds the passed in DataTable to the Cache.
            
             </summary>
             <param name="ACacheableTable">DataTable that should be added to the Cache</param>
             <returns>HashCode of the DataTable
             </returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddCachedTable(System.String,System.Data.DataTable)">
             <summary>
             Adds the passed in DataTable to the Cache.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable. This is the name
             by which the DataTable will be identified in the Cache. Also, the TableName
             property of the DataTable is set to this</param>
             <param name="ACacheableTable">DataTable that should be added to the Cache</param>
             <returns>HashCode of the DataTable
             </returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.GetCachedDataTable(System.String,System.Type@)">
             <summary>
             Returns a DataTable from the Cache.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <param name="AType"></param>
             <returns>DataTable from the Cache</returns>
             <exception cref="T:Ict.Petra.Shared.ECacheableTablesMgrTableNotUpToDateException">if the Cacheable
             DataTable isn't in an up-to-date state. This means it needs to be retrieved
             anew before it can be used
             </exception>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.GetCachedDataTableHash(System.String)">
             <summary>
             Returns the Hash Code of a DataTable in the Cache.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <returns>Hash Code of the DataTable in the Cache</returns>
             <exception cref="T:Ict.Petra.Shared.ECacheableTablesMgrException">If the DataTable doesn't exist in the
             Cache (=has no entry in the 'Table of Contents' of the Cache)
             </exception>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.GetCachedDataTableSize(System.String)">
             <summary>
             Returns the TableSize of a DataTable in the Cache.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <returns>TableSize of the DataTable in the Cache. This size (in bytes) is an
             approximated size since it isn't possible to get the size in memory of a
             DataTable object. It is the String Length of all columns' values of all
             DataRows</returns>
             <exception cref="T:Ict.Petra.Shared.ECacheableTablesMgrException">if the DataTable doesn't exist in the
             Cache
             </exception>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.GetCachedDataTableType(System.String)">
             <summary>
             Returns the System.Type of a DataTable in the Cache.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <returns>Type of the DataTable in the Cache. This is only useful for Typed
             DataTables</returns>
             <exception cref="T:Ict.Petra.Shared.ECacheableTablesMgrException">if the DataTable doesn't exist in the
             Cache
             </exception>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddOrRefreshCachedTable(System.Data.DataTable,System.Int32)">
             <summary>
             Adds the passed in DataTable to the Cache. If it is already there, the
             DataTable in the Cache is replaced with the one that is passed in.
            
             </summary>
             <param name="ACacheableTable">DataTable that should be added to the Cache/merged
             with an already existing DataTable in the Cache with the same TableName</param>
             <param name="AClientID">The ClientID that should be exempt from getting a ClientTask
             queued for updating of the Cached DataTable (only if a Merge operation is
             done). This would be the ClientID of the Client that performed the call
             to this procedure
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddOrRefreshCachedTable(System.String,System.Data.DataTable,System.Int32)">
             <summary>
             Adds the passed in DataTable to the Cache. If it is already there, the
             DataTable in the Cache is replaced with the one that is passed in.
            
             </summary>
             <param name="ACacheableTableName">DataTable that should be added to the Cache/merged</param>
             <param name="ACacheableTable">DataTable that should be added to the Cache/merged
             with an already existing DataTable in the Cache with the same TableName</param>
             <param name="AClientID">The ClientID that should be exempt from getting a ClientTask
             queued for updating of the Cached DataTable (only if a Merge operation is
             done). This would be the ClientID of the Client that performed the call
             to this procedure
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.RefreshCachedTable(System.Data.DataTable,System.Int32)">
             <summary>
             Replaces a DataTable in the Cache with the one that is passed in.
            
             </summary>
             <param name="ACacheableTable">DataTable that should be added to the Cache/merged
             with an already existing DataTable in the Cache with the same TableName</param>
             <param name="AClientID">The ClientID that should be exempt from getting a ClientTask
             queued for updating of the Cached DataTable (only if a Merge operation is
             done). This would be the ClientID of the Client that performed the call
             to this procedure
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.RefreshCachedTable(System.String,System.Data.DataTable,System.Int32)">
             <summary>
             Replaces a DataTable in the Cache with the one that is passed in.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <param name="ACacheableTable">DataTable that should be added to the Cache/merged
             with an already existing DataTable in the Cache with the same TableName</param>
             <param name="AClientID">The ClientID that should be exempt from getting a ClientTask
             queued for updating of the Cached DataTable (only if a Merge operation is
             done). This would be the ClientID of the Client that performed the call
             to this procedure
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddOrMergeCachedTable(System.Data.DataTable,System.Int32)">
             <summary>
             Adds the passed in DataTable to the Cache. If it is already there, a Merge
             operation is done.
            
             </summary>
             <param name="ACacheableTable">DataTable that should be added to the Cache/merged
             with an already existing DataTable in the Cache with the same TableName</param>
             <param name="AClientID">The ClientID that should be exempt from getting a ClientTask
             queued for updating of the Cached DataTable (only if a Merge operation is
             done). This would be the ClientID of the Client that performed the call
             to this procedure
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddOrMergeCachedTable(System.Data.DataTable,System.Int32,System.Object)">
             <summary>
             Adds the passed in DataTable to the Cache. If it is already there, a Merge
             operation is done.
            
             </summary>
             <param name="ACacheableTable">DataTable that should be added to the Cache/merged
             with an already existing DataTable in the Cache with the same TableName</param>
             <param name="AClientID">The ClientID that should be exempt from getting a ClientTask
             queued for updating of the Cached DataTable (only if a Merge operation is
             done). This would be the ClientID of the Client that performed the call
             to this procedure</param>
             <param name="AFilterCriteria">Filter Criteria (eg. Ledger Number for the Finance
             Module) that will be needed by the Clients that receive the ClientTask to
             be able to request the update of the filtered Cached DataTable
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddOrMergeCachedTable(System.String,System.Data.DataTable,System.Int32)">
             <summary>
             Adds the passed in DataTable to the Cache. If it is already there, a Merge
             operation is done.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <param name="ACacheableTable">DataTable that should be added to the Cache/merged
             with an already existing DataTable in the Cache with the same TableName</param>
             <param name="AClientID">The ClientID that should be exempt from getting a ClientTask
             queued for updating of the Cached DataTable (only if a Merge operation is
             done). This would be the ClientID of the Client that performed the call
             to this procedure
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddOrMergeCachedTable(System.String,System.Data.DataTable,System.Int32,System.Object)">
             <summary>
             Adds the passed in DataTable to the Cache. If it is already there, a Merge
             operation is done.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <param name="ACacheableTable">DataTable that should be added to the Cache/merged
             with an already existing DataTable in the Cache with the same TableName</param>
             <param name="AClientID">The ClientID that should be exempt from getting a ClientTask
             queued for updating of the Cached DataTable (only if a Merge operation is
             done). This would be the ClientID of the Client that performed the call
             to this procedure</param>
             <param name="AFilterCriteria">Filter Criteria (eg. Ledger Number for the Finance
             Module) that will be needed by the Clients that receive the ClientTask to
             be able to request the update of the filtered Cached DataTable
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.IsTableCached(System.String)">
             <summary>
             Returns true if the DataTable with the specified TableName is in the
             DataCache and does not need refreshing.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <returns>true if the DataTable with the specified TableName is in the
             DataCache and is uptodate, otherwise false
             </returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.MarkCachedTableNeedsRefreshing(System.String)">
             <summary>
             Marks a DataTable in the Cache to be no longer up-to-date (=out of sync
             with the data that was orginally placed in the DataTable).
            
             This will lead to ECacheableTablesMgrTableNotUpToDateException being thrown
             when GetCachedDataTable is called for this DataTable. This tells the caller
             of GetCachedDataTable that the DataTable needs to be retrieved anew before
             it can be used.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <returns>void</returns>
             <exception cref="T:Ict.Petra.Shared.ECacheableTablesMgrException">if the DataTable doesn't exist in the
             Cache
             </exception>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.AddCachedTableInternal(System.String,System.Data.DataTable,System.Boolean)">
             <summary>
             Adds/replaces the passed in DataTable to/in the Cache DataSet.
            
             A HashCode and a TableSize are calculated and an entry in the 'Table of
             Contents' DataTable of the Cache is made/updated.
            
             </summary>
             <param name="ACacheableTableName">Name of the Cacheable DataTable. This is the name
             by which the DataTable will be identified in the Cache. Also, the TableName
             property of the DataTable is set to this</param>
             <param name="ACacheableTable">DataTable that should be added to/replaced in the
             Cache</param>
             <param name="AReplaceExistingTable">If true, the function replaces a DataTable with
             the same name instead of adding it</param>
             <returns>HashCode of the DataTable</returns>
             <exception cref="T:Ict.Petra.Shared.ECacheableTablesMgrException">If ACacheableTable is nil; if
             ACacheableTableName is an empty String (''); if the DataTable already
             exists in the Cache and AReplaceExistingTable is false; if the DataTable
             doesn't exist in the Cache and AReplaceExistingTable is true
             </exception>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.CacheSizeManagement">
             <summary>
             Manages the size (=memory consumption) of the Cache.
            
             Calls ShrinkCacheToMaxSize if MaxCacheSize Property is set and
             RemoveOldestCachedTables if MaxTimeInCache Property is set
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.MarkChangedCacheTableSaved(System.String)">
             <summary>
             Marks a DataTable as being saved to the external source of the data and
             having no changes to it.
            
             This will lead to ECacheableTablesMgrTableNotUpToDateException beeing thrown
             when GetCachedDataTable is called for this DataTable. This tells the caller
             of GetCachedDataTable that the DataTable needs to be retrieved anew before
             it can be used.
            
             </summary>
             <param name="ACacheableTableName">Name of the DataTable</param>
             <returns>void</returns>
             <exception cref="T:Ict.Petra.Shared.ECacheableTablesMgrException">if the DataTable doesn't exist in the
             Cache
             </exception>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.GetContentsEntry(System.String)">
             <summary>
             Returns the 'Table of Contents' entry for the specified Cacheable DataTable.
            
             </summary>
             <param name="ACacheableTableName">Name of the Cacheable DataTable</param>
             <returns>'Table of Contents' row of the Cacheable DataTable
             </returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.RemoveCachedTable(System.String,System.Boolean)">
             <summary>
             Removes the specified DataTable from the Cache.
            
             </summary>
             <param name="ACacheableTableName">Name of the Cacheable DataTable.</param>
             <param name="ARemoveContentsEntry">If true, the DataTable gets removed and its entry
             in the Contents Table as well. If false, the Contents Table entry is not
             removed (this is needed only in certain circumstances and should not be done
             normally).</param>
             <returns>void</returns>
             <exception cref="T:Ict.Petra.Shared.ECacheableTablesMgrException">If the DataTable doesn't exist in the
             Cache or has no entry in the 'Table of Contents' of the Cache
             </exception>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.RemoveOldestCachedTables">
             <summary>
             Reduces the size (=memory consumption) of the Cache by removing DataTables
             that are longer in the Cache than MaxTimeInCache specifies.
            
             @TODO Needs testing.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.ShrinkCacheToMaxSize">
             <summary>
             Reduces the size (=memory consumption) of the Cache if the Cache size exceeds
             the size that is set with the MaxCacheSize Property by removing the largest
             DataTables until the size of the Cache is less than MaxCacheSize.
            
             @TODO Needs testing.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.UpdateCacheOnClients(System.String,System.Int32)">
             <summary>
             Queues a ClientTask for all other Clients to tell them to reload a certain
             Cacheable DataTable.
            
             </summary>
             <param name="ACacheableTableName">Name of the Cacheable DataTable.</param>
             <param name="AClientID">The ClientID that should be exempt from getting the
             ClientTask queued (this would be the ClientID of the Client that performed
             the update request)
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesManager.UpdateCacheOnClients(System.String,System.Int32,System.Object)">
             <summary>
             Queues a ClientTask for all other Clients to tell them to reload a certain
             Cacheable DataTable.
            
             </summary>
             <param name="ACacheableTableName">Name of the Cacheable DataTable</param>
             <param name="AClientID">The ClientID that should be exempt from getting the
             ClientTask queued (this would be the ClientID of the Client that performed
             the update request)</param>
             <param name="AFilterCriteria">Filter Criteria (eg. Ledger Number for the Finance
             Module) that will be needed by the Clients that receive the ClientTask to
             be able to request the update of the filtered Cached DataTable
             </param>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Petra.Shared.TCacheableTablesManager.CacheSize">
            <summary>Current size of the data in the Cache</summary>
        </member>
        <member name="P:Ict.Petra.Shared.TCacheableTablesManager.CachedTablesCount">
            <summary>Number of DataTables in the Cache</summary>
        </member>
        <member name="P:Ict.Petra.Shared.TCacheableTablesManager.MaxCacheSize">
            <summary>Maximum size that the Cache shouldn't exceed</summary>
        </member>
        <member name="P:Ict.Petra.Shared.TCacheableTablesManager.MaxTimeInCache">
            <summary>Maximum time that a DataTable in the Cache should be cached</summary>
        </member>
        <member name="T:Ict.Petra.Shared.TCacheableTablesLoader">
             <summary>
             The TCacheableTablesLoader class is designed to get base.by a Class that
             will be a Cache Manager (who is responsible for the actual loading and saving
             of the DataTables).
             It contains only a helper function that is used by every Cache Manager.
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TCacheableTablesLoader.FCacheableTablesManager">
            <summary>Holds reference to an instance of TCacheableTablesManager</summary>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesLoader.ResultingCachedDataTable(System.String,System.String,System.Type@)">
             <summary>
             Returns a DataTable from the Cache if the HashCode of the DataTable in the
             Cache doesn't fit the HashCode that is passed in, otherwise it returns nil.
            
             </summary>
             <param name="ATableName">Name of the DataTable</param>
             <param name="AHashCode">HashCode that should be compared against the HashCode of
             the DataTable in the Cache</param>
             <param name="AType">Type of the DataTable in the Cache. This is only useful for Typed
             DataTables</param>
             <returns>DataTable from the Cache if the HashCode of the DataTable in the
             Cache doesn't fit the HashCode that is passed in, otherwise nil
             </returns>
        </member>
        <member name="M:Ict.Petra.Shared.TCacheableTablesLoader.ResultingCachedDataTable(System.String,System.String,System.Data.DataView,System.Type@)">
             <summary>
             Returns a DataTable from the Cache if the HashCode of the DataView of the
             DataTable in the Cache doesn't fit the HashCode that is passed in, otherwise
             it returns nil.
            
             </summary>
             <param name="ATableName">Name of the DataTable</param>
             <param name="AHashCode">HashCode that should be compared against the HashCode of
             the DataView of the DataTable in the Cache</param>
             <param name="ACacheableTableDV">DataView for which HashCode and TableSize should be
             calculated</param>
             <param name="AType">Type of the DataTable in the Cache. This is only useful for Typed
             DataTables</param>
             <returns>DataTable from the Cache if the HHashCode of the DataView of the
             DataTable in the Cache doesn't fit the HashCode that is passed in,
             otherwise nil
             </returns>
        </member>
        <member name="P:Ict.Petra.Shared.TCacheableTablesLoader.CacheableTablesManager">
            <summary>Used for passing in an instance of TCacheableTablesManager</summary>
        </member>
        <member name="T:Ict.Petra.Shared.ECacheableTablesMgrException">
            <summary>
            This Exception is thrown on several occasions by TCacheableTablesManager.
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.ECacheableTablesMgrException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.ECacheableTablesMgrException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.ECacheableTablesMgrException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.ECacheableTablesMgrException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.ECacheableTablesMgrTableNotUpToDateException">
            <summary>
            This Exception is thrown by GetCachedDataTable if the Cacheable DataTable
            isn't in an up-to-date state. This means it needs to be retrieved anew before
            it can be used.
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.ECacheableTablesMgrTableNotUpToDateException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.ECacheableTablesMgrTableNotUpToDateException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.ECacheableTablesMgrTableNotUpToDateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.ECacheableTablesMgrTableNotUpToDateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.TClientTasksManager">
             <summary>
             Handles Server-to-Client messaging.
            
             Tasks (Messages) can be added. These get queued until the Client makes a
             KeepAlive call, whereupon the new Task(s) are returned to the Client. These
             Tasks get archived in memory on the Server side (for later use, eg. in a
             workflow scenario).
            
             @todo Not thread save yet!
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TClientTasksManager.GCLIENTTASKPARAMETER_SEPARATOR">
            <summary>Used as a 'separator character' when there is a need to concatenate values in a String.</summary>
        </member>
        <member name="F:Ict.Petra.Shared.TClientTasksManager.FClientTasksNewDataTable">
            <summary>DataTable holding added Tasks.</summary>
        </member>
        <member name="F:Ict.Petra.Shared.TClientTasksManager.FClientTasksHistoryDataTable">
            <summary>DataTable holding Tasks that have been fetched by the Client.</summary>
        </member>
        <member name="M:Ict.Petra.Shared.TClientTasksManager.#ctor">
             <summary>
             Initialises the DataTable that hold new and archived tasks (messages).
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TClientTasksManager.Get_ClientTasksNewDataTableEmpty">
             <summary>
             Property accessor. Gets called by KeepAlive to inquire if there are Tasks
             that need to be passed on to the Client.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TClientTasksManager.ClientTaskAdd(System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Int16)">
             <summary>
             Adds a Client Task.
            
             </summary>
             <param name="ATaskGroup">Task Group (eg. USERMESSAGE, CACHEREFRESH)</param>
             <param name="ATaskCode">Task Code (eg. User message text, Cache table to refresh)</param>
             <param name="ATaskParameter1">Task Parameter1 (currently ignored on Client side)</param>
             <param name="ATaskParameter2">Task Parameter2 (currently ignored on Client side)</param>
             <param name="ATaskParameter3">Task Parameter3 (currently ignored on Client side)</param>
             <param name="ATaskParameter4">Task Parameter4 (currently ignored on Client side)</param>
             <param name="ATaskPriority">Task Priority (currently ignored on Client side)
             @result TaskID
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TClientTasksManager.ClientTaskStatus(System.Int64)">
             <summary>
             Returns the current Status of a Task.
            
             </summary>
             <param name="ATaskID">Task ID
             </param>
             <returns>void</returns>
        </member>
        <member name="M:Ict.Petra.Shared.TClientTasksManager.Get_ClientTasksNewDataTable">
             <summary>
             Property accessor. Gets called by KeepAlive to get the Tasks that need to be
             passed on to the Client.
             Automatically moves these Tasks to the archive DataTable and sets their
             status from 'New' to 'Fetched'.
            
             </summary>
             <returns>void</returns>
        </member>
        <member name="P:Ict.Petra.Shared.TClientTasksManager.ClientTasksNewDataTableEmpty">
             <summary>
             Gets called by KeepAlive to inquire if there are Tasks
             that need to be passed on to the Client.
            
             </summary>
        </member>
        <member name="P:Ict.Petra.Shared.TClientTasksManager.ClientTasksNewDataTable">
             <summary>
             Gets called by KeepAlive to get the Tasks that need to be
             passed on to the Client.
             Automatically moves these Tasks to the archive DataTable and sets their
             status from 'New' to 'Fetched'.
            
             </summary>
        </member>
        <member name="T:Ict.Petra.Shared.TConfigurableMBRObject">
            <summary>
            Allows remotable objects that are derived from it (instead of MarshalByRefObject) to make their lifetime configurable via the application's config file.
            see also the book 'Advanced .NET Remoting' (Chapter 7, page 193)
            </summary>
            <example>
            &lt;add key="Ict.Petra.Server.MPartner.Partner.UIConnectors.TPartnerEditUIConnector_Lifetime" value="4000" /&gt;
            This sets the lifetime of this object to four seconds.
            </example>
        </member>
        <member name="M:Ict.Petra.Shared.TConfigurableMBRObject.InitializeLifetimeService">
            <summary>
            Overrides the InitializeLifetimeService function of objects that would normally derive from MarshalByRefObject (such objects must not have a InitializeLifetimeService function then)
            </summary>
            <returns>void</returns>
        </member>
        <member name="T:Ict.Petra.Shared.SharedConstants">
            <summary>
            constants that are used all over the place
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRA_REGISTRY_MAIN_KEY">
            <summary>Registry Keys for Petra</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRA_REGISTRY_USERS_KEY">
            <summary>Registry Keys for Petra</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRA_REGISTRY_POSITIONS_KEY">
            <summary>Registry Keys for Petra</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_CONFERENCE">
            <summary>Petra Modules Conference Module</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_DEVUSER">
            <summary>Financial Development User Level Access</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_DEVADMIN">
            <summary>Financial Development Administrative Access</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_FINEXRATE">
            <summary>Finance Exchange Rates</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_FINANCE1">
            <summary>Finance  Basic User</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_FINANCE2">
            <summary>Finance  Intermediate User</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_FINANCE3">
            <summary>Finance  Advanced User</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_PERSONNEL">
            <summary>Personnel Module</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_PTNRADMIN">
            <summary>Partner Administrative Access</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_PTNRUSER">
            <summary>Partner User Level Access</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAMODULE_SYSADMIN">
            <summary>System Manager</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_CONFUSER">
            <summary>Petra Groups Conference User</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_DEVUSER">
            <summary>Development User</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_FINANCE1">
            <summary>Basic Finance</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_FINANCE2">
            <summary>Intermediate Finance</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_FINANCE3">
            <summary>Advanced Finance</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_GUEST">
            <summary>Petra Read Only Access</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_PERSADMIN">
            <summary>Personnel Administrator</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_PERSUSER">
            <summary>Basic Personnel Access</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_PERSVIEW">
            <summary>Personnel View Mode</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_PTNRADMIN">
            <summary>Partner Administrator</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_PTNRUSER">
            <summary>Partner User</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_SYSADMIN">
            <summary>System Administrator</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_USER">
            <summary>General Petra Access</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.UNIT_TYPE_KEYMIN">
            <summary>Key-Min used in Units</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PETRAGROUP_ADDRESSCAN">
            <summary>Address View/Edit for CANs</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_TESTOBJECT">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_POLLCLIENTTASKS">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_MSYSMAN">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_MCOMMON">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_MCONFERENCE">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_MPARTNER">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_MPERSONNEL">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_MFINANCE">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_MFINDEV">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.REMOTINGURL_IDENTIFIER_MREPORTING">
            <summary>Remoting URL Identifiers</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SYSDEFAULT_NOT_FOUND">
            <summary>System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SYSDEFAULT_SITEKEY">
            <summary>System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SYSDEFAULT_DISPLAYGIFTAMOUNT">
            <summary>System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SYSDEFAULT_DISPLAYGIFTRECIPIENT">
            <summary>System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SYSDEFAULT_DISPLAYGIFTFIELD">
            <summary>System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SYSDEFAULT_LOCALISEDCOUNTYLABEL">
            <summary>System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SYSDEFAULT_LOCALISEDBRANCHCODEANDLABEL">
            <summary>System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SYSDEFAULT_GIFTBANKACCOUNT">
            <summary>System Defaults</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.CLIENTTASKGROUP_USERMESSAGE">
            <summary>ClientTask TaskGroups</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.CLIENTTASKGROUP_CACHEREFRESH">
            <summary>ClientTask TaskGroups</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.CLIENTTASKGROUP_SYSTEMDEFAULTSREFRESH">
            <summary>ClientTask TaskGroups</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.CLIENTTASKGROUP_USERDEFAULTSREFRESH">
            <summary>ClientTask TaskGroups</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.CLIENTTASKGROUP_USERINFOREFRESH">
            <summary>ClientTask TaskGroups</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.SECURITY_CAN_LOCATIONTYPE">
            <summary>Securityrelated</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.THREADING_WAIT_INFINITE">
            <summary>Threading</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.FIXED_SITE_KEY">
            <summary>Fixed SiteKey (used for all Tables where the SiteKey is part of the PrimaryKey, but it is currently always 0)</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PARTNER_PRIVATE_GROUP">
            <summary>Values for p_partner.p_restricted_i</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.PARTNER_PRIVATE_USER">
            <summary>Values for p_partner.p_restricted_i</summary>
        </member>
        <member name="F:Ict.Petra.Shared.SharedConstants.ROW_IS_SYSTEM_GENERATED">
            <summary>Value for Comment fields, etc. for System Generated Rows in Tables</summary>
        </member>
        <member name="T:Ict.Petra.Shared.Conversions">
            functions for various Petra-related conversions.
        </member>
        <member name="M:Ict.Petra.Shared.Conversions.DateTimeToInt32Time(System.DateTime)">
            <summary>
            encode the time value of DateTime in an Int32
            </summary>
            <param name="ADateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.Conversions.Int32TimeToDateTime(System.Int32)">
            <summary>
            create a DateTime object for today with the given time encoded in the Int32
            </summary>
            <param name="AInt32Time"></param>
            <returns></returns>
        </member>
        <member name="T:Ict.Petra.Shared.ErrorCodes">
            <summary>
            some error codes for Petra
            it is useful to have error codes in case the error messages are translated into local language
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_VALUEUNASSIGNABLE">
            <summary>Value is no longer assignable</summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_UNITNAMECHANGEUNDONE">
            <summary>UnitName change undone</summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_PARTNERSTATUSMERGEDCHANGEUNDONE">
            <summary>Partner Status MERGED change undone</summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_BANKBICSWIFTCODEINVALID">
            <summary>Bank Bic/Swift Code invalid</summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_EMAILADDRESSINVALID">
            <summary>email Address invalid</summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_NOPERMISSIONTOACCESSTABLE">
            <summary>No permission to access DB Table</summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_NOPERMISSIONTOACCESSMODULE">
            <summary>No permission to access Petra Module</summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_NOPERMISSIONTOACCESSGROUP">
            <summary>No permission to access Petra Group</summary>
        </member>
        <member name="F:Ict.Petra.Shared.ErrorCodes.PETRAERRORCODE_CONCURRENTCHANGES">
            <summary>Concurrent changes to data happened</summary>
        </member>
        <member name="T:Ict.Petra.Shared.Messages">
            Contains functions for processing of error messages, etc.
        </member>
        <member name="M:Ict.Petra.Shared.Messages.BuildMessageFromVerificationResult(System.String,Ict.Common.Verification.TVerificationResultCollection)">
            <summary>
            format an error message using the errors from Verification Result
            </summary>
            <param name="AMessageHeadline"></param>
            <param name="AVerificationResult"></param>
            <returns></returns>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.EOutOfRangeException">
            <summary>
            Thrown if a value is out of range
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EOutOfRangeException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EOutOfRangeException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EOutOfRangeException.#ctor(System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
            <param name="caption"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Ict.Petra.Shared.RemotedExceptions.EOutOfRangeException.Caption">
            <summary>
            Caption
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoRecordsException">
            <summary>
            Thrown by TPagedDataSet class if no records where found by the query
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoRecordsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoRecordsException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoRecordsException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoRecordsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoSuchPageException">
            <summary>
            Thrown by TPagedDataSet class if a page was requested that does not exist
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoSuchPageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoSuchPageException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoSuchPageException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.EPagedTableNoSuchPageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableNotImplementedException">
            <summary>
            Thrown by a Cache Instantiator class if a Cached DataTable was requested that does not exist
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableNotImplementedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableNotImplementedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableNotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableNotImplementedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableReturnedNothingException">
            <summary>
            Thrown by a Cache Instantiator class if a Cached DataTable that was requested returned no DataTable object
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableReturnedNothingException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableReturnedNothingException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableReturnedNothingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableReturnedNothingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableTableNameMismatchException">
            <summary>
            Thrown by a Cache Instantiator class if a Cached DataTable that was requested is named differently than the Enum
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableTableNameMismatchException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableTableNameMismatchException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableTableNameMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ECachedDataTableTableNameMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ELoginFailedServerTooBusyException">
            <summary>
            exception is thrown if login was not possible, because the server was too busy
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ELoginFailedServerTooBusyException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ELoginFailedServerTooBusyException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ELoginFailedServerTooBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ELoginFailedServerTooBusyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ESecurityAccessDeniedException">
            <summary>
            Base class for all Security Exceptions
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityAccessDeniedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityAccessDeniedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityAccessDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException">
            <summary>
            Thrown by TDataBasePetra class if the user doesn't have enough rights to execute the query
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.FAccessRight">
            <summary>'create', 'modify', 'delete' or 'inquire'</summary>
        </member>
        <member name="F:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.FDBTable">
            <summary>eg. 'p_partner'</summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
            <param name="AAccessRight"></param>
            <param name="ADBTable"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.AccessRight">
            <summary>'create', 'modify', 'delete' or 'inquire'</summary>
        </member>
        <member name="P:Ict.Petra.Shared.RemotedExceptions.ESecurityDBTableAccessDeniedException.DBTable">
            <summary>table name that cannot be accessed</summary>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ESecurityScreenAccessDeniedException">
            <summary>
            Thrown if a Petra screen (WinForm) cannot be opened for security reasons
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityScreenAccessDeniedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityScreenAccessDeniedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityScreenAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityScreenAccessDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ESecurityModuleAccessDeniedException">
            <summary>
            Thrown if a Petra User has no rights for a certain Security Module
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityModuleAccessDeniedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityModuleAccessDeniedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityModuleAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityModuleAccessDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ESecurityGroupAccessDeniedException">
            <summary>
            Thrown if a Petra User has no rights for a certain Security Group
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityGroupAccessDeniedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityGroupAccessDeniedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityGroupAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityGroupAccessDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException">
            <summary>
            Thrown if a Partner cannot be opened for security reasons
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.FPartnerKey">
            <summary>PartnerKey of Partner to which access is denied.</summary>
        </member>
        <member name="F:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.FPartnerShortName">
            <summary>ShortName of Partner to which access is denied.</summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.#ctor(System.String,System.Int64,System.String,Ict.Petra.Shared.Security.TPartnerAccessLevelEnum)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
            <param name="APartnerKey"></param>
            <param name="APartnerShortName"></param>
            <param name="AAccessLevel"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.PartnerKey">
            <summary>PartnerKey of Partner to which access is denied.</summary>
        </member>
        <member name="P:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.PartnerShortName">
            <summary>ShortName of Partner to which access is denied.</summary>
        </member>
        <member name="P:Ict.Petra.Shared.RemotedExceptions.ESecurityPartnerAccessDeniedException.AccessLevel">
            <summary>
            level of access that is denied
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.Security.TSecureData">
            Implements data security
        </member>
        <member name="F:Ict.Petra.Shared.Security.TSecureData.FEncoding">
            private declarations
        </member>
        <member name="M:Ict.Petra.Shared.Security.TSecureData.#ctor(System.String[],System.Drawing.Image)">
            <summary>
            constructor
            </summary>
            <param name="Text"></param>
            <param name="Icon"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TSecureData.GetData(System.String)">
            <summary>
            decrypt data
            </summary>
            <param name="Data">encrypted data</param>
            <returns>clear data</returns>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TSecureData.PutData(System.String)">
            <summary>
            encrypt data
            </summary>
            <param name="Data">clear data</param>
            <returns>encrypted data</returns>
        </member>
        <member name="T:Ict.Petra.Shared.Security.TPetraIdentity">
            The TPetraIdentity class is a .NET IIdentity-derived representation of a
            User in the Petra DB.
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraIdentity.#ctor(System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.Int32,System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="AUserID"></param>
            <param name="ALastName"></param>
            <param name="AFirstName"></param>
            <param name="ALanguageCode"></param>
            <param name="AAcquisitionCode"></param>
            <param name="ACurrentLogin"></param>
            <param name="ALastLogin"></param>
            <param name="AFailedLogin"></param>
            <param name="AFailedLogins"></param>
            <param name="APartnerKey"></param>
            <param name="ADefaultLedgerNumber"></param>
            <param name="ARetired"></param>
            <param name="AModifiableUser"></param>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.UserID">
            <summary>
            the user id of the petra user
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.Retired">
            <summary>
            is the user still active or retired
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.PartnerKey">
            <summary>
            partner key of the user
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.CurrentLogin">
            <summary>
            when was the login time of the user
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.LastLogin">
            <summary>
            when was the last login time before this session for this user
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.FailedLogin">
            <summary>
            when was the last failed login for this user
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.FailedLogins">
            <summary>
            number of failed logins for this user
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.LanguageCode">
            <summary>
            prefered language of the user
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.AcquisitionCode">
            <summary>
            which acquisition code should be used by default when this user creates new partners
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.DefaultLedgerNumber">
            <summary>
            the default ledger that should be selected for this user
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.ModifiableUser">
            <summary>
            can this user be changed
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.AuthenticationType">
            Inherited from IIdentity
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.IsAuthenticated">
            Inherited from IIdentity
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraIdentity.Name">
            Inherited from IIdentity
        </member>
        <member name="T:Ict.Petra.Shared.Security.TPetraPrincipal">
            The TPetraPrincipal class is a .NET Principal-derived representation of a
            User in the Petra DB with its Groups and Roles.
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.#ctor(System.Security.Principal.IIdentity,Ict.Petra.Shared.MSysMan.Data.SUserGroupTable)">
            <summary>
            constructor
            </summary>
            <param name="AIdentity"></param>
            <param name="AGroups"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.#ctor(System.Security.Principal.IIdentity,Ict.Petra.Shared.MSysMan.Data.SUserGroupTable,System.String[])">
            <summary>
            constructor
            </summary>
            <param name="AIdentity"></param>
            <param name="AGroups"></param>
            <param name="AModuleAccess"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.#ctor(System.Security.Principal.IIdentity,Ict.Petra.Shared.MSysMan.Data.SUserGroupTable,Ict.Petra.Shared.MSysMan.Data.SUserTableAccessPermissionTable,System.String[])">
            <summary>
            constructor
            </summary>
            <param name="AIdentity"></param>
            <param name="AGroups"></param>
            <param name="AUserTableAccessPermissions"></param>
            <param name="AModuleAccess"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.#ctor(System.Security.Principal.IIdentity,Ict.Petra.Shared.MSysMan.Data.SUserGroupTable,System.String[],System.String[])">
            <summary>
            constructor
            </summary>
            <param name="AIdentity"></param>
            <param name="AGroups"></param>
            <param name="AModuleAccess"></param>
            <param name="ARoles"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.#ctor(System.Security.Principal.IIdentity,Ict.Petra.Shared.MSysMan.Data.SUserGroupTable,System.String[],System.String[],System.String[])">
            <summary>
            constructor
            </summary>
            <param name="AIdentity"></param>
            <param name="AGroups"></param>
            <param name="AModuleAccess"></param>
            <param name="AFunctions"></param>
            <param name="ARoles"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.#ctor(System.Security.Principal.IIdentity,Ict.Petra.Shared.MSysMan.Data.SUserGroupTable,Ict.Petra.Shared.MSysMan.Data.SUserTableAccessPermissionTable,System.String[],System.String[],System.String[])">
            <summary>
            constructor
            </summary>
            <param name="AIdentity"></param>
            <param name="AGroups"></param>
            <param name="AUserTableAccessPermissions"></param>
            <param name="AModuleAccess"></param>
            <param name="AFunctions"></param>
            <param name="ARoles"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.IsInGroup(System.String)">
            <summary>
            tells if the user is part of the given group
            </summary>
            <param name="AGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.IsInRole(System.String)">
            <summary>
            tells if the user has the given role
            </summary>
            <param name="ARoleName"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.IsTableAccessOK(Ict.Petra.Shared.TTableAccessPermission,System.String)">
            <summary>
            tells if the user has the given permission to the given table
            </summary>
            <param name="APermission"></param>
            <param name="ADBTable"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.Security.TPetraPrincipal.IsInModule(System.String)">
            <summary>
            check if user has access to the given module
            </summary>
            <param name="AModuleName"></param>
            <returns></returns>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraPrincipal.Identity">
            <summary>Inherited from IPrincipal</summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraPrincipal.PetraIdentity">
            <summary>For convenient access of the Identity (no need to cast the Identity)</summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraPrincipal.UserID">
            <summary>For convenient access of the UserID (no need to use Identity)</summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraPrincipal.LoginMessage">
            <summary>
            login message can give system information to the user during login
            </summary>
        </member>
        <member name="P:Ict.Petra.Shared.Security.TPetraPrincipal.ProcessID">
            <summary>
            process id of the client domain on the server???
            todoComment
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.Security.ELoginMessageAlreadySetException">
            <summary>
            Thrown by TPetraPrincipal class if the LoginMessage property is written to althought it has already got a value
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.Security.ELoginMessageAlreadySetException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.Security.ELoginMessageAlreadySetException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.ELoginMessageAlreadySetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.ELoginMessageAlreadySetException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.Security.EProcessIDAlreadySetException">
            <summary>
            Thrown by TPetraPrincipal class if the ProcessID property is written to althought it has already got a value
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.Security.EProcessIDAlreadySetException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.Security.EProcessIDAlreadySetException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.EProcessIDAlreadySetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ict.Petra.Shared.Security.EProcessIDAlreadySetException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            needed for remoting, serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ict.Petra.Shared.Security.TPartnerAccessLevelEnum">
            <summary>
            Access Level for a Partner.
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.Security.TPartnerAccessLevelEnum.palGranted">
            <summary>Access to Partner granted, no restrictions.</summary>
        </member>
        <member name="F:Ict.Petra.Shared.Security.TPartnerAccessLevelEnum.palRestrictedToGroup">
            <summary>Access restricted to Group</summary>
        </member>
        <member name="F:Ict.Petra.Shared.Security.TPartnerAccessLevelEnum.palRestrictedToUser">
            <summary>Access restricted to User</summary>
        </member>
        <member name="F:Ict.Petra.Shared.Security.TPartnerAccessLevelEnum.palRestrictedByFoundationOwnership">
            <summary>Access restricted by Foundation ownership</summary>
        </member>
        <member name="T:Ict.Petra.Shared.TStaticPartnerTablesEnum">
            <summary>
            enum that identifies static partner tables
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticPartnerTablesEnum.AccommodationCodeList">
            <summary>
            codes of accomodation
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticPartnerTablesEnum.AddressDisplayOrderList">
            <summary>
            address display order
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticPartnerTablesEnum.AddressLayoutList">
            <summary>
            address layouts
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticPartnerTablesEnum.GenderList">
            <summary>
            list of genders
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticPartnerTablesEnum.PartnerClassList">
            <summary>
            list of partner classes
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticPartnerTablesEnum.ProposalReviewFrequency">
            <summary>
            list of frequencies to review a proposal
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticPartnerTablesEnum.ProposalSubmitFrequency">
            <summary>
            list of frequencies to submit a proposal
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticPartnerTablesEnum.SubscriptionStatus">
            <summary>
            different status for subscriptions
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.TStaticDataTables">
             <summary>
             Provides a central place for static DataTables.
            
             These are DataTables that hold information that is used in many parts of
             Petra and whose data is *not* stored anywhere in the Petra DB, but hardcoded
             by programmers.
            
             </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStaticDataTables.UStaticDataTablesCacheDS">
            <summary>used internally to hold all static tables</summary>
        </member>
        <member name="T:Ict.Petra.Shared.TStaticDataTables.TMPartner">
            <summary>
            static tables in the partner module
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.GetStaticTable(Ict.Petra.Shared.TStaticPartnerTablesEnum)">
             Returns a reference to the Cache DataSet that holds the chosen DataTable
             for the Petra Partner Module, Partner Sub-Module.
             If the DataTable is not available on the Client side, it is automatically
             retrieved from the Petra Server.
            
             @param ADataTable The static DataTable that should be returned
             @return DataSet The desired DataTable
            
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.BuildAccommodationCodeListTable">
            <summary>
            build the list of accomodation codes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.BuildAddressDisplayOrderListTable">
            <summary>
            build list of address display orders
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.BuildAddressLayoutListTable">
            <summary>
            build list of address layouts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.BuildGenderListTable">
            <summary>
            build the list of genders
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.BuildPartnerClassListTable">
            <summary>
            create list of partner classes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.BuildProposalReviewFrequencyTable">
            <summary>
            build list of frequencies for proposal reviews
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.BuildProposalSubmitFrequencyTable">
            <summary>
            create a list of frequencies for proposal submission
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.TStaticDataTables.TMPartner.BuildSubscriptionStatusTable">
            <summary>
            build table for status of subscription
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ict.Petra.Shared.EStaticDataTableNotImplementedException">
            <summary>
            datatable is not available
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.EStaticDataTableNotImplementedException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.EStaticDataTableNotImplementedException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Ict.Petra.Shared.TTableList">
            <summary>
            this returns a list of all database tables, ordered by the most referenced tables,
            which need to be created first and can be deleted last
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.TTableList.GetDBNames">
            <summary>
            get the names of the tables, ordered by constraint dependancy.
            first the tables that other depend upon
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.TTableList.GetDBSequenceNames">
            <summary>
            get the names of the sequences of the whole database
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ict.Petra.Shared.TPartnerClass">
            <summary>
            partner classes
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TPartnerClass.PERSON">
            <summary>
            person (required for personnel, date of birth, etc
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TPartnerClass.FAMILY">
            <summary>
            family is the default class for any supporter etc
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TPartnerClass.CHURCH">
            <summary>
            church group
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TPartnerClass.ORGANISATION">
            <summary>
            organisation, company
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TPartnerClass.BANK">
            <summary>
            bank
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TPartnerClass.UNIT">
            <summary>
            unit, conference, project
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TPartnerClass.VENUE">
            <summary>
            venue for conference
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.TStdAddresseeTypeCode">
            <summary>
            type of addressee
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdAddresseeTypeCode.satcFEMALE">
            <summary>
            female
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdAddresseeTypeCode.satcMALE">
            <summary>
            male
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdAddresseeTypeCode.satcCHURCH">
            <summary>
            church
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdAddresseeTypeCode.satcCOUPLE">
            <summary>
            couple
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdAddresseeTypeCode.satcDEFAULT">
            <summary>
            default
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdAddresseeTypeCode.satcFAMILY">
            <summary>
            family
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdAddresseeTypeCode.satcORGANISA">
            <summary>
            organisation, company
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.TStdPartnerStatusCode">
            <summary>
            partner status
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdPartnerStatusCode.spscACTIVE">
            <summary>
            active
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdPartnerStatusCode.spscINACTIVE">
            <summary>
            inactive
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdPartnerStatusCode.spscDIED">
            <summary>
            partner has died
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdPartnerStatusCode.spscMERGED">
            <summary>
            partner has been merged into another partner
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TStdPartnerStatusCode.spscPRIVATE">
            <summary>
            partner is private to only one user; deprecated
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.TTableAccessPermission">
            <summary>
            table access permissions
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TTableAccessPermission.tapINQUIRE">
            <summary>
            read access
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TTableAccessPermission.tapMODIFY">
            <summary>
            write access
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TTableAccessPermission.tapCREATE">
            <summary>
            can create new rows
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TTableAccessPermission.tapDELETE">
            <summary>
            can delete rows
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.TLastPartnerUse">
            <summary>
            where the partner was accessed the last time
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TLastPartnerUse.lpuMailroomPartner">
            <summary>
            mailroom department
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TLastPartnerUse.lpuPersonnelPerson">
            <summary>
            personnel department
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TLastPartnerUse.lpuPersonnelUnit">
            <summary>
            as a unit
            </summary>
        </member>
        <member name="F:Ict.Petra.Shared.TLastPartnerUse.lpuConferencePerson">
            <summary>
            for a conference
            </summary>
        </member>
        <member name="T:Ict.Petra.Shared.SharedTypes">
            <summary>
            provides useful functions for shared types
            </summary>
        </member>
        <member name="M:Ict.Petra.Shared.SharedTypes.PartnerClassStringToEnum(System.String)">
            <summary>
            convert partner class from string to enum
            </summary>
            <param name="APartnerClass"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.SharedTypes.PartnerClassEnumToString(Ict.Petra.Shared.TPartnerClass)">
            <summary>
            convert partner class from enum to string
            </summary>
            <param name="APartnerClass"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.SharedTypes.StdAddresseeTypeCodeStringToEnum(System.String)">
            <summary>
            convert addressee type from string to enum
            </summary>
            <param name="AAddresseeTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.SharedTypes.StdAddresseeTypeCodeEnumToString(Ict.Petra.Shared.TStdAddresseeTypeCode)">
            <summary>
            convert addressee type from enum to string
            </summary>
            <param name="AAddresseeTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.SharedTypes.StdPartnerStatusCodeStringToEnum(System.String)">
            <summary>
            convert partner status from string to enum
            </summary>
            <param name="APartnerStatusCode"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.SharedTypes.StdPartnerStatusCodeEnumToString(Ict.Petra.Shared.TStdPartnerStatusCode)">
            <summary>
            convert partner status from enum to string
            </summary>
            <param name="APartnerStatusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Ict.Petra.Shared.SharedDataUtilities">
            Contains Utility functions for ADO.NET Data operations that are Petra specific.
        </member>
        <member name="M:Ict.Petra.Shared.SharedDataUtilities.AcceptChangesForUnmodifiedRows(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>
            make sure that unmodified rows are marked as accepted
            </summary>
            <param name="AInspectDT"></param>
            <param name="AMaxColumn"></param>
            <param name="AExcludeLocation0"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.SharedDataUtilities.AcceptChangesForUnmodifiedRows(System.Data.DataTable,System.Int32)">
            <summary>
            make sure that unmodified rows are marked as accepted
            </summary>
            <param name="AInspectDT"></param>
            <param name="AMaxColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Petra.Shared.SharedDataUtilities.AcceptChangesForUnmodifiedRows(System.Data.DataTable)">
            <summary>
            make sure that unmodified rows are marked as accepted
            </summary>
            <param name="AInspectDT"></param>
            <returns></returns>
        </member>
    </members>
</doc>
