<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ict.Common.Verification</name>
    </assembly>
    <members>
        <member name="T:Ict.Common.Verification.TDateChecks">
            <summary>
            Class for date verification that are needed both on Server and Client side.
            </summary>
            <remark> None of the data verifications in here must access the database
              since the Client doesn't have access to the database!
            </remark>
        </member>
        <member name="F:Ict.Common.Verification.TDateChecks.ERRORCODE_INVALIDDATE">
            <summary>
            error code constant X_0041 for invalid dates
            </summary>
        </member>
        <member name="F:Ict.Common.Verification.TDateChecks.ERRORCODE_NOFUTUREDATE">
            <summary>
            error code constant X_0029 for unappropriate future date
            </summary>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.FirstLesserOrEqualThanSecondDate(System.DateTime,System.DateTime,System.String,System.String)">
             <summary>
             Checks whether the first submitted data is earlier or equal than the second
             submitted date. Nil dates are accepted.
            
             </summary>
             <param name="ADate1">First date</param>
             <param name="ADate2">Second date</param>
             <param name="AFirstDateDescription">Description what the first date is about (for the
             error message)</param>
             <param name="ASecondDateDescription">Description what the second date is about (for
             the error message)</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.</returns>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.FirstLesserThanSecondDate(System.DateTime,System.DateTime,System.String,System.String)">
             <summary>
             Checks whether the first submitted data is earlier than the second submitted
             date. Nil dates are accepted.
            
             </summary>
             <param name="ADate1">First date</param>
             <param name="ADate2">Second date</param>
             <param name="AFirstDateDescription">Description what the first date is about (for the
             error message)</param>
             <param name="ASecondDateDescription">Description what the second date is about (for
             the error message)</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.</returns>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.GetInvalidDateVerificationResult(System.String)">
            <summary>
            this is called if the date is invalid
            </summary>
            <param name="ADescription">either a name for the date value or empty</param>
            <returns>a Verification Result with the error message</returns>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.IsCurrentOrFutureDate(System.DateTime,System.String)">
            <summary>
            make sure that the date is today or in the future
            </summary>
            <param name="ADate">date to check</param>
            <param name="ADateDescription">name of the date value</param>
            <returns>null if everything is ok, otherwise an error message in VerificationResult</returns>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.IsCurrentOrPastDate(System.DateTime,System.String)">
            <summary>
            Check that the date is today or in the past
            </summary>
            <param name="ADate">the date to check</param>
            <param name="ADateDescription">the name of the date value</param>
            <returns>null if everything is fine, otherwise error message in Verification Result</returns>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.IsUndefinedDateTime(System.DateTime,System.String)">
            <summary>
            Check that the date is valid
            </summary>
            <param name="ADate">the date to check</param>
            <param name="ADateDescription">the name of the date value</param>
            <returns>null if everything is fine, otherwise error message in Verification Result</returns>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.IsValidDateTime(System.String,System.String)">
            <summary>
            Finds out if the string s contains a valid DateTime; otherwise return a verification result with a message using ADescription
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.FirstGreaterOrEqualThanSecondDate(System.DateTime,System.DateTime,System.String,System.String)">
             <summary>
             Checks whether the first submitted data is later or equal than the second
             submitted date. Nil dates are accepted.
            
             </summary>
             <param name="ADate1">First date</param>
             <param name="ADate2">Second date</param>
             <param name="AFirstDateDescription">Description what the first date is about (for the
             error message)</param>
             <param name="ASecondDateDescription">Description what the second date is about (for
             the error message)</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.</returns>
        </member>
        <member name="M:Ict.Common.Verification.TDateChecks.FirstGreaterThanSecondDate(System.DateTime,System.DateTime,System.String,System.String)">
             <summary>
             Checks whether the first submitted date is later than the second submitted
             date. Nil dates are accepted.
            
             </summary>
             <param name="ADate1">First date</param>
             <param name="ADate2">Second date</param>
             <param name="AFirstDateDescription">Description what the first date is about (for the
             error message)</param>
             <param name="ASecondDateDescription">Description what the second date is about (for
             the error message)</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.</returns>
        </member>
        <member name="T:Ict.Common.Verification.TGuiChecks">
             <summary>
             Class for GUI control verifications
            
             </summary>
             <remark> None of the data verifications in here must access the database
               since the Client doesn't have access to the database!
             </remark>
        </member>
        <member name="M:Ict.Common.Verification.TGuiChecks.ValidateCheckedListBox(System.Windows.Forms.CheckedListBox)">
             <summary>
             Validates if a CheckedListBox has at least one checked item
            
             </summary>
             <param name="ACheckedListBox">listbox control that should be verified</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.
             </returns>
        </member>
        <member name="M:Ict.Common.Verification.TGuiChecks.ValidateCheckedListBoxVersatile(Ict.Common.Controls.TClbVersatile)">
             <summary>
             Validates if a versatile CheckedListBox has at least one checked item
            
             </summary>
             <param name="AClbVersatile">versatile listbox control that should be verified</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.
             </returns>
        </member>
        <member name="M:Ict.Common.Verification.TGuiChecks.ValidateStringComboBox(System.Windows.Forms.ComboBox)">
             <summary>
             Validates if a Combobox Text is equal the selected item
            
             </summary>
             <param name="AComboBox">combobox control that should be verified</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.
             </returns>
        </member>
        <member name="T:Ict.Common.Verification.TResultSeverity">
            <summary>
            a verification error can either be critical or non critical
            </summary>
        </member>
        <member name="F:Ict.Common.Verification.TResultSeverity.Resv_Critical">
            <summary>
            the verification failed
            </summary>
        </member>
        <member name="F:Ict.Common.Verification.TResultSeverity.Resv_Noncritical">
            <summary>
            verification warning
            </summary>
        </member>
        <member name="T:Ict.Common.Verification.IResultInterface">
            <summary>
            Properties that every 'Verification Result' needs to implement.
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.IResultInterface.ResultContext">
            <summary>
            Context of the Verification Result (where the Verification Result originated from).
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.IResultInterface.ResultText">
            <summary>
            Text of the Verification Result.
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.IResultInterface.ResultTextCaption">
            <summary>
            Caption of the Verification Result (e.g. for use in MessageBox Titles).
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.IResultInterface.ResultCode">
            <summary>
            ResultCode of the Verification Result.
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.IResultInterface.ResultSeverity">
            <summary>
            Severity of the Verification Result.
            </summary>
        </member>
        <member name="T:Ict.Common.Verification.TVerificationResult">
            <summary>
            A TVerificationResult object stores information about failed data
            verification and is passed (serialised) from the Server to the Client.
            It is made to be stored in the TVerificationResultCollection.
            </summary>
        </member>
        <member name="F:Ict.Common.Verification.TVerificationResult.FResultContext">
            <summary>DB Field or other context that describes where the data verification failed (use '[ODBC ...]' instead to signal a database error (such as a failed call to a stored procedure)</summary>
        </member>
        <member name="F:Ict.Common.Verification.TVerificationResult.FResultText">
            <summary>Verification failure explanation</summary>
        </member>
        <member name="F:Ict.Common.Verification.TVerificationResult.FResultTextCaption">
            <summary>Verification failure caption</summary>
        </member>
        <member name="F:Ict.Common.Verification.TVerificationResult.FResultCode">
            <summary>Error code if verification failure</summary>
        </member>
        <member name="F:Ict.Common.Verification.TVerificationResult.FResultSeverity">
            <summary>Signals whether the verification failure prevented saving of data (critical) or the verification result is only for information purposes (noncritical).</summary>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResult.#ctor">
            <summary>
            We need this constructor so that inherited Classes can get by not having a default constructor...
            </summary>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResult.#ctor(System.String,System.String,Ict.Common.Verification.TResultSeverity)">
            <summary>
            Constructor
            </summary>
            <param name="AResultContext">context where this verification happens (e.g. DB field name)</param>
            <param name="AResultText">Verification failure explanation</param>
            <param name="AResultSeverity">is this an error or just a warning</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResult.#ctor(System.String,System.String,System.String,System.String,Ict.Common.Verification.TResultSeverity)">
            <summary>
            Constructor
            </summary>
            <param name="AResultContext">context where this verification happens (e.g. DB field name)</param>
            <param name="AResultText">Verification failure explanation</param>
            <param name="AResultTextCaption">caption for message box</param>
            <param name="AResultCode">a result code to identify error messages</param>
            <param name="AResultSeverity">is this an error or just a warning</param>
        </member>
        <member name="P:Ict.Common.Verification.TVerificationResult.ResultContext">
            <summary>
            Context of the Verification Result (where the Verification Result originated from).
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.TVerificationResult.ResultText">
            <summary>
            Text of the Verification Result.
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.TVerificationResult.ResultTextCaption">
            <summary>
            Caption of the Verification Result (e.g. for use in MessageBox Titles).
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.TVerificationResult.ResultCode">
            <summary>
            ResultCode of the Verification Result.
            </summary>
        </member>
        <member name="P:Ict.Common.Verification.TVerificationResult.ResultSeverity">
            <summary>
            Severity of the Verification Result.
            </summary>
        </member>
        <member name="T:Ict.Common.Verification.TScreenVerificationResult">
            <summary>
            A TScreenVerificationResult object stores information about failed data
            verification in a Form or UserControl on the Client side.
            It is made to be stored in the TVerificationResultCollection.
            </summary>
        </member>
        <member name="F:Ict.Common.Verification.TScreenVerificationResult.FResultColumn">
            <summary>
            specify the column where the error verification happened
            </summary>
        </member>
        <member name="F:Ict.Common.Verification.TScreenVerificationResult.FResultControl">
            <summary>
            specify the control that failed the verification
            </summary>
        </member>
        <member name="M:Ict.Common.Verification.TScreenVerificationResult.#ctor(System.Object,System.Data.DataColumn,System.String,System.Windows.Forms.Control,Ict.Common.Verification.TResultSeverity)">
            <summary>
            constructor
            </summary>
            <param name="AResultContext">context of verification</param>
            <param name="AResultColumn">which column failed</param>
            <param name="AResultText">description and error message for the user</param>
            <param name="AResultControl">which control is involved</param>
            <param name="AResultSeverity">is this serious, or just a warning</param>
        </member>
        <member name="M:Ict.Common.Verification.TScreenVerificationResult.#ctor(System.Object,System.Data.DataColumn,System.String,System.String,System.String,System.Windows.Forms.Control,Ict.Common.Verification.TResultSeverity)">
            <summary>
            Constructor
            </summary>
            <param name="AResultContext">context of verification</param>
            <param name="AResultColumn">which column failed</param>
            <param name="AResultText">description and error message for the user</param>
            <param name="AResultCaption">caption for error message box</param>
            <param name="AResultCode">error code to identify the error message</param>
            <param name="AResultControl">which control is involved</param>
            <param name="AResultSeverity">is this serious, or just a warning</param>
        </member>
        <member name="P:Ict.Common.Verification.TScreenVerificationResult.ResultColumn">
            <summary>
            the DataColumn of the verification failure
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ict.Common.Verification.TScreenVerificationResult.ResultControl">
            <summary>
            get the Control for the verification failure
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ict.Common.Verification.TVerificationResultCollection">
             <summary>
             A TVerificationResult object stores any number of TVerificationResult objects.
             With this strongly-typed Collection it is for instance possible to perform
             several data verification steps on the Server and pass the results back to
             the Client in one object.
            
             NOTES on C# conversion:
             (1) The 'Item' method overloads have been renamed to 'FindBy' method
             overloads (couldn't do that as in Delphi.NET!);
             (2) The 'VerificationResultInfo' Indexed Property that we had in .NET has
             now become the Default Indexed Property of this Class because C# doesn't
             allow named Indexed Properties!
             </summary>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Add(Ict.Common.Verification.IResultInterface)">
            <summary>
            add a new verification object
            </summary>
            <param name="value">the verification object to be added</param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.AddCollection(Ict.Common.Verification.TVerificationResultCollection)">
            <summary>
            merge another verification collection into the current collection
            </summary>
            <param name="value">collection to be merged</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.HasCriticalError">
            <summary>
            check if there is any verification that shows a critical error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.BuildScreenVerificationResultList(System.String@,System.Windows.Forms.Control@,System.Object@)">
            <summary>
            generate the text for a message box showing all verification errors
            </summary>
            <param name="AErrorMessages">will have the list of error messages</param>
            <param name="AFirstErrorControl">for focusing the first control that caused verification failure</param>
            <param name="AFirstErrorContext">context of the first error</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.BuildScreenVerificationResultList(System.Object,System.String@,System.Windows.Forms.Control@)">
            <summary>
            generate the text for a message box showing all verification errors of a given context
            </summary>
            <param name="AResultContext">only show errors of the given context</param>
            <param name="AErrorMessages">will have the list of error messages</param>
            <param name="AFirstErrorControl">for focusing the first control that caused verification failure</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.BuildVerificationResultString">
            <summary>
            Returns a formatted String that contains information about all
            <see cref="T:Ict.Common.Verification.TVerificationResult"/>s in the <see cref="T:Ict.Common.Verification.TVerificationResultCollection"/>.
            </summary>
            <returns>Formatted String that contains information about all
            <see cref="T:Ict.Common.Verification.TVerificationResult"/>s in the <see cref="T:Ict.Common.Verification.TVerificationResultCollection"/>.</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Contains(Ict.Common.Verification.IResultInterface)">
            <summary>
            check if the Verification list contains this value already
            </summary>
            <param name="value">check list for this value</param>
            <returns>true if the value is already there</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Contains(System.Object)">
            <summary>
            check if the verification list already contains a message from the given context
            </summary>
            <param name="AResultContext">check list for this value</param>
            <returns>true if the value is already there</returns>
            <returns>true if an error from this context is already there</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Contains(System.Data.DataColumn)">
            <summary>
            check if there is an error for this data column already
            </summary>
            <param name="AResultColumn">the column to check for</param>
            <returns>true if such an error already is part of the list</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.GetVerificationResult(System.Int32)">
            <summary>
            access result by index
            </summary>
            <param name="Index">which result should be returned</param>
            <returns>the selected result</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.SetVerificationResult(System.Int32,Ict.Common.Verification.IResultInterface)">
            <summary>
            assign a specified verification result in the list
            </summary>
            <param name="Index">index to change the verification result</param>
            <param name="Value">the new value</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.IndexOf(Ict.Common.Verification.IResultInterface)">
            <summary>
            find the index of the given value
            </summary>
            <param name="value">value to look for</param>
            <returns>index of the value</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Insert(System.Int32,Ict.Common.Verification.IResultInterface)">
            <summary>
            insert a new value at the given position
            </summary>
            <param name="index">position to insert after</param>
            <param name="value">value to add</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.FindBy(System.Data.DataColumn)">
            <summary>
            find result by column
            </summary>
            <param name="AResultColumn">column to look for</param>
            <returns>the first result for that column</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.FindBy(System.Object)">
            <summary>
            find result by context
            </summary>
            <param name="AResultContext">context to look for</param>
            <returns>the first result for that context</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.FindBy(System.Int32)">
            <summary>
            find result by index
            </summary>
            <param name="index">index to identify the result</param>
            <returns>the result</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Type checking events
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.PrintItems">
            <summary>
            print the results in the collection to the System Console
            </summary>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Remove(Ict.Common.Verification.IResultInterface)">
            <summary>
            remove a result from the list
            </summary>
            <param name="value">value to delete</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Remove(System.Data.DataColumn)">
            <summary>
            remove a result from the list, specified by the column
            </summary>
            <param name="AResultColumn">the column identifying the result</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Remove(System.String)">
            <summary>
            remove a result identified by the column name
            </summary>
            <param name="AResultColumnName">column name</param>
        </member>
        <member name="M:Ict.Common.Verification.TVerificationResultCollection.Remove(System.Object)">
            <summary>
            remove a result identified by the context
            </summary>
            <param name="AResultContext">the context</param>
        </member>
        <member name="P:Ict.Common.Verification.TVerificationResultCollection.Item(System.Int32)">
            <summary>
            access the elements of the verification collection
            </summary>
        </member>
        <member name="T:Ict.Common.Verification.Data">
            <summary>
            todoComment
            </summary>
        </member>
        <member name="M:Ict.Common.Verification.Data.SetColumnErrorText(System.Data.DataColumnChangeEventArgs,Ict.Common.Verification.TVerificationResult,System.String,System.Boolean)">
            <summary>
            todoComment
            </summary>
            <param name="e"></param>
            <param name="AVerificationResultEntry"></param>
            <param name="AControlName"></param>
            <param name="AResetValue"></param>
        </member>
        <member name="T:Ict.Common.Verification.TNumericalChecks">
             <summary>
             Class for numerical verifications
            
             </summary>
        </member>
        <member name="M:Ict.Common.Verification.TNumericalChecks.IsValidInteger(System.String,System.String)">
             <summary>
             Checks whether the string s contains a valid integer.
            
             </summary>
             <param name="AString">String that should be checked</param>
             <param name="ADescription">Description what the integer is about (for the error
             message)</param>
             <returns>Nil if string contains a valid Integer, otherwise a verification
             result with a message that uses ADescription
             </returns>
        </member>
        <member name="T:Ict.Common.Verification.TStringChecks">
             <summary>
             Class for String verifications
            
             </summary>
        </member>
        <member name="M:Ict.Common.Verification.TStringChecks.ValidateEmail(System.String,System.Boolean)">
             <summary>
             Validates an e-mail address (logical only)
            
             @comment The returned TVerificationResult has a generic FResultCode set,
             'X_00??'. This should be overridden by the calling procedure to supply a
             fitting result code.
            
             </summary>
             <param name="AEmailAddress">E-mail address that should be verified</param>
             <param name="AAllowMoreThanOneEMailAddress">Set this to true if more than one e-mail
             Address can be contained in AEmailAddress. If this is set to true, all
             contained e-mail Addresses will be validated. Recognized separators are
             comma and semicolon (',' and ';'). If this is set to false and if more than
             one e-mail Address is contained in AEmailAddress, a TVerificationResult
             will be generated - even if the e-mail Addresses are correct!</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.</returns>
        </member>
        <member name="M:Ict.Common.Verification.TStringChecks.ValidateEmail(System.String)">
            <summary>
            overload for ValidateEmail, don't allow more than one email address
            </summary>
            <param name="AEmailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Ict.Common.Verification.TStringChecks.FirstLesserEqualThanSecond(System.String,System.String,System.String,System.String)">
             <summary>
             Validates 2 strings, if they are in correct order
            
             </summary>
             <param name="ATxt1">the first string; it is supposed to be lesser or equal than ATxt2</param>
             <param name="ATxt2">the second string; it is supposed to be greater or equal than ATxt1</param>
             <param name="AFirstDescription">name of the first value</param>
             <param name="ASecondDescription">name of the second value</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.</returns>
        </member>
        <member name="M:Ict.Common.Verification.TStringChecks.ValidateStrToInt(System.String,System.String)">
             <summary>
             Validates a string that should contain an integer
            
             </summary>
             <param name="AText">text that should be verified</param>
             <param name="ADescription">describe the text field</param>
             <returns>TVerificationResult Nil if validation succeeded, otherwise it contains
             details about the problem.</returns>
        </member>
    </members>
</doc>
