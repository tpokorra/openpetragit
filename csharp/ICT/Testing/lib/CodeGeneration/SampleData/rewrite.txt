namespace Ict.Petra.Server.MFinance.Instantiator.GL.WebConnectors
{
    /// <summary>auto generated class </summary>
    public class TGLWebConnectorsNamespace : MarshalByRefObject, IGLWebConnectorsNamespace
    {
#if DEBUGMODE
        private DateTime FStartTime;
#endif

        /// <summary>Constructor</summary>
        public TGLWebConnectorsNamespace()
        {
#if DEBUGMODE
            if (TSrvSetting.DL >= 9)
            {
                Console.WriteLine(this.GetType().FullName + " created: Instance hash is " + this.GetHashCode().ToString());
            }

            FStartTime = DateTime.Now;
#endif
        }

        // NOTE AutoGeneration: This destructor is only needed for debugging...
#if DEBUGMODE
        /// <summary>Destructor</summary>
        ~TGLWebConnectorsNamespace()
        {
#if DEBUGMODELONGRUNNINGFINALIZERS
            const Int32 MAX_ITERATIONS = 100000;
            System.Int32 LoopCounter;
            object MyObject;
            object MyObject2;
#endif
            if (TSrvSetting.DL >= 9)
            {
                Console.WriteLine(this.GetType().FullName + ": Getting collected after " + (new TimeSpan(
                                                                                                DateTime.Now.Ticks -
                                                                                                FStartTime.Ticks)).ToString() + " seconds.");
            }

#if DEBUGMODELONGRUNNINGFINALIZERS
            MyObject = new object();
            if (TSrvSetting.DL >= 9)
            {
                Console.WriteLine(this.GetType().FullName + ": Now performing some longer-running stuff...");
            }

            for (LoopCounter = 0; LoopCounter <= MAX_ITERATIONS; LoopCounter += 1)
            {
                MyObject2 = new object();
                GC.KeepAlive(MyObject);
            }

            if (TSrvSetting.DL >= 9)
            {
                Console.WriteLine(this.GetType().FullName + ": FINALIZER has run.");
            }

#endif
        }

#endif

        /// NOTE AutoGeneration: This function is all-important!!!
        public override object InitializeLifetimeService()
        {
            return null; // make sure that the TGLWebConnectorsNamespace object exists until this AppDomain is unloaded!
        }

        /// generated method from connector
        public GLSetupTDS LoadAccountHierarchies(Int32 ALedgerNumber)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.LoadAccountHierarchies(ALedgerNumber);
        }

        /// generated method from connector
        public GLSetupTDS LoadCostCentreHierarchy(Int32 ALedgerNumber)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.LoadCostCentreHierarchy(ALedgerNumber);
        }

        /// generated method from connector
        public string ExportAccountHierarchy(Int32 ALedgerNumber,
                                             string AAccountHierarchyName)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.ExportAccountHierarchy(ALedgerNumber, AAccountHierarchyName);
        }

        /// generated method from connector
        public string ExportCostCentreHierarchy(Int32 ALedgerNumber)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.ExportCostCentreHierarchy(ALedgerNumber);
        }

        /// generated method from connector
        public bool ImportAccountHierarchy(Int32 ALedgerNumber,
                                           string AHierarchyName,
                                           string AXmlAccountHierarchy)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.ImportAccountHierarchy(ALedgerNumber, AHierarchyName, AXmlAccountHierarchy);
        }

        /// generated method from connector
        public bool ImportCostCentreHierarchy(Int32 ALedgerNumber,
                                              string AXmlHierarchy)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.ImportCostCentreHierarchy(ALedgerNumber, AXmlHierarchy);
        }

        /// generated method from connector
        public bool ImportNewLedger(Int32 ALedgerNumber,
                                    string AXmlLedgerDetails,
                                    string AXmlAccountHierarchy,
                                    string AXmlCostCentreHierarchy,
                                    string AXmlMotivationDetails)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.ImportNewLedger(ALedgerNumber, AXmlLedgerDetails, AXmlAccountHierarchy, AXmlCostCentreHierarchy, AXmlMotivationDetails);
        }

        /// generated method from connector
        public bool CanDeleteAccount(Int32 ALedgerNumber,
                                     string AAccountCode)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.CanDeleteAccount(ALedgerNumber, AAccountCode);
        }

        /// generated method from connector
        public bool CreateNewLedger(Int32 ALedgerNumber,
                                    String ALedgerName,
                                    String ACountryCode,
                                    String ABaseCurrency,
                                    String AIntlCurrency,
                                    DateTime ACalendarStartDate,
                                    Int32 ANumberOfPeriods,
                                    Int32 ACurrentPeriod,
                                    Int32 ANumberOfFwdPostingPeriods,
                                    out TVerificationResultCollection AVerificationResult)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.CreateNewLedger(ALedgerNumber, ALedgerName, ACountryCode, ABaseCurrency, AIntlCurrency, ACalendarStartDate, ANumberOfPeriods, ACurrentPeriod, ANumberOfFwdPostingPeriods, out AVerificationResult);
        }

        /// generated method from connector
        public ALedgerTable GetAvailableLedgers()
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TGLSetupWebConnector.GetAvailableLedgers();
        }

        /// generated method from connector
        public bool GetCurrentPeriodDates(Int32 ALedgerNumber,
                                          out DateTime AStartDate,
                                          out DateTime AEndDate)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.GetCurrentPeriodDates(ALedgerNumber, out AStartDate, out AEndDate);
        }

        /// generated method from connector
        public bool GetCurrentPostingRangeDates(Int32 ALedgerNumber,
                                                out DateTime AStartDateCurrentPeriod,
                                                out DateTime AEndDateLastForwardingPeriod)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.GetCurrentPostingRangeDates(ALedgerNumber, out AStartDateCurrentPeriod, out AEndDateLastForwardingPeriod);
        }

        /// generated method from connector
        public bool GetPeriodDates(Int32 ALedgerNumber,
                                   Int32 AYearNumber,
                                   Int32 ADiffPeriod,
                                   Int32 APeriodNumber,
                                   out DateTime AStartDatePeriod,
                                   out DateTime AEndDatePeriod)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.GetPeriodDates(ALedgerNumber, AYearNumber, ADiffPeriod, APeriodNumber, out AStartDatePeriod, out AEndDatePeriod);
        }

        /// generated method from connector
        public int sometest(Int32 asomething)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.sometest(asomething);
        }

        /// generated method from connector
        public GLBatchTDS CreateABatch(Int32 ALedgerNumber)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.CreateABatch(ALedgerNumber);
        }

        /// generated method from connector
        public GLBatchTDS LoadABatch(Int32 ALedgerNumber)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.LoadABatch(ALedgerNumber);
        }

        /// generated method from connector
        public GLBatchTDS LoadAJournal(Int32 ALedgerNumber,
                                       Int32 ABatchNumber)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.LoadAJournal(ALedgerNumber, ABatchNumber);
        }

        /// generated method from connector
        public TSubmitChangesResult SaveGLBatchTDS(ref GLBatchTDS AInspectDS,
                                                   out TVerificationResultCollection AVerificationResult)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.SaveGLBatchTDS(ref AInspectDS, out AVerificationResult);
        }

        /// generated method from connector
        public bool PostGLBatch(Int32 ALedgerNumber,
                                Int32 ABatchNumber,
                                out TVerificationResultCollection AVerifications)
        {
            return Ict.Petra.Server.MFinance.GL.WebConnectors.TTransactionWebConnector.PostGLBatch(ALedgerNumber, ABatchNumber, out AVerifications);
        }
    }
}

namespace Ict.Petra.Server.MFinance.Instantiator.Reporting.UIConnectors
{
    /// <summary>auto generated class </summary>
    public class TReportingUIConnectorsNamespace : MarshalByRefObject, IReportingUIConnectorsNamespace
    {
#if DEBUGMODE
        private DateTime FStartTime;
#endif

        /// <summary>Constructor</summary>
        public TReportingUIConnectorsNamespace()
        {
#if DEBUGMODE
            if (TSrvSetting.DL >= 9)
            {
                Console.WriteLine(this.GetType().FullName + " created: Instance hash is " + this.GetHashCode().ToString());
            }

            FStartTime = DateTime.Now;
#endif
        }

        // NOTE AutoGeneration: This destructor is only needed for debugging...
#if DEBUGMODE
        /// <summary>Destructor</summary>
        ~TReportingUIConnectorsNamespace()
        {
#if DEBUGMODELONGRUNNINGFINALIZERS
            const Int32 MAX_ITERATIONS = 100000;
            System.Int32 LoopCounter;
            object MyObject;
            object MyObject2;
#endif
            if (TSrvSetting.DL >= 9)
            {
                Console.WriteLine(this.GetType().FullName + ": Getting collected after " + (new TimeSpan(
                                                                                                DateTime.Now.Ticks -
                                                                                                FStartTime.Ticks)).ToString() + " seconds.");
            }

#if DEBUGMODELONGRUNNINGFINALIZERS
            MyObject = new object();
            if (TSrvSetting.DL >= 9)
            {
                Console.WriteLine(this.GetType().FullName + ": Now performing some longer-running stuff...");
            }

            for (LoopCounter = 0; LoopCounter <= MAX_ITERATIONS; LoopCounter += 1)
            {
                MyObject2 = new object();
                GC.KeepAlive(MyObject);
            }

            if (TSrvSetting.DL >= 9)
            {
                Console.WriteLine(this.GetType().FullName + ": FINALIZER has run.");
            }

#endif
        }

#endif

        /// NOTE AutoGeneration: This function is all-important!!!
        public override object InitializeLifetimeService()
        {
            return null; // make sure that the TReportingUIConnectorsNamespace object exists until this AppDomain is unloaded!
        }

        /// generated method from interface
        public void SelectLedger(System.Int32 ALedgerNr)
        {
        }

        /// generated method from interface
        public void GetRealPeriod(System.Int32 ADiffPeriod,
                                  System.Int32 AYear,
                                  System.Int32 APeriod,
                                  out System.Int32 ARealPeriod,
                                  out System.Int32 ARealYear)
        {
        }

        /// generated method from interface
        public void GetLedgerPeriodDetails(out System.Int32 ANumberAccountingPeriods,
                                           out System.Int32 ANumberForwardingPeriods,
                                           out System.Int32 ACurrentPeriod,
                                           out System.Int32 ACurrentYear)
        {
        }

        /// generated method from interface
        public System.DateTime GetPeriodStartDate(System.Int32 AYear,
                                                  System.Int32 ADiffPeriod,
                                                  System.Int32 APeriod)
        {
        }

        /// generated method from interface
        public System.DateTime GetPeriodEndDate(System.Int32 AYear,
                                                System.Int32 ADiffPeriod,
                                                System.Int32 APeriod)
        {
        }

        /// generated method from interface
        public System.Data.DataTable GetAvailableFinancialYears(System.Int32 ADiffPeriod,
                                                                out System.String ADisplayMember,
                                                                out System.String AValueMember)
        {
        }
    }
}
