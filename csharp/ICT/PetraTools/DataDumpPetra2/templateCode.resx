<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="progress_dump_functions" xml:space="preserve">
    <value>define variable pv_tablename_c as character initial "".
CASE OPSYS:
    WHEN "WIN32" THEN IF INDEX(SESSION:PARAMETER, ",") GT 1 THEN pv_tablename_c = ENTRY(2,SESSION:PARAMETER,",").
    WHEN "UNIX" THEN pv_tablename_c = SESSION:PARAMETER.
END CASE.

SESSION:DATE-FORMAT = "dmy".

DEFINE STREAM OutFile.

/* returns NULL if the parameter is NULL, otherwise the trimmed uppercase string. useful for references to s_user_id_c */
FUNCTION ToUpperCaseAndTrim RETURNS CHARACTER
    (pv_c AS CHARACTER) :
    RETURN (IF pv_c EQ ? THEN ? ELSE TRIM(CAPS(pv_c))).
END FUNCTION.

/* Returns NULL when the given character is either NULL/Unknown or blank(""). Otherwise the character value */
FUNCTION ForceNull RETURNS CHARACTER
    (pv_c AS CHARACTER) :
    RETURN (IF pv_c EQ "" OR pv_c EQ ? THEN ? ELSE pv_c).
END FUNCTION.

/* Returns NULL when the given integer is either NULL or 0. Otherwise the integer value */
FUNCTION ForceNullInteger RETURNS INTEGER
    (pv_i AS INTEGER) :
    RETURN (IF pv_i EQ 0 OR pv_i EQ ? THEN ? ELSE pv_i).
END FUNCTION.

/* Returns NULL when the given decimal is either NULL or 0. Otherwise the decimal value */
FUNCTION ForceNullDecimal RETURNS DECIMAL
    (pv_i AS DECIMAL) :
    RETURN (IF pv_i EQ 0 OR pv_i EQ ? THEN ? ELSE pv_i).
END FUNCTION.

FUNCTION WriteDate RETURNS CHARACTER
    (pv_d AS DATE) :
	IF (pv_d EQ ?) THEN DO:
	   RETURN ?.
	END.
	RETURN String(YEAR(pv_d), "9999") + "-" + String(MONTH(pv_d), "99") + "-" + String(DAY(pv_d), "99").
END FUNCTION.	
FUNCTION WriteLogical RETURNS CHARACTER
    (pv_l AS LOGICAL) :
	RETURN (IF pv_l THEN "true" ELSE "false").
END FUNCTION.	
FUNCTION WriteNumber RETURNS CHARACTER
    (pv_n AS DECIMAL) :
	RETURN STRING(pv_n).
END FUNCTION.
FUNCTION WantThisTable RETURNS LOGICAL
    (pv_this_tablename_c AS CHAR) :
    IF pv_tablename_c EQ "" OR pv_tablename_c EQ pv_this_tablename_c THEN DO:
        /* check if table has been dumped already */
        FILE-INFORMATION:FILE-NAME = pv_this_tablename_c + ".d".
        IF (FILE-INFORMATION:FULL-PATHNAME EQ ?) THEN DO:
            FILE-INFORMATION:FILE-NAME = pv_this_tablename_c + ".d.gz".
            IF (FILE-INFORMATION:FULL-PATHNAME EQ ?) THEN DO:
                RETURN TRUE.
            END.
        END.
    END.
    RETURN FALSE.
END FUNCTION.
PROCEDURE ZipThisTable.
DEFINE INPUT PARAMETER pv_this_tablename_c  AS CHAR.
    /* now if we are on Linux, gzip that file */
    CASE OPSYS:
        WHEN "UNIX" THEN DO:
            OS-COMMAND SILENT VALUE("gzip fulldump/" + pv_this_tablename_c + ".d").
        END.
    END CASE.
END PROCEDURE.
</value>
  </data>
</root>